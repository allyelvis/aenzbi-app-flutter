Å_layer
addToScenefindAnnotations_main_screenshotclipPath	clipRRectclipRectdrawArc	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesgetSaveCountrestorerotatesave	saveLayerscaleskew	transform	translatenoSuchMethodtargetcontainerLayerfoundTargetincludeInScreenshotincludeInRegularContextscreenshotOffset_data_screenshotCurrentLayer_screenshotRecorder_screenshotCanvas_multicastCanvascanvas_isScreenshotRecording_startRecordingScreenshotstopRecordingIfNeeded _stopRecordingScreenshotIfNeededappendLayercreateChildContext
paintChildtoImagenodechildren
childIndex_ref_valueidcountvalue_serializeRing_serializeRingIndexinstance	_instanceisSelectMode!_debugServiceExtensionsRegistered	selectionselectionChangedCallback_groups_idToReferenceData_objectToId_nextId_pubRootDirectories_isLocalCreationCache_trackRebuildDirtyWidgets_trackRepaintWidgetsregisterServiceExtension_registerSignalServiceExtension$_registerObjectGroupServiceExtension_registerBoolServiceExtension_postExtensionStateChangedEvent _registerServiceExtensionWithArg _registerServiceExtensionVarArgsforceRebuild_consoleObjectGroup_errorsSinceReload_reportStructuredError_resetErrorCountisStructuredErrorsEnabledinitServiceExtensions_clearStatsdisposeAllGroupsresetAllStatedisposeGroup_decrementReferenceCounttoIdisWidgetTreeReadytoObjecttoObjectForSourceLocation	disposeIdsetPubRootDirectoriesresetPubRootDirectoriesaddPubRootDirectoriesremovePubRootDirectoriespubRootDirectoriessetSelectionByIdsetSelection_sendInspectEvent_devToolsInspectorUriForElementdevToolsInspectorUrigetParentChain_getParentChain_pathNodeToJson_getRawElementParentChain_getElementParentChain_getRenderObjectParentChain_nodeToJson_isValueCreatedByLocalProject_isLocalCreationLocationImpl_isLocalCreationLocation_safeJsonEncode_truncateNodes_nodesToJsongetProperties_getPropertiesgetChildren_getChildrengetChildrenSummaryTree_idToDiagnosticsNodeobjectToDiagnosticsNode_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtree_shouldShowInSummaryTree_getChildrenFiltered_filterChildrengetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree%_getRootWidgetSummaryTreeWithPreviewsgetDetailsSubtree_getDetailsSubtreegetSelectedWidget
screenshot_getLayoutExplorerNode_setFlexFit_setFlexFactor_setFlexProperties_toEnumEntry_getSelectedWidget!_getSelectedWidgetDiagnosticsNodegetSelectedSummaryWidget!_getSelectedSummaryWidgetLocation"_getSelectedSummaryDiagnosticsNode_getSelectedSummaryWidgetisWidgetCreationTracked_widgetCreationTracked_frameStart_onFrameStart_onFrameEnd_postStatsEvent	postEventinspect_rebuildStats_repaintStats_onRebuildWidget_onPaintperformReassemblelocallocation_countreset	increment_statsactivenewLocationsaddresetCountsexportToJsoncreateElementchildselectButtonBuildercreateState_lastPointerLocation_ignorePointerKey_edgeHitMargin	initStatedispose_selectionInformationChanged_hitTestHelperhitTest
_inspectAt_handlePanDown_handlePanUpdate_handlePanEnd
_handleTap_handleEnableSelectbuild
candidates_candidatesindex_indexclearcurrent_currentcurrentElement_currentElement_computeCurrentcreateRenderObjectupdateRenderObject
_selectionsizedByParentalwaysNeedsCompositingcomputeDryLayoutpaintrect==hashCodeoverlayRectselectedtooltiptextDirectionrootRenderObject
_lastState_picture_textPainter_textPainterMaxWidth_buildPicture_paintDescription_isInInspectorRenderObjectTree	_locationfilelinecolumnname	toJsonMaptoStringservice	groupNamesummaryTreemaxDescendantsTruncatableNodeincludePropertiessubtreeDepthexpandPropertyValuesaddAdditionalPropertiesCallback_nodesCreatedByLocalProject_interactiveadditionalNodePropertiesdelegateForNodefilterChildrenfilterPropertiestruncateNodesListcopyWith_objects_primitives_isPrimitive[][]=remove6InspectorSelectButtonBuilder RegisterServiceExtensionCallback_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChain!InspectorSelectionChangedCallbackInspectorReferenceData_WidgetInspectorServiceWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kInspectButtonMargin_kOffScreenMargin_messageStyle_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationIdInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMapÇQHashMapClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVerticesselectButtonBuilderWidgetBuildContextVoidCallbackinitServiceExtensionsBindingBaseregisterServiceExtensionvoidStringServiceExtensionCallbackLayeroverride
addToScene	protectedboolObjectAnnotationResultOffsetfindAnnotations	onlyFirstCanvasmain
screenshotPathclipPathdoAntiAliasRRect	clipRRectRect	intersectclipRectclipOpdoublePaintdrawArcListRSTransformColor	BlendMode	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectFloat32List	Int32ListdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesintgetSaveCountrestorerotatesave	saveLayerscalesyskewFloat64List	transform	translatedynamic
InvocationnoSuchMethodRenderObjectMatrix4MatrixUtilstransformRectsemanticBoundsvisitChildrencloneapplyPaintTransformchilddescribeApproximatePaintClipisFiniteisEmptyexpandToIncludeidentityOffsetLayeraddChildrenToSceneoffsetPaintingContextRepaintBoundaryContainerLayerscreenshotDatacontainerLayerestimatedBoundsPictureLayerincludeInScreenshotincludeInRegularContextcanvasappendstopRecordingIfNeededpictureendRecordingappendLayerremovefoundTargetcreateChildContext	identicaltargetscreenshotOffset
paintChild
pixelRatiodebugNeedsPaintwindowdevicePixelRatio
debugPaintdebugPaintSizeEnabledRenderRepaintBoundarytoImageFutureisRepaintBoundaryparent
debugLayerpaintBounds%debugInstrumentRepaintCompositedChildcustomContext
buildSceneDiagnosticsNodeDiagnosticableDiagnosticsTreeStylefirsttoDiagnosticsNodenamestyleilengthgetChildrenjvalueaddnodechildren
childIndexselectionChangedCallbackvisibleForTestingnumWeakReference	selectionaddListenerFlutterfilled	_instanceValueNotifierMapSet_isLocalCreationLocationJsonEncoderregisterExtensioncallbackFutureOrdisposeGroup
parametersAsyncValueGetterAsyncValueSettercontainsKeysetter_postExtensionStateChangedEventgetterregisterBoolServiceExtension	postEventWidgetsBindinginstancerootElement
buildOwner
reassemble
endOfFrameFlutterErrorDetails_nodeToJson	groupName_consoleObjectGroupsubtreeDepthincludePropertiesmaxDescendantsTruncatableNodeservice_errorsSinceReloadTextTreeRendererwrapWidthPropertiesFlutterError	wrapWidthmaxDescendentsTruncatableNoderendererror	trimRightsummaryfromEnvironmentdefaultValuekIsWebFlutterExceptionHandlerpresentErrorisStructuredErrorsEnabled_reportStructuredError!_debugServiceExtensionsRegisteredSchedulerBindingaddPersistentFrameCallback_onFrameStart_registerBoolServiceExtension WidgetInspectorServiceExtensionsstructuredErrorsshow
WidgetsApp debugShowWidgetInspectorOverrideforceRebuildisWidgetCreationTrackedtrackRebuildDirtyWidgets_trackRebuildDirtyWidgets_rebuildStatsresetCountsdebugOnRebuildDirtyWidget_onRebuildWidgettrackRepaintWidgets_trackRepaintWidgets_repaintStatsdebugOnProfilePaint_onPaintmarkNeedsPaintRendererBindingrenderViewsforEach_registerSignalServiceExtensiondisposeAllGroups$_registerObjectGroupServiceExtensionisWidgetTreeReady _registerServiceExtensionWithArg	disposeIdobjectIdobjectGroup _registerServiceExtensionVarArgssetPubRootDirectoriesargsaddPubRootDirectoriesremovePubRootDirectoriesgetPubRootDirectoriespubRootDirectoriessetSelectionByIdgetParentChain_getParentChaingetProperties_getProperties_getChildrengetChildrenSummaryTree_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtreegetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree$getRootWidgetSummaryTreeWithPreviews%_getRootWidgetSummaryTreeWithPreviewsgetDetailsSubtree_getDetailsSubtreeparsegetSelectedWidget_getSelectedWidgetgetSelectedSummaryWidget_getSelectedSummaryWidgettoObjectwidthheightmarginmaxPixelRatioByteData
toByteDataformatpngbase64encoderconvert	Uint8ListviewbuffergetLayoutExplorerNode_getLayoutExplorerNode
setFlexFit_setFlexFitsetFlexFactor_setFlexFactorsetFlexProperties_setFlexProperties_groupsclear_idToReferenceData_objectToId_nextIdmustCallSuperresetPubRootDirectories_decrementReferenceCountcountidputIfAbsentdebugDidSendFirstFrameEvent	fromPartsErrorSummaryElementwidget
Deprecated_pubRootDirectories_isLocalCreationCachemapUri	directorypathtoListfromaddAll	removeAllsetSelectioncurrentElement_sendInspectEventcurrentinspect!_getSelectedSummaryWidgetLocationfilelinecolumnstreamactiveDevToolsServerAddressconnectedVmServiceUritoIddevToolsInspectorUrireplacequeryParameterstoStringindexOf	substring_safeJsonEncode_getRenderObjectParentChain_getElementParentChainruntimeType_pathNodeToJson_nodesToJsondebugGetDiagnosticChainnumLocalParents_isValueCreatedByLocalProjecttakereversed_getRawElementParentChain	toJsonMapcontains
startsWith_isLocalCreationLocationImpljsonencode_serializeRing_serializeRingIndexIterableeverywhere
isNotEmpty
toJsonList_idToDiagnosticsNode_getChildrenFilteredobjectToDiagnosticsNodesummaryTreelevelDiagnosticLevel_filterChildren_shouldShowInSummaryTreeaddAdditionalPropertiesCallbackrenderObjectRenderParagraphtexttoPlainText
debugPrintattacheddebugNeedsLayoutPipelineOwnerownerdebugDoingLayoutflushLayoutflushCompositingBits
flushPaintinflatemin DiagnosticsSerializationDelegatedelegatecopyWithexpandPropertyValuesdebugCreatorDebugCreatorelementConstraintsconstraintsBoxConstraintsminWidth	minHeightmaxWidth	maxHeight	RenderBoxsize
ParentData
parentDataFlexParentDataflexfitFlexFittightBoxParentDatadxdy
RenderView_toEnumEntryvaluesmarkNeedsLayoutMainAxisAlignmentCrossAxisAlignment
RenderFlexmainAxisAlignmentcrossAxisAlignmententry	Exception!_getSelectedWidgetDiagnosticsNode"_getSelectedSummaryDiagnosticsNode	candidate_widgetCreationTrackedDuration_frameStartaddPostFrameCallback_onFrameEnd_postStatsEventexportToJsonRenderObjectElementvisitAncestorElementsancestorreportError	exceptionstacklibrarycontextErrorDescriptionperformReassemblereassembleApplication_clearStats_resetErrorCount	_locationlocationlocal	incrementresetstatinMicrosecondsUnimplementedErrorStatefulWidgetStateWidgetsBindingObserver	GlobalKey	initStateisSelectModeremoveListenerdisposesetState	tryInverttransformPointdebugDescribeChildrenoffstagedeflatehitTestgetTransformToSizesorta	compareTobRenderIgnorePointercurrentContextfindRenderObject
candidatesDragDownDetailsglobalPositionDragUpdateDetailsDragEndDetailsViewofzerophysicalSizeStackGestureDetectoronTap	onPanDownonPanEndonPanUpdatebehaviorHitTestBehavioropaqueexcludeFromSemanticsIgnorePointerignoringkey
PositionedleftbottomChangeNotifier kFlutterMemoryAllocationsEnabledmaybeDispatchObjectCreationnotifyListenersdebugIsDefunctLeafRenderObjectWidget	constraininfiniteneedsCompositingaddLayeroverlayRectfromLTWHrootRenderObject	immutablerecthashTextDirectionselected
listEqualstooltiphashAllfromARGBTextPainteractivetoStringShorttextDirectionltr
addPicturetopPaintingStylefillcolorstrokestrokeWidthstoragetransformedRectcentermaxTextSpanmaxLinesellipsislayoutpositionDependentBox	childSizeverticalOffsetpreferBelow
fromPoints
addPolygonpaintRenderStack	lastChild	TextStylefontSizejoinDiagnosticsDebugCreatorpropertiesTransformersinitInstances
kDebugModeDiagnosticsStackTracescheduleMicrotaskinformationCollectormessageErrorSpacer_devToolsInspectorUriForElementDiagnosticsBlockDiagnosticsPropertydescriptioninfo
isFilteredfineallowTruncate_truncateNodesTarget
TargetKindmethodPaddingExpandoLayerCanvasOffsetLayerPaintingContextWidgetInspectorServiceWidgetStatefulWidgetStateWidgetsBindingObserverChangeNotifierLeafRenderObjectWidget	RenderBoxDiagnosticsProperty DiagnosticsSerializationDelegate¥"
V™È≤%5–ë2%Ji    Ä¶  
dart:asyncÄ”ÄﬂHashMap Äª  dart:collection  Ä‚  dart:convert  Ä˘  Å	developerÅdart:developer  Å  Å1mathÅ4	dart:mathÅUÇ
ClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVertices Å;  ÅKuiÅNdart:ui  Ç!  package:flutter/foundation.dart  ÇK  package:flutter/rendering.dart  Çt  package:flutter/scheduler.dart  Çù  package:meta/meta_meta.dart  Çƒ  app.dart  Ç◊  
basic.dart  ÇÏ  binding.dart  É  
debug.dart  É  framework.dart  É1  gesture_detector.dart  ÉQ  service_extensions.dart  És  	view.dart    	dart:core¿ ◊â ¿éè <ÄÜÄ§Ä•Ä∫Ä·Ä¯ÅÅ:ÅQÅZÅjÅÅéÅßÅ∫ÅÀÅ‰Å˜ÇÇÇ ÇJÇsÇúÇ¬Ç√Ç÷ÇÎÉÉÉ0ÉPÉrÉÜÉáÉ∂É·ÑGÑHÑòÑÆÑ≤Ñ˛ÖDÖÖóÖ≈Ö…Ö ÜÜÜOÜmÜèÜ´Ü¨Ü¬Ü√ÜœÜ¸áá á!á-á:ádáÑá†áΩáƒàààààbà≥à⁄âââ4âTâiâäâãâ°âΩâæâ ää8äräväwäÉä¿äˆã2ã6ã7ãCã•ãÈå3å7å8åDå£åÊç/ç3ç4ç@ç€é.éáéãéåéòé“é˙è(è,è-è9ènèïè¬è∆è«è”êê9êjênêoê{êµê€ëëëëëcëóë—ë’ë÷ë‚í*í[íííñíóí£íÿí˚ì$ì(ì)ì5ì_ìÄìßì´ì¨ì∏ìÿìÙîîîî'îeîëî√î«î»î‘î˛ïïFïJïKïWïÄï†ï∆ï ïÀï◊ñ%ñUñãñèñêñúñ…ñÏóóóó&ó¿òòxò|ò}òâòŸôôEôIôJôVôÄô°ô»ôÃôÕôŸö1ötöΩö¡ö¬öŒõõPõäõéõèõõõ≤õ˛úKúñú–úÒúıúˆùùù*ùEùIùJùVùvùëù≤ù∂ù∑ù√ù”ùÂù˝ûûûû<û`ûäûéûèûõû≈ûﬁû˝üüüü2üJühülümüyü°üøü„üÁüËüÙ††:†]†a†b†n†û†¬†∆†»†…°°c°d°í°»°ˇ¢L¢î¢±¢Ù£££#£d£j£k£££ˆ£¸§§§§§§\§ê§‘§÷§◊•'•x•Æ•∫•Á¶¶¶¶¶]¶o¶á¶õ¶µ¶Í¶Îßß.ß/ßgßãßåß€ß˜ß¯®8®>®ç®ú®¿®¡©©©\©•©µ©ª™
™™@™A™í™≥™”™Ï´´´:´^´b´d´e´£´ß´ˆ¨¨k¨ª≠≠W≠§≠∑≠ÚÆÆ=Æ`ÆçÆ¨Æ€Æ‹Æ˚Æ¸ØØ:ØeØÇØ®Ø©ØµØÀØ∞∞<∞D∞m∞¬∞œ∞¸±±±!±"±F±Ü±ñ±∑±Ë≤≤@≤O≤Ä≤≠≤ÿ≤‡≤Û≤˝≥≥!≥"≥G≥n≥ì≥–¥ ¥6¥q¥ö¥≈¥·µ	µµµ>µDµHµIµUµvµôµ¡µ≈µ∆µÚ∂∂#∂)∂z∂∆∂Í∑
∑'∑E∑I∑J∑V∑x∑°∑¡∑Ë∏∏_∏Ç∏ª∏√∏–∏¯ππHπ^πàπñπúπ†π°π≠π¸∫∫_∫ü∫⁄∫Áªª4ªUªtª}ªÉªáªàªîªÀºº-ºWºyºôº¿ºËºÓΩΩ1Ω[ΩÑΩäΩéΩèΩ‡ΩÊæ4æÖæææƒøøCøIøóø–¿ @ ¿ @o¿ @É¿ @â¿ @ÿ¿ A¿ Ad¿ A¥¿ AÔ¿ Aı¿ B¿ B¿ BZ¿ B™¿ BÔ¿ C?¿ Cb¿ CÅ¿ Cö¿ C∑¿ C‘¿ C€¿ D¿ D=¿ Dn¿ Dt¿ Dº¿ E¿ E:¿ En¿ Eä¿ Eë¿ Eí¿ E∆¿ F¿ Fe¿ Fû¿ FÍ¿ G	¿ G[¿ Gç¿ Gö¿ G“¿ H"¿ Hn¿ H´¿ Hƒ¿ H‰¿ HÌ¿ HÛ¿ HÙ¿ IB¿ Ix¿ I®¿ I‘¿ J%¿ JC¿ Jj¿ Jä¿ J±¿ J≤¿ J÷¿ J‚¿ K#¿ K5¿ K\¿ KÖ¿ Kç¿ Kì¿ Kî¿ Kﬁ¿ L+¿ Lp¿ LØ¿ L∞¿ L˛¿ M¿ M¿ M¿ MT¿ Ma¿ Me¿ M∂¿ Mˆ¿ N¿ NZ¿ N{¿ Nî¿ N¨¿ N»¿ N›¿ N„¿ N‰¿ O3¿ OQ¿ OR¿ OÄ¿ OÜ¿ O‘¿ P ¿ Po¿ Pê¿ P∏¿ Pπ¿ PÓ¿ PÙ¿ Q'¿ Q@¿ QB¿ QC¿ Q{¿ Qõ¿ Q´¿ Q ¿ Qœ¿ R¿ R*¿ R;¿ R?¿ Ró¿ R≈¿ RÒ¿ S¿ SS¿ SÜ¿ S∑¿ S⁄¿ Sı¿ T¿ T8¿ TV¿ To¿ T{¿ Tó¿ T¶¿ TÆ¿ T¥¿ TÃ¿ T–¿ U(¿ U7¿ U9¿ U:¿ Ur¿ U©¿ UÊ¿ UÁ¿ V3¿ VW¿ V[¿ Vë¿ V§¿ V√¿ V˙¿ W-¿ Wf¿ W∂¿ Wı¿ X¿ X¿ X ¿ X!¿ XK¿ XO¿ XP¿ Xo¿ Xp¿ XÇ¿ XÉ¿ Xø¿ X“¿ X”¿ Y¿ Y¿ Y¿ Y0¿ YF¿ Y^¿ Yy¿ Y¿ Yí¿ Yñ¿ Yò¿ Yô¿ Y”¿ Z¿ Z-¿ ZL¿ Zz¿ Zü¿ Zß¿ ZØ¿ Z≥¿ Zµ¿ Z∂¿ Z¸¿ [ ¿ [P¿ [®¿ \¿ \^¿ \ﬂ¿ ],¿ ]|¿ ]∆¿ ]¸¿ ^ ¿ ^M¿ ^ì¿ ^‚¿ _0¿ _ï¿ _–¿ _‘¿ `	¿ `(¿ `l¿ `µ¿ `¸¿ a¿ a¿ aH¿ aÉ¿ a ¿ aÀ¿ a˙¿ b ¿ bO¿ bñ¿ b›¿ bÚ¿ c8¿ c9¿ cF¿ c¿ cô¿ cù¿ cû¿ c◊¿ cÿ¿ d'¿ du¿ dî¿ d—¿ d“¿ e¿ eH¿ eN¿ eù¿ eÏ¿ f ¿ f_¿ f`¿ f¨¿ f˜¿ g¿ gh¿ gÕ¿ h¿ h)¿ h*¿ h¿ h§¿ h•¿ h◊¿ i&¿ i'¿ iQ¿ iv¿ iw¿ iº¿ iÊ¿ iÏ¿ j8¿ j¿ j ¿ k¿ kW¿ kd¿ kÜ¿ k†¿ k–¿ l¿ l¿ l/¿ lN¿ lh¿ lo¿ ls¿ lt¿ lπ¿ l˝¿ m&¿ m@¿ mt¿ mµ¿ mº¿ m⁄¿ mÏ¿ n%¿ nc¿ nl¿ nò¿ nü¿ n£¿ n§¿ nÈ¿ o:¿ oÉ¿ o∆¿ p¿ pA¿ po¿ pâ¿ pœ¿ q¿ q¿ q5¿ qG¿ qÄ¿ qÿ¿ q·¿ r¿ r¿ r¿ r¿ r^¿ r¶¿ rÎ¿ s/¿ sv¿ sä¿ sê¿ sÀ¿ t
¿ t¿ tN¿ tâ¿ t∞¿ t ¿ tˆ¿ u"¿ uc¿ uj¿ uà¿ uö¿ u”¿ v¿ vB¿ va¿ vô¿ v£¿ vÛ¿ v¸¿ w(¿ w/¿ w3¿ w4¿ wv¿ w|¿ wÃ¿ x¿ x=¿ xC¿ xÖ¿ xã¿ xŸ¿ xˇ¿ yD¿ yS¿ yÅ¿ yö¿ yŒ¿ yÊ¿ yÔ¿ yˆ¿ y˙¿ y˚¿ z@¿ zë¿ zﬁ¿ {.¿ {X¿ {r¿ { ¿ |¿ |¿ |0¿ |B¿ |{¿ |≤¿ |‘¿ }'¿ }2¿ };¿ }g¿ }n¿ }r¿ }s¿ }∏¿ }˜¿ ~"¿ ~L¿ ~f¿ ~´¿ ~Ï¿ ~Û¿ ¿ #¿ \¿ ä¿ °¿ ∏¿ „¿ Ä¿ Ä:¿ ÄM¿ Ä`¿ Äl¿ Ä¿ Äâ¿ Ä÷¿ Å¿ Å{¿ ÅΩ¿ Å∆¿ ÅÚ¿ Å˘¿ Å˝¿ Å˛¿ ÇK¿ Çõ¿ ÇŸ¿ Çﬂ¿ É+¿ É8¿ ÉX¿ Éî¿ Éª¿ É˜¿ Ñ¿ Ñ¿ Ñ?¿ ÑC¿ ÑD¿ ÑÅ¿ ÑÇ¿ Ñ†¿ Ñ°¿ Ñﬁ¿ Ö¿ Ö9¿ Ö_¿ Öá¿ Ö†¿ Ö¡¿ ÖÎ¿ Ü¿ Ü¿ Ü¿ Ü¿ ÜM¿ Üp¿ Ü©¿ Üﬁ¿ á¿ áb¿ áo¿ á ¿ á–¿ á—¿ áÓ¿ à¿ à¿ à¿ àZ¿ à`¿ à™¿ à¯¿ â¿ â3¿ âO¿ âS¿ âT¿ âÅ¿ âá¿ â’¿ ä¿ ä7¿ ä~¿ äì¿ ä≠¿ äΩ¿ ã ¿ ãi¿ ã|¿ ãÜ¿ ãö¿ ãû¿ ãü¿ ãÃ¿ ã“¿ ã‚¿ ãË¿ åX¿ å¢¿ å√¿ ç¿ çm¿ çn¿ çï¿ çœ¿ ç’¿ é¿ é¿ éE¿ éX¿ éb¿ éc¿ é¨¿ é≠¿ é–¿ è¿ èc¿ èÄ¿ èﬁ¿ ê¿ ê¿ ê8¿ ê?¿ ê@¿ êc¿ êõ¿ ê‚¿ êˇ¿ ëC¿ ëj¿ ët¿ ë±¿ ë–¿ ëŸ¿ í¿ í¿ í¿ í2¿ íÉ¿ íô¿ íæ¿ ì¿ ìC¿ ìh¿ ìú¿ ì∞¿ ìº¿ ì„¿ î¿ î'¿ î^¿ îò¿ î‚¿ ï¿ ï)¿ ï=¿ ïP¿ ï~¿ ïí¿ ïû¿ ï©¿ ï◊¿ ï‡¿ ï·¿ ñ¿ ñO¿ ñÅ¿ ñ¶¿ ñ’¿ ñÈ¿ ñı¿ ó¿ óD¿ ó[¿ óå¿ ó∏¿ ò	¿ ò'¿ òh¿ òï¿ ò”¿ ò·¿ ô/¿ ôB¿ ôj¿ ôv¿ ôÅ¿ ôØ¿ ô∏¿ ôæ¿ ôø¿ ô‰¿ ö(¿ öC¿ ö_¿ öt¿ ö}¿ ö©¿ ö∞¿ ö⁄¿ õ¿ õ@¿ õ\¿ õq¿ õz¿ õ¶¿ õ≠¿ õ“¿ ú¿ ú:¿ úf¿ úm¿ úì¿ ú–¿ ù¿ ù9¿ ùN¿ ùW¿ ùÉ¿ ùä¿ ù∞¿ ù˘¿ û%¿ ûJ¿ û_¿ ûh¿ ûî¿ ûõ¿ û¡¿ ü
¿ ü6¿ ü[¿ üp¿ üy¿ ü•¿ ü¨¿ ü“¿ †¿ †J¿ †r¿ †á¿ †ê¿ †º¿ †√¿ †·¿ °*¿ °N¿ °z¿ °Å¿ °ß¿ °Î¿ ¢¿ ¢9¿ ¢@¿ ¢f¿ ¢®¿ ¢…¿ ¢ı¿ ¢¸¿ £"¿ £c¿ £É¿ £Ø¿ £∂¿ £‹¿ §¿ §9¿ §e¿ §l¿ §m¿ §ì¿ §›¿ •¿ •2¿ •9¿ •:¿ •`¿ •≠¿ •Ÿ¿ ¶¿ ¶¿ ¶¿ ¶7¿ ¶x¿ ¶ò¿ ¶ƒ¿ ¶À¿ ¶ı¿ ßA¿ ßl¿ ßò¿ ßü¿ ßΩ¿ ®¿ ®L¿ ®x¿ ®¿ ®ù¿ ®‚¿ ©¿ ©R¿ ©ì¿ ©µ¿ ©›¿ ©¸¿ ™#¿ ™c¿ ™p¿ ™{¿ ™Ñ¿ ™∞¿ ™∑¿ ™›¿ ´"¿ ´F¿ ´r¿ ´y¿ ´ü¿ ´Î¿ ¨¿ ¨B¿ ¨I¿ ¨J¿ ¨o¿ ¨∫¿ ¨„¿ ≠¿ ≠¿ ≠4¿ ≠r¿ ≠´¿ ≠Ÿ¿ Æ
¿ Æ<¿ Æ=¿ Æo¿ Æï¿ Æ ¿ Ø¿ Ø6¿ Øo¿ Ø≤¿ ØÚ¿ ∞,¿ ∞7¿ ∞T¿ ∞à¿ ∞í¿ ∞Ï¿ ∞Ì¿ ±¿ ±\¿ ±g¿ ±p¿ ±ú¿ ±£¿ ±¡¿ ≤
¿ ≤2¿ ≤^¿ ≤e¿ ≤É¿ ≤¡¿ ≤ﬁ¿ ≥
¿ ≥¿ ≥/¿ ≥p¿ ≥ê¿ ≥º¿ ≥√¿ ≥·¿ ¥&¿ ¥J¿ ¥v¿ ¥}¿ ¥Å¿ ¥Ç¿ ¥ô¿ ¥∫¿ ¥€¿ ¥ﬂ¿ ¥‡¿ µ¿ µ¿ µk¿ µõ¿ µ∞¿ µΩ¿ µŸ¿ µÓ¿ ∂¿ ∂'¿ ∂8¿ ∂<¿ ∂=¿ ∂e¿ ∂k¿ ∂Æ¿ ∂Ã¿ ∂·¿ ∂Ó¿ ∂ˇ¿ ∑¿ ∑0¿ ∑G¿ ∑f¿ ∑j¿ ∑k¿ ∑ú¿ ∑¢¿ ∑Î¿ ∏¿ ∏!¿ ∏D¿ ∏é¿ ∏¨¿ ∏∫¿ ∏¿¿ ∏Ú¿ ∏ˆ¿ ∏˜¿ π;¿ πU¿ πw¿ πó¿ πƒ¿ πﬂ¿ ∫¿ ∫¿ ∫;¿ ∫A¿ ∫E¿ ∫F¿ ∫í¿ ∫¡¿ ∫Œ¿ ª¿ ª¿ ª.¿ ª4¿ ª5¿ ª±¿ ª◊¿ º¿ º¿ ºz¿ º≥¿ º‘¿ ºË¿ Ω¿ ΩB¿ Ωp¿ Ωê¿ Ωù¿ ΩÃ¿ ΩÚ¿ æ¿ æ¿ æ"¿ æ1¿ æ5¿ æ6¿ æÉ¿ æ¬¿ æœ¿ ø¿ øA¿ øE¿ øF¿ øÑ¿ øä¿ øÿ¿ ¿(¿ ¿6¿ ¿C¿ ¿{¿ ¿ë¿ ¿§¿ ¿™¿ ¿´¿ ¿Ï¿ ¡¿ ¡_¿ ¡e¿ ¡|¿ ¡Ä¿ ¡Å¿ ¡œ¿ ¡Â¿ ¡Î¿ ¬<¿ ¬ä¿ ¬ÿ¿ ¬ﬁ¿ √,¿ √r¿ √¿ √«¿ √¿ ƒ¿ ƒ)¿ ƒ/¿ ƒB¿ ƒF¿ ƒG¿ ƒë¿ ƒû¿ ƒ§¿ ƒÛ¿ ≈¿ ≈¿ ≈M¿ ≈c¿ ≈q¿ ≈w¿ ≈x¿ ≈¬¿ ≈„¿ ∆=¿ ∆C¿ ∆Ä¿ ∆€¿ ∆·¿ «¿ «¿ «¿ «a¿ «p¿ «v¿ «≈¿ »¿ »%¿ »2¿ »A¿ »k¿ »§¿ »®¿ »Ë¿ …¿ …¿ …¿ …h¿ …™¿ …∞¿ …ˇ¿  F¿  _¿  t¿  Å¿  §¿   ¿  Ì¿  Ò¿  Ú¿ À>¿ ÀM¿ ÀS¿ À¢¿ ÀÈ¿ Ã¿ Ã¿ ÃO¿ Ã¬¿ Ã√¿ Õ¿ Õ5¿ Õf¿ Õl¿ Õm¿ Õû¿ Õ¡¿ Õ≈¿ Õ∆¿ Œ¿ Œ.¿ Œ4¿ ŒÉ¿ Œ ¿ Œ„¿ Œ¿ œ3¿ œZ¿ œh¿ œn¿ œ·¿ œ‚¿ –/¿ –_¿ –`¿ –ë¿ –¥¿ –∏¿ –π¿ —¿ —¿ —'¿ —<¿ —o¿ —ì¿ —ô¿ —ÿ¿ “¿ “¿ “¿ “¿ “g¿ “±¿ “∑¿ “Ë¿ “Ó¿ ”<¿ ”Ç¿ ”è¿ ”Ã¿ ”˛¿ ‘¿ ‘¿ ‘P¿ ‘à¿ ‘é¿ ‘ø¿ ‘≈¿ ’¿ ’\¿ ’i¿ ’¶¿ ’›¿ ’¸¿ ÷.¿ ÷F¿ ÷P¿ ÷{¿ ÷∞¿ ÷ø¿ ÷Í¿ ◊¿ ◊¿ ◊A¿ ◊o¿ ◊w¿ ◊x¿ ◊ã¿ ◊ë¿ ◊£¿ ◊ß¿ ◊®¿ ◊¿ ÿ¿ ÿ/¿ ÿ0¿ ÿy¿ ÿï¿ ÿ¶¿ ÿ∫¿ ÿ‘¿ Ÿ¿ ŸS¿ Ÿí¿ Ÿª¿ Ÿ∆¿ Ÿ„¿ ŸÏ¿ ŸÚ¿ Ÿˆ¿ Ÿ˜¿ ⁄I¿ ⁄Ü¿ ⁄÷¿ €¿ €?¿ €r¿ €z¿ €Ä¿ €ë¿ €ï¿ €ñ¿ €Á¿ ‹¿ ‹¿ ‹L¿ ‹}¿ ‹®¿ ‹©¿ ‹Ó¿ ›¿ ›>¿ ›d¿ ›m¿ ›t¿ ›u¿ ›Æ¿ ›˚¿ ﬁF¿ ﬁÑ¿ ﬁ≈¿ ﬁ˝¿ ﬂE¿ ﬂî¿ ﬂπ¿ ﬂ·¿ ‡)¿ ‡@¿ ‡É¿ ‡á¿ ‡à¿ ‡÷¿ ·¿ ·%¿ ·r¿ ·≠¿ ·∫¿ ·Ò¿ ‚-¿ ‚1¿ ‚2¿ ‚r¿ ‚ö¿ ‚ø¿ ‚‡¿ „¿ „@¿ „w¿ „Ñ¿ ‰
¿ ‰¿ ‰¿ ‰^¿ ‰j¿ ‰µ¿ ‰∆¿ ‰ ¿ ‰À¿ Â>¿ ÂZ¿ Âm¿ Âs¿ Âë¿ Â≈¿ Ê¿ ÊB¿ ÊI¿ ÊM¿ ÊN¿ ÊÆ¿ ÊÓ¿ Á¿ ÁF¿ ÁÄ¿ Á≤¿ Áÿ¿ Ë¿ Ë!¿ Ë-¿ Ë7¿ Ë?¿ ËE¿ Ël¿ Ëp¿ Ëq¿ Ë‰¿ È¿ ÈW¿ ÈÄ¿ ÈÑ¿ ÈÖ¿ ÈÔ¿ Í&¿ ÍI¿ Íh¿ Íí¿ Íò¿ Íÿ¿ Í‹¿ Í›¿ Î¿ Î¿ ÎJ¿ ÎP¿ Îv¿ Îz¿ Î{¿ Î±¿ Îˆ¿ Ï¿ Ï.¿ Ï4¿ Ïp¿ Ït¿ Ïu¿ ÏØ¿ Ï‰¿ ÏÂ¿ Ì7¿ Ì^¿ Ìê¿ Ì”¿ Ó¿ Ó¿ ÓF¿ Ón¿ ÓÉ¿ Óã¿ Óë¿ Ó£¿ Óß¿ Ó®¿ Ó‚¿ Ô¿ ÔZ¿ Ôy¿ Ôì¿ Ôô¿ Ô‹¿ ¿  ¿ $¿ %¿ u¿ ª¿ Ò¿ ÒQ¿ Òa¿ Òf¿ Ò¢¿ Òﬂ¿ Ú
¿ Ú=¿ Ús¿ Ú¡¿ Úÿ¿ Ú‹¿ Ú›¿ ÛJ¿ ÛØ¿ Û‰¿ Ù8¿ ÙK¿ Ùn¿ Ùâ¿ Ùë¿ Ùó¿ Ù÷¿ Ù⁄¿ Ù€¿ ı¿ ı'¿ ıV¿ ı|¿ ıÉ¿ ı√¿ ı«¿ ı»¿ ˆ¿ ˆI¿ ˆV¿ ˆõ¿ ˆÂ¿ ˆÈ¿ ˆÍ¿ ˜7¿ ˜Å¿ ˜ô¿ ˜∏¿ ˜æ¿ ¯@¿ ¯D¿ ¯E¿ ¯í¿ ¯ƒ¿ ˘¿ ˘O¿ ˘S¿ ˘T¿ ˘ü¿ ˘Ú¿ ˙k¿ ˙Ì¿ ˙Ò¿ ˙Ú¿ ˚?¿ ˚ç¿ ˚∑¿ ˚Ω¿ ¸¿ ¸[¿ ¸¨¿ ¸˙¿ ˝¿ ˝¿ ˝%¿ ˝+¿ ˝y¿ ˝à¿ ˝÷¿ ˛)¿ ˛-¿ ˛.¿ ˛r¿ ˛©¿ ˛’¿ ˛Ÿ¿ ˛⁄¿ ˇ¿ ˇ,¿ ˇp¿ ˇî¿ ˇΩ¿ ˇ√¿ ˇ‘¿ ˇÿ¿ ˇŸ¿ .¿ x¿ ê¿ ©¿ Ø¿ ∞¿<¿ì¿ó¿ò¿Â¿2¿V¿\¿®¿‡¿0¿Ö¿â¿ä¿‚¿,¿Ç¿¿ñ¿ö¿õ¿”¿¿¿¿A¿e¿x¿~¿π¿¿¿-¿3¿d¿h¿i¿ó¿±¿ﬁ¿‰¿¿"¿#¿L¿m¿ö¿†¿ﬁ¿	¿	U¿	e¿	r¿	¶¿	≠¿	¬¿	∆¿	«¿
¿
"¿
M¿
Ñ¿
à¿
â¿
ƒ¿[¿_¿`¿™¿¯¿.¿p¿t¿u¿®¿¿¿5¿<¿T¿î¿∫¿ÿ¿˜¿¿)¿s¿|¿É¿á¿à¿â¿œ¿Û¿˘¿0¿t¿Ö¿Ô¿6¿`¿Ä¿¡¿Ú¿?¿K¿U¿t¿}¿Ñ¿≈¿›¿Â¿È¿Í¿+¿x¿Ø¿µ¿¿R¿g¿m¿}¿É¿Ã¿Ì¿	¿&¿>¿X¿_¿∫¿æ¿ø¿Î¿	¿ ¿6¿<¿Ü¿û¿±¿∑¿œ¿€¿¿¿C¿d¿{¿Ñ¿ã¿è¿ê¿·¿Ó¿:¿a¿ü¿•¿Ê¿Í¿Î¿1¿T¿Z¿´¿˙¿=¿w¿«¿¿c¿≥¿◊¿‰¿¿¿5¿Q¿j¿ä¿ß¿¥¿Ì¿ ¿¿r¿¨¿ø¿≈¿∆¿Ô¿&¿M¿Y¿q¿í¿™¿´¿˚¿I¿ô¿≤¿›¿Ú¿˙¿ ¿¿@¿Y¿å¿í¿≤¿≈¿À¿Ã¿Ù¿ 	¿ ¿ =¿ c¿ l¿ s¿ t¿ £¿ ∑¿ À¿ È¿!¿!¿!¿!¿!J¿!n¿!t¿!´¿!¿"'¿"_¿"©¿"¡¿#¿#¿#(¿#.¿#H¿#T¿#z¿#ò¿#≥¿#◊¿#Ó¿$¿$e¿$ë¿$æ¿$˙¿% ¿%M¿%Y¿%Z¿%ã¿%–¿%Ì¿&¿&;¿&H¿&è¿&˝¿'g¿'Æ¿'˜¿("¿(I¿(ä¿(ó¿(ò¿(⁄¿) ¿)+¿)Z¿)ü¿)–¿*¿*M¿*x¿*£¿*÷¿*Ò¿+
¿+T¿+ö¿+‚¿, ¿,.¿,:¿,;¿,K¿,}¿,∂¿,˛¿-N¿-ä¿-¡¿-“¿.¿.B¿.Å¿.¬¿/¿/B¿/V¿/f¿/©¿/∑¿/œ¿0¿0:¿0F¿0G¿0W¿0Ñ¿0≤¿0Î¿1(¿1g¿1x¿1y¿1ø¿1Ò¿22¿2^¿2ö¿2“¿3¿3L¿3¿3≤¿3≈¿3’¿4
¿4C¿4Ä¿4ø¿4–¿4ﬁ¿4ˆ¿5¿5#¿5D¿5O¿5X¿5_¿5†¿5∏¿5¿¿5ƒ¿5≈¿6¿6;¿6p¿6æ¿6Á¿7¿70¿7h¿7°¿7À¿7Ì¿8¿8(¿80¿86¿8u¿8é¿8ñ¿8ö¿8õ¿8Î¿9¿9M¿9ö¿9√¿9›¿:¿:D¿:}¿:ß¿:…¿:Ï¿;¿;¿;¿;Q¿;i¿;q¿;u¿;v¿;©¿;Õ¿;”¿;¸¿<M¿<m¿<ï¿<ú¿<Œ¿<¯¿=¿=B¿=I¿=r¿=å¿=ª¿=Û¿>¿>K¿>É¿>•¿>∆¿>ﬁ¿>Ê¿>Ï¿?+¿?C¿?K¿?O¿?P¿?à¿?±¿?◊¿?Ì¿?ı¿?˚¿@.¿@2¿@3¿@è¿@ß¿@Â¿A0¿A7¿A;¿A<¿Aê¿AÚ¿B)¿Bå¿Bê¿Bë¿B·¿C/¿C¿Cã¿Cﬁ¿D¿DC¿DI¿Dë¿Dï¿Dñ¿D‰¿EF¿EJ¿EK¿E†¿E∆¿F¿F¿Fs¿F§¿FÍ¿G¿GP¿Gà¿G™¿Gª¿G≈¿GÕ¿GÈ¿GÔ¿HR¿HV¿HW¿H∫¿IP¿IT¿IU¿Iñ¿Iú¿IÈ¿J¿J`¿JÑ¿Jà¿Jâ¿J©¿J™¿J«¿J»¿JÛ¿K¿KQ¿KU¿KV¿K¿K§¿K‰¿KÍ¿L
¿LJ¿LP¿LT¿LU¿L§¿Lﬂ¿L„¿L‰¿M.¿Mg¿Mm¿MΩ¿MÈ¿Mˆ¿N¿N¿ND¿Ne¿Nl¿N´¿NØ¿N∞¿N˙¿O(¿O.¿O~¿O™¿O∑¿Oÿ¿O˜¿O˚¿O¸¿PQ¿P¶¿Pß¿P‚¿Q¿Q¿Q¿Q4¿Q>¿Qî¿Q¡¿R¿RZ¿R™¿RÃ¿R‹¿R‰¿S¿S¿ST¿Sâ¿S¬¿SÒ¿T?¿T^¿Tv¿TÄ¿T•¿T∫¿Tƒ¿T ¿TÈ¿U	¿U&¿UF¿U^¿Uç¿U‘¿Uﬂ¿UË¿UÓ¿UÚ¿UÛ¿VE¿Vr¿Vx¿V≠¿Vÿ¿Vı¿W¿W ¿W$¿W&¿W'¿Wo¿Ws¿W¬¿X
¿X!¿X4¿XP¿Xf¿X¿XÖ¿XÜ¿Xô¿X©¿X™¿XÊ¿X˙¿X˚¿Y¿Y¿Y3¿YE¿YF¿Y]¿Yn¿Y~¿YÇ¿YÉ¿Yû¿Y≥¿Y¡¿Y≈¿Y«¿Y»¿Z¿ZS¿ZW¿Z®¿Z¯¿[I¿[ï¿[¬¿[∆¿\¿\a¿\|¿\°¿\À¿\–¿]¿]b¿]z¿]¿]ƒ¿]‰¿^ ¿^!¿^H¿^Ç¿^É¿^√¿^…¿_¿_-¿_m¿_n¿_ø¿_¸¿`¿`D¿`o¿`}¿`É¿`√¿a¿a!¿a/¿a5¿aa¿ab¿a|¿a±¿a¸¿b2¿bV¿bp¿bx¿bñ¿b≤¿b¬¿c¿c#¿c<¿c]¿ce¿c¿cå¿cß¿c≠¿cÆ¿c˝¿dJ¿dó¿dﬁ¿dÓ¿e¿e#¿e>¿eF¿e_¿ee¿ei¿ej¿eë¿e®¿eı¿fE¿fä¿f‘¿g!¿gS¿gÑ¿gô¿gü¿g≥¿g∑¿g∏¿h¿h%¿h_¿h§¿h≥¿h„¿i ¿i ¿i&¿i'¿i`¿iç¿i•¿i¨¿i≠¿iÁ¿j
¿j@¿jä¿j√¿jˆ¿k7¿kP¿ki¿kt¿k¬¿k ¿kˆ¿k¸¿k˝¿lF¿li¿lÿ¿m¿mD¿mó¿mœ¿mÎ¿n	¿n)¿nK¿nX¿nc¿nd¿nç¿nΩ¿nÒ¿o!¿o)¿oU¿o[¿o\¿oo¿oâ¿oö¿oû¿o†¿o°¿oÃ¿oÎ¿oÏ¿o¯¿p1¿p3¿p4¿pw¿p{¿p∆¿q¿q]¿qß¿qª¿qø¿qÙ¿q¯¿rH¿rñ¿r‰¿s/¿sw¿s£¿sß¿sÚ¿t=¿té¿t€¿u#¿uR¿uê¿u™¿uπ¿u“¿u˘¿uˇ¿v ¿v*¿v@¿vA¿v}¿vÉ¿v—¿v˘¿w4¿w5¿wA¿wÑ¿wÜ¿wá¿w¬¿w‰¿wÂ¿x ¿x¿x!¿x"¿xG¿xH¿xb¿xc¿xñ¿xó¿x„¿y¿y@¿yA¿yM¿yb¿yy¿yz¿y®¿y‹¿z¿zA¿z|¿z√¿z«¿z»¿z‘¿zÁ¿{¿{L¿{}¿{¥¿{…¿{Õ¿{Œ¿|¿|?¿|Ü¿|å¿|ç¿|§¿|¡¿|‚¿|˜¿}¿}'¿}-¿}C¿}~¿}ô¿}Í¿~¿~!¿~'¿~w¿~x¿~√¿~˚¿2¿r¿¢¿¥¿º¿Ä¿ÄK¿Äê¿Ä¢¿Ä™¿Ä´¿Ä„¿Å¿Åi¿Å}¿ÅÖ¿Åã¿Åå¿Åª¿ÅÂ¿Å˜¿ÇA¿Çá¿Ç≠¿ÇÚ¿É¿É¿É¿É-¿ÉE¿ÉK¿É[¿É_¿É`¿ÉØ¿É¬¿É»¿Ñ¿Ñb¿ÑÆ¿Ñ…¿Ö¿ÖI¿ÖÉ¿ÖÑ¿Ö⁄¿Ü¿Ü3¿Üg¿Üé¿Üî¿ÜÍ¿á¿á0¿áF¿áM¿ág¿ák¿ál¿áë¿á™¿á∏¿áæ¿áø¿à;¿àu¿àº¿àΩ¿à‚¿àÊ¿àÁ¿â¿âG¿âm¿âq¿âr¿â•¿â÷¿â¸¿ä ¿ä¿ä0¿ä~¿äŒ¿ã¿ão¿ã≥¿ãÂ¿åU¿åà¿å°¿åß¿å´¿å¨¿å¬¿å€¿åÈ¿åÔ¿ç¿ç@¿çå¿çí¿çì¿çﬂ¿é¿éO¿éU¿éY¿éZ¿éy¿é∫¿éæ¿éø¿éÀ¿éÚ¿è;¿èÄ¿è«¿èÏ¿ê¿ê¿êA¿êb¿êâ¿ê≥¿ê◊¿êı¿ë¿ë9¿ëX¿ëc¿ël¿ë´¿ëø¿ëÊ¿í¿í[¿íf¿íï¿íù¿í°¿í£¿í§¿í“¿ì¿ì4¿ìM¿ìy¿ì±¿ì∑¿ìª¿ìº¿ìı¿ì˚¿î;¿îo¿î§¿î—¿îÍ¿î˙¿ï¿ï¿ï¿ï\¿ïw¿ïâ¿ï¢¿ï∂¿ïÕ¿ï—¿ï“¿ïÙ¿ñ¿ñ)¿ñ9¿ñP¿ñT¿ñU¿ñò¿ñû¿ñ‚¿ñË¿ó¿óQ¿óR¿ól¿óë¿óÆ¿ó∆¿ò¿ò(¿ò.¿ò2¿ò3¿òÉ¿òâ¿òÕ¿ò”¿ô¿ô#¿ôp¿ôt¿ôu¿ôë¿ô∫¿ôÊ¿ö¿ö¿ö4¿öB¿öH¿öm¿öé¿öº¿ö’¿ö€¿öﬂ¿ö‡¿ö˚¿õ!¿õE¿õë¿õ™¿õ∑¿õŒ¿õÏ¿ú¿ú¿ú¿ú¿ú]¿úq¿úÆ¿ú∞¿ú±¿úÍ¿ù¿ù#¿ù)¿ù*¿ùP¿ùQ¿ù]¿ù¢¿ù‹¿ù‡¿ù·¿ùÌ¿ûE¿ûm¿ûq¿ûs¿ût¿û¶¿ûÎ¿ü	¿ü
¿ü<¿ü]¿üâ¿ü®¿ü¬¿ü»¿üﬁ¿ü‚¿ü„¿üÔ¿†¿†¿†¿†I¿†J¿†V¿†å¿†Ω¿†¡¿†¬¿†Œ¿°¿°#¿°P¿°°¿°Ω¿°˛¿¢¿¢
¿¢¿¢¿¢¿¢1¿¢q¿¢ï¿¢»¿¢…¿¢‹¿¢˜¿¢¯¿£¿£'¿£S¿£g¿£m¿£í¿£∞¿£Ÿ¿£›¿£ﬁ¿£Í¿§¿§ ¿§!¿§d¿§h¿§∏¿§œ¿§⁄¿§ˇ¿•&¿•E¿•a¿•¿•ö¿•ª¿•¡¿•¬¿•‹¿•ˇ¿¶*¿¶B¿¶g¿¶h¿¶t¿¶ó¿¶√¿¶◊¿¶›¿ß¿ß:¿ß`¿ß¶¿ßÀ¿ßœ¿ß–¿ß‹¿®;¿®=¿®>¿®_¿®ß¿®¸¿©Q¿©R¿©ù¿©‘¿©ÿ¿™)¿™v¿™£¿™ﬁ¿™˘¿´¿´5¿´Y¿´`¿´~¿´é¿´®¿´ª¿´≈¿´›¿¨¿¨)¿¨w¿¨°¿¨¨¿¨∂¿¨º¿¨¿¿¨¡¿¨·¿¨‚¿≠0¿≠>¿≠D¿≠ì¿≠¥¿≠Œ¿≠œ¿Æ ¿ÆV¿Æ~¿Æ¿Æ´¿Æ¨¿Æ’¿ÆÒ¿ÆÚ¿Ø¿Ø/¿Ø0¿Ø<¿ØO¿Øl¿ØÖ¿Øö¿Øû¿Øü¿Ø´¿Øÿ¿Øı¿∞¿∞	¿∞
¿∞@¿∞A¿∞v¿∞Ñ¿∞ä¿∞ã¿∞œ¿±¿±G¿±Ç¿±î¿±ú¿±·¿±Á¿±Ë¿≤5¿≤U¿≤ì¿≤Õ¿≤ı¿≥¿≥¿≥¿≥:¿≥T¿≥{¿≥Å¿≥∞¿≥¥¿≥µ¿≥ˆ¿¥4¿¥s¿¥°¿¥Î¿µ¿µP¿µQ¿µu¿µò¿µÃ¿µÕ¿µÛ¿∂¿∂2¿∂h¿∂i¿∂ï¿∂⁄¿∂Â¿∂Ù¿∑(¿∑W¿∑à¿∑õ¿∑ú¿∑Ì¿∏7¿∏t¿∏ª¿∏»¿∏Ÿ¿π¿πS¿πh¿πn¿πo¿π¶¿π€¿π‚¿∫+¿∫T¿∫¢¿∫£¿ª¿ª¿ª]¿ªu¿ªô¿ªù¿ªû¿ª∏¿ªÀ¿ªﬂ¿º ¿º¿º.¿º=¿ºR¿ºX¿ºk¿ºë¿º—¿º⁄¿º·¿Ω!¿ΩÇ¿Ω©¿Ω»¿ΩÎ¿æ¿æ-¿æl¿æî¿æ∫¿æ¿¿æ¡¿ø-¿ø`¿ør¿øê¿ø¶¿øÃ¿øÊ¿øÌ¿øÓ¿¿¿¿=¿¿g¿¿|¿¿ì¿¿¶¿¿Í¿¿Û¿¡¿¡¿¡¿¡6¿¡n¿¡á¿¡´¿¡±¿¡≤¿¡Â¿¬,¿¬}¿¬¶¿¬–¿¬˙¿√B¿√I¿√í¿√Ò¿ƒ¿ƒ¿ƒ¿ƒ¿ƒ%¿ƒO¿ƒo¿ƒã¿ƒ†¿ƒß¿ƒπ¿ƒΩ¿ƒæ¿≈¿≈¿≈c¿≈∞¿≈·¿∆¿∆G¿∆e¿∆õ¿∆º¿∆˘¿«%¿«-¿«M¿«S¿«e¿«i¿«k¿«l¿«î¿«π¿«‰¿«Â¿»/¿»U¿»{¿»|¿»ß¿»√¿»’¿»‰¿»Á¿»Ë¿…0¿…Q¿…U¿…†¿…∫¿…‡¿…¸¿…˛¿…ˇ¿ M¿ a¿ s¿ á¿ ü¿ ∑¿ —¿À	¿À¿À¿À¿À@¿ÀU¿ÀV¿Àq¿ÀÉ¿ÀÑ¿À°¿Àµ¿À∂¿À˘¿Ã¿Ã¿Ã5¿Ãn¿ÃÇ¿Ãñ¿ÃÆ¿Ãµ¿ÃÕ¿ÃË¿ÃÓ¿Ãˇ¿Õ¿Õ¿Õ¿Õ&¿ÕQ¿Õi¿ÕÅ¿Õá¿Õú¿Õ≈¿Õ·¿ÕÂ¿ÕÁ¿ÕË¿Œ7¿Œ8¿Œâ¿Œç¿Œ‚¿œ	¿œ¿œi¿œ∆¿œ€¿œ˚¿œˇ¿–<¿–Z¿–ç¿–≠¿–»¿–’¿–€¿–ﬂ¿–ˇ¿—;¿—n¿—´¿—…¿—œ¿—¿“0¿“=¿“Z¿“u¿“Ñ¿“û¿“¶¿“¨¿“∞¿“ ¿“€¿“›¿“ﬁ¿”	¿”¿”K¿”|¿”î¿”≤¿”∂¿”◊¿”ﬂ¿‘"¿‘T¿‘ë¿‘¨¿‘«¿‘˚¿’¿’+¿’P¿’á¿÷	¿÷¿÷¿÷&¿÷F¿÷J¿÷L¿÷M¿÷Ç¿÷ï¿÷≥¿÷∑¿÷˚¿◊¿◊1¿◊u¿◊¡¿ÿ
¿ÿ¿ÿ(¿ÿ/¿ÿ3¿ÿ4¿ÿO¿ÿê¿ÿ«¿Ÿ¿Ÿ/¿Ÿ7¿Ÿ=¿ŸO¿ŸS¿ŸT¿Ÿè¿Ÿ∑¿⁄¿⁄"¿⁄R¿⁄}¿⁄~¿⁄Œ¿€¿€d¿€É¿€∞¿‹¿‹/¿‹h¿‹¿¿‹‚¿‹Ô¿‹˘¿›¿›¿›(¿›B¿›{¿›¢¿ﬁ	¿ﬁ¿ﬁ!¿ﬁ8¿ﬁô¿ﬁ£¿ﬁ∑¿ﬁΩ¿ﬁŒ¿ﬁ“¿ﬁÛ¿ﬂ&¿ﬂ*¿ﬂ:¿ﬂ<¿ﬂ=¿ﬂl¿ﬂp¿ﬂº¿ﬂŒ¿‡¿‡g¿‡m¿‡∫¿·¿·]¿·ò¿·Â¿·Á¿·Ë¿‚¿‚¿‚W¿‚[¿‚¶¿‚™¿‚Î¿„¿„:¿„R¿„`¿„û¿„∫¿‰¿‰¿‰*¿‰2¿‰D¿‰F¿‰G¿‰w¿‰{¿‰Ã¿Â	¿Â:¿Â|¿Âô¿ÂË¿ÂÍ¿ÂÎ¿Ê@¿ÊD¿Êl¿Êp¿Êª¿Êø¿Á¿ÁB¿Á~¿Áù¿Áü¿Á†¿Á◊¿Ë¿Ë¿Ë¿Ëa¿Ëe¿Ë∞¿Ë¥¿È¿È6¿Èò¿È„¿ÈÂ¿ÈÊ¿Í3¿Íp¿Íç¿ÍÀ¿Í˝¿Í˛¿Î&¿ÎK¿Î_¿În¿Îr¿Îå¿Î®¿Î»¿Î’¿Î◊¿Îÿ¿Ï!¿ÏJ¿Ï]¿Ï∞¿Ì¿Ì(¿ÌK¿Ì_¿Ì}¿Ì™¿Ì–¿ÌÎ¿Ó¿Ó*¿ÓT¿ÓZ¿Ó[¿Ó£¿ÓÀ¿ÓÃ¿Ô¿Ô5¿Ô;¿Ôâ¿Ô—¿ÔÏ¿ÔÌ¿<¿V¿W¿ô¿ƒ¿≈¿—¿Ò¿Ú¿˛¿Ò¿Ò¿Ò%¿ÒH¿ÒI¿Òë¿Òó¿ÒÈ¿Ú5¿Úq¿ÚÍ¿ÚÎ¿Û<¿Û=¿Ûk¿Ûl¿Ûx¿Û¿¿Û˝¿Ù#¿Ù;¿Ùv¿Ù|¿Ùì¿Ù∑¿ÙΩ¿ı¿ı&¿ıd¿ı•¿ıÍ¿ˆ¿ˆI¿ˆQ¿ˆW¿ˆä¿ˆ„¿ˆÈ¿ˆ¸¿˜ ¿˜¿˜¿˜X¿˜ù¿˜Ê¿¯/¿¯{¿¯¬¿˘¿˘J¿˘Z¿˘^¿˘_¿˘k¿˘»¿˘˘¿˘˝¿˘˛¿˙
¿˙i¿˙Ω¿˙Ì¿˚Q¿˚b¿˚f¿˚g¿˚s¿˚‘¿¸¿¸"¿¸Z¿¸¶¿¸¨¿¸æ¿¸¬¿¸√¿¸œ¿˝G¿˝r¿˝é¿˝Æ¿˝Ú¿˛A¿˛x¿˛æ¿˛÷¿ˇ¿ˇ%¿ˇ)¿ˇ+¿ˇ,¿ˇU¿ˇl¿ˇÜ¿ˇà¿ˇâ¿ˇ÷¿ˇÙ¿ˇ¯¿ F¿ è¿ ÿ¿$¿q¿{¿¿Ã¿¿b¿∞¿≈¿…¿¿e¿è¿ì¿‡¿¿Ù¿:¿>¿R¿V¿¢¿Ã¿–¿‹¿¿¿N¿Ö¿ç¿ì¿õ¿ü¿Á¿1¿o¿s¿¿™¿…¿Ù¿¸¿ ¿¿¿"¿&¿∞¿ ¿H¿e¿î¿À¿Ã¿¸¿	¿	%¿	U¿	V¿	x¿	¢¿	£¿	∆¿
¿
¿
¿
`¿
|¿
Ç¿
±¿
 ¿
Á¿¿¿6¿<¿@¿A¿t¿ô¿∂¿÷¿„¿¿¿¿¿F¿[¿x¿û¿´¿⁄¿ˆ¿¿¿¿¿<¿M¿o¿à¿å¿é    Ä•  Ä∫ Ä”ÄﬂÄ·  Ä¯Å ÅÅ5 Å:ÅOÅUÇÇ   ÇJ  Çs  Çú  Ç√  Ç÷  ÇÎ  É  É  É0  ÉP  Ér    Ö ÇOÜsÄ¢/// A layer that mimics the behavior of another layer.
///
/// A proxy layer is used for cases where a layer needs to be placed into
/// multiple trees of layers. Üë ÜëÜú ÜùÜ£   ÜÆÜ∫   Ü≈ZÜ÷  Ü·ÜÚ  Ü≈Ü∆á#ÄÙáA áQáQáhá}  áàáê  á§á≥  á#á$á/á0 àò¨à‡Äæ/// A [Canvas] that multicasts all method calls to a main canvas and a
/// secondary screenshot canvas so that a screenshot can be recorded at the same
/// time as performing a normal paint. âÄÇ ââ ââ/  â8âI  âaâ[âcâ|âpâ~âçâö  â£â∞   "â¿Äµâ—  â⁄	â‡  âÁâÌ  â¿â¡â˙äyÄºää  äîäõ  ä£ä©  äyäzä∂ã9Ä˝ãJ  ãS	ãY  ã`&ãk  ãàãé  ã9ã:ãsãuãvã|ã}ãõå:Ä¯åK  åS	åY  å^åf  åqåy  åÑåä  åîåõ  å:å;ç6ÅTçG  çQç[  çaçt  ççã  çëçü  ç¶ç≤  çºç√  çÃç”  ç6ç7ééÄùéü  é™é≤  é¥éº  é√é   éééèè/Äñè@  èJèQ  èWèb  è/è0è…Ä§è⁄  èÂèÏ  èÚè˘  èˇê  è…è êqÄôêÇ  êåêñ  êúê§  ê¶ê≠  êqêrëÄ∆ë  ë-ë7  ë=ëC  ëJëP  ëTë[  ëëëÿÄΩëÈ  ë˜í  íí  íí  íí"  ëÿëŸíôÄéí™  í≥	íª  íæ	í∆  í…í–  íôíöì+ì<  ìE	ìK  ìPìW  ì+ì,ìÆkìø  ì…ì–  ìÆìØîÄ©î.  î<îJ  îTî\  îîî î€  î‰	îÍ  îÔîˆ  î îÀïM|ï^  ïjïv  ïMïNïÕÄ¡ïﬁ  ïÈï˜  ññ  ññ  ïÕïŒñíÄÜñ£  ñ≠ñ¥  ñ∫ñ¡  ñíñìóÅ_ó-  ó:óD  óJóW  óeór  óxóÑ  óãóó  ó°ó®  ó±ó∏  óóòÄ…òê  òûò¨  ò∂ò√  ò ò—  òòÄôLô]  ôf	ôl  ôqôx  ôLôMôœÄÒô‡  ôÎ	ôÒ  ôˆô˝  öö  öö  ôœô–öƒÄ…ö’  ö‚öÔ  ö¯õ  õõ  öƒö≈õëÅcõ°   õëõíú¯Pù	   ú¯ú˘ùLiù]  ùdùl  ùLùMùπGù    ùπù∫ûÄâû  ûû&  û-û4  ûûûëoû¢  û®	û∞  ûµ
ûæ  ûëûíügü  ü	ü"  ü%	ü-  üüüowüÄ  üäüó  üoüpüÍvü˚  †	†  †	†  üÍüÎ†da†x  †Ö†ë  †d†e §◊Å6•~Ä†/// A layer that omits its own offset when adding children to the scene so that
/// screenshots render to the scene in the local coordinate system of the layer.    •∞[•¡  •Ã•›  •∞•± ¶ÖT¶u_/// Data shared between nested [_ScreenshotPaintingContext] objects recording
/// a screenshot. ¶â` ¶â¶ò ¶ü¶Æ  ¶À¶º¶Õ¶Ê¶Á¶Ì?ß&#/// Target to take a screenshot of. ß1Xß{5/// Root of the layer tree containing the screenshot. ßégß‚L/// Whether the screenshot target has already been found in the render tree.ßß˙Äƒ®£Äõ/// Whether paint operations should record to the screenshot.
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.®π®√Å{™ ÅG/// Whether paint operations should record to the regular context.
///
/// This should only be set to false before paint operations that should only
/// apply to the screenshot such rendering debug information about the
/// [target].
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.™:™CÄŒ™¿m/// Offset of the screenshot corresponding to the offset [target] was given as
/// part of the regular paint.   ´M´  ´)´1     ´e°û≠ΩÇQ/// A place to paint to build screenshots of [RenderObject]s.
///
/// Requires that the render objects have already painted successfully as part
/// of the regular rendering pipeline.
/// This painting context behaves the same as standard [PaintingContext] with
/// instrumentation added to compute a screenshot of a specified [RenderObject]
/// added. To correctly mimic the behavior of the regular rendering pipeline, the
/// full subtree of the first [RepaintBoundary] ancestor of the specified
/// [RenderObject] will also be rendered rather than just the subtree of the
/// render object. ≠ÙÄÊ ≠ÙÆ Æ&Æ.  ÆAÆP  Æd'Æ~  ÆöÆîÆúÆ≥Æ∏ÆÿÆπÆ…ÆﬁÆÙ  Ø%Ø!  Ø<'ØP  ØgØo  ØÑ"Øñ  Ø´ÅuØ¬   Ø´Ø¨±$Å¸±-    ≥$Ç#≥)    µKyµ\   µKµLµ»ÅÄµÕ    ∑LÇS∑]  ∑i∑p  ∑L∑Mπ£Å„πø  π“π‚  πÌπÛ  π£π§ªäÇªõ  ª¶ª¥  ª∫ª¬  ªäªãΩëèp¿ CYÖy/// Captures an image of the current state of [renderObject] and its children.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes, will be offset
/// by the top-left corner of [renderBounds], and have dimensions equal to the
/// size of [renderBounds] multiplied by [pixelRatio].
///
/// To use [toImage], the render object must have gone through the paint phase
/// (i.e. [debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [window.devicePixelRatio] for the device, so specifying 1.0 (the default)
/// will give you a 1:1 mapping between logical pixels and the output pixels
/// in the image.
///
/// The [debugPaint] argument specifies whether the image should include the
/// output of [RenderObject.debugPaint] for [renderObject] with
/// [debugPaintSizeEnabled] set to true. Debug paint information is not
/// included for the children of [renderObject] so that it is clear precisely
/// which object the debug paint information references.
///
/// See also:
///
///  * [RenderRepaintBoundary.toImage] for a similar API for [RenderObject]s
///    that are repaint boundaries that can be used outside of the inspector.
///  * [OffsetLayer.toImage] for a similar API at the layer level.
///  * [dart:ui.Scene.toImage] for more information about the image returned. ¿ Cf¿ Ct  ¿ CÖ¿ Cã  ¿ Cû¿ C¶  ¿ Cª¿ C¡  ¿ C≤¿ CÕ ¿ MÑ<¿ M¸Ä/// A class describing a step along a path through a tree of [DiagnosticsNode]
/// objects.
///
/// This class is used to bundle all data required to display the tree with just
/// the nodes along a path expanded into a single JSON payload. ¿ NÄÕ ¿ N}¿ Nëc/// Creates a full description of a step in a path through a tree of
/// [DiagnosticsNode] objects.¿ Nò¿ Nß  ¿ N∞¿ Nø  ¿ NÃ¿ N“   ¿ NÊi¿ OKL/// Node at the point in the path this [_DiagnosticsPathNode] is describing. ¿ OTÅb¿ PÆÅ1/// Children of the [node] being described.
///
/// This value is cached instead of relying on `node.getChildren()` as that
/// method call might create new [DiagnosticsNode] objects for each child
/// and we would prefer to use the identical [DiagnosticsNode] for each time
/// a node exists in the path. ¿ PªÄÉ¿ Q4g/// Index of the child that the path continues on.
///
/// Equal to null if the path does not continue.    ¿ UÁÉ∞¿ V™Ä©/// Structure to help reference count Dart objects referenced by a GUI tool
/// using [WidgetInspectorService].
///
/// Does not hold the object from garbage collection. ¿ V≈Åâ ¿ V¸¿ W4/// Creates an instance of [InspectorReferenceData].¿ W¿ W  ¿ W"¿ W(   ¿ XR¿ Xi  ¿ Xr¿ Xz  ¿ XÖK¿ XŒ9/// The id of the object in the widget inspector records. ¿ X’G¿ Y7/// The number of times the object has been referenced.¿ Y¿ Y!t¿ Y>/// The value.    ¿ Vë¿ Ví¿ Y”Ä·¿ YŸ  ¿ ZÄ° ¿ Z¿ Z(       ¿W'Çü¿XÄ‚/// Accumulator for a count associated with a specific source location.
///
/// The accumulator stores whether the source location is [local] and what its
/// [id] for efficiency encoding terse JSON payloads describing counts. ¿X#a ¿X#¿X1 ¿X8¿XG  ¿XT¿Xc  ¿Xj¿Xy   ¿Xà¿X•/// Location id. ¿X¨L¿XÛ9/// Whether the location is local to the current project. ¿X˝¿Y  ¿Y5¿Y9 ¿YB¿Y¿Y"    ¿YH9¿Yd/// Reset the count.   ¿YÖ?¿Y•/// Increment the count.    ¿Y»ï◊¿\ÇÇ≥/// A stat tracker that aggregates a performance metric for [Element] objects at
/// the granularity of creation locations in source code.
///
/// This class is optimized to minimize the size of the JSON payloads describing
/// the aggregate statistics, for stable memory usage, and low CPU usage at the
/// expense of somewhat higher overall memory usage. Stable memory usage is more
/// important than peak memory usage to avoid the false impression that the
/// user's app is leaking memory each frame.
///
/// The number of unique widget creation locations tends to be at most in the
/// low thousands for regular flutter apps so the peak memory usage for this
/// class is not an issue.  ¿]Ê8¿^ ¿^¿^¿^¿^¿^¿^¿^#]¿^e$/// Locations with a non-zero count.¿^~¿^¿^n¿^}¿^o¿^ÖÄÊ¿_JÄ°/// Locations that were added since stats were last exported.
///
/// Only locations local to the current project are included as a performance
/// optimization.¿_i¿_j¿_Y¿_h¿_Z ¿_pÖ¯¿`Äâ/// Increments the count associated with the creation location of [element] if
/// the creation location is local to the current project. ¿`¿`   ¿elÇJ¿eò$/// Clear all aggregated statistics.   ¿g∫á„¿h<h/// Exports the current counts and then resets the stats to prepare to track
/// the next frame of data. ¿hI¿hS    ¿o°Äë¿oß  ¿oŒ ¿o‘¿oÁ     ¿oÓB¿p   ¿oÓ¿oÔ ¿p4áQ¿u)ÑÓ/// A widget that enables inspecting the child widget's structure.
///
/// Select a location on your device or emulator and view what widgets and
/// render object that best matches the location. An outline of the selected
/// widget and terse summary information is shown on device with detailed
/// information is shown in the observatory or in IntelliJ when using the
/// Flutter Plugin.
///
/// The inspector has a select mode and a view mode.
///
/// In the select mode, tapping the device selects the widget that best matches
/// the location of the touch and switches to view mode. Dragging a finger on
/// the device selects the widget under the drag location but does not switch
/// modes. Touching the very edge of the bounding box of a widget triggers
/// selecting the widget even if another widget that also overlaps that
/// location would otherwise have priority.
///
/// In the view mode, the previously selected widget is outlined, however,
/// touching the device has the same effect it would have if the inspector
/// wasn't present. This allows interacting with the application and viewing how
/// the selected widget changes position. Clicking on the select icon in the
/// bottom left corner of the application switches back to select mode. ¿uTÄ™ ¿uò¿uß;/// Creates a widget that enables inspection for the child.¿uÆ	¿uµ  ¿uΩ¿uÃ  ¿u÷!¿uÂ   ¿v<¿v9'/// The widget that is being inspected. ¿vCÄÔ¿wÄØ/// A builder that is called to create the select button.
///
/// The `onPressed` callback passed as an argument to the builder should be
/// hooked up to the returned widget.  ¿w7L¿wZ   ¿w7¿w8 ¿wáõ¿wç  ¿wÁ ¿wÁ¿w¸   ¿x¿x  ¿x$!¿x<  ¿xJ¿xT  ¿xe/¿xu ¿xâ¿xí¿xì¿xôÄ•¿y*x/// Distance from the edge of the bounding box for an element to consider
/// as selecting the edge of the bounding box.¿y; ¿yCÅÉ¿yT   ¿yC¿yD¿z Å¿z€   ¿z ¿zÀ¿{–Äª¿{’    ¿|èÜœ¿|î  ¿|®¿|º  ¿|≈¿|Ÿ  ¿|Ê¿|Ó  ¿|˚¿}	  ¿}¿}   ¿ÉbÑ¿ÑﬁÅZ/// Returns the list of render objects located at the given position ordered
/// by priority.
///
/// All render objects that are not offstage that match the location are
/// included in the list of matches. Priority is given to matches that occur
/// on the edge of a render object's bounding box and to matches found by
/// [RenderBox.hitTest]. ¿ÑÊ¿ÑÓ  ¿Ñ˜¿Ö   ¿ánÅw¿ás  ¿á~¿áÜ   ¿àÈÄá¿àÓ  ¿à˝¿â   ¿âtÄã¿ây  ¿âä¿âù   ¿äÇß¿ä  ¿ä¿ä&   ¿åÆÅ™¿å≥    ¿é\a¿éa    ¿é¡Éﬂ¿é‘  ¿é⁄¿éË  ¿é¡¿é¬ ¿í§ä¿íÿ-/// Mutable selection state of the inspector. ¿ìÄ∑ ¿ì6¿ìH0/// Creates an instance of [InspectorSelection].  ¿îq1¿îÑ ¿î†¿î°¿îí¿îü¿îì¿ïy¿ï} ¿ïÜ¿óT¿ób  ¿ôw¿ôÄ  	¿ìæÄ∞¿îTx/// Render objects that are candidates to be selected.
///
/// Tools may wish to iterate through the list of candidates.   ¿î¶n¿î™  ¿îµ¿î…   ¿ï^¿ïfC/// Index within the list of candidates that is currently selected.   ¿ïãE¿ïè  ¿ïï	¿ïö   ¿ñWÄ˘¿ó,Ä∏/// Selected render object typically from the [candidates] list.
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿ónÄ√¿ór  ¿óz¿óâ   ¿ò5Å>¿ôÄ≈/// Selected [Element] consistent with the [current] selected [RenderObject].
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿ôìÅK¿ôó  ¿ô¶¿ô∞   ¿úÄõ¿ú|\/// Whether the selected render object is attached to the tree or has gone
/// out of scope.   ¿ï‘¿ï˚/// Set the selection to empty.   ¿ö‚Å,¿öÁ     ¿ú±Å¡¿ú∑  ¿úÏ< ¿úÚ¿ù ¿ù
¿ù   ¿ù,"¿ùE   ¿ùSÄå¿ùw  ¿ùä¿ùò  ¿ùS¿ùT¿ù„Äç¿ùÙ  ¿û¿û  ¿û$¿û6  ¿ù„¿ù‰ ¿ûtÉó¿ûz  ¿û®` ¿û®¿ûø ¿û¬%¿ûﬂ  ¿û¸¿ûÒ¿û˛¿ü>¿üQ  ¿ü/¿ü#    ¿ü_ÄÇ¿üc  ¿üm¿üÅ   ¿üÂ+¿ü˙   ¿üÂ¿üÊ¿†4¿†)   ¿†¿†¿†Lt¿†]  ¿†n¿†~  ¿†L¿†M¿†ƒÅE¿†’  ¿†€¿†Ï  ¿†Ù¿†¸  ¿†ƒ¿†≈ ¿¢Ç¿¢  ¿¢3Äî ¿¢3¿¢C ¿¢D¿¢R  ¿¢Y¿¢h  ¿¢|¿¢w¿¢~¿¢Ñ¿¢Ö¿¢•¿¢õ¿¢ß¿¢≠¿¢Æ¿¢º¿¢≈¿¢Ω¿¢À¿¢÷  ¿¢ﬁ¿¢Ï  ¿£‡=¿£Ù   ¿£‡¿£·¿¢˙Ä‚¿£  ¿£¿£  ¿¢˙¿¢˚¿¢¿¢¿§!Ñ¿§‡Ä≠/// State describing how the inspector overlay should be rendered.
///
/// The equality operator can be used to determine whether the overlay needs to
/// be rendered again. ¿•Äø ¿•¿•# ¿•*¿•9  ¿•I¿•X  ¿•e¿•t  ¿•É¿•í  ¿•û¿•≠   ¿•ƒ¿•œ  ¿•ﬁ¿•ı  ¿¶'¿¶  ¿¶,¿¶9  ¿¶D!¿¶X  ¿ß“h¿ßÊ   ¿ß“¿ß”¿¶jÅd¿¶Ñ  ¿¶á¿¶è  ¿¶j¿¶k¿§œ¿§–¿©Rû¿™|Å#/// A layer that outlines the selected [RenderObject] and candidate render
/// objects that also match the last pointer location.
///
/// This approach is horrific for performance and is only used here because this
/// is limited to debug mode. Do not duplicate the logic in production code. ¿™•Ç ¿™‡¿™ˆ8/// Creates a layer that displays the inspector overlay.¿™˝¿´  ¿´¿´+  ¿´9¿´H   ¿¨√¿¨÷  ¿¨‰ÄË¿≠¡Ä«/// The rectangle in this layer's coordinate system that the overlay should
/// occupy.
///
/// The scene must be explicitly recomposited after this property is changed
/// (as described at [Layer]). ¿≠—Ä´¿ÆlÄÇ/// Widget inspector root render object. The selection overlay will be painted
/// with transforms relative to this render object. ¿ÆÅ(¿Æü  ¿ÆÆA¿ÆÁ&/// Picture generated from _lastState. ¿ÆÙ¿Ø  ¿Ø¿Ø   ¿Ø2k¿ØC   ¿Ø2¿Ø3¿Ø°Ñ¿Ø≤  ¿ØΩ¿ØŒ  ¿Ø°¿Ø¢¿≥∑áÂ¿≥¬  ¿≥–"¿≥Ó   ¿ª†àj¿ª•  ¿ªº¿ªƒ  ¿ªœ¿ª◊  ¿ª„¿ªÚ  ¿º¿º  ¿º¿º  ¿º2	¿º8  ¿ºA¿ºG   ¿ƒÄÆ¿ƒ, ¿ƒ<¿ƒ<¿ƒS¿ƒh  ¿ƒs¿ƒ{  ¿ƒè¿ƒñ  ¿ƒ¿ƒ¿ƒ¿ƒ¿ƒ¿Ç®¿≈ËÅ/// Return whether or not a render object belongs to this inspector widget
/// tree.
/// The inspector selection is static, so if there are multiple inspector
/// overlays in the same app (i.e. an storyboard), a selected or candidate
/// render object may not belong to this tree. ¿∆¿∆    ¿»ËÅ¿……Ä∑/// Interface for classes that track the source code location the their
/// constructor was called from.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿…‚¿…Ò      ¿…ˇÉÁ¿ ga/// A tuple with file, line, and column number, for displaying human-readable
/// file locations. ¿ uÄ® ¿ {¿ Ñ ¿ ã¿ ö  ¿ £¿ ≤  ¿ ª¿    ¿À	¿À   ¿À!2¿ÀO/// File path of the location. ¿ÀX)¿À}/// 1-based line number. ¿ÀÜ-¿À≠/// 1-based column number. ¿À∏U¿Ã	@/// Optional name of the parameter or function at this location.  ¿ÃÄ¿Ã'    ¿ÕÄﬁ¿Õ   ¿Õ¿Õ ¿ﬂ=Ç©¿ﬂ‘Äê/// Debugging message for DevTools deep links.
///
/// The [value] for this property is a string representation of the Flutter
/// DevTools url. ¿‡Åœ ¿·_¿·wÅ?/// Creates a diagnostics property that displays a deep link to Flutter DevTools.
///
/// The [value] of this property will return a map of data for the Flutter
/// DevTools deep link, including the full `url`, the Flutter DevTools `screenId`,
/// and the `objectId` in Flutter DevTools that this diagnostic references.¿·x¿·Ä  ¿·å
¿·î  ¿·û¿·£¿·‚¿·§¿·®¿·∏¿·≠¿·∫¿·Ã¿·«¿·Œ¿·›¿·ﬁ    ¿ÎÿìR¿Ïcq/// A delegate that configures how a hierarchy of [DiagnosticsNode]s are
/// serialized by the Flutter Inspector. ¿Ï≤Åß ¿Ì*¿ÌHs/// Creates an [InspectorSerializationDelegate] that serialize [DiagnosticsNode]
/// for Flutter Inspector service.¿ÌO¿ÌU  ¿Ìc¿Ìi  ¿ÌÅ'¿Ìá  ¿ÌÆ ¿Ì¥  ¿Ì‘¿Ì⁄  ¿ÌÔ¿Ìı  ¿Ó¿Ó"  ¿Ó.$¿Ó4  ¿Ìv¿Ì¶¿Ìß¿Ì ¿ÌË¿Ó	¿Ó]l¿Ó¬E/// Service used by GUI tools to interact with the [WidgetInspector]. ¿ÓŒÅ¿Ô·Ä˙/// Optional [groupName] parameter which indicates that the json should
/// contain live object ids.
///
/// Object ids returned as part of the json will remain live at least until
/// [WidgetInspectorService.disposeGroup()] is called on [groupName]. ¿ÔÔe¿IL/// Whether the tree should only include nodes created by the local project. ¿Yi¿•?/// Maximum descendants of [DiagnosticsNode] before truncating. ¿«(¿ﬁ ¿«¿»¿Ù"¿Ò
 ¿Ù¿ı¿Ò+¿Ò2 ¿Ò¿Ò¿ÒKÅù¿Ú…Å/// Callback to add additional experimental serialization properties.
///
/// This callback can be used to customize the serialization of DiagnosticsNode
/// objects for experimental features in widget inspector clients such as
/// [Dart DevTools](https://github.com/flutter/devtools). ¿ÚÌM¿Û	 ¿Û8¿Û9¿Û'¿Û7¿Û(¿Û?+¿ÛH    ¿ÛnÉë¿Ûè  ¿Û®¿Ûπ  ¿Ûn¿Ûo¿˜ÇZ¿˜0  ¿˜@¿˜Q  ¿˜¿˜¿˘aÄõ¿˘É  ¿˘í¿˘©  ¿˘Ø¿˘¿  ¿˘a¿˘b¿˙ Åe¿˙"  ¿˙3¿˙J  ¿˙P¿˙a  ¿˙ ¿˙¿˚iÅX¿˚ã  ¿˚ù¿˚¥  ¿˚∫¿˚Ã  ¿˚i¿˚j¿¸≈Çc¿¸Ú  ¿¸¸¿˝  ¿˝¿˝  ¿˝(¿˝/  ¿¸≈¿¸∆¿ÏJ¿ÏK¿ˇ,[¿ˇ[  ¿ˇn ¿ˇt¿ˇÇ      ¿ˇ,¿ˇ-¿ˇ3¿ˇS¿ˇ@¿ˇR¿ˇ4¿ˇ?¿ˇ5¿ˇA¿ˇK¿ˇL¿ÃÑ¡¿	//// Does not hold keys from garbage collection.¿	¿	¿	 ¿	  ¿	',¿	7 ¿	B¿	I¿	P¿	J¿	Q¿	R¿	XH¿	ä/// Strings, numbers, booleans.¿	û¿	ü¿	ò¿	ù¿	ô¿	ú ¿	•j¿	™  ¿	∑¿	¿   ¿
Å,¿
øÄó/// Returns the value for the given [key] or null if [key] is not in the map
/// or garbage collected.
///
/// Does not support records to act as keys. ¿
¬¿
≈   ¿CÄ«¿Ñ0/// Associates the [key] with the given [value]. ¿à¿ã  ¿è¿í   ¿Å¿K7/// Removes the value for the given [key] from the map. ¿R¿U   ¿s¿C#/// Removes all pairs from the map.   ¿¸¿˝     †…ÉL†Œ  †Ï†˙  °°
   §Äæ§aD/// Calculate bounds for a render object and all of its descendants. §y§á   ¿ QCÉı¿ Q_  ¿ Q}¿ Qì  ¿ Qù¿ Q¶  ¿ Q≠¿ Qƒ   ¿ÕËN¿ÕÌ  ¿Õ˝¿Œ   ¿Œ8Ñ§¿œÉÅ0/// Transformer to parse and gather information about [DiagnosticsDebugCreator].
///
/// This function will be registered to [FlutterErrorDetails.propertiesTransformers]
/// in [WidgetsBinding.initInstances].
///
/// This is meant to be called only in debug mode. In other modes, it yields an empty list. ¿œû$¿œπ   ¿“ﬁÉm¿”el/// Transform the input [DiagnosticsNode].
///
/// Return null if input [DiagnosticsNode] is not applicable. ¿”~¿”è  ¿”ñ¿”•   ¿÷MàÓ¿÷g  ¿÷Ñ¿÷ç  ¿÷ó¿÷¶   ¿·ËÇ]¿„Å/// Returns if an object is user created.
///
/// This always returns false if it is not called in debug mode.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently is local creation locations are only available for
/// [Widget] and [Element]. ¿„)¿„1   ¿‰GÅ¢¿ÂÄ¡/// Returns true if a [Widget] is user created.
///
/// This is a faster variant of `debugIsLocalCreationLocation` that is available
/// in debug and profile builds but only works for [Widget]. ¿Â)¿Â1   ¿ÂÎÅ≥¿ÁÅ#/// Returns the creation location of an object in String format if one is available.
///
/// ex: "file:///path/to/main.dart:4:3"
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿Á1¿Á9   ¿Á†{¿Á´  ¿Á∆¿ÁŒ   ¿ËÅ«¿ÈÄÊ/// Returns the creation location of an object if one is available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿È$¿È-   ¿Í˛Äÿ¿Î  ¿Î¿Î    ÉáÄøÉÈY/// Signature for the builder callback used by
/// [WidgetInspector.selectButtonBuilder].  ÑÑ&  Ñ.Ñ<   ÑHÅÄÖLÄ˚/// Signature for a method that registers the service extension `callback` with
/// the given `name`.
///
/// Used as argument to [WidgetInspectorService.initServiceExtensions]. The
/// [BindingBase.registerServiceExtension] implements this signature.  ÖÅÖí  Öô*Öº   ¿ U:Ä´¿ U±n/// Signature for the selection change callback used by
/// [WidgetInspectorService.selectionChangedCallback].    ¿ Z∂¿ ¸o¿ `ÖR/// Service used by GUI tools to interact with the [WidgetInspector].
///
/// Calls to this object are typically made from GUI tools such as the [Flutter
/// IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// using the [Dart VM Service](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md).
/// This class uses its own object id and manages object lifecycles itself
/// instead of depending on the [object ids](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#getobject)
/// specified by the VM Service Protocol because the VM Service Protocol ids
/// expire unpredictably. Object references are tracked in groups so that tools
/// that clients can use dereference all objects in a group with a single
/// operation making it easier to avoid memory leaks.
///
/// All methods in this class are appropriate to invoke from debugging tools
/// using the VM service protocol to evaluate Dart expressions of the
/// form `WidgetInspectorService.instance.methodName(arg1, arg2, ...)`. If you
/// make changes to any instance method of this class you need to verify that
/// the [Flutter IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// widget inspector support still works with the changes.
///
/// All methods returning String values return JSON.  ¿ `*Ä–¿ `ÀÄà/// Ring of cached JSON values to prevent JSON from being garbage
/// collected before it can be requested over the VM service protocol.¿ `‹¿ `‡¿ `Ë¿ `·¿ `Á¿ `È¿ `Í¿ `¿ `˘¿ `Ò¿ `ı¿ `˛¿ a ¿ a¿ aÖC¿ a£ ¿ aØ¿ a∆¿ a«¿ aÕÅi¿ cÅ/// Whether the inspector is in select mode.
///
/// In select mode, pointer interactions trigger widget selection instead of
/// normal interactions. Otherwise the previously selected widget is
/// highlighted but the application can be interacted with normally.	¿ bﬂ¿ b‡¿ c¿ c*¿ c/¿ c+¿ c0¿ c5¿ c1¿ c†5¿ c¨ ¿ c–¿ c⁄Äı¿ dØÄµ/// Ground truth tracking what object(s) are currently selected used by both
/// GUI tools such as the Flutter IntelliJ Plugin and the [WidgetInspector]
/// displayed on the device.¿ dª¿ dÕ¿ dŒ¿ d‘Åâ¿ fEÅA/// Callback typically registered by the [WidgetInspector] to receive
/// notifications when [selection] changes.
///
/// The Flutter IntelliJ Plugin does not need to listen for this event as it
/// instead listens for `dart:developer` `inspect` events which also trigger
/// when the inspection target changes on device. ¿ fbÅ¿ g5Äù/// The VM service protocol does not keep alive object references so this
/// class needs to manually manage groups of objects that should be kept
/// alive.	¿ gd¿ ge¿ g?¿ gc¿ g@¿ gH¿ gK¿ gb¿ gL¿ gja¿ gî ¿ g…¿ g ¿ g©¿ g»¿ g™¿ g≤¿ gœE¿ gÌ ¿ g˚¿ h¿ h¿ h¿ h¿ h¿ h¿ h¿ h ¿ h&¿ h,v¿ hèR/// The pubRootDirectories that are currently configured for the widget inspector. ¿ hß}¿ hı//// Memoization for [_isLocalCreationLocation].¿ i¿ i¿ i!¿ i¿ i¿ i"¿ i#¿ i)&¿ i. ¿ iJ¿ iS!¿ iX ¿ io¿ ÑF9¿ ÑZ ¿ Ñp¿ ÑÑ¿ Ñà ¿ Ñù¿Jã¿Jë  ¿J¨¿J∫  ¿O˛Q¿P! ¿P1¿PM¿PN¿PSQ¿Pv ¿PÜ¿P¢¿P£¿ ad¿ al)/// The current [WidgetInspectorService].   ¿ c;a¿ cS  ¿ c\¿ ct  ¿ c;¿ c<W¿ iyÇ˘¿ kkÅœ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name").
///
/// The given callback is called when the extension method is called. The
/// callback must return a value that can be converted to JSON using
/// `json.encode()` (see [JsonEncoder]). The return value is stored as a
/// property named `result` in the JSON. In case of failure, the failure is
/// reported to the remote caller and is dumped to the logs. ¿ kä¿ kõ  ¿ k§*¿ k«  ¿ k‘;¿ kˇ  ¿ kY¿ kZ¿ lvÇ,¿ mÄÑ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes no arguments. ¿ m*¿ m;  ¿ mD.¿ mk  ¿ mx;¿ m£   ¿ n¶Éq¿ pHÅê/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single optional argument
/// "objectGroup" specifying what group is used to manage lifetimes of
/// object references in the returned JSON (see [disposeGroup]).
/// If "objectGroup" is omitted, the returned JSON will not include any object
/// references to avoid leaking memory. ¿ ps¿ pÑ  ¿ pç@¿ p∆  ¿ p”;¿ p˛   ¿ rÖ¿ têÇW/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single argument
/// "enabled" which can have the value "true" or the value "false"
/// or can be omitted to read the current value. (Any value other
/// than "true" is considered equivalent to "false". Other arguments
/// are ignored.)
///
/// Calls the `getter` callback to obtain the value when
/// responding to the service extension method being called.
///
/// Calls the `setter` callback with the new value when the
/// service extension method is called with a new value. ¿ t¥¿ t≈  ¿ tŒ&¿ tÔ  ¿ t˙&¿ u  ¿ u&;¿ uQ   ¿ w6Ç√¿ yÅ∂/// Sends an event when a service extension's state is changed.
///
/// Clients should listen for this event to stay aware of the current service
/// extension state. Any service extension that manages a state should call
/// this method on state change.
///
/// `value` reflects the newly updated service extension value.
///
/// This will be called automatically for service extensions registered via
/// [registerBoolServiceExtension]. ¿ y&¿ y.  ¿ y3¿ y<   ¿ y˝Ét¿ {5Å*/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name") which takes an optional parameter named
/// "arg" and a required parameter named "objectGroup" used to control the
/// lifetimes of object references in the returned JSON (see [disposeGroup]). ¿ {\¿ {m  ¿ {vR¿ {¡  ¿ {Œ;¿ {˘   ¿ }uÑá¿ ~)Ä®/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), that takes arguments
/// "arg0", "arg1", "arg2", ..., "argn". ¿ ~P¿ ~a  ¿ ~j?¿ ~¢  ¿ ~Ø;¿ ~⁄   ¿ Ç ÇB¿ ÉGÅ"/// Cause the entire tree to be rebuilt. This is used by development tools
/// when the application code has changed and is being hot-reloaded, to cause
/// the widget tree to pick up any changed implementations.
///
/// This is expensive and should not be called except during development.  ¿ É-¿ É.¿ Ñ£Éy¿ Ñ®  ¿ Ñø¿ Ñ‘   ¿ à Å2¿ âÄÓ/// Resets the count of errors since the last hot reload.
///
/// This data is sent to clients as part of the 'Flutter.Error' service
/// protocol event. Clients may choose to display errors received after the
/// first error differently.   ¿ âVÇG¿ äÄµ/// Whether structured errors are enabled.
///
/// Structured errors provide semantic information that can be used by IDEs
/// to enhance the display of errors with rich formatting.   ¿ ã°®ﬂ¿ å Å/// Called to register service extensions.
///
/// See also:
///
///  * <https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#rpcs-requests-and-responses>
///  * [BindingBase.initServiceExtensions], which explains when service
///    extensions can be used. ¿ å‡2¿ ç   ¿ ¥ÑZ¿ ¥â    ¿ ¥‚ÅY¿ µƒÄ≤/// Clear all InspectorService object references.
///
/// Use this method only for testing to ensure that object references from one
/// test case do not impact other test cases.  ¿ µù¿ µû¿ µ≤¿ µ≥¿ ∂?Å*¿ ∑ÄÜ/// Reset all InspectorService state.
///
/// Use this method only for testing to write hermetic tests for
/// WidgetInspectorService.  ¿ ∂Œ¿ ∂œ¿ ∂„¿ ∂‰¿ ∂¿ ∂Ò¿ ∑mÅà¿ ∏(Ä†/// Free all references to objects in a group.
///
/// Objects and their associated ids in the group may be kept alive by
/// references from a different group. ¿ ∏5¿ ∏=  ¿ ∏¿ ∏¿ ∏˘ÅK¿ ∏˛  ¿ π ¿ π/   ¿ ∫HÉÏ¿ ∫ÿv/// Returns a unique id for [object] that will remain live at least until
/// [disposeGroup] is called on [groupName]. ¿ ∫›¿ ∫Ê  ¿ ∫Ì¿ ∫ı  ¿ ∫√¿ ∫ƒ¿ æ8Å¿ æ÷Äá/// Returns whether the application has rendered its first frame and it is
/// appropriate to display the Widget tree in the inspector. ¿ æÍ¿ æÛ  ¿ æƒ¿ æ≈¿ øHÇ7¿ ¿MÄÂ/// Returns the Dart object associated with a reference id.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of the methods in this class called from the Flutter IntelliJ
/// Plugin. ¿ ¿V
¿ ¿_  ¿ ¿d¿ ¿m  ¿ ¿8¿ ¿9¿ ¡ÉÇ¬¿ √âÅﬁ/// Returns the object to introspect to determine the source location of an
/// object's class.
///
/// The Dart object for the id is returned for all cases but [Element] objects
/// where the [Widget] configuring the [Element] is returned instead as the
/// class of the [Widget] is more relevant than the class of the [Element].
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ √£	¿ √´  ¿ √∞¿ √π  ¿ √t¿ √u¿ ƒIÇ»¿ ≈#ÄΩ/// Remove the object with the specified `id` from the specified object
/// group.
///
/// If the object exists in other groups it will remain alive and the object
/// id will remain valid. ¿ ≈-
¿ ≈6  ¿ ≈9¿ ≈A  ¿ ≈¿ ≈¿ «Ç¿ »ØÅ/// Set the list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ »≈¿ »”  ¿ »'¿ »(¿ »4¿ »5¿ »?¿ »¶¿ »E¿ »o¿ …Å“¿  àÅ6/// Resets the list of directories, that should be considered part of the
/// local project, to the value passed in [pubRootDirectories].
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages.  ¿  a¿  b¿  v¿  w¿  ÙÇ–¿ ÃÅ/// Add a list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ Ã,¿ Ã:  ¿ Ã¿ Ã¿ Õ»ÇÔ¿ Œ˜Å/// Remove a list of directories that should no longer be considered part
/// of the local project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ œ¿ œ  ¿ ŒÂ¿ ŒÊ¿ –ªÅ[¿ —[\/// Returns the list of directories that should be considered part of the
/// local project. ¿ —s¿ —à  ¿ —¿ —¿ —)¿ —*¿ “ÅÁ¿ ”ñÅ[/// Set the [WidgetInspector] selection to the object matching the specified
/// id if the object is valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ ”ß
¿ ”∞  ¿ ”µ¿ ”æ  ¿ ”Ñ¿ ”Ö¿ ‘É°¿ ’pÅJ/// Set the [WidgetInspector] selection to the specified `object` if it is
/// a valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not needed but is specified to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ ’}¿ ’Ü  ¿ ’è¿ ’ò  ¿ ’^¿ ’_¿ ◊™ÇK¿ ◊˜E/// Notify attached tools to navigate to an object's source location. ¿ ÿ	¿ ÿ   ¿ Ÿ˘Åõ¿ ⁄SO/// Returns a DevTools uri linking to a specific element on the inspector page. ¿ ⁄s¿ ⁄|   ¿ €òÑÓ¿ ‹ g/// Returns the DevTools inspector uri for the given vm service connection and
/// inspector reference. ¿ ‹5¿ ‹=  ¿ ‹¿ ‹¿ ‡äÅ¶¿ ·√Å/// Returns JSON representing the chain of [DiagnosticsNode] instances from
/// root of the tree to the [Element] or [RenderObject] matching `id`.
///
/// The JSON contains all information required to display a tree view with
/// all nodes other than nodes along the path collapsed. ¿ ·“	¿ ·⁄  ¿ ·›¿ ·Â  ¿ ·Ø¿ ·∞¿ ‚4Çï¿ ‚B  ¿ ‚R
¿ ‚[  ¿ ‚^¿ ‚f   ¿ ‰ÕÅ¿ ‰„  ¿ ‰Û¿ Â
  ¿ Â'¿ Â3   ¿ ÊPÇ¿ Ê^  ¿ Êx¿ ÊÅ  ¿ Êã¿ Êö   ¿ ËsÅ¿ Ëé  ¿ Ë•¿ ËÆ  ¿ Ë∂¿ Ëæ  ¿ Ë ¿ Ë–   ¿ ÈáÅT¿ È£  ¿ Èø¿ ÈŒ  ¿ È€¿ È„   ¿ ÍﬂÄö¿ Íı  ¿ Î¿ Î  ¿ Î!'¿ ÎA   ¿ Î}Äˆ¿ ÎÇ  ¿ Î†¿ Î©   ¿ ÏwÇ/¿ Ï|  ¿ Ïô¿ Ï°   ¿ Ó™Åy¿ ÓÈ7/// Memoized version of [_isLocalCreationLocationImpl]. ¿ Ô¿ Ô
   ¿ 'Ç¥¿ ÒËÅ1/// Wrapper around `json.encode` that uses a ring of cached values to prevent
/// the Dart garbage collector from collecting objects between when
/// the value is returned over the VM service protocol and when the
/// separate observatory protocol command has to be used to retrieve its full
/// contents. ¿ Ò¯¿ Ú   ¿ ÚﬂÅ˙¿ Úı  ¿ Û¿ Û  ¿ Û%!¿ Û*   ¿ Ù›ÄÈ¿ Ù¯  ¿ ı
¿ ı!  ¿ ı+'¿ ıK  ¿ ıZ ¿ ıu   ¿ ı Å¿ ˆ_|/// Returns a JSON representation of the properties of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿ ˆm¿ ˆu  ¿ ˆá¿ ˆè  ¿ ˆK¿ ˆL¿ ˆÏÅW¿ ˆ˙  ¿ ˜	¿ ˜  ¿ ˜#¿ ˜+   ¿ ¯GÅ¿ ¯Õz/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿ ¯Ÿ¿ ¯·  ¿ ¯Û¿ ¯˚   ¿ ˘VÅö¿ ˘c  ¿ ˘p¿ ˘y  ¿ ˘ã¿ ˘ì   ¿ ˙ÙÉ8¿ ˝ëÇy/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references only including children that
/// were created directly by user code.
///
/// {@template flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
/// Requires [Widget] creation locations which are only available for debug
/// mode builds when the `--track-widget-creation` flag is enabled on the call
/// to the `flutter` tool. This flag is enabled by default in debug builds.
/// {@endtemplate}
///
/// See also:
///
///  * [isWidgetCreationTracked] which indicates whether this method can be
///    used. ¿ ˝®¿ ˝∞  ¿ ˝¬¿ ˝    ¿ ˛0Ä®¿ ˛A  ¿ ˛V¿ ˛_   ¿ ˛‹Ä˚¿ ˇF:/// If possible, returns [DiagnosticsNode] for the object. ¿ ˇ^¿ ˇg  ¿ ˇ¿ ˇ¿ ˇ€Åª¿ ˇË  ¿  ¿ 	  ¿ ¿ "   ¿öÅÓ¿ÈÅ;/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that [diagnosticableId] references providing information needed
/// for the details subtree view.
///
/// The details subtree shows properties inline and includes all children
/// rather than a filtered set of important children. ¿¿  ¿¿$   ¿åÇ¿ô  ¿¥¿Ω  ¿Œ¿÷   ¿ùÅ ¿¢  ¿ª¿Ã   ¿kÄ∂¿Å  ¿õ¿¨  ¿µ'¿’   ¿%Å†¿;  ¿P¿g  ¿q'¿ë   ¿	…Äæ¿
+V/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element]. ¿
9¿
A   ¿
ãÄ”¿
°  ¿
∞¿
∏   ¿bÅ¿Äì/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element] showing only nodes that should be included in a summary tree. ¿¿"   ¿wÇ¿ç  ¿¨¿¥  ¿ƒo¿   ¿ãÉ]¿®  ¿”¿Ë   ¿ÏÇ—¿ˆÅÍ/// Returns a JSON representation of the subtree rooted at the
/// [DiagnosticsNode] object that `diagnosticsNodeId` references providing
/// information needed for the details subtree view.
///
/// The number of levels of the subtree that should be returned is specified
/// by the [subtreeDepth] parameter. This value defaults to 2 for backwards
/// compatibility.
///
/// See also:
///
///  * [getChildrenDetailsSubtree], a method to get children of a node
///    in the details subtree. ¿¿  ¿*¿2  ¿B¿G  ¿U¿¡ÅÕ¿◊  ¿Ô¿¯  ¿¿  ¿$¿)   ¿íÅW¿˜N/// Returns a [DiagnosticsNode] representing the currently selected [Element]. ¿	¿  ¿&¿.  ¿„¿‰¿Ìâ$¿¯Ç”/// Captures an image of the current state of an [object] that is a
/// [RenderObject] or [Element].
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes and will be scaled
/// to be at most [width] pixels wide and [height] pixels tall. The returned
/// image will never have a scale between logical pixels and the
/// size of the output image larger than maxPixelRatio.
/// [margin] indicates the number of pixels relative to the un-scaled size of
/// the [object] to include as a margin to include around the bounds of the
/// [object] in the screenshot. Including a margin can be useful to capture
/// areas that are slightly outside of the normal bounds of an object such as
/// some debug paint information. ¿¿  ¿¿/  ¿9¿J  ¿U¿]  ¿n¿v  ¿é¿î  ¿Ÿ¿⁄¿e¿Ö¿†¿!îÆ¿!2  ¿!N¿!c   ¿5«Ç“¿5‰  ¿5¿6   ¿8ùÇ◊¿8∫  ¿8…¿8ﬁ   ¿;xÉ÷¿;ï  ¿;≠¿;¬   ¿?RÄﬂ¿?T ¿?a¿?a¿?d¿?m  ¿?y¿?Å   ¿@5Å¿@K  ¿@^¿@g  ¿@{¿@É   ¿A>ÅQ¿AO  ¿Aq¿Az   ¿BìÇ¿CîÄÒ/// Returns a [DiagnosticsNode] representing the currently selected [Element]
/// if the selected [Element] should be shown in the summary tree otherwise
/// returns the first ancestor of the selected [Element] shown in the summary
/// tree. ¿C≠¿C∂  ¿C ¿C“   ¿DòÄ±¿D£  ¿D≈¿DŒ   ¿EMÉ¿E^  ¿EÅ¿Eä   ¿HYÄ˙¿Ho  ¿Hâ¿Hí  ¿H¶¿HÆ   ¿IWÅ0¿IÄç/// Returns whether [Widget] creation locations are available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿J Ää¿Jœ  ¿J›¿JÁ   ¿KXÄ˚¿K]  ¿Ki¿Ks   ¿LWÄã¿L\  ¿Ll¿Lt  ¿L~"¿Lú   ¿LÊÅ»¿M˝Ä˙/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.postEvent] directly.
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿N¿N  ¿N"¿N8  ¿NH¿NP  ¿MÎ¿MÏ¿NX¿N≤ÅH¿OæÄÔ/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.inspect].
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿O∆¿Oœ  ¿O¨¿O≠¿P©\¿PÆ  ¿Pø¿P»  ¿P–¿P÷   ¿Q	ÑË¿Q  ¿Q¿Q%   ¿UıÅ.¿VﬂÄ⁄/// This method is called by [WidgetsBinding.performReassemble] to flush caches
/// of obsolete values after a hot reload.
///
/// Do not call this method directly. Instead, use
/// [BindingBase.reassembleApplication].    ¿®>¿®H ¿®\¿®_F¿®k 	¿®Ü¿®ã¿®å¿®î¿®§¿®ï¿®ö¿®û¿®¢¿®ßS¿®≥ 	¿®ÿ¿®›¿®ﬁ¿®Ê¿®˘¿®Á¿®Ï¿®Ò¿®ˆ¿®¸S¿© 	¿©/¿©4¿©5¿©=¿©N¿©>¿©C¿©G¿©K¿«l&¿«y ¿«é¿«î#¿«° ¿«¥¿«π)¿«∆ ¿«ﬁ¿«ÂÄî¿»bo/// Interpret pointer up events within with this margin as indicating the
/// pointer is moving off the device.¿»v¿»|i¿»å ¿»ú¿»•¿»‰¿»Æ¿»©¿»∞¿»µ¿»¿¿»∂¿»Õ¿»≈¿»œ¿»›¿»◊¿»ﬂ¿Íç<¿Íß ¿Í«¿Í»¿Í∑¿Í∆¿Í∏¿Í√¿ÍÀ0¿Í· ¿Í˘¿Í˙¿ÍÓ¿Í¯¿ÍÔ¿ˇââ@¿©à&/// Annotation which marks a function as a widget factory for the purpose of
/// widget creation tracking.
///
/// When widget creation tracking is enabled, the framework tracks the source
/// code location of the constructor call for each widget instance. This
/// information is used by the DevTools to provide an improved developer
/// experience. For example, it allows the Flutter inspector to present the
/// widget tree in a manner similar to how the UI was defined in your source
/// code.
///
/// [Widget] constructors are automatically instrumented to track the source
/// code location of constructor calls. However, there are cases where
/// a function acts as a sort of a constructor for a widget and a call to such
/// a function should be considered as the creation location for the returned
/// widget instance.
///
/// Annotating a function with this annotation marks the function as a widget
/// factory. The framework will then instrument that function in the same way
/// as it does for [Widget] constructors.
///
/// Tracking will not work correctly if the function has optional positional
/// parameters.
///
/// Currently this annotation is only supported on extension methods.
///
/// {@tool snippet}
///
/// This example shows how to use the [widgetFactory] annotation to mark an
/// extension method as a widget factory:
///
/// ```dart
/// extension PaddingModifier on Widget {
///   @widgetFactory
///   Widget padding(EdgeInsetsGeometry padding) {
///     return Padding(padding: padding, child: this);
///   }
/// }
/// ```
///
/// When using the above extension method, the framework will track the
/// creation location of the [Padding] widget instance as the source code
/// location where the `padding` extension method was called:
///
/// ```dart
/// // continuing from previous example...
/// const Text('Hello World!')
///     .padding(const EdgeInsets.all(8));
/// ```
///
/// {@end-tool}
///
/// See also:
///
/// * the documentation for [Track widget creation](https://docs.flutter.dev/development/tools/devtools/inspector#track-widget-creation).¿π¿«¿»  è <ÄÜÄ§Ä•Ä∫Ä·Ä¯ÅÅ:ÅQÅZÅjÅÅéÅßÅ∫ÅÀÅ‰Å˜ÇÇÇ ÇJÇsÇúÇ¬Ç√Ç÷ÇÎÉÉÉ0ÉPÉrÉÜÉáÉ∂É·ÑGÑHÑòÑÆÑ≤Ñ˛ÖDÖÖóÖ≈Ö…Ö ÜÜÜOÜmÜèÜ´Ü¨Ü¬Ü√ÜœÜ¸áá á!á-á:ádáÑá†áΩáƒàààààbà≥à⁄âââ4âTâiâäâãâ°âΩâæâ ää8äräväwäÉä¿äˆã2ã6ã7ãCã•ãÈå3å7å8åDå£åÊç/ç3ç4ç@ç€é.éáéãéåéòé“é˙è(è,è-è9ènèïè¬è∆è«è”êê9êjênêoê{êµê€ëëëëëcëóë—ë’ë÷ë‚í*í[íííñíóí£íÿí˚ì$ì(ì)ì5ì_ìÄìßì´ì¨ì∏ìÿìÙîîîî'îeîëî√î«î»î‘î˛ïïFïJïKïWïÄï†ï∆ï ïÀï◊ñ%ñUñãñèñêñúñ…ñÏóóóó&ó¿òòxò|ò}òâòŸôôEôIôJôVôÄô°ô»ôÃôÕôŸö1ötöΩö¡ö¬öŒõõPõäõéõèõõõ≤õ˛úKúñú–úÒúıúˆùùù*ùEùIùJùVùvùëù≤ù∂ù∑ù√ù”ùÂù˝ûûûû<û`ûäûéûèûõû≈ûﬁû˝üüüü2üJühülümüyü°üøü„üÁüËüÙ††:†]†a†b†n†û†¬†∆†»†…°°c°d°í°»°ˇ¢L¢î¢±¢Ù£££#£d£j£k£££ˆ£¸§§§§§§\§ê§‘§÷§◊•'•x•Æ•∫•Á¶¶¶¶¶]¶o¶á¶õ¶µ¶Í¶Îßß.ß/ßgßãßåß€ß˜ß¯®8®>®ç®ú®¿®¡©©©\©•©µ©ª™
™™@™A™í™≥™”™Ï´´´:´^´b´d´e´£´ß´ˆ¨¨k¨ª≠≠W≠§≠∑≠ÚÆÆ=Æ`ÆçÆ¨Æ€Æ‹Æ˚Æ¸ØØ:ØeØÇØ®Ø©ØµØÀØ∞∞<∞D∞m∞¬∞œ∞¸±±±!±"±F±Ü±ñ±∑±Ë≤≤@≤O≤Ä≤≠≤ÿ≤‡≤Û≤˝≥≥!≥"≥G≥n≥ì≥–¥ ¥6¥q¥ö¥≈¥·µ	µµµ>µDµHµIµUµvµôµ¡µ≈µ∆µÚ∂∂#∂)∂z∂∆∂Í∑
∑'∑E∑I∑J∑V∑x∑°∑¡∑Ë∏∏_∏Ç∏ª∏√∏–∏¯ππHπ^πàπñπúπ†π°π≠π¸∫∫_∫ü∫⁄∫Áªª4ªUªtª}ªÉªáªàªîªÀºº-ºWºyºôº¿ºËºÓΩΩ1Ω[ΩÑΩäΩéΩèΩ‡ΩÊæ4æÖæææƒøøCøIøóø–¿ @ ¿ @o¿ @É¿ @â¿ @ÿ¿ A¿ Ad¿ A¥¿ AÔ¿ Aı¿ B¿ B¿ BZ¿ B™¿ BÔ¿ C?¿ Cb¿ CÅ¿ Cö¿ C∑¿ C‘¿ C€¿ D¿ D=¿ Dn¿ Dt¿ Dº¿ E¿ E:¿ En¿ Eä¿ Eë¿ Eí¿ E∆¿ F¿ Fe¿ Fû¿ FÍ¿ G	¿ G[¿ Gç¿ Gö¿ G“¿ H"¿ Hn¿ H´¿ Hƒ¿ H‰¿ HÌ¿ HÛ¿ HÙ¿ IB¿ Ix¿ I®¿ I‘¿ J%¿ JC¿ Jj¿ Jä¿ J±¿ J≤¿ J÷¿ J‚¿ K#¿ K5¿ K\¿ KÖ¿ Kç¿ Kì¿ Kî¿ Kﬁ¿ L+¿ Lp¿ LØ¿ L∞¿ L˛¿ M¿ M¿ M¿ MT¿ Ma¿ Me¿ M∂¿ Mˆ¿ N¿ NZ¿ N{¿ Nî¿ N¨¿ N»¿ N›¿ N„¿ N‰¿ O3¿ OQ¿ OR¿ OÄ¿ OÜ¿ O‘¿ P ¿ Po¿ Pê¿ P∏¿ Pπ¿ PÓ¿ PÙ¿ Q'¿ Q@¿ QB¿ QC¿ Q{¿ Qõ¿ Q´¿ Q ¿ Qœ¿ R¿ R*¿ R;¿ R?¿ Ró¿ R≈¿ RÒ¿ S¿ SS¿ SÜ¿ S∑¿ S⁄¿ Sı¿ T¿ T8¿ TV¿ To¿ T{¿ Tó¿ T¶¿ TÆ¿ T¥¿ TÃ¿ T–¿ U(¿ U7¿ U9¿ U:¿ Ur¿ U©¿ UÊ¿ UÁ¿ V3¿ VW¿ V[¿ Vë¿ V§¿ V√¿ V˙¿ W-¿ Wf¿ W∂¿ Wı¿ X¿ X¿ X ¿ X!¿ XK¿ XO¿ XP¿ Xo¿ Xp¿ XÇ¿ XÉ¿ Xø¿ X“¿ X”¿ Y¿ Y¿ Y¿ Y0¿ YF¿ Y^¿ Yy¿ Y¿ Yí¿ Yñ¿ Yò¿ Yô¿ Y”¿ Z¿ Z-¿ ZL¿ Zz¿ Zü¿ Zß¿ ZØ¿ Z≥¿ Zµ¿ Z∂¿ Z¸¿ [ ¿ [P¿ [®¿ \¿ \^¿ \ﬂ¿ ],¿ ]|¿ ]∆¿ ]¸¿ ^ ¿ ^M¿ ^ì¿ ^‚¿ _0¿ _ï¿ _–¿ _‘¿ `	¿ `(¿ `l¿ `µ¿ `¸¿ a¿ a¿ aH¿ aÉ¿ a ¿ aÀ¿ a˙¿ b ¿ bO¿ bñ¿ b›¿ bÚ¿ c8¿ c9¿ cF¿ c¿ cô¿ cù¿ cû¿ c◊¿ cÿ¿ d'¿ du¿ dî¿ d—¿ d“¿ e¿ eH¿ eN¿ eù¿ eÏ¿ f ¿ f_¿ f`¿ f¨¿ f˜¿ g¿ gh¿ gÕ¿ h¿ h)¿ h*¿ h¿ h§¿ h•¿ h◊¿ i&¿ i'¿ iQ¿ iv¿ iw¿ iº¿ iÊ¿ iÏ¿ j8¿ j¿ j ¿ k¿ kW¿ kd¿ kÜ¿ k†¿ k–¿ l¿ l¿ l/¿ lN¿ lh¿ lo¿ ls¿ lt¿ lπ¿ l˝¿ m&¿ m@¿ mt¿ mµ¿ mº¿ m⁄¿ mÏ¿ n%¿ nc¿ nl¿ nò¿ nü¿ n£¿ n§¿ nÈ¿ o:¿ oÉ¿ o∆¿ p¿ pA¿ po¿ pâ¿ pœ¿ q¿ q¿ q5¿ qG¿ qÄ¿ qÿ¿ q·¿ r¿ r¿ r¿ r¿ r^¿ r¶¿ rÎ¿ s/¿ sv¿ sä¿ sê¿ sÀ¿ t
¿ t¿ tN¿ tâ¿ t∞¿ t ¿ tˆ¿ u"¿ uc¿ uj¿ uà¿ uö¿ u”¿ v¿ vB¿ va¿ vô¿ v£¿ vÛ¿ v¸¿ w(¿ w/¿ w3¿ w4¿ wv¿ w|¿ wÃ¿ x¿ x=¿ xC¿ xÖ¿ xã¿ xŸ¿ xˇ¿ yD¿ yS¿ yÅ¿ yö¿ yŒ¿ yÊ¿ yÔ¿ yˆ¿ y˙¿ y˚¿ z@¿ zë¿ zﬁ¿ {.¿ {X¿ {r¿ { ¿ |¿ |¿ |0¿ |B¿ |{¿ |≤¿ |‘¿ }'¿ }2¿ };¿ }g¿ }n¿ }r¿ }s¿ }∏¿ }˜¿ ~"¿ ~L¿ ~f¿ ~´¿ ~Ï¿ ~Û¿ ¿ #¿ \¿ ä¿ °¿ ∏¿ „¿ Ä¿ Ä:¿ ÄM¿ Ä`¿ Äl¿ Ä¿ Äâ¿ Ä÷¿ Å¿ Å{¿ ÅΩ¿ Å∆¿ ÅÚ¿ Å˘¿ Å˝¿ Å˛¿ ÇK¿ Çõ¿ ÇŸ¿ Çﬂ¿ É+¿ É8¿ ÉX¿ Éî¿ Éª¿ É˜¿ Ñ¿ Ñ¿ Ñ?¿ ÑC¿ ÑD¿ ÑÅ¿ ÑÇ¿ Ñ†¿ Ñ°¿ Ñﬁ¿ Ö¿ Ö9¿ Ö_¿ Öá¿ Ö†¿ Ö¡¿ ÖÎ¿ Ü¿ Ü¿ Ü¿ Ü¿ ÜM¿ Üp¿ Ü©¿ Üﬁ¿ á¿ áb¿ áo¿ á ¿ á–¿ á—¿ áÓ¿ à¿ à¿ à¿ àZ¿ à`¿ à™¿ à¯¿ â¿ â3¿ âO¿ âS¿ âT¿ âÅ¿ âá¿ â’¿ ä¿ ä7¿ ä~¿ äì¿ ä≠¿ äΩ¿ ã ¿ ãi¿ ã|¿ ãÜ¿ ãö¿ ãû¿ ãü¿ ãÃ¿ ã“¿ ã‚¿ ãË¿ åX¿ å¢¿ å√¿ ç¿ çm¿ çn¿ çï¿ çœ¿ ç’¿ é¿ é¿ éE¿ éX¿ éb¿ éc¿ é¨¿ é≠¿ é–¿ è¿ èc¿ èÄ¿ èﬁ¿ ê¿ ê¿ ê8¿ ê?¿ ê@¿ êc¿ êõ¿ ê‚¿ êˇ¿ ëC¿ ëj¿ ët¿ ë±¿ ë–¿ ëŸ¿ í¿ í¿ í¿ í2¿ íÉ¿ íô¿ íæ¿ ì¿ ìC¿ ìh¿ ìú¿ ì∞¿ ìº¿ ì„¿ î¿ î'¿ î^¿ îò¿ î‚¿ ï¿ ï)¿ ï=¿ ïP¿ ï~¿ ïí¿ ïû¿ ï©¿ ï◊¿ ï‡¿ ï·¿ ñ¿ ñO¿ ñÅ¿ ñ¶¿ ñ’¿ ñÈ¿ ñı¿ ó¿ óD¿ ó[¿ óå¿ ó∏¿ ò	¿ ò'¿ òh¿ òï¿ ò”¿ ò·¿ ô/¿ ôB¿ ôj¿ ôv¿ ôÅ¿ ôØ¿ ô∏¿ ôæ¿ ôø¿ ô‰¿ ö(¿ öC¿ ö_¿ öt¿ ö}¿ ö©¿ ö∞¿ ö⁄¿ õ¿ õ@¿ õ\¿ õq¿ õz¿ õ¶¿ õ≠¿ õ“¿ ú¿ ú:¿ úf¿ úm¿ úì¿ ú–¿ ù¿ ù9¿ ùN¿ ùW¿ ùÉ¿ ùä¿ ù∞¿ ù˘¿ û%¿ ûJ¿ û_¿ ûh¿ ûî¿ ûõ¿ û¡¿ ü
¿ ü6¿ ü[¿ üp¿ üy¿ ü•¿ ü¨¿ ü“¿ †¿ †J¿ †r¿ †á¿ †ê¿ †º¿ †√¿ †·¿ °*¿ °N¿ °z¿ °Å¿ °ß¿ °Î¿ ¢¿ ¢9¿ ¢@¿ ¢f¿ ¢®¿ ¢…¿ ¢ı¿ ¢¸¿ £"¿ £c¿ £É¿ £Ø¿ £∂¿ £‹¿ §¿ §9¿ §e¿ §l¿ §m¿ §ì¿ §›¿ •¿ •2¿ •9¿ •:¿ •`¿ •≠¿ •Ÿ¿ ¶¿ ¶¿ ¶¿ ¶7¿ ¶x¿ ¶ò¿ ¶ƒ¿ ¶À¿ ¶ı¿ ßA¿ ßl¿ ßò¿ ßü¿ ßΩ¿ ®¿ ®L¿ ®x¿ ®¿ ®ù¿ ®‚¿ ©¿ ©R¿ ©ì¿ ©µ¿ ©›¿ ©¸¿ ™#¿ ™c¿ ™p¿ ™{¿ ™Ñ¿ ™∞¿ ™∑¿ ™›¿ ´"¿ ´F¿ ´r¿ ´y¿ ´ü¿ ´Î¿ ¨¿ ¨B¿ ¨I¿ ¨J¿ ¨o¿ ¨∫¿ ¨„¿ ≠¿ ≠¿ ≠4¿ ≠r¿ ≠´¿ ≠Ÿ¿ Æ
¿ Æ<¿ Æ=¿ Æo¿ Æï¿ Æ ¿ Ø¿ Ø6¿ Øo¿ Ø≤¿ ØÚ¿ ∞,¿ ∞7¿ ∞T¿ ∞à¿ ∞í¿ ∞Ï¿ ∞Ì¿ ±¿ ±\¿ ±g¿ ±p¿ ±ú¿ ±£¿ ±¡¿ ≤
¿ ≤2¿ ≤^¿ ≤e¿ ≤É¿ ≤¡¿ ≤ﬁ¿ ≥
¿ ≥¿ ≥/¿ ≥p¿ ≥ê¿ ≥º¿ ≥√¿ ≥·¿ ¥&¿ ¥J¿ ¥v¿ ¥}¿ ¥Å¿ ¥Ç¿ ¥ô¿ ¥∫¿ ¥€¿ ¥ﬂ¿ ¥‡¿ µ¿ µ¿ µk¿ µõ¿ µ∞¿ µΩ¿ µŸ¿ µÓ¿ ∂¿ ∂'¿ ∂8¿ ∂<¿ ∂=¿ ∂e¿ ∂k¿ ∂Æ¿ ∂Ã¿ ∂·¿ ∂Ó¿ ∂ˇ¿ ∑¿ ∑0¿ ∑G¿ ∑f¿ ∑j¿ ∑k¿ ∑ú¿ ∑¢¿ ∑Î¿ ∏¿ ∏!¿ ∏D¿ ∏é¿ ∏¨¿ ∏∫¿ ∏¿¿ ∏Ú¿ ∏ˆ¿ ∏˜¿ π;¿ πU¿ πw¿ πó¿ πƒ¿ πﬂ¿ ∫¿ ∫¿ ∫;¿ ∫A¿ ∫E¿ ∫F¿ ∫í¿ ∫¡¿ ∫Œ¿ ª¿ ª¿ ª.¿ ª4¿ ª5¿ ª±¿ ª◊¿ º¿ º¿ ºz¿ º≥¿ º‘¿ ºË¿ Ω¿ ΩB¿ Ωp¿ Ωê¿ Ωù¿ ΩÃ¿ ΩÚ¿ æ¿ æ¿ æ"¿ æ1¿ æ5¿ æ6¿ æÉ¿ æ¬¿ æœ¿ ø¿ øA¿ øE¿ øF¿ øÑ¿ øä¿ øÿ¿ ¿(¿ ¿6¿ ¿C¿ ¿{¿ ¿ë¿ ¿§¿ ¿™¿ ¿´¿ ¿Ï¿ ¡¿ ¡_¿ ¡e¿ ¡|¿ ¡Ä¿ ¡Å¿ ¡œ¿ ¡Â¿ ¡Î¿ ¬<¿ ¬ä¿ ¬ÿ¿ ¬ﬁ¿ √,¿ √r¿ √¿ √«¿ √¿ ƒ¿ ƒ)¿ ƒ/¿ ƒB¿ ƒF¿ ƒG¿ ƒë¿ ƒû¿ ƒ§¿ ƒÛ¿ ≈¿ ≈¿ ≈M¿ ≈c¿ ≈q¿ ≈w¿ ≈x¿ ≈¬¿ ≈„¿ ∆=¿ ∆C¿ ∆Ä¿ ∆€¿ ∆·¿ «¿ «¿ «¿ «a¿ «p¿ «v¿ «≈¿ »¿ »%¿ »2¿ »A¿ »k¿ »§¿ »®¿ »Ë¿ …¿ …¿ …¿ …h¿ …™¿ …∞¿ …ˇ¿  F¿  _¿  t¿  Å¿  §¿   ¿  Ì¿  Ò¿  Ú¿ À>¿ ÀM¿ ÀS¿ À¢¿ ÀÈ¿ Ã¿ Ã¿ ÃO¿ Ã¬¿ Ã√¿ Õ¿ Õ5¿ Õf¿ Õl¿ Õm¿ Õû¿ Õ¡¿ Õ≈¿ Õ∆¿ Œ¿ Œ.¿ Œ4¿ ŒÉ¿ Œ ¿ Œ„¿ Œ¿ œ3¿ œZ¿ œh¿ œn¿ œ·¿ œ‚¿ –/¿ –_¿ –`¿ –ë¿ –¥¿ –∏¿ –π¿ —¿ —¿ —'¿ —<¿ —o¿ —ì¿ —ô¿ —ÿ¿ “¿ “¿ “¿ “¿ “g¿ “±¿ “∑¿ “Ë¿ “Ó¿ ”<¿ ”Ç¿ ”è¿ ”Ã¿ ”˛¿ ‘¿ ‘¿ ‘P¿ ‘à¿ ‘é¿ ‘ø¿ ‘≈¿ ’¿ ’\¿ ’i¿ ’¶¿ ’›¿ ’¸¿ ÷.¿ ÷F¿ ÷P¿ ÷{¿ ÷∞¿ ÷ø¿ ÷Í¿ ◊¿ ◊¿ ◊A¿ ◊o¿ ◊w¿ ◊x¿ ◊ã¿ ◊ë¿ ◊£¿ ◊ß¿ ◊®¿ ◊¿ ÿ¿ ÿ/¿ ÿ0¿ ÿy¿ ÿï¿ ÿ¶¿ ÿ∫¿ ÿ‘¿ Ÿ¿ ŸS¿ Ÿí¿ Ÿª¿ Ÿ∆¿ Ÿ„¿ ŸÏ¿ ŸÚ¿ Ÿˆ¿ Ÿ˜¿ ⁄I¿ ⁄Ü¿ ⁄÷¿ €¿ €?¿ €r¿ €z¿ €Ä¿ €ë¿ €ï¿ €ñ¿ €Á¿ ‹¿ ‹¿ ‹L¿ ‹}¿ ‹®¿ ‹©¿ ‹Ó¿ ›¿ ›>¿ ›d¿ ›m¿ ›t¿ ›u¿ ›Æ¿ ›˚¿ ﬁF¿ ﬁÑ¿ ﬁ≈¿ ﬁ˝¿ ﬂE¿ ﬂî¿ ﬂπ¿ ﬂ·¿ ‡)¿ ‡@¿ ‡É¿ ‡á¿ ‡à¿ ‡÷¿ ·¿ ·%¿ ·r¿ ·≠¿ ·∫¿ ·Ò¿ ‚-¿ ‚1¿ ‚2¿ ‚r¿ ‚ö¿ ‚ø¿ ‚‡¿ „¿ „@¿ „w¿ „Ñ¿ ‰
¿ ‰¿ ‰¿ ‰^¿ ‰j¿ ‰µ¿ ‰∆¿ ‰ ¿ ‰À¿ Â>¿ ÂZ¿ Âm¿ Âs¿ Âë¿ Â≈¿ Ê¿ ÊB¿ ÊI¿ ÊM¿ ÊN¿ ÊÆ¿ ÊÓ¿ Á¿ ÁF¿ ÁÄ¿ Á≤¿ Áÿ¿ Ë¿ Ë!¿ Ë-¿ Ë7¿ Ë?¿ ËE¿ Ël¿ Ëp¿ Ëq¿ Ë‰¿ È¿ ÈW¿ ÈÄ¿ ÈÑ¿ ÈÖ¿ ÈÔ¿ Í&¿ ÍI¿ Íh¿ Íí¿ Íò¿ Íÿ¿ Í‹¿ Í›¿ Î¿ Î¿ ÎJ¿ ÎP¿ Îv¿ Îz¿ Î{¿ Î±¿ Îˆ¿ Ï¿ Ï.¿ Ï4¿ Ïp¿ Ït¿ Ïu¿ ÏØ¿ Ï‰¿ ÏÂ¿ Ì7¿ Ì^¿ Ìê¿ Ì”¿ Ó¿ Ó¿ ÓF¿ Ón¿ ÓÉ¿ Óã¿ Óë¿ Ó£¿ Óß¿ Ó®¿ Ó‚¿ Ô¿ ÔZ¿ Ôy¿ Ôì¿ Ôô¿ Ô‹¿ ¿  ¿ $¿ %¿ u¿ ª¿ Ò¿ ÒQ¿ Òa¿ Òf¿ Ò¢¿ Òﬂ¿ Ú
¿ Ú=¿ Ús¿ Ú¡¿ Úÿ¿ Ú‹¿ Ú›¿ ÛJ¿ ÛØ¿ Û‰¿ Ù8¿ ÙK¿ Ùn¿ Ùâ¿ Ùë¿ Ùó¿ Ù÷¿ Ù⁄¿ Ù€¿ ı¿ ı'¿ ıV¿ ı|¿ ıÉ¿ ı√¿ ı«¿ ı»¿ ˆ¿ ˆI¿ ˆV¿ ˆõ¿ ˆÂ¿ ˆÈ¿ ˆÍ¿ ˜7¿ ˜Å¿ ˜ô¿ ˜∏¿ ˜æ¿ ¯@¿ ¯D¿ ¯E¿ ¯í¿ ¯ƒ¿ ˘¿ ˘O¿ ˘S¿ ˘T¿ ˘ü¿ ˘Ú¿ ˙k¿ ˙Ì¿ ˙Ò¿ ˙Ú¿ ˚?¿ ˚ç¿ ˚∑¿ ˚Ω¿ ¸¿ ¸[¿ ¸¨¿ ¸˙¿ ˝¿ ˝¿ ˝%¿ ˝+¿ ˝y¿ ˝à¿ ˝÷¿ ˛)¿ ˛-¿ ˛.¿ ˛r¿ ˛©¿ ˛’¿ ˛Ÿ¿ ˛⁄¿ ˇ¿ ˇ,¿ ˇp¿ ˇî¿ ˇΩ¿ ˇ√¿ ˇ‘¿ ˇÿ¿ ˇŸ¿ .¿ x¿ ê¿ ©¿ Ø¿ ∞¿<¿ì¿ó¿ò¿Â¿2¿V¿\¿®¿‡¿0¿Ö¿â¿ä¿‚¿,¿Ç¿¿ñ¿ö¿õ¿”¿¿¿¿A¿e¿x¿~¿π¿¿¿-¿3¿d¿h¿i¿ó¿±¿ﬁ¿‰¿¿"¿#¿L¿m¿ö¿†¿ﬁ¿	¿	U¿	e¿	r¿	¶¿	≠¿	¬¿	∆¿	«¿
¿
"¿
M¿
Ñ¿
à¿
â¿
ƒ¿[¿_¿`¿™¿¯¿.¿p¿t¿u¿®¿¿¿5¿<¿T¿î¿∫¿ÿ¿˜¿¿)¿s¿|¿É¿á¿à¿â¿œ¿Û¿˘¿0¿t¿Ö¿Ô¿6¿`¿Ä¿¡¿Ú¿?¿K¿U¿t¿}¿Ñ¿≈¿›¿Â¿È¿Í¿+¿x¿Ø¿µ¿¿R¿g¿m¿}¿É¿Ã¿Ì¿	¿&¿>¿X¿_¿∫¿æ¿ø¿Î¿	¿ ¿6¿<¿Ü¿û¿±¿∑¿œ¿€¿¿¿C¿d¿{¿Ñ¿ã¿è¿ê¿·¿Ó¿:¿a¿ü¿•¿Ê¿Í¿Î¿1¿T¿Z¿´¿˙¿=¿w¿«¿¿c¿≥¿◊¿‰¿¿¿5¿Q¿j¿ä¿ß¿¥¿Ì¿ ¿¿r¿¨¿ø¿≈¿∆¿Ô¿&¿M¿Y¿q¿í¿™¿´¿˚¿I¿ô¿≤¿›¿Ú¿˙¿ ¿¿@¿Y¿å¿í¿≤¿≈¿À¿Ã¿Ù¿ 	¿ ¿ =¿ c¿ l¿ s¿ t¿ £¿ ∑¿ À¿ È¿!¿!¿!¿!¿!J¿!n¿!t¿!´¿!¿"'¿"_¿"©¿"¡¿#¿#¿#(¿#.¿#H¿#T¿#z¿#ò¿#≥¿#◊¿#Ó¿$¿$e¿$ë¿$æ¿$˙¿% ¿%M¿%Y¿%Z¿%ã¿%–¿%Ì¿&¿&;¿&H¿&è¿&˝¿'g¿'Æ¿'˜¿("¿(I¿(ä¿(ó¿(ò¿(⁄¿) ¿)+¿)Z¿)ü¿)–¿*¿*M¿*x¿*£¿*÷¿*Ò¿+
¿+T¿+ö¿+‚¿, ¿,.¿,:¿,;¿,K¿,}¿,∂¿,˛¿-N¿-ä¿-¡¿-“¿.¿.B¿.Å¿.¬¿/¿/B¿/V¿/f¿/©¿/∑¿/œ¿0¿0:¿0F¿0G¿0W¿0Ñ¿0≤¿0Î¿1(¿1g¿1x¿1y¿1ø¿1Ò¿22¿2^¿2ö¿2“¿3¿3L¿3¿3≤¿3≈¿3’¿4
¿4C¿4Ä¿4ø¿4–¿4ﬁ¿4ˆ¿5¿5#¿5D¿5O¿5X¿5_¿5†¿5∏¿5¿¿5ƒ¿5≈¿6¿6;¿6p¿6æ¿6Á¿7¿70¿7h¿7°¿7À¿7Ì¿8¿8(¿80¿86¿8u¿8é¿8ñ¿8ö¿8õ¿8Î¿9¿9M¿9ö¿9√¿9›¿:¿:D¿:}¿:ß¿:…¿:Ï¿;¿;¿;¿;Q¿;i¿;q¿;u¿;v¿;©¿;Õ¿;”¿;¸¿<M¿<m¿<ï¿<ú¿<Œ¿<¯¿=¿=B¿=I¿=r¿=å¿=ª¿=Û¿>¿>K¿>É¿>•¿>∆¿>ﬁ¿>Ê¿>Ï¿?+¿?C¿?K¿?O¿?P¿?à¿?±¿?◊¿?Ì¿?ı¿?˚¿@.¿@2¿@3¿@è¿@ß¿@Â¿A0¿A7¿A;¿A<¿Aê¿AÚ¿B)¿Bå¿Bê¿Bë¿B·¿C/¿C¿Cã¿Cﬁ¿D¿DC¿DI¿Dë¿Dï¿Dñ¿D‰¿EF¿EJ¿EK¿E†¿E∆¿F¿F¿Fs¿F§¿FÍ¿G¿GP¿Gà¿G™¿Gª¿G≈¿GÕ¿GÈ¿GÔ¿HR¿HV¿HW¿H∫¿IP¿IT¿IU¿Iñ¿Iú¿IÈ¿J¿J`¿JÑ¿Jà¿Jâ¿J©¿J™¿J«¿J»¿JÛ¿K¿KQ¿KU¿KV¿K¿K§¿K‰¿KÍ¿L
¿LJ¿LP¿LT¿LU¿L§¿Lﬂ¿L„¿L‰¿M.¿Mg¿Mm¿MΩ¿MÈ¿Mˆ¿N¿N¿ND¿Ne¿Nl¿N´¿NØ¿N∞¿N˙¿O(¿O.¿O~¿O™¿O∑¿Oÿ¿O˜¿O˚¿O¸¿PQ¿P¶¿Pß¿P‚¿Q¿Q¿Q¿Q4¿Q>¿Qî¿Q¡¿R¿RZ¿R™¿RÃ¿R‹¿R‰¿S¿S¿ST¿Sâ¿S¬¿SÒ¿T?¿T^¿Tv¿TÄ¿T•¿T∫¿Tƒ¿T ¿TÈ¿U	¿U&¿UF¿U^¿Uç¿U‘¿Uﬂ¿UË¿UÓ¿UÚ¿UÛ¿VE¿Vr¿Vx¿V≠¿Vÿ¿Vı¿W¿W ¿W$¿W&¿W'¿Wo¿Ws¿W¬¿X
¿X!¿X4¿XP¿Xf¿X¿XÖ¿XÜ¿Xô¿X©¿X™¿XÊ¿X˙¿X˚¿Y¿Y¿Y3¿YE¿YF¿Y]¿Yn¿Y~¿YÇ¿YÉ¿Yû¿Y≥¿Y¡¿Y≈¿Y«¿Y»¿Z¿ZS¿ZW¿Z®¿Z¯¿[I¿[ï¿[¬¿[∆¿\¿\a¿\|¿\°¿\À¿\–¿]¿]b¿]z¿]¿]ƒ¿]‰¿^ ¿^!¿^H¿^Ç¿^É¿^√¿^…¿_¿_-¿_m¿_n¿_ø¿_¸¿`¿`D¿`o¿`}¿`É¿`√¿a¿a!¿a/¿a5¿aa¿ab¿a|¿a±¿a¸¿b2¿bV¿bp¿bx¿bñ¿b≤¿b¬¿c¿c#¿c<¿c]¿ce¿c¿cå¿cß¿c≠¿cÆ¿c˝¿dJ¿dó¿dﬁ¿dÓ¿e¿e#¿e>¿eF¿e_¿ee¿ei¿ej¿eë¿e®¿eı¿fE¿fä¿f‘¿g!¿gS¿gÑ¿gô¿gü¿g≥¿g∑¿g∏¿h¿h%¿h_¿h§¿h≥¿h„¿i ¿i ¿i&¿i'¿i`¿iç¿i•¿i¨¿i≠¿iÁ¿j
¿j@¿jä¿j√¿jˆ¿k7¿kP¿ki¿kt¿k¬¿k ¿kˆ¿k¸¿k˝¿lF¿li¿lÿ¿m¿mD¿mó¿mœ¿mÎ¿n	¿n)¿nK¿nX¿nc¿nd¿nç¿nΩ¿nÒ¿o!¿o)¿oU¿o[¿o\¿oo¿oâ¿oö¿oû¿o†¿o°¿oÃ¿oÎ¿oÏ¿o¯¿p1¿p3¿p4¿pw¿p{¿p∆¿q¿q]¿qß¿qª¿qø¿qÙ¿q¯¿rH¿rñ¿r‰¿s/¿sw¿s£¿sß¿sÚ¿t=¿té¿t€¿u#¿uR¿uê¿u™¿uπ¿u“¿u˘¿uˇ¿v ¿v*¿v@¿vA¿v}¿vÉ¿v—¿v˘¿w4¿w5¿wA¿wÑ¿wÜ¿wá¿w¬¿w‰¿wÂ¿x ¿x¿x!¿x"¿xG¿xH¿xb¿xc¿xñ¿xó¿x„¿y¿y@¿yA¿yM¿yb¿yy¿yz¿y®¿y‹¿z¿zA¿z|¿z√¿z«¿z»¿z‘¿zÁ¿{¿{L¿{}¿{¥¿{…¿{Õ¿{Œ¿|¿|?¿|Ü¿|å¿|ç¿|§¿|¡¿|‚¿|˜¿}¿}'¿}-¿}C¿}~¿}ô¿}Í¿~¿~!¿~'¿~w¿~x¿~√¿~˚¿2¿r¿¢¿¥¿º¿Ä¿ÄK¿Äê¿Ä¢¿Ä™¿Ä´¿Ä„¿Å¿Åi¿Å}¿ÅÖ¿Åã¿Åå¿Åª¿ÅÂ¿Å˜¿ÇA¿Çá¿Ç≠¿ÇÚ¿É¿É¿É¿É-¿ÉE¿ÉK¿É[¿É_¿É`¿ÉØ¿É¬¿É»¿Ñ¿Ñb¿ÑÆ¿Ñ…¿Ö¿ÖI¿ÖÉ¿ÖÑ¿Ö⁄¿Ü¿Ü3¿Üg¿Üé¿Üî¿ÜÍ¿á¿á0¿áF¿áM¿ág¿ák¿ál¿áë¿á™¿á∏¿áæ¿áø¿à;¿àu¿àº¿àΩ¿à‚¿àÊ¿àÁ¿â¿âG¿âm¿âq¿âr¿â•¿â÷¿â¸¿ä ¿ä¿ä0¿ä~¿äŒ¿ã¿ão¿ã≥¿ãÂ¿åU¿åà¿å°¿åß¿å´¿å¨¿å¬¿å€¿åÈ¿åÔ¿ç¿ç@¿çå¿çí¿çì¿çﬂ¿é¿éO¿éU¿éY¿éZ¿éy¿é∫¿éæ¿éø¿éÀ¿éÚ¿è;¿èÄ¿è«¿èÏ¿ê¿ê¿êA¿êb¿êâ¿ê≥¿ê◊¿êı¿ë¿ë9¿ëX¿ëc¿ël¿ë´¿ëø¿ëÊ¿í¿í[¿íf¿íï¿íù¿í°¿í£¿í§¿í“¿ì¿ì4¿ìM¿ìy¿ì±¿ì∑¿ìª¿ìº¿ìı¿ì˚¿î;¿îo¿î§¿î—¿îÍ¿î˙¿ï¿ï¿ï¿ï\¿ïw¿ïâ¿ï¢¿ï∂¿ïÕ¿ï—¿ï“¿ïÙ¿ñ¿ñ)¿ñ9¿ñP¿ñT¿ñU¿ñò¿ñû¿ñ‚¿ñË¿ó¿óQ¿óR¿ól¿óë¿óÆ¿ó∆¿ò¿ò(¿ò.¿ò2¿ò3¿òÉ¿òâ¿òÕ¿ò”¿ô¿ô#¿ôp¿ôt¿ôu¿ôë¿ô∫¿ôÊ¿ö¿ö¿ö4¿öB¿öH¿öm¿öé¿öº¿ö’¿ö€¿öﬂ¿ö‡¿ö˚¿õ!¿õE¿õë¿õ™¿õ∑¿õŒ¿õÏ¿ú¿ú¿ú¿ú¿ú]¿úq¿úÆ¿ú∞¿ú±¿úÍ¿ù¿ù#¿ù)¿ù*¿ùP¿ùQ¿ù]¿ù¢¿ù‹¿ù‡¿ù·¿ùÌ¿ûE¿ûm¿ûq¿ûs¿ût¿û¶¿ûÎ¿ü	¿ü
¿ü<¿ü]¿üâ¿ü®¿ü¬¿ü»¿üﬁ¿ü‚¿ü„¿üÔ¿†¿†¿†¿†I¿†J¿†V¿†å¿†Ω¿†¡¿†¬¿†Œ¿°¿°#¿°P¿°°¿°Ω¿°˛¿¢¿¢
¿¢¿¢¿¢¿¢1¿¢q¿¢ï¿¢»¿¢…¿¢‹¿¢˜¿¢¯¿£¿£'¿£S¿£g¿£m¿£í¿£∞¿£Ÿ¿£›¿£ﬁ¿£Í¿§¿§ ¿§!¿§d¿§h¿§∏¿§œ¿§⁄¿§ˇ¿•&¿•E¿•a¿•¿•ö¿•ª¿•¡¿•¬¿•‹¿•ˇ¿¶*¿¶B¿¶g¿¶h¿¶t¿¶ó¿¶√¿¶◊¿¶›¿ß¿ß:¿ß`¿ß¶¿ßÀ¿ßœ¿ß–¿ß‹¿®;¿®=¿®>¿®_¿®ß¿®¸¿©Q¿©R¿©ù¿©‘¿©ÿ¿™)¿™v¿™£¿™ﬁ¿™˘¿´¿´5¿´Y¿´`¿´~¿´é¿´®¿´ª¿´≈¿´›¿¨¿¨)¿¨w¿¨°¿¨¨¿¨∂¿¨º¿¨¿¿¨¡¿¨·¿¨‚¿≠0¿≠>¿≠D¿≠ì¿≠¥¿≠Œ¿≠œ¿Æ ¿ÆV¿Æ~¿Æ¿Æ´¿Æ¨¿Æ’¿ÆÒ¿ÆÚ¿Ø¿Ø/¿Ø0¿Ø<¿ØO¿Øl¿ØÖ¿Øö¿Øû¿Øü¿Ø´¿Øÿ¿Øı¿∞¿∞	¿∞
¿∞@¿∞A¿∞v¿∞Ñ¿∞ä¿∞ã¿∞œ¿±¿±G¿±Ç¿±î¿±ú¿±·¿±Á¿±Ë¿≤5¿≤U¿≤ì¿≤Õ¿≤ı¿≥¿≥¿≥¿≥:¿≥T¿≥{¿≥Å¿≥∞¿≥¥¿≥µ¿≥ˆ¿¥4¿¥s¿¥°¿¥Î¿µ¿µP¿µQ¿µu¿µò¿µÃ¿µÕ¿µÛ¿∂¿∂2¿∂h¿∂i¿∂ï¿∂⁄¿∂Â¿∂Ù¿∑(¿∑W¿∑à¿∑õ¿∑ú¿∑Ì¿∏7¿∏t¿∏ª¿∏»¿∏Ÿ¿π¿πS¿πh¿πn¿πo¿π¶¿π€¿π‚¿∫+¿∫T¿∫¢¿∫£¿ª¿ª¿ª]¿ªu¿ªô¿ªù¿ªû¿ª∏¿ªÀ¿ªﬂ¿º ¿º¿º.¿º=¿ºR¿ºX¿ºk¿ºë¿º—¿º⁄¿º·¿Ω!¿ΩÇ¿Ω©¿Ω»¿ΩÎ¿æ¿æ-¿æl¿æî¿æ∫¿æ¿¿æ¡¿ø-¿ø`¿ør¿øê¿ø¶¿øÃ¿øÊ¿øÌ¿øÓ¿¿¿¿=¿¿g¿¿|¿¿ì¿¿¶¿¿Í¿¿Û¿¡¿¡¿¡¿¡6¿¡n¿¡á¿¡´¿¡±¿¡≤¿¡Â¿¬,¿¬}¿¬¶¿¬–¿¬˙¿√B¿√I¿√í¿√Ò¿ƒ¿ƒ¿ƒ¿ƒ¿ƒ%¿ƒO¿ƒo¿ƒã¿ƒ†¿ƒß¿ƒπ¿ƒΩ¿ƒæ¿≈¿≈¿≈c¿≈∞¿≈·¿∆¿∆G¿∆e¿∆õ¿∆º¿∆˘¿«%¿«-¿«M¿«S¿«e¿«i¿«k¿«l¿«î¿«π¿«‰¿«Â¿»/¿»U¿»{¿»|¿»ß¿»√¿»’¿»‰¿»Á¿»Ë¿…0¿…Q¿…U¿…†¿…∫¿…‡¿…¸¿…˛¿…ˇ¿ M¿ a¿ s¿ á¿ ü¿ ∑¿ —¿À	¿À¿À¿À¿À@¿ÀU¿ÀV¿Àq¿ÀÉ¿ÀÑ¿À°¿Àµ¿À∂¿À˘¿Ã¿Ã¿Ã5¿Ãn¿ÃÇ¿Ãñ¿ÃÆ¿Ãµ¿ÃÕ¿ÃË¿ÃÓ¿Ãˇ¿Õ¿Õ¿Õ¿Õ&¿ÕQ¿Õi¿ÕÅ¿Õá¿Õú¿Õ≈¿Õ·¿ÕÂ¿ÕÁ¿ÕË¿Œ7¿Œ8¿Œâ¿Œç¿Œ‚¿œ	¿œ¿œi¿œ∆¿œ€¿œ˚¿œˇ¿–<¿–Z¿–ç¿–≠¿–»¿–’¿–€¿–ﬂ¿–ˇ¿—;¿—n¿—´¿—…¿—œ¿—¿“0¿“=¿“Z¿“u¿“Ñ¿“û¿“¶¿“¨¿“∞¿“ ¿“€¿“›¿“ﬁ¿”	¿”¿”K¿”|¿”î¿”≤¿”∂¿”◊¿”ﬂ¿‘"¿‘T¿‘ë¿‘¨¿‘«¿‘˚¿’¿’+¿’P¿’á¿÷	¿÷¿÷¿÷&¿÷F¿÷J¿÷L¿÷M¿÷Ç¿÷ï¿÷≥¿÷∑¿÷˚¿◊¿◊1¿◊u¿◊¡¿ÿ
¿ÿ¿ÿ(¿ÿ/¿ÿ3¿ÿ4¿ÿO¿ÿê¿ÿ«¿Ÿ¿Ÿ/¿Ÿ7¿Ÿ=¿ŸO¿ŸS¿ŸT¿Ÿè¿Ÿ∑¿⁄¿⁄"¿⁄R¿⁄}¿⁄~¿⁄Œ¿€¿€d¿€É¿€∞¿‹¿‹/¿‹h¿‹¿¿‹‚¿‹Ô¿‹˘¿›¿›¿›(¿›B¿›{¿›¢¿ﬁ	¿ﬁ¿ﬁ!¿ﬁ8¿ﬁô¿ﬁ£¿ﬁ∑¿ﬁΩ¿ﬁŒ¿ﬁ“¿ﬁÛ¿ﬂ&¿ﬂ*¿ﬂ:¿ﬂ<¿ﬂ=¿ﬂl¿ﬂp¿ﬂº¿ﬂŒ¿‡¿‡g¿‡m¿‡∫¿·¿·]¿·ò¿·Â¿·Á¿·Ë¿‚¿‚¿‚W¿‚[¿‚¶¿‚™¿‚Î¿„¿„:¿„R¿„`¿„û¿„∫¿‰¿‰¿‰*¿‰2¿‰D¿‰F¿‰G¿‰w¿‰{¿‰Ã¿Â	¿Â:¿Â|¿Âô¿ÂË¿ÂÍ¿ÂÎ¿Ê@¿ÊD¿Êl¿Êp¿Êª¿Êø¿Á¿ÁB¿Á~¿Áù¿Áü¿Á†¿Á◊¿Ë¿Ë¿Ë¿Ëa¿Ëe¿Ë∞¿Ë¥¿È¿È6¿Èò¿È„¿ÈÂ¿ÈÊ¿Í3¿Íp¿Íç¿ÍÀ¿Í˝¿Í˛¿Î&¿ÎK¿Î_¿În¿Îr¿Îå¿Î®¿Î»¿Î’¿Î◊¿Îÿ¿Ï!¿ÏJ¿Ï]¿Ï∞¿Ì¿Ì(¿ÌK¿Ì_¿Ì}¿Ì™¿Ì–¿ÌÎ¿Ó¿Ó*¿ÓT¿ÓZ¿Ó[¿Ó£¿ÓÀ¿ÓÃ¿Ô¿Ô5¿Ô;¿Ôâ¿Ô—¿ÔÏ¿ÔÌ¿<¿V¿W¿ô¿ƒ¿≈¿—¿Ò¿Ú¿˛¿Ò¿Ò¿Ò%¿ÒH¿ÒI¿Òë¿Òó¿ÒÈ¿Ú5¿Úq¿ÚÍ¿ÚÎ¿Û<¿Û=¿Ûk¿Ûl¿Ûx¿Û¿¿Û˝¿Ù#¿Ù;¿Ùv¿Ù|¿Ùì¿Ù∑¿ÙΩ¿ı¿ı&¿ıd¿ı•¿ıÍ¿ˆ¿ˆI¿ˆQ¿ˆW¿ˆä¿ˆ„¿ˆÈ¿ˆ¸¿˜ ¿˜¿˜¿˜X¿˜ù¿˜Ê¿¯/¿¯{¿¯¬¿˘¿˘J¿˘Z¿˘^¿˘_¿˘k¿˘»¿˘˘¿˘˝¿˘˛¿˙
¿˙i¿˙Ω¿˙Ì¿˚Q¿˚b¿˚f¿˚g¿˚s¿˚‘¿¸¿¸"¿¸Z¿¸¶¿¸¨¿¸æ¿¸¬¿¸√¿¸œ¿˝G¿˝r¿˝é¿˝Æ¿˝Ú¿˛A¿˛x¿˛æ¿˛÷¿ˇ¿ˇ%¿ˇ)¿ˇ+¿ˇ,¿ˇU¿ˇl¿ˇÜ¿ˇà¿ˇâ¿ˇ÷¿ˇÙ¿ˇ¯¿ F¿ è¿ ÿ¿$¿q¿{¿¿Ã¿¿b¿∞¿≈¿…¿¿e¿è¿ì¿‡¿¿Ù¿:¿>¿R¿V¿¢¿Ã¿–¿‹¿¿¿N¿Ö¿ç¿ì¿õ¿ü¿Á¿1¿o¿s¿¿™¿…¿Ù¿¸¿ ¿¿¿"¿&¿∞¿ ¿H¿e¿î¿À¿Ã¿¸¿	¿	%¿	U¿	V¿	x¿	¢¿	£¿	∆¿
¿
¿
¿
`¿
|¿
Ç¿
±¿
 ¿
Á¿¿¿6¿<¿@¿A¿t¿ô¿∂¿÷¿„¿¿¿¿¿F¿[¿x¿û¿´¿⁄¿ˆ¿¿¿¿¿<¿M¿o¿à¿å¿é    3_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChainInspectorReferenceData_WidgetInspectorServiceWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kInspectButtonMargin_kOffScreenMargin_messageStyle_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationIdInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMap ˜