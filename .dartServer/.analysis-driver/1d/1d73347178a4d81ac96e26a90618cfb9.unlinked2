Ä≈shouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllcontextrenderObjectselectionControlsselectionDelegate_selectionOverlaycontextMenuBuildervalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbar showSpellCheckSuggestionsToolbarshowMagnifierupdateMagnifierhideMagnifierupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblemagnifierIsVisiblespellCheckToolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_buildMagnifier_endHandleDragPosition$_endHandleDragPositionToCenterOfLine"_handleSelectionEndHandleDragStart_getHandleDy#_handleSelectionEndHandleDragUpdate_startHandleDragPosition&_startHandleDragPositionToCenterOfLine$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleAnyDragEnd_handleSelectionHandleChanged_chooseType_magnifierInfo_magnifierControllermagnifierConfigurationstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStart_isDraggingStartHandlestartHandlesVisibleonStartHandleDragStart_handleStartHandleDragStart_handleStartHandleDragUpdateonStartHandleDragUpdateonStartHandleDragEnd_handleStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEnd_isDraggingEndHandleendHandlesVisibleonEndHandleDragStart_handleEndHandleDragStart_handleEndHandleDragUpdateonEndHandleDragUpdateonEndHandleDragEnd_handleEndHandleDragEndtoolbarVisibleselectionEndpoints_selectionEndpointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocationfadeDuration_handles_toolbar_contextMenuController_spellCheckToolbarController_buildScheduledmarkNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarchildoffset	layerLink
visibilitycreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndpreferredLineHeighttype_handleVisibilityChangededitableTextKeyforcePressEnabledselectionEnableddelegate#_showMagnifierIfSupportedByPlatform#_hideMagnifierIfSupportedByPlatform_lastSecondaryTapWasOnSelection _positionWasOnSelectionExclusive _positionWasOnSelectionInclusive_positionOnSelection_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_isShiftPressed_dragStartScrollOffset_dragStartViewportOffset_scrollPosition_dragStartSelection_dragBeganOnPreviousSelection_longPressStartedWithoutFocusonTapTrackStartonTapTrackReset	onTapDownonForcePressStartonForcePressEndonSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDown_selectParagraphsInRange_selectLinesInRange_moveToTextBoundary_selectTextBoundariesInRangeonTripleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehavior _getEffectiveConsecutiveTapCount_handleTapTrackStart_handleTapTrackReset_handleTapDown_handleTapUp_handleTapCancel_handleDragStart_handleDragUpdate_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd	_disposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteableenableddisabledToolbarBuilderToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControlsÅ¥TextSelectionPointTextSelectionDelegateTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringEditableTextcontextMenuBuilderselectionControlsSelectionAreaonTapcupertinoTextSelectionControlsTextSelectionHandleTypedoubleVoidCallbackOffsetRenderEditablepreferredLineHeight
DeprecatedRectListValueListenableSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionvoidSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllMaterialTextSelectionControlszeroshrinkmaterialTextSelectionControlsOverlayTextEditingValue	LayerLinkDragStartBehaviorstartTextMagnifierConfigurationselectionStartInViewportaddListenerselectionEndInViewportmagnifierConfigurationcontextdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateonEndHandleDragEndendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdateonStartHandleDragEndtoolbarVisibleselectionEndpointsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPositionWidgetBuildervisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarmounted showSpellCheckSuggestionsToolbarbuilderTextPositiongetPositionForPointshowMagnifiercurrentTextPositionglobalGesturePositionrenderEditableupdateMagnifierhideMagnifierSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFramemarkNeedsBuildtextDirectionleftrightgetEndpointsForSelection_handlestoolbarIsVisible_magnifierControllershown_spellCheckToolbarControllerisShownhidehideToolbardisposeremoveListenerint	plainTextisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightlastMagnifierInfolocalToGlobalgetLocalRectForCaretgetLineAtOffsetoffsetextentOffsetaffinityTextAffinityupstream
baseOffset
fromPoints	topCenterbottomCenterfieldBoundssize	caretRectshiftcurrentLineBoundariesDragStartDetailsattachedglobalPositiondypointdxabsfloorDragUpdateDetailsfromPositiondefaultTargetPlatformTargetPlatformiOSmacOSandroidfuchsialinuxwindowsextentbaseDragEndDetailsuserUpdateTextEditingValuecopyWithdragTextDirectionltrrtldisableddebugCheckHasOverlayemptyMagnifierControllershowmagnifierBuilderbelowshouldDisplayHandlesInMagnifieroverlayEntryFadeTransitionValueChangedkindPointerDeviceKindtouchcall
listEqualsHapticFeedbackselectionClickCompositedTransformTargetdownDragGestureRecognizerbuildHandleCupertinoTextSelectionControlsgetDataDurationmillisecondsOverlayEntryContextMenuControllerofrootOverlay	insertAllremoveinsertfindRenderObject	layerLinkchildinstanceaddPostFrameCallbacktypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEnd
visibilityTextFieldTapRegionExcludeSemanticsbottomRightwidthtopLeftBuilderbuildToolbarStatefulWidgetStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationfadeDurationvsyncwidgetdidUpdateWidgetforwardreverseDirectionalityopacityCompositedTransformFollowerlinkshowWhenUnlinkedgetHandleAnchorgetHandleSizefromLTWHexpandToInclude
fromCirclecenterradiuskMinInteractiveDimensionRelativeRectfromLTRBmax	Container	alignment	AlignmentRawGestureDetectorbehaviorHitTestBehaviortranslucentgesturesTypeGestureRecognizerFactoryPanGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnersupportedDevicesstylusunknownonStartonUpdateonEndPaddingpadding
EdgeInsetsonlytopbottom	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedfromSelectioneditableTextKeycurrentStateRenderObjectPointerDownEventBaseTapAndDragGestureRecognizer
ScrollableScrollableStatecurrentContextmaybeOfpositionpixelsonTapTrackStartHardwareKeyboardlogicalKeysPressedintersectionLogicalKeyboardKey	shiftLeft
shiftRightonTapTrackReset	onTapDownhandleTapDownTapDragDownDetailsselectionEnabledTapDownDetailshasFocustapselectPositioncauseonForcePressStartForcePressDetailsforcePressEnabledselectWordsInRangefrom
forcePressonForcePressEndonSingleTapUpTapDragUpDetailsmousetrackpadinvertedStylustextPositionpreviousSelectionfindSuggestionSpanAtCursorIndexwordAtCursorIndexIsMisspelled
selectWordtoggleToolbarisAffinityTheSameselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetails	longPressselectPositionAtonSingleLongTapMoveUpdateLongPressMoveUpdateDetailsmaxLinesoffsetFromOrigintoonSingleLongTapEndLongPressEndDetailsonSecondaryTaponSecondaryTapDownhandleSecondaryTapDownonDoubleTapDown	doubleTapTextBoundaryParagraphBoundaryboundaryLineBoundarygetLeadingTextBoundaryAtgetTrailingTextBoundaryAtonTripleTapDownonDragSelectionStartTapDragStartDetails _getEffectiveConsecutiveTapCountconsecutiveTapCountonDragSelectionUpdateTapDragUpdateDetailsonDragSelectionEndTapDragEndDetailsKeykeyGestureDetectorGestureTapDragDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapDownCallbackGestureTapDragUpCallbackGestureCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureTapDragStartCallbackGestureTapDragUpdateCallbackGestureTapDragEndCallbackdeferToChildminMapTapGestureRecognizerLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEnd%TapAndHorizontalDragGestureRecognizeronDragStartonDragUpdate	onDragEndonTapUponCancelTapAndPanGestureRecognizerexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivehiddenpausedLiveTextisLiveTextInputAvailableenabledContainerBoxParentDataTextSelectionControlsStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserveriÙ∆ÀÅ“`˝÷4K|ìË¯ ÉàÉüTextSelectionPoint É`package:flutter/rendering.dartÉ»É‚TextSelectionDelegate É°package:flutter/services.dart  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:math  Äÿ  "package:characters/characters.dart  Å  package:flutter/foundation.dart  Å/  package:flutter/gestures.dart  ÅW  package:flutter/rendering.dart  ÅÄ  package:flutter/scheduler.dart  Å©  package:flutter/services.dart  Å“  
basic.dart  ÅÁ  binding.dart  Å˛  constants.dart  Ç  container.dart  Ç0  context_menu_controller.dart  ÇW  
debug.dart  Çl  editable_text.dart  Çâ  framework.dart  Ç¢  gesture_detector.dart  Ç¬  magnifier.dart  Ç€  overlay.dart  ÇÚ  scrollable.dart  É  tap_region.dart  É&  ticker_provider.dart  ÉE  transitions.dart    	dart:core¿ Õ] ¿é  <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ%ÉDÉ_É`É°É‰ÉÂÑ2Ñ=ÑAÑOÑSÑôÑßÑıÖÖjÖkÖªÖøÜÜ[ÜÄÜ…ÜıÜ˚áLáêá¨á≠áπààààJàqàuà∆ââ3â7âiâmâ±âˇäOä~äÇäªã
ã[ãèã∂ã∫å
åTåíåñå˜å˚ç	ççWç}ç§çŸçﬂé+éEéKéõéÎè7èkè„è‰ê5êÅê±ë ëë/ë5ëtëzë…ëÙë˙íKíàíéíÿììOì^ìáì¿ìƒì€ìıîî/îMîuîôî–î˙îˇï ï0ï]ï^ï©ïÒññ
ñZñ`ñ¶ñ«ñ÷ñˇó8ó<óló¿óƒó≈òòCòIòôòüòÊôôô?ôxô|ô≠ööööUöoöuöΩöﬁö‰õ4õÅõèõûõ«ú úú6úXú\ú]ú®úÛù ùùSùtùÉù¨ùÂùÈûû•û©û™ûÙû˙üGüWüfüèü»üÃüˇ†9†=†>†ä†ê†ﬁ†Ó†˝°&°_°c°ó°“°÷°◊¢¢¢h¢x¢~¢ ££&£g£v£ü£ÿ£‹§§V§Z§[§®§Õ§”§Ù§˙•K•^•m•ñ•œ•”¶¶C¶G¶I¶J¶ê¶î¶‚ß1ß~ßæ®® ®$®_®Ñ®≈®—©©©©/©I©h©É©°©…©Ì™$™N™n™o™{™Ù´´´´)´y´ë´ï´ó´ò´ﬁ´‚¨0¨¨Ã≠≠Q≠n≠≈≠∆≠«Æ	ÆÆ#ÆrÆΩÆ›Æ˙ØFØLØáØ†Ø≈Ø‡Ø˛∞'∞T∞∞ü∞ª∞‹±±D±o±ù±∫±˙≤#≤;≤õ≤˘≥(≥R≥à≥†≥ ≥˛¥8¥t¥í¥÷µµIµÅµπµ’∂∂W∂Ü∂π∂Ò∑∑I∑q∑£∑—∑˚∏3∏_∏°∏®∏¨∏≠∏Ëπ#π)πvπ∑πÃπÍπÎ∫6∫∫∆∫Î∫Ïª.ª`ªaª£ª‘ª’ºººFºLºÇº≠ºÆºÃº·Ω	Ω
Ω%Ω&ΩZΩ[ΩµææcædæóøøkøÌøÒøÚ¿ @¿ @%¿ @v¿ @•¿ @´¿ @ƒ¿ @Ú¿ A¿ A7¿ A]¿ Ak¿ Aq¿ Aê¿ Aø¿ A√¿ Aƒ¿ B ¿ B¿ B6¿ B[¿ B_¿ B`¿ Bú¿ B’¿ B÷¿ C¿ C)¿ CH¿ CI¿ CÜ¿ C≠¿ Cª¿ C¡¿ C¬¿ CË¿ Cˆ¿ C¸¿ C˝¿ D¿ D=¿ DU¿ DÉ¿ Dä¿ Dñ¿ Dö¿ Dõ¿ DÈ¿ E¿ E9¿ Eo¿ Eu¿ Eî¿ E±¿ E«¿ E¿ F
¿ F@¿ FG¿ FZ¿ F^¿ F_¿ Fù¿ FÀ¿ G¿ G>¿ Gc¿ Gz¿ G°¿ G–¿ Gˆ¿ Gˇ¿ H¿ H
¿ H¿ HK¿ H{¿ Hœ¿ HÓ¿ I¿ I,¿ IS¿ IÇ¿ I®¿ I±¿ I∏¿ Iº¿ IΩ¿ I˚¿ J¿ J;¿ J?¿ J@¿ J{¿ JÅ¿ Jœ¿ K¿ Km¿ K∂¿ L¿ LV¿ Lá¿ L≤¿ L–¿ Lﬁ¿ L‰¿ L˚¿ M¿ Mf¿ Mµ¿ N¿ N¿ N<¿ N@¿ NA¿ Nd¿ Nz¿ N§¿ NÀ¿ NÔ¿ O¿ O<¿ OD¿ Ow¿ Oú¿ O¿¿ OÁ¿ P¿ P¿ PD¿ Po¿ Pæ¿ Q¿ Q¿ Q¿ Q:¿ Q@¿ Që¿ Q ¿ QÂ¿ R¿ RS¿ R£¿ R∏¿ R‡¿ R‰¿ RÂ¿ S¿ Sl¿ Sm¿ SÆ¿ S¥¿ Sƒ¿ S ¿ T¿ T@¿ TÉ¿ TÑ¿ T∂¿ U¿ U¿ U?¿ UE¿ UU¿ U[¿ U¢¿ V¿ V¿ V9¿ Vd¿ Ve¿ V°¿ V⁄¿ V€¿ W¿ W&¿ WG¿ W™¿ X¿ X6¿ Xe¿ Xí¿ X•¿ X©¿ X™¿ XÃ¿ Y¿ Y<¿ YW¿ Yú¿ YÊ¿ Z6¿ Z~¿ ZÕ¿ [¿ [>¿ [ù¿ [Â¿ \4¿ \Ã¿ \“¿ ]¿ ]¿ ]¿ ]?¿ ]Ñ¿ ]Æ¿ ]«¿ ]˚¿ ^Z¿ ^¢¿ ^Ô¿ _Ä¿ _Ü¿ _Ã¿ _–¿ _—¿ _Û¿ `¿ `J¿ `y¿ `Ä¿ `⁄¿ a4¿ a5¿ aë¿ aÃ¿ a˜¿ b ¿ b'¿ b(¿ bO¿ bê¿ b∑¿ bæ¿ bø¿ b¿ c@¿ cç¿ cî¿ cï¿ cØ¿ cı¿ d)¿ dm¿ dΩ¿ dƒ¿ d»¿ d…¿ e¿ e:¿ e`¿ ea¿ e±¿ e∆¿ e˙¿ e˚¿ fA¿ fc¿ fq¿ fw¿ fx¿ fº¿ f˝¿ g5¿ gQ¿ g¶¿ g˙¿ hL¿ hê¿ hû¿ h¡¿ h◊¿ h‡¿ hÁ¿ hË¿ i¿ i$¿ iK¿ iÇ¿ i®¿ i±¿ i∏¿ iº¿ iΩ¿ j¿ j#¿ j)¿ ju¿ j≈¿ k¿ kX¿ kê¿ k∆¿ l¿ l!¿ l}¿ lƒ¿ l»¿ l…¿ m¿ m3¿ mA¿ mG¿ mH¿ m¶¿ m–¿ mÒ¿ n6¿ n=¿ n>¿ ní¿ nì¿ nµ¿ nÓ¿ o¿ oL¿ or¿ o|¿ o}¿ o–¿ p¿ p¿ p¿ p¿ pB¿ pg¿ p≤¿ p—¿ pÚ¿ q¿ qA¿ qi¿ qt¿ qß¿ qÿ¿ q‚¿ r¿ r(¿ rI¿ rl¿ rí¿ rø¿ rË¿ rÛ¿ s7¿ sh¿ sr¿ sx¿ sy¿ s™¿ s´¿ s„¿ t¿ tH¿ tl¿ tt¿ tx¿ ty¿ t»¿ tÏ¿ u¿ u¿ ud¿ u|¿ u≤¿ u≥¿ u˚¿ v¿ v+¿ v1¿ v2¿ vv¿ v∑¿ vÒ¿ w¿ we¿ wª¿ x¿ xU¿ xc¿ xÜ¿ xú¿ x•¿ x¨¿ x≠¿ x“¿ xÈ¿ y¿ yG¿ ym¿ yv¿ y}¿ yÅ¿ yÇ¿ yÃ¿ yÓ¿ y¸¿ z¿ z¿ ze¿ zè¿ z∞¿ z˘¿ { ¿ {T¿ {U¿ {w¿ {∞¿ {◊¿ |¿ |4¿ |>¿ |?¿ |í¿ |…¿ |◊¿ |›¿ |ﬁ¿ }¿ })¿ }t¿ }ì¿ }¥¿ }⁄¿ ~¿ ~)¿ ~4¿ ~o¿ ~†¿ ~™¿ ~Õ¿ ~¿ ¿ 4¿ Z¿ Å¿ ≤¿ Ω¿ Ä¿ Ä2¿ Ä<¿ ÄB¿ ÄC¿ Äz¿ Äˆ¿ Å+¿ ÅO¿ ÅW¿ ÅX¿ Åâ¿ Åç¿ Åé¿ Å¡¿ Å›¿ ÅÎ¿ ÅÒ¿ Ç.¿ ÇW¿ Ç|¿ Ç•¿ Ç≠¿ Çª¿ Ç¡¿ ÇË¿ É¿ É0¿ ÉJ¿ Éz¿ ÉÉ¿ Éâ¿ Éç¿ Éé¿ É—¿ Ñ¿ Ñ3¿ ÑU¿ Ñ\¿ Ñ`¿ Ña¿ Ñà¿ Ñ´¿ Ñ“¿ Ñ˘¿ Ö¿ Ö%¿ ÖU¿ Ö[¿ Ö\¿ Öy¿ Öó¿ ÖØ¿ ÖÕ¿ ÖÂ¿ ÖÎ¿ ÖÔ¿ ÖÒ¿ ÖÚ¿ Ü8¿ Ü<¿ Üá¿ ÜÆ¿ Ü«¿ á¿ á¿ áT¿ ái¿ áÑ¿ áü¿ á’¿ á¸¿ à¿ à;¿ à]¿ à|¿ à∞¿ à’¿ àÒ¿ â¿ â0¿ âM¿ âf¿ â†¿ â≈¿ â÷¿ ä¿ äM¿ äS¿ äx¿ äõ¿ ä√¿ äÈ¿ ã¿ ãC¿ ãe¿ ãv¿ ã≤¿ ãÌ¿ ãÛ¿ å¿ åW¿ åÇ¿ å±¿ åÿ¿ ç¿ ç4¿ ç_¿ çç¿ çé¿ ç∆¿ ç‰¿ çÂ¿ é¿ éT¿ éU¿ éª¿ è"¿ èÑ¿ è∑¿ ê¿ ê¿ êL¿ êR¿ êÅ¿ êá¿ êÿ¿ êﬁ¿ ë*¿ ëe¿ ëf¿ ë™¿ ë⁄¿ ë‡¿ í)¿ í>¿ í\¿ íò¿ íÈ¿ ì-¿ ì1¿ ì2¿ ìs¿ ìÀ¿ î¿ îi¿ îà¿ îé¿ î◊¿ ï!¿ ïD¿ ïY¿ ïî¿ ï∞¿ ï≈¿ ïÀ¿ ïÃ¿ ñ¿ ñ>¿ ñ?¿ ñá¿ ñ…¿ ñ¿ ó<¿ óK¿ óg¿ ó}¿ óÑ¿ óÖ¿ óß¿ óµ¿ óª¿ óº¿ ó€¿ óı¿ ò;¿ òN¿ òm¿ òñ¿ òö¿ òõ¿ ò‹¿ ò˛¿ ô¿ ô6¿ ôK¿ ôd¿ ô®¿ ôÌ¿ ö)¿ ö^¿ öl¿ ör¿ ös¿ öî¿ öò¿ öô¿ ö√¿ ö…¿ õ¿ õ[¿ õá¿ õæ¿ õ„¿ õÒ¿ õ˜¿ ú¿ ú+¿ ú/¿ ú0¿ ú^¿ úd¿ úµ¿ úª¿ ù
¿ ù@¿ ù]¿ ùÖ¿ ù¨¿ ù∫¿ ù¿¿ ù‡¿ ùˆ¿ ù˙¿ ù˚¿ û"¿ û#¿ ûN¿ ûT¿ û•¿ û…¿ ûœ¿ ü¿ üM¿ üN¿ üñ¿ ü÷¿ ü◊¿ †¿ †;¿ †ã¿ †€¿ †˜¿ °¿ °+¿ °1¿ °w¿ °¢¿ °¶¿ °ß¿ °Ë¿ ¢8¿ ¢à¿ ¢§¿ ¢ ¿ ¢ÿ¿ ¢ﬁ¿ £
¿ £¿ £¿ £^¿ £†¿ £°¿ £Û¿ §¿ §>¿ §?¿ §z¿ §û¿ §Ó¿ •>¿ •Z¿ •h¿ •n¿ •ó¿ •õ¿ •ú¿ •ƒ¿ • ¿ ¶¿ ¶X¿ ¶Ç¿ ¶∑¿ ¶⁄¿ ¶Ë¿ ¶Ó¿ ß
¿ ß ¿ ß$¿ ß%¿ ßQ¿ ßW¿ ß¶¿ ß¨¿ ß˚¿ ®-¿ ®H¿ ®n¿ ®ì¿ ®°¿ ®ß¿ ®≈¿ ®€¿ ®ﬂ¿ ®‡¿ ©¿ ©¿ ©/¿ ©5¿ ©Ñ¿ ©®¿ ©Æ¿ ©ˆ¿ ™(¿ ™)¿ ™o¿ ™≠¿ ™Æ¿ ™Î¿ ´¿ ´^¿ ´Æ¿ ´ ¿ ´Ó¿ ´¸¿ ¨¿ ¨F¿ ¨o¿ ¨s¿ ¨t¿ ¨≥¿ ≠¿ ≠S¿ ≠o¿ ≠ì¿ ≠°¿ ≠ß¿ ≠—¿ ≠’¿ ≠÷¿ Æ#¿ Æc¿ Æd¿ Æ¥¿ Æ√¿ Æ˝¿ Æ˛¿ Ø7¿ ØY¿ Ø©¿ Ø˘¿ ∞¿ ∞#¿ ∞)¿ ∞P¿ ∞T¿ ∞U¿ ∞{¿ ∞Å¿ ∞Õ¿ ∞Ò¿ ∞˜¿ ±1¿ ±`¿ ±a¿ ±†¿ ±Í¿ ≤¿ ≤U¿ ≤à¿ ≤†¿ ≤‹¿ ≥¿ ≥,¿ ≥Y¿ ≥Ä¿ ≥£¿ ≥»¿ ≥Ì¿ ¥¿ ¥'¿ ¥1¿ ¥9¿ ¥?¿ ¥`¿ ¥d¿ ¥e¿ ¥Ø¿ ¥—¿ ¥“¿ µ#¿ µ0¿ µT¿ µU¿ µ¢¿ µÃ¿ µÙ¿ µı¿ ∂B¿ ∂j¿ ∂ê¿ ∂ë¿ ∂÷¿ ∑¿ ∑¿ ∑N¿ ∑O¿ ∑î¿ ∑‹¿ ∑Ó¿ ∏¿ ∏¿ ∏;¿ ∏t¿ ∏x¿ ∏™¿ ∏´¿ ∏È¿ ∏Ô¿ π4¿ πÄ¿ π ¿ πÈ¿ πÔ¿ ∫:¿ ∫à¿ ∫π¿ ∫ø¿ ª¿ ª¿ ª¿ ª#¿ ªã¿ ª∏¿ ªπ¿ º¿ ºR¿ ºX¿ º§¿ ºÎ¿ Ω.¿ Ω}¿ ΩÆ¿ Ω˝¿ æJ¿ æ|¿ æë¿ æ·¿ æˆ¿ ø%¿ ø&¿ øv¿ øé¿ øî¿ øﬂ¿ ¿¿ ¿A¿ ¿B¿ ¿ç¿ ¿≥¿ ¿π¿ ¡¿ ¡5¿ ¡;¿ ¡ã¿ ¡•¿ ¡¥¿ ¡¸¿ ¬5¿ ¬9¿ ¬l¿ ¬à¿ ¬Ø¿ ¬‘¿ ¬‚¿ ¬Ë¿ √¿ √¿ √ ¿ √!¿ √q¿ √µ¿ √∂¿ ƒ¿ ƒ;¿ ƒ[¿ ƒ\¿ ƒx¿ ƒí¿ ƒì¿ ƒŸ¿ ≈)¿ ≈*¿ ≈Ä¿ ≈Å¿ ≈¿¿ ∆	¿ ∆¿ ∆5¿ ∆Q¿ ∆_¿ ∆e¿ ∆f¿ ∆Ö¿ ∆µ¿ ∆„¿ ∆Í¿ «O¿ «S¿ «T¿ «ì¿ «Õ¿ «‚¿ «˘¿ »¿ »2¿ »P¿ »m¿ »ã¿ »¢¿ »®¿ »¨¿ »≠¿ »Ï¿ …2¿ …G¿ …\¿ …w¿ …û¿ …•¿ …À¿ …È¿ …˘¿  ¿  8¿  °¿  Ø¿  µ¿  ∂¿  —¿  ﬂ¿  Â¿  Ê¿ À0¿ ÀQ¿ Ài¿ Àú¿ À≈¿ ÀÏ¿ Ã%¿ ÃS¿ Ã^¿ Ãg¿ Ãn¿ Ãr¿ Ãs¿ Ã¡¿ ÃË¿ Õ¿ Õ-¿ ÕQ¿ ÕX¿ Õs¿ ÕÅ¿ Õá¿ Õà¿ Õ“¿ Õ˘¿ Œ¿ ŒD¿ Œm¿ Œî¿ ŒÕ¿ Œ¿ Œ˚¿ œ¿ œ¿ œ¿ œ¿ œ0¿ œ1¿ œv¿ œê¿ œ¿¿ œŒ¿ œ‘¿ –¿ –X¿ –≤¿ –œ¿ –ﬂ¿ –Á¿ —¿ —P¿ —q¿ —ë¿ —∫¿ —„¿ —Ì¿ “¿ “?¿ “r¿ “≠¿ “Ê¿ “¿ “˙¿ ”¿ ”%¿ ”L¿ ”s¿ ”{¿ ”ù¿ ”…¿ ”˙¿ ‘3¿ ‘j¿ ‘r¿ ‘x¿ ‘|¿ ‘}¿ ‘µ¿ ‘˚¿ ’¿ ’ ¿ ’A¿ ’]¿ ’z¿ ’ò¿ ’µ¿ ’”¿ ’Í¿ ’¿ ÷V¿ ÷k¿ ÷q¿ ÷u¿ ÷v¿ ÷µ¿ ÷‚¿ ÷Ë¿ ◊¿ ◊*¿ ◊A¿ ◊f¿ ◊ë¿ ◊≠¿ ◊ª¿ ◊¡¿ ◊Ÿ¿ ◊Ú¿ ÿ¿ ÿ¿ ÿ¿ ÿG¿ ÿy¿ ÿé¿ ÿ°¿ ÿ≠¿ ÿÀ¿ ÿœ¿ ÿ–¿ Ÿ¿ Ÿ¿ Ÿi¿ Ÿé¿ Ÿ∂¿ Ÿ√¿ ŸÎ¿ ⁄¿ ⁄:¿ ⁄t¿ ⁄µ¿ ⁄¯¿ €5¿ €c¿ €å¿ €Ω¿ €Î¿ €Ù¿ €˙¿ ‹¿ ‹8¿ ‹O¿ ‹X¿ ‹_¿ ‹c¿ ‹d¿ ‹ï¿ ‹Æ¿ ‹˚¿ ›Y¿ ›â¿ ›±¿ ›æ¿ ›Ê¿ ﬁ¿ ﬁ1¿ ﬁk¿ ﬁ™¿ ﬁÎ¿ ﬂ&¿ ﬂT¿ ﬂ{¿ ﬂ™¿ ﬂÿ¿ ﬂ·¿ ﬂÁ¿ ‡¿ ‡%¿ ‡<¿ ‡E¿ ‡L¿ ‡P¿ ‡Q¿ ‡É¿ ‡≤¿ ‡◊¿ ‡˝¿ ·¿ ·k¿ ·l¿ ·ª¿ ·º¿ ·Ï¿ ‚¿ ‚`¿ ‚g¿ ‚h¿ ‚Ã¿ ‚È¿ ‚Í¿ „?¿ „i¿ „ç¿ „≠¿ ‰¿ ‰¿ ‰&¿ ‰2¿ ‰n¿ ‰´¿ ‰≤¿ ‰≥¿ ‰ÿ¿ ‰˙¿ Â¿ ÂC¿ ÂY¿ ÂÉ¿ Âµ¿ Â ¿ ÂÂ¿ Ê¿ Ê¿ Ê:¿ ÊZ¿ Êw¿ Êî¿ Ê°¿ Ê¨¿ Êµ¿ Êº¿ Ê¿¿ Ê¡¿ Á¿ ÁQ¿ Áp¿ Áv¿ Á≈¿ Ë¿ Ë)¿ Ë/¿ Ëq¿ ËÜ¿ Ëº¿ ËÒ¿ Ëˇ¿ È¿ È¿ È0¿ È4¿ È6¿ È7¿ ÈÉ¿ È“¿ Í¿ ÍL¿ Íô¿ Í¿¿ Í¯¿ Î¿ Î0¿ ÎM¿ Îg¿ ÎÄ¿ ÎÜ¿ Îá¿ Îù¿ Î¥¿ Î—¿ Î¸¿ Î˝¿ Ï	¿ Ï]¿ Ï_¿ Ï`¿ Ï“¿ Ï˙¿ Ì0¿ Ì1¿ Ì=¿ ÌR¿ Ìi¿ Ìj¿ Ì«¿ Ì»¿ ÌÈ¿ Ó(¿ Ó,¿ Ó-¿ Ó9¿ Óv¿ Óú¿ Ó—¿ Óﬂ¿ ÓÂ¿ Ô*¿ ÔK¿ Ôä¿ Ôé¿ Ôè¿ Ôõ¿ ÔÆ¿ Ô¿ ¿  ¿ $¿ %¿ J¿ v¿ ì¿ †¿ Ω¿ √¿ «¿ »¿ ‘¿ ˚¿ Ò¿ Ò7¿ Òo¿ Òé¿ Ò´¿ ÒŸ¿ Ò˝¿ Ú"¿ ÚE¿ Úf¿ Ús¿ Ú~¿ Úá¿ Úé¿ Úí¿ Úî¿ Úï¿ Ú’¿ Û¿ Û,¿ ÛN¿ Ûf¿ Ûâ¿ Û´¿ Û–¿ Ûˆ¿ Ù¿ Ù>¿ ÙS¿ Ùz¿ Ù∞¿ Ù∂¿ Ù∑¿ Ù⁄¿ ı	¿ ıM¿ ıì¿ ı”¿ ˆ¿ ˆ/¿ ˆS¿ ˆy¿ ˆ¶¿ ˆß¿ ˆ≥¿ ˜¿ ˜¿ ˜¿ ˜x¿ ˜†¿ ˜÷¿ ˜◊¿ ˜„¿ ˜¯¿ ¯¿ ¯¿ ¯m¿ ¯n¿ ¯é¿ ¯Ã¿ ¯–¿ ¯—¿ ¯ı¿ ˘!¿ ˘>¿ ˘K¿ ˘h¿ ˘n¿ ˘r¿ ˘s¿ ˘¿ ˘ª¿ ˘·¿ ˙%¿ ˙E¿ ˙É¿ ˙á¿ ˙à¿ ˙î¿ ˙ß¿ ˙Ë¿ ˚¿ ˚¿ ˚¿ ˚¿ ˚)¿ ˚P¿ ˚ö¿ ˚≠¿ ˚œ¿ ˚÷¿ ¸¿ ¸<¿ ¸C¿ ¸D¿ ¸o¿ ¸á¿ ¸ü¿ ¸∑¿ ¸–¿ ¸◊¿ ¸ÿ¿ ˝%¿ ˝b¿ ˝∫¿ ˝¡¿ ˝˘¿ ˛<¿ ˛Å¿ ˛ƒ¿ ˇ	¿ ˇ¿ ˇ¿ ˇ9¿ ˇ]¿ ˇÑ¿ ˇ£¿ ˇ¿¿ ˇ€¿ ˇı¿ ¿ E¿ o¿ î¿ «¿ ˇ¿_¿ã¿Ø¿˝¿6¿c¿ë¿¿¿’¿Ë¿¿5¿x¿∫¿˛¿=¿P¿a¿p¿å¿¥¿ÿ¿˙¿ ¿H¿Y¿î¿≠¿ ¿ˆ¿&¿7¿F¿S¿^¿g¿n¿r¿t¿u¿ª¿ø¿¿I¿~¿»¿¿a¿á¿ã¿ô¿ù¿Ì¿	;¿	N¿	ã¿	¡¿
¿
N¿
O¿
ç¿
´¿
¨¿
Ê¿¿¿¿M¿Q¿ó¿Ë¿1¿Ä¿Õ¿Ë¿Ï¿:¿j¿n¿≠¿˝¿J¿ò¿∂¿∫¿»¿Ã¿¿D¿à¿∆¿Ú¿)¿Q¿m¿s¿t¿∑¿Ω¿¿]¿ô¿ü¿„¿˘¿¿D¿E¿î¿Ø¿Û¿¿;¿Z¿é¿±¿“¿Û¿¿¿ ¿!¿r¿°¿∆¿È¿¿.¿Q¿r¿ì¿∂¿º¿¿¿¡¿¿3¿t¿†¿¥¿∫¿ª¿¿9¿@¿A¿É¿ƒ¿»¿…¿¿M¿j¿~¿Ñ¿Ö¿∂¿Ê¿Í¿Î¿0¿o¿å¿†¿¶¿ß¿Ÿ¿
¿¿¿@¿è¿≤¿∆¿Ã¿Õ¿!¿"¿Z¿ë¿ï¿ñ¿Œ¿”¿#¿i¿n¿Ω¿Á¿Ï¿˚¿ ¿N¿a¿«¿¿¿V¿¶¿ƒ¿¿C¿¿œ¿˙¿ ¿ ¿ /¿ ]¿ ¿ à¿ ï¿ ú¿ †¿ °¿ Ÿ¿ ﬁ¿!¿!¿!%¿!*¿!y¿!ë¿!◊¿"¿"¿"f¿"•¿"·¿#¿#¿#¿#A¿#o¿#ë¿#ö¿#ß¿#Æ¿#≤¿#≥¿#‡¿#Ê¿$7¿$Ü¿$ñ¿$‹¿%¿%¿%U¿%{¿%à¿%ÿ¿%Ÿ¿&#¿&S¿&`¿&§¿&•¿&ı¿'1¿'Q¿'R¿'ñ¿'≈¿'Ï¿'Ì¿(>¿(g¿(h¿(á¿(¥¿(Ï¿(ˇ¿)K¿)n¿)|¿)ß¿)´¿)¨¿)˘¿*B¿*q¿*ó¿*ò¿*Ë¿+4¿+`¿+e¿+µ¿,¿,.¿,U¿,V¿,™¿,Û¿,¯¿-N¿-ù¿-ÿ¿.¿.¿.I¿.O¿._¿.e¿.≤¿.≈¿.“¿.Ì¿/0¿/ô¿/Æ¿/≤¿/≥¿/ı¿/˚¿0¿0¿0^¿0q¿0~¿0ô¿0∂¿0∫¿0ª¿0˜¿0˝¿1N¿1©¿1Ø¿1ø¿1≈¿2¿2#¿2R¿2x¿2Ü¿2å¿2‡¿35¿3ä¿3‡¿43¿4p¿4 ¿5¿5l¿5í¿5ﬁ¿6¿6a¿6©¿6·¿7¿79¿7d¿7e¿7ª¿7Á¿8M¿8r¿8ï¿8∏¿8˜¿9 ¿9?¿9~¿9ç¿9Æ¿9“¿:#¿:B¿:e¿:¨¿:¡¿:˚¿;¿;;¿;b¿;}¿;ä¿;ú¿;¶¿;Û¿<D¿<è¿<¨¿<ı¿=¿=9¿=]¿=Ä¿=œ¿=·¿=Î¿>4¿>:¿>>¿>?¿>É¿>â¿>”¿>Ú¿>¯¿?<¿?B¿?R¿?X¿?ß¿?∫¿?«¿?˝¿@%¿@M¿@r¿@õ¿@¡¿@Ú¿@˚¿A¿A¿A¿AH¿AN¿Aü¿A¡¿A«¿B¿B¿B!¿B'¿Bt¿Bá¿Bî¿B»¿B¿C¿C;¿Cj¿Cq¿Có¿Cπ¿Cø¿C√¿Cƒ¿D¿D
¿DJ¿DP¿D`¿Df¿D¨¿Dƒ¿D—¿E¿E'¿E¿E≠¿F¿F<¿F_¿FÇ¿Fß¿F∏¿F¸¿G!¿GF¿Gó¿G´¿G∑¿H¿H=¿Hb¿Há¿Hÿ¿HÏ¿H¯¿IC¿Id¿Iâ¿Iÿ¿Iˇ¿JH¿J_¿Jõ¿Jπ¿Jﬂ¿K¿K%¿K4¿KH¿KT¿Kv¿K†¿KÕ¿K¯¿L+¿LÉ¿L∆¿M¿MZ¿M©¿M”¿Mˇ¿Np¿N·¿O(¿O9¿Oß¿P¿Pê¿PÈ¿P˙¿Qt¿Q¢¿Q≥¿R5¿R∂¿S¿Sâ¿Sı¿TW¿T€¿T‹¿U¿U\¿U∞¿UÛ¿V¿VA¿VS¿WI¿W|¿Wì¿W‰¿XS¿Xà¿X°¿X‘¿XÊ¿Xˆ¿Y¿Y
¿Y¿Y¿Y¿YY¿Y_¿Y™¿Y∞¿Y¿¿Y∆¿Z¿Z(¿Z5¿Zä¿Zã¿Z“¿Zÿ¿['¿[9¿[?¿[O¿[U¿[¢¿[∫¿[«¿\¿\)¿\P¿\q¿\î¿\æ¿\¿]?¿]R¿]¿]´¿]·¿]¿]¸¿^!¿^F¿^i¿^é¿^€¿^„¿^‰¿_'¿_(¿_g¿_ó¿_ù¿_°¿_¢¿_Ó¿_Ù¿`B¿`^¿`d¿`t¿`z¿`√¿`‰¿`Ò¿a8¿a]¿a©¿aÍ¿b;¿bç¿bª¿b»¿b˙¿c¿c¿c+¿cL¿co¿cû¿cÕ¿d8¿db¿dò¿dß¿d∫¿dÁ¿e¿eI¿eX¿ed¿eâ¿eÆ¿e—¿eˆ¿f#¿få¿f¥¿fË¿fı¿f˝¿f˛¿gA¿gG¿gK¿gL¿gë¿gó¿g»¿gŒ¿gﬁ¿g‰¿h4¿hG¿hT¿hç¿h∏¿hﬁ¿i ¿i¿i1¿iU¿iw¿i{¿i|¿iΩ¿i√¿j	¿j¿j0¿jV¿jd¿jj¿jè¿jÆ¿jœ¿k¿kb¿kl¿kñ¿kº¿k‚¿kÏ¿l¿l2¿lS¿lv¿lû¿lÈ¿lÛ¿m¿m¿m#¿m$¿mi¿mo¿m¿mÖ¿m’¿mË¿n)¿n6¿nj¿næ¿o¿oh¿oæ¿p¿pN¿p±¿pŸ¿p›¿pﬁ¿q ¿q&¿qq¿q®¿qÆ¿qæ¿qƒ¿r¿r$¿r1¿rf¿rã¿r‘¿r¸¿s ¿s(¿s.¿s2¿s3¿sÑ¿sõ¿sˇ¿ta¿t¬¿t∆¿t«¿u¿u*¿uâ¿uÕ¿v)¿v-¿v.¿v|¿v≈¿w¿w7¿wà¿w∂¿xX¿x–¿x˛¿y¿y¿yP¿yp¿yu¿yƒ¿yﬁ¿y„¿z,¿zd¿zÏ¿{<¿{â¿{∏¿{œ¿|¿|:¿|N¿|É¿|“¿|”¿}¿}i¿}∫¿}ª¿}Ë¿~/¿~<¿~C¿~G¿~H¿~ä¿~ê¿~º¿	¿3¿9¿I¿O¿ú¿Ø¿º¿Ò¿Ä¿Ä%¿Ä+¿ÄS¿Äå¿Äô¿Ä¿¿ÄÂ¿Å
¿Å+¿ÅN¿Ås¿Å◊¿Å˙¿ÇY¿Ça¿Çg¿Çç¿ÇØ¿Çµ¿Çπ¿Ç∫¿É¿É¿ÉL¿ÉR¿Éb¿Éh¿Éµ¿ÉÕ¿É⁄¿Ñ¿Ñ;¿ÑI¿ÑO¿ÑÅ¿Ñ∞¿ÑŸ¿Ö¿Ö¿Ö9¿Ög¿Ö§¿Ü¿Ü¿Ü|¿ÜΩ¿ÜÀ¿Ü—¿Ü“¿á6¿á]¿á~¿á°¿áÒ¿à¿à;¿à^¿àÉ¿à”¿à€¿àË¿â¿â0¿âR¿â|¿â©¿âÿ¿ä¿ä9¿äJ¿äu¿ä®¿ä“¿ä˛¿ãL¿ãû¿ã€¿å*¿å[¿åã¿å¿¿å”¿ç ¿ç0¿çG¿çS¿çx¿çù¿çø¿çÈ¿é¿éE¿és¿é¶¿é∑¿é‚¿è¿è?¿èk¿è≤¿èÙ¿ê!¿êR¿êÇ¿ê∑¿ê ¿ë¿ë'¿ë>¿ëJ¿ëm¿ëê¿ëµ¿ë‡¿í
¿í9¿íF¿íN¿íT¿íX¿íY¿í°¿íß¿íı¿ì¿ì¿ì"¿ì(¿ìv¿ìØ¿ìº¿ì˘¿î¿î-¿î3¿î4¿îP¿îú¿î›¿ï.¿ïÄ¿ïÆ¿ïª¿ïÌ¿ïˆ¿ñV¿ñW¿ñu¿ñË¿ó¿ó`¿óÜ¿ó≥¿óæ¿óø¿óﬂ¿ò¿ò9¿òa¿òã¿ò€¿ô¿ô.¿ôC¿ôW¿ôa¿ôi¿ôj¿ôí¿ö¿ö.¿öU¿ö|¿öü¿ö√¿öÔ¿õ¿õO¿õ§¿õ“¿ú¿ú¿úG¿ú|¿ú®¿ú÷¿úÔ¿ùB¿ùÄ¿ùó¿ù•¿ùπ¿ùﬁ¿û¿ûW¿ûÅ¿û≤¿û¡¿ûË¿ü¿ü:¿üã¿üµ¿üÊ¿üı¿üˇ¿†¿†¿†/¿†P¿†´¿°¿°Z¿°g¿°ƒ¿°ˆ¿¢¿¢B¿¢o¿¢•¿¢¯¿£$¿£W¿£h¿£ì¿£∆¿£¿§¿§Y¿§É¿§π¿§Ì¿§ˇ¿•0¿•`¿•ï¿•®¿•¸¿¶¿¶#¿¶8¿¶D¿¶V¿¶{¿¶†¿¶Ú¿ßU¿ßù¿ßø¿ßÈ¿®¿®A¿®t¿®™¿®˝¿©)¿©\¿©m¿©ó¿©√¿©¿™!¿™Q¿™Ü¿™ô¿™Ì¿™˝¿´¿´)¿´5¿´G¿´j¿´ç¿´≤¿´‰¿¨3¿¨[¿¨ä¿¨ó¿¨ü¿¨•¿¨¶¿¨œ¿≠¿≠H¿≠õ¿≠°¿≠¢¿≠Ó¿Æ ¿ÆM¿Æ≠¿Æ›¿Ø*¿Øe¿Ø£¿Ø‚¿∞3¿∞b¿∞í¿∞∂¿∞Ò¿±¿±+¿±6¿±Z¿±c¿±~¿±æ¿≤¿≤3¿≤c¿≤á¿≤¿¿≤Ì¿≤˙¿≥¿≥)¿≥2¿≥?¿≥ã¿≥ë¿≥ï¿≥ñ¿≥€¿≥·¿¥$¿¥>¿¥D¿¥T¿¥Z¿¥™¿¥Ω¿¥ ¿µ¿µ+¿µ,¿µº¿µﬁ¿µ‰¿µÂ¿∂ ¿∂"¿∂(¿∂)¿∂T¿∂X¿∂Y¿∂•¿∂≈¿∂À¿∑¿∑M¿∑í¿∑≤¿∑¿¿∑ﬂ¿∑˙¿∏¿∏*¿∏:¿∏b¿∏ä¿∏¶¿∏ˆ¿πB¿πh¿πñ¿π∫¿πÊ¿∫¿∫T¿∫Ç¿∫™¿∫“¿ª¿ª8¿ªf¿ªÄ¿ªî¿ªõ¿ªü¿ª°¿ª¢¿ªÙ¿ª¯¿ºC¿ºí¿º·¿ºˆ¿º˙¿Ω¿Ω¿ΩX¿Ω§¿Ωµ¿ΩÒ¿æ ¿æ&¿æp¿æó¿æ¶¿æ¿¿æ⁄¿æÓ¿ø
¿ø$¿ø=¿øZ¿ør¿øé¿ø≠¿ø—¿øÓ¿¿¿¿"¿¿A¿¿a¿¿~¿¿ë¿¿™¿¿∞¿¿±¿¡¿¡=¿¡>¿¡£¿¡ ¿¡À¿¬¿¬e¿¬ö¿¬…¿¬ ¿√¿√c¿√û¿√ü¿√¿ƒ¿ƒD¿ƒE¿ƒÉ¿ƒØ¿ƒ∞¿ƒÛ¿≈'¿≈(¿≈y¿≈å¿≈í¿≈Ÿ¿∆'¿∆Ä¿∆±¿∆≤¿«¿«N¿«Ç¿«¥¿«µ¿«˘¿»@¿»~¿»ª¿»º¿…¿…J¿…K¿…ë¿… ¿…À¿ ¿ Z¿ è¿ ê¿ ﬁ¿À ¿ÀU¿ÀV¿Àê¿ÀÀ¿ÀÃ¿Ã¿ÃB¿ÃC¿Ãá¿Ãæ¿Ãø¿Õ¿Õ¿Õ>¿Õa¿Õb¿ÕÅ¿Õó¿Õò¿Õ§¿ÕÛ¿Õı¿Õˆ¿ŒM¿ŒN¿Œû¿Œ¿œB¿œ`¿œe¿œ∑¿œÀ¿–	¿–.¿–Q¿–t¿–ï¿–„¿—4¿—Å¿——¿“¿“O¿“°¿“¿¿“·¿”1¿”Ä¿”—¿”„¿‘	¿‘,¿‘{¿‘ ¿’¿’f¿’ò¿’”¿’Ÿ¿’›¿’ﬁ¿’˛¿÷"¿÷&¿÷'¿÷G¿÷k¿÷o¿÷p¿÷¡¿÷Á¿◊¿◊@¿◊ç¿◊‡¿ÿ/¿ÿ]¿ÿ´¿ÿﬂ¿ÿÂ¿ÿÊ¿Ÿ4¿Ÿh¿Ÿn¿Ÿr¿Ÿs¿Ÿ£¿ŸÒ¿⁄¿⁄"¿⁄&¿⁄'¿⁄C¿⁄i¿⁄m¿⁄n¿⁄•¿⁄’¿⁄Ÿ¿⁄⁄¿€¿€D¿€H¿€I¿€|¿€™¿€Æ¿€Ø¿€Ê¿‹¿‹¿‹¿‹M¿‹x¿‹|¿‹}¿‹ª¿‹Í¿›¿›¿›!¿›"¿›j¿›û¿›–¿›÷¿›⁄¿›€¿ﬁ¿ﬁB¿ﬁm¿ﬁs¿ﬁw¿ﬁx¿ﬁÑ¿ﬁ´¿ﬂ¿ﬂ	¿ﬂj¿ﬂû¿ﬂ∆¿ﬂ◊¿‡
¿‡F¿‡O¿‡V¿‡W¿‡Ü¿‡∫¿‡Á¿·V¿·‘¿‚¿‚¿‚N¿‚è¿‚√¿‚Œ¿‚◊¿‚›¿‚ﬁ¿„¿„=¿„j¿„ë¿„∂¿„€¿„¸¿‰Ö¿‰–¿Â¿Â&¿Â|¿Âõ¿Âÿ¿Ê¿ÊJ¿Êw¿Ê®¿Ê€¿Á¿Á1¿Á`¿Áo¿Á|¿Áü¿Á¬¿ÁÁ¿ËZ¿Ëö¿ËŒ¿ËÂ¿È;¿ÈZ¿Èó¿È–¿Í	¿Í6¿Íg¿Íö¿Í«¿Í¿Î¿Î.¿Î;¿ÎC¿ÎI¿ÎJ¿Îò¿Ï	¿ÏF¿Ïw¿Ïä¿Ïﬂ¿Ì/¿Ì:¿ÌC¿ÌI¿ÌJ¿Ìi¿ÌÉ¿Ì•¿Ì∆¿Ì·¿ÌË¿ÌÏ¿ÌÓ¿ÌÔ¿Ó=¿Ó^¿Ób¿Ó©¿ÓÌ¿Ô8¿Ôõ¿Ô«¿Ô„¿¿-¿.¿H¿I¿É¿£¿∏¿∆¿Ã¿Õ¿Ë¿Ú¿Ò#¿ÒD¿Òx¿Òñ¿Ò¨¿Òœ¿Ú!¿Ú+¿Úu¿Ú±¿Ú»¿Úÿ¿Ú‡¿Û¿Û¿Û¿ÛM¿Ûq¿Ûô¿Ûö¿ÛØ¿ÛΩ¿Û√¿Û€¿Ûﬂ¿Û‡¿ÛÏ¿Ù¿Ù1¿Ùb¿Ùh¿Ùî¿Ù§¿Ù™¿ÙÀ¿Ùœ¿Ù–¿Ù‹¿ı¿ı/¿ıV¿ıä¿ıê¿ıî¿ıï¿ı°¿ıﬁ¿ıÛ¿ˆ¿ˆ+¿ˆR¿ˆy¿ˆû¿ˆ√¿ˆ›¿ˆÏ¿ˆÚ¿ˆˆ¿ˆ˜¿˜¿˜¿˜H¿˜^¿˜s¿˜w¿˜y¿˜z¿˜√¿˜⁄¿¯)¿¯6¿¯7¿¯Ö¿¯“¿˘¿˘!¿˘"¿˘q¿˘Å¿˘É¿˘Ñ¿˘‰¿˘¯¿˘¸¿˙
¿˙X¿˙º¿˙Ô¿˙Û¿˚1¿˚ú¿˚«¿˚Á¿¸$¿¸9¿¸:¿¸T¿¸U¿¸ô¿¸π¿¸Œ¿¸‹¿¸‚¿¸„¿˝
¿˝¿˝^¿˝¿˝≥¿˝—¿˝Á¿˛
¿˛c¿˛m¿˛∑¿˛Û¿ˇ2¿ˇB¿ˇJ¿ˇu¿ˇÉ¿ˇâ¿ˇä¿ˇÃ¿ˇÚ¿ ¿ ¿ G¿ U¿ [¿ s¿ w¿ x¿ Ñ¿ ∞¿ …¿ ˙¿ ¿0¿@¿F¿g¿k¿l¿x¿ß¿À¿Ú¿&¿,¿0¿1¿=¿z¿è¿µ¿«¿Ó¿¿:¿_¿w¿}¿Å¿Ç¿é¿°¿”¿È¿˛¿¿¿¿d¿h¿v¿ƒ¿ﬂ¿¿ ¿!¿Ñ¿‰¿"¿-¿.¿h¿t¿v¿w¿≈¿¿L¿ù¿’¿¿¿5¿O¿n¿â¿ß¿œ¿Û¿	*¿	T¿	t¿	u¿	Å¿	π¿	∫¿	∆¿	ˇ¿
 ¿
¿
F¿
G¿
S¿
ë¿
í¿
û¿
˛¿
ˇ¿¿l¿m¿y¿Ω¿æ¿ ¿¿    Ä•  Ä∫Ä— Ä◊  Å  Å.  ÅV  Å  Å®  Å—  ÅÊ  Å˝  Ç  Ç/  ÇV  Çk  Çà  Ç°  Ç¡  Ç⁄  ÇÒ  É  É%  ÉD  É`ÉàÉüÉ°É»É‚ ÖkÇóÜÜÅ/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  ÜÀÄﬂáóÄæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.á• áØQá¬   áØá∞ àûDçåÖx/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Parts of this class, including [buildToolbar], have been deprecated in favor
/// of [EditableText.contextMenuBuilder], which is now the preferred way to
/// customize the context menus.
///
/// ## Use with [EditableText.contextMenuBuilder]
///
/// For backwards compatibility during the deprecation period, when
/// [EditableText.selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [EditableText.contextMenuBuilder] is ignored
/// in favor of the deprecated [buildToolbar].
///
/// To migrate code from [buildToolbar] to the preferred
/// [EditableText.contextMenuBuilder], while still using [buildHandle], mix in
/// [TextSelectionHandleControls] into the [TextSelectionControls] subclass when
/// moving any toolbar code to a callback passed to
/// [EditableText.contextMenuBuilder].
///
/// In due course, [buildToolbar] will be removed, and the mixin will no longer
/// be necessary as a way to flag to the framework that the code has been
/// migrated and does not expect [buildToolbar] to be called.
///
/// For more information, see <https://docs.flutter.dev/release/breaking-changes/context-menus>.
///
/// See also:
///
///  * [SelectionArea], which selects appropriate text selection controls
///    based on the current platform.    ç¶Ç<ètÅ¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. èÄèé  èñèØ  è¥èº  èÃè€   èÊÅê∫Ä∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. ê ê„  êËê   ëÉ˚ìÕÇ3/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// The [globalEditableRegion] parameter is the TextField size of the global
/// coordinate system in logical pixels.
///
/// The [textLineHeight] parameter is the [RenderEditable.preferredLineHeight]
/// of the [RenderEditable] we are building a toolbar for.
///
/// The [selectionMidpoint] parameter is a general calculation midpoint
/// parameter of the toolbar. More detailed position information
/// is computable from the [endpoints] parameter. ìﬂìÌ  ì˘ìˇ  îî   î3î;  îQ"îk  îyîê  îù1î¿  î‘$î›  ìQìRì\ì¬ìbìãïZï7-/// Returns the size of the selection handle. ïEïM   ï`ÇcóCÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. óJóa  ñ…ñ ñ‘ó:ñ⁄óó«Ç>ôÉÅ3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ôãô¢  ô	ô
ôôzôôCö	ÇRúÅu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. úú+  õëõíõúúõ¢õÀú_ÇIùÅ
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ù˝û  ùvùwùÅùÁùáù∞û¨Åêü”Ä§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. ü›üÙ  üYüZüdü üjüì†@Åï°jÄß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. °u°å  ††Ò†˚°a°°*°ŸÇÄ£ÎÅ>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. £˜§  £i£j£t£⁄£z££§]ÅÈ•⁄ÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. •Í¶  •`•a•k•—•q•ö ¶JÖL®äÇ9/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [MaterialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].
///
/// The [emptyTextSelectionControls] global variable has a
/// suitable instance of this class.    ®«C®ÿ  ®Ê®Ó  ®«®»©Å_©!  ©3©A  ©M©S  ©l©t  ©á©è  ©•"©ø  ©Õ©‰  ©Ò1™  ™($™1  ©©™qÄ™™Ñ  ™ê™û  ™¶™ø  ™ƒ™Ã  ™‹™Î  ™q™r´u´2  ´B´[  ´`´h  ´´  ≠«¿ X)Æ„Å/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. Æ¸âØ ØâØùÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.Ø§Øø  Ø…Øÿ  Ø‰ØÌ  ∞#∞  ∞+'∞?  ∞X%∞l  ∞É∞í  ∞£∞©  ∞ø∞≈  ∞‡∞Ô  ±=±  ±H%±W  ±s(±ç  ±°±ß  ±æ:±„  
∞’±+±<±=≤≤≤≤1≤*≤3∏ØÅ9π·Å/// {@template flutter.widgets.SelectionOverlay.context}
/// The context in which the selection UI should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay].
/// {@endtemplate} ∫Åh∫›D/// The editable line in which the selected text is being displayed. ∫ÓpªM?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} ªcoª¡?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} ª◊-ªÛ  º	Ä¢ºôt/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, no context menu will be built. ΩΩ  Ω]VΩw ΩôΩ¶Ω´ΩßΩ¨Ω≤Ω≠Ω∑TΩ— ΩÒΩ˛æΩˇææ
ææRæ) æGæTæYæUæZæ`æ[¿ @Ù¿ @˘ ¿ A¿ e<"¿ eH  ¿ e»0¿ e‘  ¿ tÓ$¿ t˙  ¿ u~2¿ uä  º∞Xº¯/// Retrieve current value.  ºŒºœΩ(1Ω:    øÙÄ˝¿ @œÄ≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ¿ AÄÆ¿ A  ¿ A'¿ A-   ¿ RÁÄÑ¿ S!./// Whether the handles are currently visible.   ¿ SoÅ¿ TKÄ∆/// {@macro flutter.widgets.SelectionOverlay.toolbarIsVisible}
///
/// See also:
///
///   * [spellCheckToolbarIsVisible], which is only whether the spell check menu
///     specifically is visible.   ¿ TÜ~¿ T¡//// Whether the magnifier is currently visible.   ¿ UÄ˙¿ U≠Äë/// Whether the spell check menu is currently visible.
///
/// See also:
///
///   * [toolbarIsVisible], which is whether any toolbar is visible.   æfÅäæk    ¿ A∆Äò¿ B9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   ¿ Bbr¿ B£9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   ¿ BÿÅ¡¿ C9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   ¿ DùÅ¿¿ Ep/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ E=1¿ EL   ¿ FaÅ®¿ F§;/// {@macro flutter.widgets.SelectionOverlay.showMagnifier} ¿ F≤¿ F∫   ¿ HÅÆ¿ HR=/// {@macro flutter.widgets.SelectionOverlay.updateMagnifier} ¿ Hb¿ Hj   ¿ Iø¿ J;/// {@macro flutter.widgets.SelectionOverlay.hideMagnifier}   ¿ JBÉ˝¿ LéÇ4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). ¿ Lï¿ Lß   ¿ NCÇ√¿ NH    ¿ Q
ÅŸ¿ Q—Äπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ¿ V]¿ V@2/// {@macro flutter.widgets.SelectionOverlay.hide}   ¿ Vgr¿ V®9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   ¿ V›ÅÀ¿ W5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ X¨Ñq¿ X≥    ¿ ]!ÇÆ¿ ](    ¿ _”ÑÙ¿ _·  ¿ _˜&¿ `  ¿ `#%¿ `4  ¿ `N)¿ `e   ¿ e˝Éæ¿ f  ¿ f%¿ f7   ¿ iøÉ¿ kaÅå/// Given a handle position and drag position, returns the position of handle
/// after the drag.
///
/// The handle jumps instantly between lines when the drag reaches a full
/// line's height away from the original handle position. In other words, the
/// line jump happens when the contact point would be located at the same
/// place on the handle at the new line as when the gesture started. ¿ kn¿ kv  ¿ k}¿ kÖ   ¿ lÀá¨¿ l–  ¿ lÙ¿ m   ¿ uµÉÀ¿ u∫  ¿ uﬂ¿ uÒ   ¿ yÑà¿ yâ  ¿ yØ¿ y¬   ¿ ÅêÅ¸¿ Åï  ¿ Åß¿ Å∑   ¿ ÉêÄœ¿ Éï  ¿ É≥¿ É¬   ¿ ÑcÅã¿ Ñ{  ¿ Ñé¿ Ñù  ¿ Ñ±¿ Ñ   ¿ Ñÿ¿ ÑÒ    ¿ ÖÚ¿ cC¿ Ü¥Äª/// An object that manages a pair of selection handles and a toolbar.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ Ü…Ü√ ¿ áV¿ áfÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.¿ ám¿ á|  ¿ áà¿ áé  ¿ á£0¿ á≈  ¿ áŸ!¿ áÍ  ¿ à ¿ à  ¿ à¿ à$  ¿ à?¿ àE  ¿ àa¿ àg  ¿ àÄ.¿ à¢  ¿ à¥¿ à≈  ¿ àŸ¿ àﬂ  ¿ àı¿ à˚  ¿ â¿ â  ¿ â4¿ â:  ¿ âQ¿ âW  ¿ âj4¿ âç  ¿ â§¿ â≥  ¿ â…Ä≠¿ äf  ¿ ä|¿ äã  ¿ äü"¿ äÆ  ¿ ä« ¿ ä÷  ¿ äÌ¿ ä¸  ¿ ã0¿ ã  ¿ ãG¿ ãM  ¿ ãiÄ•¿ å   ¿ åA¿ å  +¿ â…¿ â ¿ â‘¿ äQ¿ â‹¿ ä¿ ã*¿ ã;¿ ã<¿ ãi¿ ãj¿ ãt¿ ãÒ¿ ã|¿ ã∏¿ å2¿ åL¿ åM¿ åo¿ å^¿ åq¿ åú¿ åâ¿ åû¿ å«¿ å∏¿ å…¿ å¿ åﬂ¿ åÚ¿ ç¿ ç
¿ ç ¿ çL¿ ç;¿ çN¿ çf¿ çl¿ çä¿ çm¿ çÅ¿ çâ¿ çÇ$¿ çêR¿ ç€5/// {@macro flutter.widgets.SelectionOverlay.context} ¿ çÁk¿ é
 	¿ é!¿ é.¿ é<¿ é/¿ é=¿ éQ¿ é>¿ éK¿ éL¿ éWÅ®¿ è”ÅY/// [MagnifierController.show] and [MagnifierController.hide] should not be called directly, except
/// from inside [showMagnifier] and [hideMagnifier]. If it is desired to show or hide the magnifier,
/// call [showMagnifier] or [hideMagnifier]. This is because the magnifier needs to orchestrate
/// with other properties in [SelectionOverlay].¿ èÍ¿ è˝¿ è˛¿ êÅ_¿ ëMÅ/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// By default, [SelectionOverlay]'s [TextMagnifierConfiguration] is disabled.
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details} ¿ õ](¿ õu  ¿ ùB¿ ùI  ¿ ù˝#¿ û ¿ û¿ û%Å&¿ ü8ÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ üPÄÑ¿ üæE/// Called when the users start dragging the start selection handles. ¿ £Äç¿ £áL/// Called when the users drag the start selection handles to new locations. ¿ ££Äô¿ §(\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ ¶Z&¿ ¶r  ¿ ®/¿ ®6  ¿ ®‚!¿ ®Á ¿ ®˛¿ ©Å¿ ™Ä„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ ™+ÄÄ¿ ™óC/// Called when the users start dragging the end selection handles. ¿ ≠ÿÄâ¿ ÆLJ/// Called when the users drag the end selection handles to new locations. ¿ ÆfÄï¿ ÆÈZ/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ ∞WÅ¿ ±PÄœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ ±Ï,¿ ≤  ¿ ¥gh¿ ¥øG/// Debugging information for explaining why the [Overlay] is required. ¿ ¥‘~¿ µBY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ µWÄõ¿ µﬁr/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ µ˜Äó¿ ∂|p/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ ∂ìÄπ¿ ∑;ÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ ∑QÅW¿ ∏óÄ´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate}¿ ∏¿ ∏¿ ∏¿ ∏v¿ ∏¿ ∏?¿ ∏≠É	¿ ª•Çø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ ªªÉh¿ øÇø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ ø(Å¿ ¿0Äﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ ¬n¿ ¬v  ¿ √#Äê¿ √âM/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ √ò¿ √†¿ √≤¿ √≠¿ √°¿ √Ø¿ √∏Ä°¿ ƒQÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ ƒ^2¿ ƒà/// A copy/paste toolbar. ¿ ƒ€L¿ ƒ˜ ¿ ≈¿ ≈%¿ ≈&¿ ≈,R¿ ≈H ¿ ≈g¿ ≈|¿ ≈}¿ œ¿ œ ¿ œ)¿ ëhÅ»¿ íIÄÕ/// {@template flutter.widgets.SelectionOverlay.toolbarIsVisible}
/// Whether the toolbar is currently visible.
///
/// Includes both the text selection toolbar and the spell check menu.
/// {@endtemplate}   ¿ öõÄø¿ õ6x/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ õâÄ•¿ õç  ¿ õù¿ õ∂   ¿ ú2Å¿ ùÄœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ù_Äö¿ ùc  ¿ ùu¿ ù}   ¿ •ûÄπ¿ ¶7v/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ¶ÑÄü¿ ¶à  ¿ ¶ñ¿ ¶Ø   ¿ ß'Å¿ ®ÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ®JÄî¿ ®N  ¿ ®^¿ ®f   ¿ ±cÄÜ¿ ±ø</// The text selection positions of selection start and end.   ¿ ≤ÇG¿ ≤   ¿ ≤3¿ ≤M   ¿ ¿DÇ'¿ ¬GÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndpoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.  ¿ ¡ß¿ ¡®¿ ¡≤¿ ¬7¿ ¡∏¿ ¬ ¿ ¬äÄï¿ ¬é  ¿ ¬û¿ ¬ß   ¿ ì4Öe¿ ï`Ç/// {@template flutter.widgets.SelectionOverlay.showMagnifier}
/// Shows the magnifier, and hides the toolbar if it was showing when [showMagnifier]
/// was called. This is safe to call on platforms not mobile, since
/// a magnifierBuilder will not be provided, or the magnifierBuilder will return null
/// on platforms not mobile.
///
/// This is NOT the source of truth for if the magnifier is up or not,
/// since magnifiers may hide themselves. If this info is needed, check
/// [MagnifierController.shown].
/// {@endtemplate} ¿ ïn"¿ ï}   ¿ òùÅ˙¿ ôRÄ•/// {@template flutter.widgets.SelectionOverlay.hideMagnifier}
/// Hide the current magnifier.
///
/// This does nothing if there is no magnifier.
/// {@endtemplate}   ¿ üŸÅÃ¿ üﬁ  ¿ ü˙¿ †   ¿ °©Åd¿ °Æ  ¿ °À¿ °ﬁ   ¿ §AÅY¿ §F  ¿ §`¿ §p   ¿ ™∞Å¬¿ ™µ  ¿ ™œ¿ ™·   ¿ ¨vÅ^¿ ¨{  ¿ ¨ñ¿ ¨©   ¿ Ø ÅS¿ Ø  ¿ Ø¿ Ø-   ¿ ≈ÉÅœ¿ ∆%Äñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ «VÅU¿ «ÈÄá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ »ØÉ¬¿ …NÄì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate} ¿ …`¿ …o  ¿ …{!¿ …ã   ¿ ÃuÇô¿ ÃÔp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ Õ¿ Õ%  ¿ Õ1¿ ÕI   ¿ œ3ÖH¿ œ}B/// Rebuilds the selection toolbar or handles if they are present.   ¿ ‘Åı¿ ’Äå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ ÷xÅí¿ ◊1Ä©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ ÿÄ¿¿ ÿï{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ ÿ“Éê¿ ÿŸ  ¿ ÿÎ¿ ÿ˘   ¿ ‹fÉÈ¿ ‹m  ¿ ‹}¿ ‹ã   ¿ ‡ÖÜ:¿ ‡å  ¿ ‡ö¿ ‡®   ¿ Ê√Çp¿ ËçÅ∞/// {@template flutter.widgets.SelectionOverlay.updateMagnifier}
/// Update the current magnifier with new selection data, so the magnifier
/// can respond accordingly.
///
/// If the magnifier is not shown, this still updates the magnifier position
/// because the magnifier may have hidden itself and is looking for a cue to reshow
/// itself.
///
/// If there is no magnifier in the overlay, this does nothing.
/// {@endtemplate} ¿ Ëù¿ Ë¨    ¿ Í¿Åû¿ Í∆  ¿ Í˙Äã ¿ Î ¿ Î ¿ Î¿ Î%  ¿ Î4¿ ÎC  ¿ ÎQ¿ Î`  ¿ Îk¿ Îz   ¿ Îâ¿ Îñ  ¿ Îü¿ Î¨  ¿ Î∂¿ Î∆  ¿ Î”'¿ Î   ¿ Îˇ]¿ Ï+   ¿ Îˇ¿ Ï  ¿ Ï`Ü3¿ Ïf   ¿ Ï‘$¿ ÏÌ  ¿ Ï¸3¿ Ì    ¿ Ì3Ä¯¿ ÌD   ¿ Ì3¿ Ì4¿ Ó/Å^¿ Ó@  ¿ ÓP"¿ Ój  ¿ Ó/¿ Ó0¿ ÔëÄí¿ Ô¢   ¿ Ôë¿ Ôí¿ 'Äü¿ ,    ¿  Å«¿ ›  ¿ „¿ Ò  ¿  ¿ À ¿ ÚïÑq¿ Ú€?/// This widget represents a single draggable selection handle. ¿ ÛÅß ¿ Û4¿ ÛK/// Create selection overlay.
¿ ÛR¿ Ûa  ¿ Ûj¿ Ûy  ¿ Ûç¿ Ûì  ¿ ÛØ¿ Ûµ  ¿ Û‘ ¿ Û⁄  ¿ Û˙¿ Ù   ¿ Ù¿ Ù,  ¿ ÙB¿ ÙH  ¿ ÙW!¿ Ùf  ¿ Ù~0¿ ÙÑ  ¿ Ùó¿ Ù®¿ Ù©
¿ Ùπ¿ Ù…  ¿ Ù‹+¿ Ù  ¿ ı@¿ ı1  ¿ ıOB¿ ıv  ¿ ıï<¿ ıπ  ¿ ı’-¿ ıÒ  ¿ ˆ'¿ ˆ#  ¿ ˆ1 ¿ ˆ>  ¿ ˆU"¿ ˆs  ¿ ˆ{)¿ ˆì   ¿ ˆ©[¿ ˆ‘   ¿ ˆ©¿ ˆ™ ¿ ˜èk¿ ˜   ¿ ˜z$¿ ˜ì  ¿ ˜¢3¿ ˜∏    ¿ ˜ŸÄˆ¿ ˜Í   ¿ ˜Ÿ¿ ˜⁄¿ ¯”Äû¿ ¯ÿ    ¿ ˘uÅ¿ ˘Ü  ¿ ˘ñ!¿ ˘Ø  ¿ ˘u¿ ˘v¿ ˙äÄë¿ ˙õ   ¿ ˙ä¿ ˙ã¿ ˚ãR¿ ˚2  ¿ ˚8¿ ˚F  ¿ ˚¿ ˚  ¿uÑè¿	]Çÿ/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by the [State] of text field
/// implementations wrapping [EditableText], so that they can use a
/// [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate
/// provides the builder with information about the current state of the text
/// field. Based on that information, the builder adds the correct gesture
/// handlers to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿	çÄ¿¿
=Ää/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿
QY¿
ò;/// Whether the text field should respond to force presses.   ¿
ÆT¿
Ò7/// Whether the user may select text in the text field.     ¿¿ ∞ö¿ÃÑø/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// A [TextSelectionGestureDetectorBuilder] must be provided a
/// [TextSelectionGestureDetectorBuilderDelegate], from which information about
/// the [EditableText] may be obtained. Typically, the [State] of the widget
/// that builds the [EditableText] implements this interface, and then passes
/// itself as the [delegate].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿Ù~ ¿+¿N4/// Creates a [TextSelectionGestureDetectorBuilder].¿U¿d   ¿vÅÃ¿:Åt/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.
///
/// Typically implemented by a [State] of a widget that builds an
/// [EditableText].¿˚¿¸¿$ﬁ'¿$„ ¿%¿&ßÄ®¿'8Äá/// Whether the Shift key was pressed when the most recent [PointerDownEvent]
/// was tracked by the [BaseTapAndDragGestureRecognizer].¿'J¿'TÄñ¿'Œn/// The viewport offset pixels of any [Scrollable] containing the
/// [RenderEditable] at the last drag start.¿'Á¿'Ôv¿(GN/// The viewport offset pixels of the [RenderEditable] at the last drag start.¿(b¿*s"¿*Ç  ¿,0#¿,6  ¿-⁄*¿-ﬂ ¿-ˇ¿√Ç¿B/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿#µÅ&¿$°Äÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿%
ÄÕ¿%†n/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿%}¿%~¿%€Ä»¿&uu/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿&U¿&V¿(jÅ@¿(u    ¿±Ån¿∂  ¿⁄¿‚   ¿tÅK¿y    ¿ÀÅ¿–  ¿Ò¿ˇ   ¿ÌÅ ¿Ú  ¿¿!   ¿ÅÉ¿G./// Returns true if position was on selection. ¿\¿d  ¿m¿}   ¿cÉ<¿h  ¿y¿Å  ¿à¿ü  ¿¶¿∂   ¿!ìÇ¿!ò  ¿!©¿!±  ¿!∏¿!œ   ¿.	Å®¿.ŸÄ±/// Handler for [TextSelectionGestureDetector.onTapTrackStart].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackStart], which triggers this
///    callback.  ¿.«¿.»¿/µÅ¿0ÖÄ±/// Handler for [TextSelectionGestureDetector.onTapTrackReset].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackReset], which triggers this
///    callback.  ¿0s¿0t¿0ΩçÄ¿2*ÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿24¿2H  ¿2¿2¿>AÇ√¿?ŒÅd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿?‡¿?Û  ¿?º¿?Ω¿AÇ∫¿BõÅj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿B´¿Bæ  ¿Bâ¿Bä¿C∆ïM¿DÿÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿DÊ¿D¯  ¿D∆¿D«¿YÅr¿Z<Å/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it services as place holder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿Z*¿Z+¿ZçÖ¿[ŒÅ/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿[„¿[˙  ¿[º¿[Ω¿_§á¶¿`¯Å//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿a"¿a.  ¿`Ê¿`Á¿gNÇ,¿h[ÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿hn¿hÉ  ¿hI¿hJ¿i~É§¿jÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿j¿j¿m&É∂¿n=Äˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿nP¿n`  ¿n+¿n,¿p‡ÇQ¿r8Å3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿rH¿r\  ¿r&¿r'¿sùÅ(¿s¢  ¿sº¿sÕ  ¿s“
¿s€  ¿sﬁ¿sˆ   ¿u,Å ¿u1  ¿uF¿uW  ¿u\
¿ue  ¿uh¿uÄ   ¿v«Ç:¿v—  ¿vÂ¿vÛ  ¿v˙¿w   ¿zfÉ‡¿zk  ¿zâ¿z†  ¿z©¿z∫  ¿zø
¿z»  ¿zÀ¿z„   ¿~JÑn¿√ÅR/// Handler for [TextSelectionGestureDetector.onTripleTapDown].
///
/// By default, it selects a paragraph if
/// [TextSelectionGestureDetectorBuilderDelegate.selectionEnabled] is true
/// and shows the toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTripleTapDown], which triggers this
///    callback. ¿”¿Á  ¿±¿≤¿Çºèõ¿É·Å/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿Éˆ¿Ñ  ¿Éœ¿É–¿í[°9¿ì√ÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿ìŸ¿ìÔ  ¿ì±¿ì≤¿≥òÇø¿¥—Å/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿¥‰¿¥˜  ¿¥ø¿¥¿¿∂[ÖC¿∑õÅ,/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain an [EditableText] whose key is
/// the [GlobalKey] provided by the [delegate]'s
/// [TextSelectionGestureDetectorBuilderDelegate.editableTextKey]. ¿∑∂¿∑º  ¿∑ƒ¿∑÷  ¿∑„¿∑Ù    ¿ª¢íR¿ΩªÇ/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// the first tap and then any subsequent taps that occurs within a time limit
/// after the first.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿ΩÛÇº ¿æx¿æîx/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.¿æõ	¿æ¢  ¿æ™¿æ∞  ¿æƒ¿æ   ¿æﬁ¿æ‰  ¿æÚ¿æ¯  ¿ø¿ø  ¿ø(¿ø.  ¿øA¿øG  ¿ø^¿ød  ¿øv¿ø|  ¿øí¿øò  ¿ø±¿ø∑  ¿ø’¿ø€  ¿øÚ¿ø¯  ¿¿¿¿  ¿¿&¿¿,  ¿¿E¿¿K  ¿¿e¿¿k  ¿¿Ç¿¿à  ¿¿ï¿¿§   ¿¿≥Äà¿¡,b/// {@macro flutter.gestures.selectionrecognizers.BaseTapAndDragGestureRecognizer.onTapTrackStart} ¿¡@Äà¿¡πb/// {@macro flutter.gestures.selectionrecognizers.BaseTapAndDragGestureRecognizer.onTapTrackReset} ¿¡ÕÄ˙¿¬æÄ»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿¬ÃÄ–¿√ãÄî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿√°Ä°¿ƒ3i/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿ƒGf¿ƒü;/// Called for a tap event with the secondary mouse button. ¿ƒ≤s¿≈@/// Called for a tap down event with the secondary mouse button. ¿≈*ÅÖ¿∆¢ÅK/// Called for the first tap in a series of taps, consecutive taps do not call
/// this method.
///
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a tap up, then a double tap down, followed by a single tap down. ¿∆¥Ä˛¿«°Ä…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿«∑Å¿»•Ä¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿»æÄä¿…/D/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿…M{¿…∂C/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿…ÕÄ¿¿ ~Ää/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿ íÄ¡¿ÀDÄã/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous double-tap. ¿ÀXq¿Àµ7/// Called when a mouse starts dragging to select text. ¿ÀŒr¿Ã+6/// Called repeatedly as a mouse moves while dragging. ¿ÃEw¿Ã™A/// Called when a mouse that was previously dragging is released. ¿Ã¡Äû¿ÕWx/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿Õd1¿Õê/// Child below this widget.  ¿ÕöX¿Õº   ¿Õö¿Õõ ¿Õˆü˜¿Õ¸     ¿œÕÜ¿œÿ  ¿œ˘¿œ˛   ¿’‡E¿’Â    ¿÷)E¿÷.    ¿÷ÈÇà¿÷Ó  ¿÷˝¿◊   ¿ŸuÄ∞¿Ÿz  ¿Ÿá¿Ÿô   ¿⁄)C¿⁄.    ¿⁄ph¿⁄u  ¿⁄Ü¿⁄õ   ¿⁄‹k¿⁄·  ¿⁄Û¿€	   ¿€Kb¿€P  ¿€_¿€r   ¿€±e¿€∂  ¿€…¿€‹   ¿‹a¿‹  ¿‹0¿‹C   ¿‹Ä°¿‹Ñ  ¿‹ö¿‹±   ¿›$Äµ¿›)  ¿›D"¿›`   ¿››Äô¿›‚  ¿›ˆ¿ﬁ   ¿ﬁzèq¿ﬁç  ¿ﬁì¿ﬁ°  ¿ﬁz¿ﬁ{ ¿ÌÔââ¿Ô>ÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿ÔùÄè ¿Ô…¿Ô‡)/// Create a new ClipboardStatusNotifier.¿ÔÁ/¿Ô¯  ¿Ôˇ¿¿¿¿$¿*¿%¿0¿5 ¿A ¿KÉì¿í7/// Check the [Clipboard] and update [value] if needed.   ¿Û‚ÄÏ¿ÛÛ  ¿Ûˇ¿Ù  ¿Û‚¿Û„¿Ù“Ä¡¿Ù„  ¿ÙÚ¿ı   ¿Ù“¿Ù”¿ıóÅ^¿ı®  ¿ı√¿ı÷  ¿ıó¿ıò¿ˆ˘}¿˜
   ¿ˆ˘¿ˆ˙ ¿˘Ñä¿˚7Å¨/// A [ValueNotifier] whose [value] indicates whether the current device supports the Live Text
/// (OCR) function.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.
///  * [LiveTextInputStatus], an enumeration that indicates whether the current device is available
///                           for Live Text input.
///
/// Call [update] to asynchronously update [value] if needed. ¿˚ûÄö ¿˚…¿˚‰(/// Create a new LiveTextStatusNotifier.¿˚Î7¿¸   ¿¸¿¸¿¸¿¸+¿¸0¿¸6¿¸1¿¸<¿¸A ¿¸M ¿¸WÑ¿¸®A/// Check the [LiveTextInputStatus] and update [value] if needed.   ¿ zÄ¿ ã  ¿ ó¿ •  ¿ z¿ {¿nÄ¡¿  ¿é¿ú  ¿n¿o¿3ÅM¿D  ¿_¿r  ¿3¿4¿Ñ}¿ï   ¿Ñ¿Ö  ¿˜zÇ¿˜»H/// An enumeration of the status of the content on the user's clipboard.  ¿˜‹X¿¯+L/// The clipboard content can be pasted, such as a String of nonzero length. ¿¯9ÄÊ¿˘Äÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿˘$[¿˘sL/// The content on the clipboard is not pasteable, such as when it is empty.    ¿Çp¿…Äæ/// An enumeration that indicates whether the current device is available for Live Text input.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.  ¿·=¿3/// This device supports Live Text input currently. ¿#Å¿$Ä˙/// The status of the Live Text input is unknown. Since getting the Live Text input availability
/// is asynchronous (see [LiveText.isLiveTextInputAvailable]), this status often exists while
/// waiting to receive the status value for the first time. ¿0B¿j7/// The current device doesn't support Live Text input.         ÉÂÅÑÖ$Å6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  ÖEÖS  Ö[Öc   ¿LÑπ¿€Äà/// [TextSelectionControls] that specifically do not manage the toolbar in order
/// to leave that to [EditableText.contextMenuBuilder].    	¿Å_¿'  ¿9¿G  ¿S¿Y  ¿r¿z  ¿ç¿ï  ¿´"¿≈  ¿”¿Í  ¿˜1¿	  ¿	.$¿	7  ¿¿¿	wA¿	à  ¿	è¿	¶  ¿	w¿	x¿	ºB¿	Õ  ¿	’¿	Ï  ¿	º¿	Ω¿
C¿
  ¿
¿
3  ¿
¿
¿
IG¿
Z  ¿
g¿
~  ¿
I¿
J¿
îi¿
•  ¿
Ø¿
∆  ¿
–(¿
Í  ¿
î¿
ï¿j¿  ¿¿4  ¿>(¿X  ¿¿¿oM¿à  ¿î¿´  ¿o¿p¿¿C¿—  ¿·¿¯  ¿¿¿¡ ´òÇ+≠äÅ’/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [materialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].≠ß≠¡≠¬  é  <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ%ÉDÉ_É`É°É‰ÉÂÑ2Ñ=ÑAÑOÑSÑôÑßÑıÖÖjÖkÖªÖøÜÜ[ÜÄÜ…ÜıÜ˚áLáêá¨á≠áπààààJàqàuà∆ââ3â7âiâmâ±âˇäOä~äÇäªã
ã[ãèã∂ã∫å
åTåíåñå˜å˚ç	ççWç}ç§çŸçﬂé+éEéKéõéÎè7èkè„è‰ê5êÅê±ë ëë/ë5ëtëzë…ëÙë˙íKíàíéíÿììOì^ìáì¿ìƒì€ìıîî/îMîuîôî–î˙îˇï ï0ï]ï^ï©ïÒññ
ñZñ`ñ¶ñ«ñ÷ñˇó8ó<óló¿óƒó≈òòCòIòôòüòÊôôô?ôxô|ô≠ööööUöoöuöΩöﬁö‰õ4õÅõèõûõ«ú úú6úXú\ú]ú®úÛù ùùSùtùÉù¨ùÂùÈûû•û©û™ûÙû˙üGüWüfüèü»üÃüˇ†9†=†>†ä†ê†ﬁ†Ó†˝°&°_°c°ó°“°÷°◊¢¢¢h¢x¢~¢ ££&£g£v£ü£ÿ£‹§§V§Z§[§®§Õ§”§Ù§˙•K•^•m•ñ•œ•”¶¶C¶G¶I¶J¶ê¶î¶‚ß1ß~ßæ®® ®$®_®Ñ®≈®—©©©©/©I©h©É©°©…©Ì™$™N™n™o™{™Ù´´´´)´y´ë´ï´ó´ò´ﬁ´‚¨0¨¨Ã≠≠Q≠n≠≈≠∆≠«Æ	ÆÆ#ÆrÆΩÆ›Æ˙ØFØLØáØ†Ø≈Ø‡Ø˛∞'∞T∞∞ü∞ª∞‹±±D±o±ù±∫±˙≤#≤;≤õ≤˘≥(≥R≥à≥†≥ ≥˛¥8¥t¥í¥÷µµIµÅµπµ’∂∂W∂Ü∂π∂Ò∑∑I∑q∑£∑—∑˚∏3∏_∏°∏®∏¨∏≠∏Ëπ#π)πvπ∑πÃπÍπÎ∫6∫∫∆∫Î∫Ïª.ª`ªaª£ª‘ª’ºººFºLºÇº≠ºÆºÃº·Ω	Ω
Ω%Ω&ΩZΩ[ΩµææcædæóøøkøÌøÒøÚ¿ @¿ @%¿ @v¿ @•¿ @´¿ @ƒ¿ @Ú¿ A¿ A7¿ A]¿ Ak¿ Aq¿ Aê¿ Aø¿ A√¿ Aƒ¿ B ¿ B¿ B6¿ B[¿ B_¿ B`¿ Bú¿ B’¿ B÷¿ C¿ C)¿ CH¿ CI¿ CÜ¿ C≠¿ Cª¿ C¡¿ C¬¿ CË¿ Cˆ¿ C¸¿ C˝¿ D¿ D=¿ DU¿ DÉ¿ Dä¿ Dñ¿ Dö¿ Dõ¿ DÈ¿ E¿ E9¿ Eo¿ Eu¿ Eî¿ E±¿ E«¿ E¿ F
¿ F@¿ FG¿ FZ¿ F^¿ F_¿ Fù¿ FÀ¿ G¿ G>¿ Gc¿ Gz¿ G°¿ G–¿ Gˆ¿ Gˇ¿ H¿ H
¿ H¿ HK¿ H{¿ Hœ¿ HÓ¿ I¿ I,¿ IS¿ IÇ¿ I®¿ I±¿ I∏¿ Iº¿ IΩ¿ I˚¿ J¿ J;¿ J?¿ J@¿ J{¿ JÅ¿ Jœ¿ K¿ Km¿ K∂¿ L¿ LV¿ Lá¿ L≤¿ L–¿ Lﬁ¿ L‰¿ L˚¿ M¿ Mf¿ Mµ¿ N¿ N¿ N<¿ N@¿ NA¿ Nd¿ Nz¿ N§¿ NÀ¿ NÔ¿ O¿ O<¿ OD¿ Ow¿ Oú¿ O¿¿ OÁ¿ P¿ P¿ PD¿ Po¿ Pæ¿ Q¿ Q¿ Q¿ Q:¿ Q@¿ Që¿ Q ¿ QÂ¿ R¿ RS¿ R£¿ R∏¿ R‡¿ R‰¿ RÂ¿ S¿ Sl¿ Sm¿ SÆ¿ S¥¿ Sƒ¿ S ¿ T¿ T@¿ TÉ¿ TÑ¿ T∂¿ U¿ U¿ U?¿ UE¿ UU¿ U[¿ U¢¿ V¿ V¿ V9¿ Vd¿ Ve¿ V°¿ V⁄¿ V€¿ W¿ W&¿ WG¿ W™¿ X¿ X6¿ Xe¿ Xí¿ X•¿ X©¿ X™¿ XÃ¿ Y¿ Y<¿ YW¿ Yú¿ YÊ¿ Z6¿ Z~¿ ZÕ¿ [¿ [>¿ [ù¿ [Â¿ \4¿ \Ã¿ \“¿ ]¿ ]¿ ]¿ ]?¿ ]Ñ¿ ]Æ¿ ]«¿ ]˚¿ ^Z¿ ^¢¿ ^Ô¿ _Ä¿ _Ü¿ _Ã¿ _–¿ _—¿ _Û¿ `¿ `J¿ `y¿ `Ä¿ `⁄¿ a4¿ a5¿ aë¿ aÃ¿ a˜¿ b ¿ b'¿ b(¿ bO¿ bê¿ b∑¿ bæ¿ bø¿ b¿ c@¿ cç¿ cî¿ cï¿ cØ¿ cı¿ d)¿ dm¿ dΩ¿ dƒ¿ d»¿ d…¿ e¿ e:¿ e`¿ ea¿ e±¿ e∆¿ e˙¿ e˚¿ fA¿ fc¿ fq¿ fw¿ fx¿ fº¿ f˝¿ g5¿ gQ¿ g¶¿ g˙¿ hL¿ hê¿ hû¿ h¡¿ h◊¿ h‡¿ hÁ¿ hË¿ i¿ i$¿ iK¿ iÇ¿ i®¿ i±¿ i∏¿ iº¿ iΩ¿ j¿ j#¿ j)¿ ju¿ j≈¿ k¿ kX¿ kê¿ k∆¿ l¿ l!¿ l}¿ lƒ¿ l»¿ l…¿ m¿ m3¿ mA¿ mG¿ mH¿ m¶¿ m–¿ mÒ¿ n6¿ n=¿ n>¿ ní¿ nì¿ nµ¿ nÓ¿ o¿ oL¿ or¿ o|¿ o}¿ o–¿ p¿ p¿ p¿ p¿ pB¿ pg¿ p≤¿ p—¿ pÚ¿ q¿ qA¿ qi¿ qt¿ qß¿ qÿ¿ q‚¿ r¿ r(¿ rI¿ rl¿ rí¿ rø¿ rË¿ rÛ¿ s7¿ sh¿ sr¿ sx¿ sy¿ s™¿ s´¿ s„¿ t¿ tH¿ tl¿ tt¿ tx¿ ty¿ t»¿ tÏ¿ u¿ u¿ ud¿ u|¿ u≤¿ u≥¿ u˚¿ v¿ v+¿ v1¿ v2¿ vv¿ v∑¿ vÒ¿ w¿ we¿ wª¿ x¿ xU¿ xc¿ xÜ¿ xú¿ x•¿ x¨¿ x≠¿ x“¿ xÈ¿ y¿ yG¿ ym¿ yv¿ y}¿ yÅ¿ yÇ¿ yÃ¿ yÓ¿ y¸¿ z¿ z¿ ze¿ zè¿ z∞¿ z˘¿ { ¿ {T¿ {U¿ {w¿ {∞¿ {◊¿ |¿ |4¿ |>¿ |?¿ |í¿ |…¿ |◊¿ |›¿ |ﬁ¿ }¿ })¿ }t¿ }ì¿ }¥¿ }⁄¿ ~¿ ~)¿ ~4¿ ~o¿ ~†¿ ~™¿ ~Õ¿ ~¿ ¿ 4¿ Z¿ Å¿ ≤¿ Ω¿ Ä¿ Ä2¿ Ä<¿ ÄB¿ ÄC¿ Äz¿ Äˆ¿ Å+¿ ÅO¿ ÅW¿ ÅX¿ Åâ¿ Åç¿ Åé¿ Å¡¿ Å›¿ ÅÎ¿ ÅÒ¿ Ç.¿ ÇW¿ Ç|¿ Ç•¿ Ç≠¿ Çª¿ Ç¡¿ ÇË¿ É¿ É0¿ ÉJ¿ Éz¿ ÉÉ¿ Éâ¿ Éç¿ Éé¿ É—¿ Ñ¿ Ñ3¿ ÑU¿ Ñ\¿ Ñ`¿ Ña¿ Ñà¿ Ñ´¿ Ñ“¿ Ñ˘¿ Ö¿ Ö%¿ ÖU¿ Ö[¿ Ö\¿ Öy¿ Öó¿ ÖØ¿ ÖÕ¿ ÖÂ¿ ÖÎ¿ ÖÔ¿ ÖÒ¿ ÖÚ¿ Ü8¿ Ü<¿ Üá¿ ÜÆ¿ Ü«¿ á¿ á¿ áT¿ ái¿ áÑ¿ áü¿ á’¿ á¸¿ à¿ à;¿ à]¿ à|¿ à∞¿ à’¿ àÒ¿ â¿ â0¿ âM¿ âf¿ â†¿ â≈¿ â÷¿ ä¿ äM¿ äS¿ äx¿ äõ¿ ä√¿ äÈ¿ ã¿ ãC¿ ãe¿ ãv¿ ã≤¿ ãÌ¿ ãÛ¿ å¿ åW¿ åÇ¿ å±¿ åÿ¿ ç¿ ç4¿ ç_¿ çç¿ çé¿ ç∆¿ ç‰¿ çÂ¿ é¿ éT¿ éU¿ éª¿ è"¿ èÑ¿ è∑¿ ê¿ ê¿ êL¿ êR¿ êÅ¿ êá¿ êÿ¿ êﬁ¿ ë*¿ ëe¿ ëf¿ ë™¿ ë⁄¿ ë‡¿ í)¿ í>¿ í\¿ íò¿ íÈ¿ ì-¿ ì1¿ ì2¿ ìs¿ ìÀ¿ î¿ îi¿ îà¿ îé¿ î◊¿ ï!¿ ïD¿ ïY¿ ïî¿ ï∞¿ ï≈¿ ïÀ¿ ïÃ¿ ñ¿ ñ>¿ ñ?¿ ñá¿ ñ…¿ ñ¿ ó<¿ óK¿ óg¿ ó}¿ óÑ¿ óÖ¿ óß¿ óµ¿ óª¿ óº¿ ó€¿ óı¿ ò;¿ òN¿ òm¿ òñ¿ òö¿ òõ¿ ò‹¿ ò˛¿ ô¿ ô6¿ ôK¿ ôd¿ ô®¿ ôÌ¿ ö)¿ ö^¿ öl¿ ör¿ ös¿ öî¿ öò¿ öô¿ ö√¿ ö…¿ õ¿ õ[¿ õá¿ õæ¿ õ„¿ õÒ¿ õ˜¿ ú¿ ú+¿ ú/¿ ú0¿ ú^¿ úd¿ úµ¿ úª¿ ù
¿ ù@¿ ù]¿ ùÖ¿ ù¨¿ ù∫¿ ù¿¿ ù‡¿ ùˆ¿ ù˙¿ ù˚¿ û"¿ û#¿ ûN¿ ûT¿ û•¿ û…¿ ûœ¿ ü¿ üM¿ üN¿ üñ¿ ü÷¿ ü◊¿ †¿ †;¿ †ã¿ †€¿ †˜¿ °¿ °+¿ °1¿ °w¿ °¢¿ °¶¿ °ß¿ °Ë¿ ¢8¿ ¢à¿ ¢§¿ ¢ ¿ ¢ÿ¿ ¢ﬁ¿ £
¿ £¿ £¿ £^¿ £†¿ £°¿ £Û¿ §¿ §>¿ §?¿ §z¿ §û¿ §Ó¿ •>¿ •Z¿ •h¿ •n¿ •ó¿ •õ¿ •ú¿ •ƒ¿ • ¿ ¶¿ ¶X¿ ¶Ç¿ ¶∑¿ ¶⁄¿ ¶Ë¿ ¶Ó¿ ß
¿ ß ¿ ß$¿ ß%¿ ßQ¿ ßW¿ ß¶¿ ß¨¿ ß˚¿ ®-¿ ®H¿ ®n¿ ®ì¿ ®°¿ ®ß¿ ®≈¿ ®€¿ ®ﬂ¿ ®‡¿ ©¿ ©¿ ©/¿ ©5¿ ©Ñ¿ ©®¿ ©Æ¿ ©ˆ¿ ™(¿ ™)¿ ™o¿ ™≠¿ ™Æ¿ ™Î¿ ´¿ ´^¿ ´Æ¿ ´ ¿ ´Ó¿ ´¸¿ ¨¿ ¨F¿ ¨o¿ ¨s¿ ¨t¿ ¨≥¿ ≠¿ ≠S¿ ≠o¿ ≠ì¿ ≠°¿ ≠ß¿ ≠—¿ ≠’¿ ≠÷¿ Æ#¿ Æc¿ Æd¿ Æ¥¿ Æ√¿ Æ˝¿ Æ˛¿ Ø7¿ ØY¿ Ø©¿ Ø˘¿ ∞¿ ∞#¿ ∞)¿ ∞P¿ ∞T¿ ∞U¿ ∞{¿ ∞Å¿ ∞Õ¿ ∞Ò¿ ∞˜¿ ±1¿ ±`¿ ±a¿ ±†¿ ±Í¿ ≤¿ ≤U¿ ≤à¿ ≤†¿ ≤‹¿ ≥¿ ≥,¿ ≥Y¿ ≥Ä¿ ≥£¿ ≥»¿ ≥Ì¿ ¥¿ ¥'¿ ¥1¿ ¥9¿ ¥?¿ ¥`¿ ¥d¿ ¥e¿ ¥Ø¿ ¥—¿ ¥“¿ µ#¿ µ0¿ µT¿ µU¿ µ¢¿ µÃ¿ µÙ¿ µı¿ ∂B¿ ∂j¿ ∂ê¿ ∂ë¿ ∂÷¿ ∑¿ ∑¿ ∑N¿ ∑O¿ ∑î¿ ∑‹¿ ∑Ó¿ ∏¿ ∏¿ ∏;¿ ∏t¿ ∏x¿ ∏™¿ ∏´¿ ∏È¿ ∏Ô¿ π4¿ πÄ¿ π ¿ πÈ¿ πÔ¿ ∫:¿ ∫à¿ ∫π¿ ∫ø¿ ª¿ ª¿ ª¿ ª#¿ ªã¿ ª∏¿ ªπ¿ º¿ ºR¿ ºX¿ º§¿ ºÎ¿ Ω.¿ Ω}¿ ΩÆ¿ Ω˝¿ æJ¿ æ|¿ æë¿ æ·¿ æˆ¿ ø%¿ ø&¿ øv¿ øé¿ øî¿ øﬂ¿ ¿¿ ¿A¿ ¿B¿ ¿ç¿ ¿≥¿ ¿π¿ ¡¿ ¡5¿ ¡;¿ ¡ã¿ ¡•¿ ¡¥¿ ¡¸¿ ¬5¿ ¬9¿ ¬l¿ ¬à¿ ¬Ø¿ ¬‘¿ ¬‚¿ ¬Ë¿ √¿ √¿ √ ¿ √!¿ √q¿ √µ¿ √∂¿ ƒ¿ ƒ;¿ ƒ[¿ ƒ\¿ ƒx¿ ƒí¿ ƒì¿ ƒŸ¿ ≈)¿ ≈*¿ ≈Ä¿ ≈Å¿ ≈¿¿ ∆	¿ ∆¿ ∆5¿ ∆Q¿ ∆_¿ ∆e¿ ∆f¿ ∆Ö¿ ∆µ¿ ∆„¿ ∆Í¿ «O¿ «S¿ «T¿ «ì¿ «Õ¿ «‚¿ «˘¿ »¿ »2¿ »P¿ »m¿ »ã¿ »¢¿ »®¿ »¨¿ »≠¿ »Ï¿ …2¿ …G¿ …\¿ …w¿ …û¿ …•¿ …À¿ …È¿ …˘¿  ¿  8¿  °¿  Ø¿  µ¿  ∂¿  —¿  ﬂ¿  Â¿  Ê¿ À0¿ ÀQ¿ Ài¿ Àú¿ À≈¿ ÀÏ¿ Ã%¿ ÃS¿ Ã^¿ Ãg¿ Ãn¿ Ãr¿ Ãs¿ Ã¡¿ ÃË¿ Õ¿ Õ-¿ ÕQ¿ ÕX¿ Õs¿ ÕÅ¿ Õá¿ Õà¿ Õ“¿ Õ˘¿ Œ¿ ŒD¿ Œm¿ Œî¿ ŒÕ¿ Œ¿ Œ˚¿ œ¿ œ¿ œ¿ œ¿ œ0¿ œ1¿ œv¿ œê¿ œ¿¿ œŒ¿ œ‘¿ –¿ –X¿ –≤¿ –œ¿ –ﬂ¿ –Á¿ —¿ —P¿ —q¿ —ë¿ —∫¿ —„¿ —Ì¿ “¿ “?¿ “r¿ “≠¿ “Ê¿ “¿ “˙¿ ”¿ ”%¿ ”L¿ ”s¿ ”{¿ ”ù¿ ”…¿ ”˙¿ ‘3¿ ‘j¿ ‘r¿ ‘x¿ ‘|¿ ‘}¿ ‘µ¿ ‘˚¿ ’¿ ’ ¿ ’A¿ ’]¿ ’z¿ ’ò¿ ’µ¿ ’”¿ ’Í¿ ’¿ ÷V¿ ÷k¿ ÷q¿ ÷u¿ ÷v¿ ÷µ¿ ÷‚¿ ÷Ë¿ ◊¿ ◊*¿ ◊A¿ ◊f¿ ◊ë¿ ◊≠¿ ◊ª¿ ◊¡¿ ◊Ÿ¿ ◊Ú¿ ÿ¿ ÿ¿ ÿ¿ ÿG¿ ÿy¿ ÿé¿ ÿ°¿ ÿ≠¿ ÿÀ¿ ÿœ¿ ÿ–¿ Ÿ¿ Ÿ¿ Ÿi¿ Ÿé¿ Ÿ∂¿ Ÿ√¿ ŸÎ¿ ⁄¿ ⁄:¿ ⁄t¿ ⁄µ¿ ⁄¯¿ €5¿ €c¿ €å¿ €Ω¿ €Î¿ €Ù¿ €˙¿ ‹¿ ‹8¿ ‹O¿ ‹X¿ ‹_¿ ‹c¿ ‹d¿ ‹ï¿ ‹Æ¿ ‹˚¿ ›Y¿ ›â¿ ›±¿ ›æ¿ ›Ê¿ ﬁ¿ ﬁ1¿ ﬁk¿ ﬁ™¿ ﬁÎ¿ ﬂ&¿ ﬂT¿ ﬂ{¿ ﬂ™¿ ﬂÿ¿ ﬂ·¿ ﬂÁ¿ ‡¿ ‡%¿ ‡<¿ ‡E¿ ‡L¿ ‡P¿ ‡Q¿ ‡É¿ ‡≤¿ ‡◊¿ ‡˝¿ ·¿ ·k¿ ·l¿ ·ª¿ ·º¿ ·Ï¿ ‚¿ ‚`¿ ‚g¿ ‚h¿ ‚Ã¿ ‚È¿ ‚Í¿ „?¿ „i¿ „ç¿ „≠¿ ‰¿ ‰¿ ‰&¿ ‰2¿ ‰n¿ ‰´¿ ‰≤¿ ‰≥¿ ‰ÿ¿ ‰˙¿ Â¿ ÂC¿ ÂY¿ ÂÉ¿ Âµ¿ Â ¿ ÂÂ¿ Ê¿ Ê¿ Ê:¿ ÊZ¿ Êw¿ Êî¿ Ê°¿ Ê¨¿ Êµ¿ Êº¿ Ê¿¿ Ê¡¿ Á¿ ÁQ¿ Áp¿ Áv¿ Á≈¿ Ë¿ Ë)¿ Ë/¿ Ëq¿ ËÜ¿ Ëº¿ ËÒ¿ Ëˇ¿ È¿ È¿ È0¿ È4¿ È6¿ È7¿ ÈÉ¿ È“¿ Í¿ ÍL¿ Íô¿ Í¿¿ Í¯¿ Î¿ Î0¿ ÎM¿ Îg¿ ÎÄ¿ ÎÜ¿ Îá¿ Îù¿ Î¥¿ Î—¿ Î¸¿ Î˝¿ Ï	¿ Ï]¿ Ï_¿ Ï`¿ Ï“¿ Ï˙¿ Ì0¿ Ì1¿ Ì=¿ ÌR¿ Ìi¿ Ìj¿ Ì«¿ Ì»¿ ÌÈ¿ Ó(¿ Ó,¿ Ó-¿ Ó9¿ Óv¿ Óú¿ Ó—¿ Óﬂ¿ ÓÂ¿ Ô*¿ ÔK¿ Ôä¿ Ôé¿ Ôè¿ Ôõ¿ ÔÆ¿ Ô¿ ¿  ¿ $¿ %¿ J¿ v¿ ì¿ †¿ Ω¿ √¿ «¿ »¿ ‘¿ ˚¿ Ò¿ Ò7¿ Òo¿ Òé¿ Ò´¿ ÒŸ¿ Ò˝¿ Ú"¿ ÚE¿ Úf¿ Ús¿ Ú~¿ Úá¿ Úé¿ Úí¿ Úî¿ Úï¿ Ú’¿ Û¿ Û,¿ ÛN¿ Ûf¿ Ûâ¿ Û´¿ Û–¿ Ûˆ¿ Ù¿ Ù>¿ ÙS¿ Ùz¿ Ù∞¿ Ù∂¿ Ù∑¿ Ù⁄¿ ı	¿ ıM¿ ıì¿ ı”¿ ˆ¿ ˆ/¿ ˆS¿ ˆy¿ ˆ¶¿ ˆß¿ ˆ≥¿ ˜¿ ˜¿ ˜¿ ˜x¿ ˜†¿ ˜÷¿ ˜◊¿ ˜„¿ ˜¯¿ ¯¿ ¯¿ ¯m¿ ¯n¿ ¯é¿ ¯Ã¿ ¯–¿ ¯—¿ ¯ı¿ ˘!¿ ˘>¿ ˘K¿ ˘h¿ ˘n¿ ˘r¿ ˘s¿ ˘¿ ˘ª¿ ˘·¿ ˙%¿ ˙E¿ ˙É¿ ˙á¿ ˙à¿ ˙î¿ ˙ß¿ ˙Ë¿ ˚¿ ˚¿ ˚¿ ˚¿ ˚)¿ ˚P¿ ˚ö¿ ˚≠¿ ˚œ¿ ˚÷¿ ¸¿ ¸<¿ ¸C¿ ¸D¿ ¸o¿ ¸á¿ ¸ü¿ ¸∑¿ ¸–¿ ¸◊¿ ¸ÿ¿ ˝%¿ ˝b¿ ˝∫¿ ˝¡¿ ˝˘¿ ˛<¿ ˛Å¿ ˛ƒ¿ ˇ	¿ ˇ¿ ˇ¿ ˇ9¿ ˇ]¿ ˇÑ¿ ˇ£¿ ˇ¿¿ ˇ€¿ ˇı¿ ¿ E¿ o¿ î¿ «¿ ˇ¿_¿ã¿Ø¿˝¿6¿c¿ë¿¿¿’¿Ë¿¿5¿x¿∫¿˛¿=¿P¿a¿p¿å¿¥¿ÿ¿˙¿ ¿H¿Y¿î¿≠¿ ¿ˆ¿&¿7¿F¿S¿^¿g¿n¿r¿t¿u¿ª¿ø¿¿I¿~¿»¿¿a¿á¿ã¿ô¿ù¿Ì¿	;¿	N¿	ã¿	¡¿
¿
N¿
O¿
ç¿
´¿
¨¿
Ê¿¿¿¿M¿Q¿ó¿Ë¿1¿Ä¿Õ¿Ë¿Ï¿:¿j¿n¿≠¿˝¿J¿ò¿∂¿∫¿»¿Ã¿¿D¿à¿∆¿Ú¿)¿Q¿m¿s¿t¿∑¿Ω¿¿]¿ô¿ü¿„¿˘¿¿D¿E¿î¿Ø¿Û¿¿;¿Z¿é¿±¿“¿Û¿¿¿ ¿!¿r¿°¿∆¿È¿¿.¿Q¿r¿ì¿∂¿º¿¿¿¡¿¿3¿t¿†¿¥¿∫¿ª¿¿9¿@¿A¿É¿ƒ¿»¿…¿¿M¿j¿~¿Ñ¿Ö¿∂¿Ê¿Í¿Î¿0¿o¿å¿†¿¶¿ß¿Ÿ¿
¿¿¿@¿è¿≤¿∆¿Ã¿Õ¿!¿"¿Z¿ë¿ï¿ñ¿Œ¿”¿#¿i¿n¿Ω¿Á¿Ï¿˚¿ ¿N¿a¿«¿¿¿V¿¶¿ƒ¿¿C¿¿œ¿˙¿ ¿ ¿ /¿ ]¿ ¿ à¿ ï¿ ú¿ †¿ °¿ Ÿ¿ ﬁ¿!¿!¿!%¿!*¿!y¿!ë¿!◊¿"¿"¿"f¿"•¿"·¿#¿#¿#¿#A¿#o¿#ë¿#ö¿#ß¿#Æ¿#≤¿#≥¿#‡¿#Ê¿$7¿$Ü¿$ñ¿$‹¿%¿%¿%U¿%{¿%à¿%ÿ¿%Ÿ¿&#¿&S¿&`¿&§¿&•¿&ı¿'1¿'Q¿'R¿'ñ¿'≈¿'Ï¿'Ì¿(>¿(g¿(h¿(á¿(¥¿(Ï¿(ˇ¿)K¿)n¿)|¿)ß¿)´¿)¨¿)˘¿*B¿*q¿*ó¿*ò¿*Ë¿+4¿+`¿+e¿+µ¿,¿,.¿,U¿,V¿,™¿,Û¿,¯¿-N¿-ù¿-ÿ¿.¿.¿.I¿.O¿._¿.e¿.≤¿.≈¿.“¿.Ì¿/0¿/ô¿/Æ¿/≤¿/≥¿/ı¿/˚¿0¿0¿0^¿0q¿0~¿0ô¿0∂¿0∫¿0ª¿0˜¿0˝¿1N¿1©¿1Ø¿1ø¿1≈¿2¿2#¿2R¿2x¿2Ü¿2å¿2‡¿35¿3ä¿3‡¿43¿4p¿4 ¿5¿5l¿5í¿5ﬁ¿6¿6a¿6©¿6·¿7¿79¿7d¿7e¿7ª¿7Á¿8M¿8r¿8ï¿8∏¿8˜¿9 ¿9?¿9~¿9ç¿9Æ¿9“¿:#¿:B¿:e¿:¨¿:¡¿:˚¿;¿;;¿;b¿;}¿;ä¿;ú¿;¶¿;Û¿<D¿<è¿<¨¿<ı¿=¿=9¿=]¿=Ä¿=œ¿=·¿=Î¿>4¿>:¿>>¿>?¿>É¿>â¿>”¿>Ú¿>¯¿?<¿?B¿?R¿?X¿?ß¿?∫¿?«¿?˝¿@%¿@M¿@r¿@õ¿@¡¿@Ú¿@˚¿A¿A¿A¿AH¿AN¿Aü¿A¡¿A«¿B¿B¿B!¿B'¿Bt¿Bá¿Bî¿B»¿B¿C¿C;¿Cj¿Cq¿Có¿Cπ¿Cø¿C√¿Cƒ¿D¿D
¿DJ¿DP¿D`¿Df¿D¨¿Dƒ¿D—¿E¿E'¿E¿E≠¿F¿F<¿F_¿FÇ¿Fß¿F∏¿F¸¿G!¿GF¿Gó¿G´¿G∑¿H¿H=¿Hb¿Há¿Hÿ¿HÏ¿H¯¿IC¿Id¿Iâ¿Iÿ¿Iˇ¿JH¿J_¿Jõ¿Jπ¿Jﬂ¿K¿K%¿K4¿KH¿KT¿Kv¿K†¿KÕ¿K¯¿L+¿LÉ¿L∆¿M¿MZ¿M©¿M”¿Mˇ¿Np¿N·¿O(¿O9¿Oß¿P¿Pê¿PÈ¿P˙¿Qt¿Q¢¿Q≥¿R5¿R∂¿S¿Sâ¿Sı¿TW¿T€¿T‹¿U¿U\¿U∞¿UÛ¿V¿VA¿VS¿WI¿W|¿Wì¿W‰¿XS¿Xà¿X°¿X‘¿XÊ¿Xˆ¿Y¿Y
¿Y¿Y¿Y¿YY¿Y_¿Y™¿Y∞¿Y¿¿Y∆¿Z¿Z(¿Z5¿Zä¿Zã¿Z“¿Zÿ¿['¿[9¿[?¿[O¿[U¿[¢¿[∫¿[«¿\¿\)¿\P¿\q¿\î¿\æ¿\¿]?¿]R¿]¿]´¿]·¿]¿]¸¿^!¿^F¿^i¿^é¿^€¿^„¿^‰¿_'¿_(¿_g¿_ó¿_ù¿_°¿_¢¿_Ó¿_Ù¿`B¿`^¿`d¿`t¿`z¿`√¿`‰¿`Ò¿a8¿a]¿a©¿aÍ¿b;¿bç¿bª¿b»¿b˙¿c¿c¿c+¿cL¿co¿cû¿cÕ¿d8¿db¿dò¿dß¿d∫¿dÁ¿e¿eI¿eX¿ed¿eâ¿eÆ¿e—¿eˆ¿f#¿få¿f¥¿fË¿fı¿f˝¿f˛¿gA¿gG¿gK¿gL¿gë¿gó¿g»¿gŒ¿gﬁ¿g‰¿h4¿hG¿hT¿hç¿h∏¿hﬁ¿i ¿i¿i1¿iU¿iw¿i{¿i|¿iΩ¿i√¿j	¿j¿j0¿jV¿jd¿jj¿jè¿jÆ¿jœ¿k¿kb¿kl¿kñ¿kº¿k‚¿kÏ¿l¿l2¿lS¿lv¿lû¿lÈ¿lÛ¿m¿m¿m#¿m$¿mi¿mo¿m¿mÖ¿m’¿mË¿n)¿n6¿nj¿næ¿o¿oh¿oæ¿p¿pN¿p±¿pŸ¿p›¿pﬁ¿q ¿q&¿qq¿q®¿qÆ¿qæ¿qƒ¿r¿r$¿r1¿rf¿rã¿r‘¿r¸¿s ¿s(¿s.¿s2¿s3¿sÑ¿sõ¿sˇ¿ta¿t¬¿t∆¿t«¿u¿u*¿uâ¿uÕ¿v)¿v-¿v.¿v|¿v≈¿w¿w7¿wà¿w∂¿xX¿x–¿x˛¿y¿y¿yP¿yp¿yu¿yƒ¿yﬁ¿y„¿z,¿zd¿zÏ¿{<¿{â¿{∏¿{œ¿|¿|:¿|N¿|É¿|“¿|”¿}¿}i¿}∫¿}ª¿}Ë¿~/¿~<¿~C¿~G¿~H¿~ä¿~ê¿~º¿	¿3¿9¿I¿O¿ú¿Ø¿º¿Ò¿Ä¿Ä%¿Ä+¿ÄS¿Äå¿Äô¿Ä¿¿ÄÂ¿Å
¿Å+¿ÅN¿Ås¿Å◊¿Å˙¿ÇY¿Ça¿Çg¿Çç¿ÇØ¿Çµ¿Çπ¿Ç∫¿É¿É¿ÉL¿ÉR¿Éb¿Éh¿Éµ¿ÉÕ¿É⁄¿Ñ¿Ñ;¿ÑI¿ÑO¿ÑÅ¿Ñ∞¿ÑŸ¿Ö¿Ö¿Ö9¿Ög¿Ö§¿Ü¿Ü¿Ü|¿ÜΩ¿ÜÀ¿Ü—¿Ü“¿á6¿á]¿á~¿á°¿áÒ¿à¿à;¿à^¿àÉ¿à”¿à€¿àË¿â¿â0¿âR¿â|¿â©¿âÿ¿ä¿ä9¿äJ¿äu¿ä®¿ä“¿ä˛¿ãL¿ãû¿ã€¿å*¿å[¿åã¿å¿¿å”¿ç ¿ç0¿çG¿çS¿çx¿çù¿çø¿çÈ¿é¿éE¿és¿é¶¿é∑¿é‚¿è¿è?¿èk¿è≤¿èÙ¿ê!¿êR¿êÇ¿ê∑¿ê ¿ë¿ë'¿ë>¿ëJ¿ëm¿ëê¿ëµ¿ë‡¿í
¿í9¿íF¿íN¿íT¿íX¿íY¿í°¿íß¿íı¿ì¿ì¿ì"¿ì(¿ìv¿ìØ¿ìº¿ì˘¿î¿î-¿î3¿î4¿îP¿îú¿î›¿ï.¿ïÄ¿ïÆ¿ïª¿ïÌ¿ïˆ¿ñV¿ñW¿ñu¿ñË¿ó¿ó`¿óÜ¿ó≥¿óæ¿óø¿óﬂ¿ò¿ò9¿òa¿òã¿ò€¿ô¿ô.¿ôC¿ôW¿ôa¿ôi¿ôj¿ôí¿ö¿ö.¿öU¿ö|¿öü¿ö√¿öÔ¿õ¿õO¿õ§¿õ“¿ú¿ú¿úG¿ú|¿ú®¿ú÷¿úÔ¿ùB¿ùÄ¿ùó¿ù•¿ùπ¿ùﬁ¿û¿ûW¿ûÅ¿û≤¿û¡¿ûË¿ü¿ü:¿üã¿üµ¿üÊ¿üı¿üˇ¿†¿†¿†/¿†P¿†´¿°¿°Z¿°g¿°ƒ¿°ˆ¿¢¿¢B¿¢o¿¢•¿¢¯¿£$¿£W¿£h¿£ì¿£∆¿£¿§¿§Y¿§É¿§π¿§Ì¿§ˇ¿•0¿•`¿•ï¿•®¿•¸¿¶¿¶#¿¶8¿¶D¿¶V¿¶{¿¶†¿¶Ú¿ßU¿ßù¿ßø¿ßÈ¿®¿®A¿®t¿®™¿®˝¿©)¿©\¿©m¿©ó¿©√¿©¿™!¿™Q¿™Ü¿™ô¿™Ì¿™˝¿´¿´)¿´5¿´G¿´j¿´ç¿´≤¿´‰¿¨3¿¨[¿¨ä¿¨ó¿¨ü¿¨•¿¨¶¿¨œ¿≠¿≠H¿≠õ¿≠°¿≠¢¿≠Ó¿Æ ¿ÆM¿Æ≠¿Æ›¿Ø*¿Øe¿Ø£¿Ø‚¿∞3¿∞b¿∞í¿∞∂¿∞Ò¿±¿±+¿±6¿±Z¿±c¿±~¿±æ¿≤¿≤3¿≤c¿≤á¿≤¿¿≤Ì¿≤˙¿≥¿≥)¿≥2¿≥?¿≥ã¿≥ë¿≥ï¿≥ñ¿≥€¿≥·¿¥$¿¥>¿¥D¿¥T¿¥Z¿¥™¿¥Ω¿¥ ¿µ¿µ+¿µ,¿µº¿µﬁ¿µ‰¿µÂ¿∂ ¿∂"¿∂(¿∂)¿∂T¿∂X¿∂Y¿∂•¿∂≈¿∂À¿∑¿∑M¿∑í¿∑≤¿∑¿¿∑ﬂ¿∑˙¿∏¿∏*¿∏:¿∏b¿∏ä¿∏¶¿∏ˆ¿πB¿πh¿πñ¿π∫¿πÊ¿∫¿∫T¿∫Ç¿∫™¿∫“¿ª¿ª8¿ªf¿ªÄ¿ªî¿ªõ¿ªü¿ª°¿ª¢¿ªÙ¿ª¯¿ºC¿ºí¿º·¿ºˆ¿º˙¿Ω¿Ω¿ΩX¿Ω§¿Ωµ¿ΩÒ¿æ ¿æ&¿æp¿æó¿æ¶¿æ¿¿æ⁄¿æÓ¿ø
¿ø$¿ø=¿øZ¿ør¿øé¿ø≠¿ø—¿øÓ¿¿¿¿"¿¿A¿¿a¿¿~¿¿ë¿¿™¿¿∞¿¿±¿¡¿¡=¿¡>¿¡£¿¡ ¿¡À¿¬¿¬e¿¬ö¿¬…¿¬ ¿√¿√c¿√û¿√ü¿√¿ƒ¿ƒD¿ƒE¿ƒÉ¿ƒØ¿ƒ∞¿ƒÛ¿≈'¿≈(¿≈y¿≈å¿≈í¿≈Ÿ¿∆'¿∆Ä¿∆±¿∆≤¿«¿«N¿«Ç¿«¥¿«µ¿«˘¿»@¿»~¿»ª¿»º¿…¿…J¿…K¿…ë¿… ¿…À¿ ¿ Z¿ è¿ ê¿ ﬁ¿À ¿ÀU¿ÀV¿Àê¿ÀÀ¿ÀÃ¿Ã¿ÃB¿ÃC¿Ãá¿Ãæ¿Ãø¿Õ¿Õ¿Õ>¿Õa¿Õb¿ÕÅ¿Õó¿Õò¿Õ§¿ÕÛ¿Õı¿Õˆ¿ŒM¿ŒN¿Œû¿Œ¿œB¿œ`¿œe¿œ∑¿œÀ¿–	¿–.¿–Q¿–t¿–ï¿–„¿—4¿—Å¿——¿“¿“O¿“°¿“¿¿“·¿”1¿”Ä¿”—¿”„¿‘	¿‘,¿‘{¿‘ ¿’¿’f¿’ò¿’”¿’Ÿ¿’›¿’ﬁ¿’˛¿÷"¿÷&¿÷'¿÷G¿÷k¿÷o¿÷p¿÷¡¿÷Á¿◊¿◊@¿◊ç¿◊‡¿ÿ/¿ÿ]¿ÿ´¿ÿﬂ¿ÿÂ¿ÿÊ¿Ÿ4¿Ÿh¿Ÿn¿Ÿr¿Ÿs¿Ÿ£¿ŸÒ¿⁄¿⁄"¿⁄&¿⁄'¿⁄C¿⁄i¿⁄m¿⁄n¿⁄•¿⁄’¿⁄Ÿ¿⁄⁄¿€¿€D¿€H¿€I¿€|¿€™¿€Æ¿€Ø¿€Ê¿‹¿‹¿‹¿‹M¿‹x¿‹|¿‹}¿‹ª¿‹Í¿›¿›¿›!¿›"¿›j¿›û¿›–¿›÷¿›⁄¿›€¿ﬁ¿ﬁB¿ﬁm¿ﬁs¿ﬁw¿ﬁx¿ﬁÑ¿ﬁ´¿ﬂ¿ﬂ	¿ﬂj¿ﬂû¿ﬂ∆¿ﬂ◊¿‡
¿‡F¿‡O¿‡V¿‡W¿‡Ü¿‡∫¿‡Á¿·V¿·‘¿‚¿‚¿‚N¿‚è¿‚√¿‚Œ¿‚◊¿‚›¿‚ﬁ¿„¿„=¿„j¿„ë¿„∂¿„€¿„¸¿‰Ö¿‰–¿Â¿Â&¿Â|¿Âõ¿Âÿ¿Ê¿ÊJ¿Êw¿Ê®¿Ê€¿Á¿Á1¿Á`¿Áo¿Á|¿Áü¿Á¬¿ÁÁ¿ËZ¿Ëö¿ËŒ¿ËÂ¿È;¿ÈZ¿Èó¿È–¿Í	¿Í6¿Íg¿Íö¿Í«¿Í¿Î¿Î.¿Î;¿ÎC¿ÎI¿ÎJ¿Îò¿Ï	¿ÏF¿Ïw¿Ïä¿Ïﬂ¿Ì/¿Ì:¿ÌC¿ÌI¿ÌJ¿Ìi¿ÌÉ¿Ì•¿Ì∆¿Ì·¿ÌË¿ÌÏ¿ÌÓ¿ÌÔ¿Ó=¿Ó^¿Ób¿Ó©¿ÓÌ¿Ô8¿Ôõ¿Ô«¿Ô„¿¿-¿.¿H¿I¿É¿£¿∏¿∆¿Ã¿Õ¿Ë¿Ú¿Ò#¿ÒD¿Òx¿Òñ¿Ò¨¿Òœ¿Ú!¿Ú+¿Úu¿Ú±¿Ú»¿Úÿ¿Ú‡¿Û¿Û¿Û¿ÛM¿Ûq¿Ûô¿Ûö¿ÛØ¿ÛΩ¿Û√¿Û€¿Ûﬂ¿Û‡¿ÛÏ¿Ù¿Ù1¿Ùb¿Ùh¿Ùî¿Ù§¿Ù™¿ÙÀ¿Ùœ¿Ù–¿Ù‹¿ı¿ı/¿ıV¿ıä¿ıê¿ıî¿ıï¿ı°¿ıﬁ¿ıÛ¿ˆ¿ˆ+¿ˆR¿ˆy¿ˆû¿ˆ√¿ˆ›¿ˆÏ¿ˆÚ¿ˆˆ¿ˆ˜¿˜¿˜¿˜H¿˜^¿˜s¿˜w¿˜y¿˜z¿˜√¿˜⁄¿¯)¿¯6¿¯7¿¯Ö¿¯“¿˘¿˘!¿˘"¿˘q¿˘Å¿˘É¿˘Ñ¿˘‰¿˘¯¿˘¸¿˙
¿˙X¿˙º¿˙Ô¿˙Û¿˚1¿˚ú¿˚«¿˚Á¿¸$¿¸9¿¸:¿¸T¿¸U¿¸ô¿¸π¿¸Œ¿¸‹¿¸‚¿¸„¿˝
¿˝¿˝^¿˝¿˝≥¿˝—¿˝Á¿˛
¿˛c¿˛m¿˛∑¿˛Û¿ˇ2¿ˇB¿ˇJ¿ˇu¿ˇÉ¿ˇâ¿ˇä¿ˇÃ¿ˇÚ¿ ¿ ¿ G¿ U¿ [¿ s¿ w¿ x¿ Ñ¿ ∞¿ …¿ ˙¿ ¿0¿@¿F¿g¿k¿l¿x¿ß¿À¿Ú¿&¿,¿0¿1¿=¿z¿è¿µ¿«¿Ó¿¿:¿_¿w¿}¿Å¿Ç¿é¿°¿”¿È¿˛¿¿¿¿d¿h¿v¿ƒ¿ﬂ¿¿ ¿!¿Ñ¿‰¿"¿-¿.¿h¿t¿v¿w¿≈¿¿L¿ù¿’¿¿¿5¿O¿n¿â¿ß¿œ¿Û¿	*¿	T¿	t¿	u¿	Å¿	π¿	∫¿	∆¿	ˇ¿
 ¿
¿
F¿
G¿
S¿
ë¿
í¿
û¿
˛¿
ˇ¿¿l¿m¿y¿Ω¿æ¿ ¿¿    ToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControls Û»