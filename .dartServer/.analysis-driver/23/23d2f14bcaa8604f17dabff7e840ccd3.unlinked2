Ä˜setupParentDatacomputeMinIntrinsicWidthcomputeMaxIntrinsicWidthcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaselinecomputeDryLayoutperformLayoutcomputeSizeForNoChildhitTestChildrenapplyPaintTransformpaintdeferToChildopaquetranslucentbehaviorhitTesthitTestSelfdebugFillPropertiesadditionalConstraints_additionalConstraintsdebugPaintSizemaxWidth	_maxWidth	maxHeight
_maxHeight_limitConstraints_computeSizeaspectRatio_aspectRatio_applyAspectRatio	stepWidth
_stepWidth
stepHeight_stepHeight
_applyStepalwaysNeedsCompositingisRepaintBoundary_alphaopacity_opacityalwaysIncludeSemantics_alwaysIncludeSemanticspaintsChildupdateCompositedLayervisitChildrenForSemantics_currentlyIsRepaintBoundaryattachdetach_updateOpacitylayershaderCallback_shaderCallback	blendMode
_blendModefilter_filter_reclipaddListenerremoveListenergetClipgetApproximateClipRectshouldRecliptoStringshapetextDirectionclipper_clipper_markNeedsClip_defaultClip_clipclipBehavior_clipBehavior_updateClipdescribeApproximatePaintClip_debugPaint
_debugTextdisposeborderRadius_borderRadius_textDirection_cachedRect_cachedPath_getClipPath	elevation
_elevationshadowColor_shadowColorcolor_colordescribeSemanticsConfiguration_shape
background
foreground_painter
decoration_decorationposition	_positionconfiguration_configurationorigin_origin	alignment
_alignmenttransformHitTests
_transform	transformfilterQuality_filterQualitysetIdentityrotateXrotateYrotateZ	translatescale_effectiveTransform_resolvedAlignment_resolve_markNeedResolution_fitAffectsLayoutfit_fit_hasVisualOverflow_clearPaintData_updatePaintData_paintChildWithTransformtranslation_translationonPointerDownonPointerMoveonPointerUponPointerHoveronPointerCancelonPointerPanZoomStartonPointerPanZoomUpdateonPointerPanZoomEndonPointerSignalhandleEvent_opaquehitTestBehavioronEnteronHoveronExitcursor_cursorvalidForMouseTracker_validForMouseTrackertoImagetoImageSyncdebugSymmetricPaintCount_debugSymmetricPaintCountdebugAsymmetricPaintCount_debugAsymmetricPaintCountdebugResetMetrics!debugRegisterRepaintBoundaryPaintignoring	_ignoringignoringSemantics_ignoringSemanticsoffstage	_offstagesizedByParentperformResizedebugDescribeChildren	absorbing
_absorbingmetaDatavalidActions_validActionsonTap_onTaponLongPress_onLongPressonHorizontalDragUpdate_onHorizontalDragUpdateonVerticalDragUpdate_onVerticalDragUpdatescrollFactor_isValidAction_performSemanticScrollLeft_performSemanticScrollRight_performSemanticScrollUp_performSemanticScrollDown
properties_properties	container
_containerexplicitChildNodes_explicitChildNodesexcludeSemantics_excludeSemanticsblockUserActions_blockUserActions_updateAttributedFields_effectiveAttributedLabel_effectiveAttributedValue"_effectiveAttributedIncreasedValue"_effectiveAttributedDecreasedValue_effectiveAttributedHint_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_performTap_performLongPress_performDismiss_performScrollLeft_performScrollRight_performScrollUp_performScrollDown_performIncrease_performDecrease_performCopy_performCut_performPaste$_performMoveCursorForwardByCharacter%_performMoveCursorBackwardByCharacter_performMoveCursorForwardByWord _performMoveCursorBackwardByWord_performSetSelection_performSetText!_performDidGainAccessibilityFocus!_performDidLoseAccessibilityFocusblocking	_blocking	excluding
_excludingindex_indexlink_link_previousLayoutSizeshowWhenUnlinked_showWhenUnlinkedoffset_offsetleaderAnchor_leaderAnchorfollowerAnchor_followerAnchorgetCurrentTransformvalue_valuesized_sized7RenderProxyBoxRenderProxyBoxMixinHitTestBehavior!RenderProxyBoxWithHitTestBehaviorRenderConstrainedBoxRenderLimitedBoxRenderAspectRatioRenderIntrinsicWidthRenderIntrinsicHeightRenderIgnoreBaselineRenderOpacityRenderAnimatedOpacityMixinRenderAnimatedOpacityShaderCallbackRenderShaderMaskRenderBackdropFilterCustomClipperShapeBorderClipper_RenderCustomClipRenderClipRectRenderClipRRectRenderClipOvalRenderClipPath_RenderPhysicalModelBaseRenderPhysicalModelRenderPhysicalShapeDecorationPositionRenderDecoratedBoxRenderTransformRenderFittedBoxRenderFractionalTranslationPointerDownEventListenerPointerMoveEventListenerPointerUpEventListenerPointerCancelEventListener PointerPanZoomStartEventListener!PointerPanZoomUpdateEventListenerPointerPanZoomEndEventListenerPointerSignalEventListenerRenderPointerListenerRenderMouseRegionRenderRepaintBoundaryRenderIgnorePointerRenderOffstageRenderAbsorbPointerRenderMetaDataRenderSemanticsGestureHandlerRenderSemanticsAnnotationsRenderBlockSemanticsRenderMergeSemanticsRenderExcludeSemanticsRenderIndexedSemanticsRenderLeaderLayerRenderFollowerLayerRenderAnnotatedRegionÅÛColorGradientImageImageFilterPointerCancelEventPointerDownEventPointerEventPointerMoveEventPointerUpEventRenderProxySliver	RenderBoxRenderObjectWithChildMixinchildoptionalTypeArgsToverridevoidRenderObject
parentData
ParentDatadoublegetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightgetMaxIntrinsicHeightTextBaselinegetDistanceToActualBaselinecomputeDistanceToActualBaselineSizeBoxConstraintsgetDryLayoutcomputeSizeForNoChildsizelayoutconstraintsparentUsesSizesmallestboolBoxHitTestResultOffsethitTestpositionMatrix4PaintingContext
paintChilddeferToChildcontainshitTestChildrentranslucentaddBoxHitTestEntryopaqueDiagnosticPropertiesBuilderdebugFillPropertiesEnumPropertydefaultValuedebugAssertIsValidmarkNeedsLayouthasBoundedWidthhasTightWidthminWidthcomputeMinIntrinsicWidthisFinitehasInfiniteWidthconstrainWidthcomputeMaxIntrinsicWidthhasBoundedHeighthasTightHeight	minHeightcomputeMinIntrinsicHeighthasInfiniteHeightconstrainHeightcomputeMaxIntrinsicHeightenforce	constrainzerodebugPaintSizePaintisEmptycolorcanvasdrawRectDiagnosticsPropertymaxWidth	maxHeightinfinityChildLayouterlayoutChildChildLayoutHelperdryLayoutChildDoublePropertyFlutterErrorruntimeTypeisTighttightAlignRowCrossAxisAlignmentstretchceiltightenwidthheightColumngetAlphaFromOpacityintmarkNeedsCompositingBitsUpdatemarkNeedsCompositedLayerUpdatemarkNeedsSemanticsUpdateparentOffsetLayerOpacityLayeroldLayeralphapaintRenderObjectVisitorFlagPropertyvalueifTrueRenderSliverAnimatedOpacityRenderSliver_currentlyIsRepaintBoundary_alpha	Animation_opacityattachedopacityremoveListener_updateOpacityaddListener_alwaysIncludeSemanticsPipelineOwnerattachdetachalwaysIncludeSemanticsShaderRect
ShaderMasklinear	BlendModemodulateShaderMaskLayerlayermarkNeedsPaintneedsCompositingshadermaskRect	blendMode	pushLayerdebugCreatorsrcOverBackdropFilterLayerblurfilterClipRectClipPath	ClipRRectClipOvalShapeBorder
ListenablereclipVoidCallbackStringobjectRuntimeTypePathTextDirectiongetOuterPathtextDirectionshapeClip	antiAliasshouldRecliphasSizeperformLayoutgetClipnonehardEdgeantiAliasWithSaveLayergetApproximateClipRectTextPainterTileModerepeatedstrokeWidthstylePaintingStylestroketextTextSpan	TextStylefontSizertldisposeclipperclipBehavior_clipper_updateClip_clippushClipRectClipRectLayershift_debugPaint
_debugTextRRectBorderRadiusBorderRadiusGeometry_markNeedsClipresolvetoRRectpushClipRRect	outerRectClipRRectLayer	drawRRect	tlRadiusXaddOvalcenterdxdydistanceSquaredpushClipPathClipPathLayerdrawPathaddRectdebugDisableShadowsalwaysNeedsCompositingSemanticsConfigurationdescribeSemanticsConfiguration	elevationColorPropertyBoxShape	rectanglecircle
fromRectXYaddRRectshadowColorCanvas
drawShadow	drawPaint
DecorationImageConfiguration
backgroundempty
BoxPainterBoxDecorationImageProvidercreateBoxPaintercopyWithgetSaveCount	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsTreeStyleerrorProperty	isComplexsetIsComplexHint
foregroundtoDiagnosticsNodenameAlignmentGeometryFilterQuality	transform	alignmentfilterQualityoriginAlignmentDirectionalcenterStart	Alignmentxltr	centerEndlocalToGlobalglobalToLocalcopysetIdentityrotateXrotateYrotateZ	translateyzscaleidentity	alongSizemultiplyaddWithPaintTransformMatrixUtilsgetAsTranslationdeterminantpushTransformTransformLayertranslationValuesmatrixstorageImageFilterLayerimageFilterTransformPropertyBoxFitcontain	scaleDowncoverfill	fitHeightfitWidthdebugCheckingIntrinsicsdebugCannotComputeDryLayoutreasonloosensizeConstraints,constrainSizeAndAttemptToPreserveAspectRatiounconstrainedSizeFittedSizesapplyBoxFitdestinationsourceinscribelefttopeverysetZerodebugNeedsLayoutaddWithPaintOffsetoffsetListenerPointerPanZoomStartEventPointerPanZoomUpdateEventPointerPanZoomEndEventPointerSignalEventbehaviorPointerHoverEventListenerbiggestHitTestEntrydebugHandleEventcallPointerHoverEventFlagsSummaryFunctionifEmptyMouseRegionMouseTrackerAnnotationMouseCursordeferPointerEnterEventListenerPointerExitEventListenerifFalsedebugDumpRenderTree
pixelRatiodebugNeedsPainttoImageFuturetoImageSyncincludedParentincludedChildMessagePropertyPercentPropertyunittooltipmessage
DeprecatedSemanticsNodevisitChildrenForSemanticsisBlockingUserActionsdescription%markNeedsLayoutForSizedByParentChangecomputeDryLayoutperformResizeListoffstagesparsedynamicGestureTapCallbackGestureLongPressCallbackGestureDragUpdateCallbackSemanticsActiontap
scrollLeftscrollRightSet	setEqualsonTap	longPressonLongPressonScrollRightonScrollLeftscrollUp
onScrollUp
scrollDownonScrollDownDragUpdateDetailsdeltaprimaryDeltaglobalPositionIterablePropertySemanticsPropertiesattributedLabelisSemanticBoundaryExcludeSemantics	SemanticsAttributedStringlabelattributedValueattributedIncreasedValueincreasedValueattributedDecreasedValuedecreasedValueattributedHinthintexplicitChildNodesscopesRoutetoggledcheckedenabled	isEnabled	isCheckedmixedisCheckStateMixed	isToggledselected
isSelectedbuttonisButtonexpanded
isExpandedlinkisLinksliderisSliderkeyboardKeyisKeyboardKeyheaderisHeader	textFieldisTextFieldreadOnly
isReadOnly	focusableisFocusablefocused	isFocusedinMutuallyExclusiveGroupisInMutuallyExclusiveGroupobscured
isObscured	multilineisMultilinehiddenisHiddenimageisImagehintOverrides
isNotEmpty
namesRoute
liveRegionmaxValueLengthcurrentValueLengthsortKeytagForChildrenaddTagForChildren	onDismiss
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocuscustomSemanticsActionsTextSelection+isBlockingSemanticsOfPreviouslyPaintedNodesisMergingSemanticsOfDescendants
ScrollViewscrollIndexCustomScrollViewindexInParentCompositedTransformTargetLeaderLayer	LayerLink
leaderSizeCompositedTransformFollowerFollowerLayertopLeft
bottomLeftgetLastTransformleadershowWhenUnlinkedlinkedOffsetunlinkedOffsetchildPaintBoundsfromLTRBnegativeInfinityAnnotatedRegionLayerLayerfindObject	RenderBoxRenderObjectWithChildMixinRenderProxyBoxMixinRenderProxyBoxRenderAnimatedOpacityMixin
ListenableCustomClipper_RenderCustomClip_RenderPhysicalModelBase!RenderProxyBoxWithHitTestBehaviorMouseTrackerAnnotation.Ó‡Ñπ)ú≈‰„ok˝
# Ç7ÇöPointerCancelEventPointerDownEventPointerEventPointerMoveEventPointerUpEvent Çpackage:flutter/gestures.dartÄºÄ‰ColorGradientImageImageFilter Ä¶  Ä∂uiÄπdart:ui  ÄË  package:flutter/animation.dart  Å  package:flutter/foundation.dart  Å;  package:flutter/gestures.dart  Åc  package:flutter/semantics.dart  Åå  package:flutter/services.dart  Åµ  box.dart  Å»  
layer.dart  Å›  layout_helper.dart  Å˙  object.dart    	dart:core¿T  ¿ÄNì¶ <ÄÜÄ§Ä•ÄÊÄÁÅÅ:ÅbÅãÅ≥Å¥Å«Å‹Å˘ÇÇÇ<ÇRÇfÇvÇäÇúÇùÇ›Ç·É*ÉxÉ«ÑÑÑ^ÑØÑ˛ÖÖÖ$Ö(ÖxÖâÖ˝ÜÜ%ÜmÜ∫ÜÃÜÛááááá:á>á{á∆àààeàïàßâââ=âââ¨â◊â˛äää	ääHääÉäÑäêä√ä˙ä˛äˇãã>ãuãyãzãÜãπããÙãıååDå|å∏åºåΩå…åˇçRçVçWçcç|ç¡çç¸é ééJééé…éÍéÓéÔé˚èKèãèèèêèúè‚è„èÔê&êOêhêvê|ê£êßê©ê™êŒêÂë3ëoëëÄëÀíí7íAíBíèí íŸí€í‹ìì5ìì≤ì∏ì¸î"îTîjîîÄî—ïïïLïRïôïµï∂ï¬ñ
ñ&ñIñ°ñ„óó ó&ó<ó@óAóMóòóôó•óÍòòròvòxòyò™òÆò˝ôFôñô£ôßô˜ö@ö]öëö«öÕõõ õ6õiõ§õ€õõÒú1úwú†ú‘ú¸ù'ù5ù;ù_ùvùzù{ùáù∫ûûBûHûâû•ûŸüüü,ü0ü1ü=üpü ü¯ü˛†?†[†è† †–†‚†Ê†Á†Û°&°Ç°±°∑°˘¢¢K¢à¢é¢°¢•¢¶¢≤¢Â£A£p£v£∏£’§
§G§M§`§d§e§q§ä§√§‹•4•N•[•™•∞•¥•µ•¡•˜¶¶_¶l¶ª¶¡¶≈¶∆¶“ßß=ßMßfßòß∞ß›®®®/®9®=®>®J®è®∫©#©'©)©*©c©¶©™©˜™B™ç™‹™ı™˘´D´ä´ö´ ¨¨P¨V¨ù¨±¨∆¨‹≠≠+≠K≠l≠â≠®≠Ω≠æÆÆ7ÆKÆjÆÑÆ¢Æ∞Æ∂ÆÕÆ‰ÆËÆÈØ@ØfØ{ØõØµØ‘Ø‚ØË∞ ∞∞∞∞]∞x∞û±	±1±°±®±¨±≠≤≤(≤z≤©≤Ø≤Ô≤Û≤Ù≥ ≥6≥O≥o≥§≥´≥Ø≥∞≥º≥’≥Ó¥¥@¥G¥K¥L¥X¥ù¥»µ!µ|µÄµÇµÉµæµ¬∂∂]∂´∂Ø∂˜∑G∑∑É∑–∏∏m∏¥∏∏ππUπ¶πÙ∫B∫ê∫ﬁª,ªyªøªˇº0ºmºsº∂ºÃº‚ΩΩ%ΩJΩmΩÇΩÉΩ≠Ω≥ææJætæãæ≠æ∆æ‚øøøø1øHøLøMøYøåøßøÀø—øÍ¿ @¿ @"¿ @2¿ @6¿ @7¿ @C¿ @v¿ @ë¿ @µ¿ @ª¿ @‘¿ A¿ A¿ A¿ A ¿ A!¿ A-¿ A`¿ Az¿ Aù¿ A£¿ Aº¿ AÓ¿ AÙ¿ B¿ B¿ B	¿ B¿ BH¿ Bb¿ BÖ¿ Bã¿ B§¿ B÷¿ B‹¿ BÏ¿ B¿ BÒ¿ C(¿ CV¿ Cf¿ C±¿ CÕ¿ D¿ DZ¿ D´¿ D˝¿ E¿ E&¿ E.¿ EA¿ EK¿ EL¿ Ek¿ Eé¿ Eî¿ Eï¿ Eæ¿ E—¿ E“¿ F¿ Fk¿ FÇ¿ Fú¿ F¡¿ FŒ¿ FÙ¿ G¿ G¿ G ¿ Gn¿ G∏¿ H¿ H¿ H¿ HD¿ Hh¿ Hç¿ Hì¿ Hî¿ Hæ¿ H‰¿ I	¿ I¿ I¿ I8¿ I\¿ IÅ¿ Iá¿ Ià¿ I≤¿ Iÿ¿ I˝¿ J¿ J¿ J;¿ J?¿ J@¿ JL¿ JÇ¿ J≠¿ J±¿ J≤¿ Jæ¿ J◊¿ K¿ K¿ KK¿ KQ¿ KU¿ KV¿ Kb¿ Kß¿ K“¿ L¿ L¿ L¿ L¿ LU¿ LY¿ L¶¿ Lˆ¿ M*¿ M.¿ Mz¿ M ¿ N¿ N`¿ N≠¿ N’¿ NŸ¿ O)¿ Ou¿ O≥¿ O∑¿ P¿ PR¿ P°¿ P∏¿ Pº¿ P ¿ PŒ¿ Q¿ Qd¿ Q≤¿ Q≈¿ R¿ RT¿ R°¿ R’¿ S	¿ SY¿ S_¿ SØ¿ S–¿ SÈ¿ T ¿ T¿ T.¿ Tc¿ Tö¿ Tπ¿ T⁄¿ TÔ¿ T¿ U;¿ UA¿ Ui¿ Uê¿ U¶¿ U«¿ UÒ¿ V¿ V¿ V$¿ V<¿ VS¿ VW¿ VX¿ V§¿ V™¿ V“¿ V˚¿ W¿ W4¿ W^¿ W~¿ Wå¿ Wí¿ W´¿ W¬¿ W∆¿ W«¿ X ¿ X¿ X4¿ XH¿ XN¿ Xw¿ X{¿ X|¿ Xà¿ Xª¿ XË¿ XÏ¿ XÌ¿ X˘¿ Y,¿ YE¿ YW¿ Y]¿ Yõ¿ Y≈¿ Y…¿ Y ¿ Y÷¿ Z	¿ Z"¿ Z4¿ Z:¿ ZU¿ Zé¿ Zî¿ Z∞¿ ZÔ¿ [¿ [¿ [ ¿ [,¿ [_¿ [x¿ [ä¿ [ê¿ [´¿ [‰¿ [Í¿ \¿ \E¿ \q¿ \u¿ \v¿ \◊¿ \¿ ]¿ ]i¿ ]â¿ ]⁄¿ ]‚¿ ^¿ ^U¿ ^v¿ ^ ¿ ^“¿ _¿ _¿ _1¿ _7¿ _;¿ _<¿ _H¿ _~¿ _ó¿ _Ã¿ _Ï¿ _Û¿ _˜¿ _¯¿ `¿ `¿ `6¿ `h¿ `à¿ `è¿ `ì¿ `î¿ `†¿ `Â¿ a¿ aL¿ aä¿ aé¿ aê¿ aë¿ a∆¿ a ¿ b¿ bh¿ bù¿ b°¿ bÌ¿ c=¿ cã¿ c÷¿ d$¿ dM¿ dQ¿ dû¿ dÏ¿ e;¿ eR¿ eV¿ ed¿ eh¿ e∑¿ eˇ¿ fN¿ fa¿ f∞¿ fÙ¿ gC¿ gx¿ g≠¿ g˛¿ h¿ h.¿ hC¿ hD¿ hP¿ hÉ¿ hú¿ hÆ¿ h¥¿ h–¿ i¿ i¿ i1¿ ia¿ ie¿ if¿ ir¿ i•¿ iæ¿ i–¿ i÷¿ iÚ¿ j0¿ j6¿ jS¿ jÉ¿ já¿ jà¿ jî¿ j«¿ jÙ¿ j¯¿ j˘¿ kZ¿ ks¿ kú¿ kÓ¿ l¿ lJ¿ lR¿ lÅ¿ lé¿ l±¿ l∑¿ lª¿ lº¿ l»¿ l˛¿ m¿ mL¿ ml¿ ms¿ mw¿ mx¿ mÑ¿ mù¿ m∂¿ mË¿ n¿ n¿ n¿ n¿ n¿ nW¿ nã¿ nÓ¿ o¿ o¿ o2¿ o3¿ o?¿ oÇ¿ oì¿ oó¿ oô¿ oö¿ o≈¿ o…¿ p¿ pN¿ pR¿ pù¿ pÁ¿ q/¿ q¿ q¨¿ q·¿ qÁ¿ r,¿ r>¿ rX¿ rÅ¿ ró¿ r»¿ r„¿ s¿ sS¿ sh¿ si¿ su¿ s∑¿ s∏¿ sƒ¿ s¸¿ s˝¿ t¿ t¿ tA¿ tG¿ tó¿ t∞¿ t∂¿ t˙¿ uA¿ uR¿ ut¿ uá¿ u•¿ uœ¿ uÏ¿ u˙¿ v ¿ v<¿ ve¿ v{¿ v∞¿ vË¿ w¿ w¿ w<¿ w~¿ w†¿ w¶¿ w™¿ w´¿ wÒ¿ w˜¿ x5¿ x;¿ xT¿ xí¿ x≤¿ x›¿ y	¿ y¿ y¿ yB¿ yb¿ yf¿ yg¿ ys¿ yô¿ yª¿ y“¿ y÷¿ y◊¿ y„¿ z6¿ zq¿ zã¿ zù¿ z°¿ z¢¿ zÆ¿ zÂ¿ {¿ {¿ {!¿ {C¿ {G¿ {H¿ {T¿ {î¿ {ÿ¿ {Ô¿ {ı¿ {˘¿ {˙¿ |¿ |K¿ |v¿ |Æ¿ }+¿ }/¿ }1¿ }2¿ }É¿ }á¿ }÷¿ ~+¿ ~m¿ ~…¿ ~ÿ¿ ~Ÿ¿ ~Â¿ 4¿ Y¿ Z¿ f¿ π¿ ˚¿ Ä¿ Ä5¿ Ä9¿ Ä:¿ Äx¿ Ä~¿ ÄŒ¿ ÄÁ¿ ÄÌ¿ Å6¿ Å^¿ Åd¿ Å¥¿ Å˚¿ Ç)¿ ÇH¿ Çq¿ Çé¿ Çú¿ Ç¢¿ Ç ¿ Ç¯¿ Ç˛¿ É¿ É(¿ ÉS¿ ÉY¿ Éo¿ És¿ Ét¿ É∫¿ É¿¿ É˛¿ Ñ¿ Ñ¿ Ñ#¿ Ñs¿ Ñ∫¿ Ñ˘¿ Ö¿ ÖE¿ Öq¿ Ö¿ ÖÖ¿ Ö™¿ Ö ¿ ÖŒ¿ Öœ¿ Ö€¿ Ü ¿ Ü¿ ÜB¿ Üâ¿ Üç¿ Üé¿ Üö¿ Ü¨¿ Üÿ¿ ÜÏ¿ Ü¿ ÜÒ¿ á¿ á-¿ ág¿ áÖ¿ á…¿ á˙¿ àJ¿ àt¿ à|¿ à§¿ àŒ¿ àÚ¿ à˙¿ â ¿ â¿ â¿ â¿ â:¿ â\¿ âz¿ â~¿ â¿ âã¿ â¬¿ âŸ¿ âÁ¿ âÌ¿ ä¿ ä¿ ä¿ ä ¿ ä`¿ ä§¿ äª¿ ä¡¿ ä≈¿ ä∆¿ ä“¿ ã¿ ãB¿ ãí¿ å¿ å¿ å¿ å¿ å]¿ åa¿ å≤¿ åﬁ¿ ç>¿ çs¿ çç¿ çµ¿ çﬁ¿ çÙ¿ é
¿ é&¿ é`¿ éd¿ éf¿ ég¿ é∞¿ é¥¿ é¿ è'¿ è(¿ èa¿ èe¿ è¥¿ èÈ¿ ê¿ êq¿ êÜ¿ êú¿ ê»¿ êˆ¿ ë¿ ë>¿ ëS¿ ëT¿ ë`¿ ë°¿ ë¢¿ ë‡¿ ëÊ¿ í5¿ í~¿ íÑ¿ íƒ¿ íﬁ¿ ì,¿ ìd¿ ìú¿ ìæ¿ ìÎ¿ î¿ î¿ î#¿ î@¿ îV¿ îZ¿ î[¿ îü¿ î•¿ îÙ¿ ï?¿ ïh¿ ïÄ¿ ï£¿ ï¬¿ ï–¿ ï÷¿ ïÓ¿ ñ¿ ñ¿ ñ	¿ ñ¿ ñI¿ ñJ¿ ñV¿ ñç¿ ñ¶¿ ñ∆¿ ñÈ¿ ñˆ¿ ó-¿ óP¿ ór¿ ó®¿ ó∫¿ óÊ¿ ó˚¿ ò¿ ò¿ ò(¿ ò.¿ ò2¿ ò4¿ ò5¿ òÉ¿ òá¿ ò◊¿ òÎ¿ ô¿ ô@¿ ôE¿ ôÖ¿ ô˚¿ ö¿ ö1¿ öE¿ öF¿ öR¿ öõ¿ öú¿ öÏ¿ ö˝¿ õ¿ õP¿ õc¿ õã¿ õ•¿ õ ¿ õÊ¿ õÙ¿ õ˙¿ ú¿ ú%¿ ú)¿ ú*¿ úÉ¿ úí¿ úò¿ ú–¿ ú˘¿ ù¿ ù4¿ ùS¿ ùa¿ ùg¿ ù¿ ùï¿ ùô¿ ùö¿ ù¶¿ ù⁄¿ ù€¿ ùÁ¿ û¿ û7¿ ûW¿ û~¿ ûù¿ û¬¿ û¯¿ ü
¿ ü6¿ üK¿ üW¿ üd¿ üx¿ ü~¿ üÇ¿ üÑ¿ üÖ¿ ü≤¿ ü∂¿ üˇ¿ †¿ †¿ †e¿ †i¿ †≤¿ †˛¿ °¿ °¿ °^¿ °¨¿ °˝¿ ¢M¿ ¢Q¿ ¢_¿ ¢c¿ ¢¨¿ ¢˜¿ £@¿ £â¿ £ÿ¿ §¿ §-¿ §3¿ §Ñ¿ §∆¿ §«¿ §‰¿ §Â¿ •(¿ •.¿ •}¿ •Õ¿ •‰¿ •¿ ¶=¿ ¶>¿ ¶é¿ ¶ø¿ ¶≈¿ ß¿ ßd¿ ß{¿ ßá¿ ß⁄¿ ß€¿ ®&¿ ®J¿ ®b¿ ®c¿ ®®¿ ®Î¿ ©¿ ©%¿ ©i¿ ©∞¿ ©Û¿ ™:¿ ™z¿ ™{¿ ™»¿ ´¿ ´j¿ ´ª¿ ´¡¿ ¨	¿ ¨X¿ ¨e¿ ¨k¿ ¨π¿ ¨≈¿ ¨À¿ ≠¿ ≠]¿ ≠ë¿ ≠Õ¿ ≠Œ¿ ≠⁄¿ Æ¿ Æ¿ Æ¿ Æe¿ Æú¿ Æ√¿ Æ…¿ Ø¿ Ø`¿ Ø≠¿ Ø¿ ∞¿ ∞&¿ ∞>¿ ∞D¿ ∞E¿ ∞Ñ¿ ∞ü¿ ∞†¿ ∞Ë¿ ∞Ó¿ ±9¿ ±`¿ ±Ü¿ ±á¿ ±º¿ ±»¿ ±‰¿ ≤5¿ ≤9¿ ≤:¿ ≤F¿ ≤|¿ ≤¥¿ ≤«¿ ≤Õ¿ ≥¿ ≥H¿ ≥É¿ ≥á¿ ≥â¿ ≥ä¿ ≥«¿ ≥›¿ ≥Û¿ ¥¿ ¥:¿ ¥U¿ ¥z¿ ¥è¿ ¥ê¿ ¥Œ¿ ¥˚¿ µ¿ µG¿ µi¿ µw¿ µ}¿ µ∞¿ µÀ¿ ∂¿ ∂5¿ ∂q¿ ∂†¿ ∂∏¿ ∂æ¿ ∂“¿ ∑¿ ∑3¿ ∑9¿ ∑=¿ ∑>¿ ∑J¿ ∑o¿ ∑à¿ ∑≥¿ ∑∑¿ ∑∏¿ ∑ƒ¿ ∑÷¿ ∏¿ ∏¿ ∏¿ ∏¿ ∏7¿ ∏I¿ ∏_¿ ∏¿ ∏É¿ ∏Ñ¿ ∏ö¿ ∏¶¿ ∏ß¿ ∏—¿ ∏Ú¿ π¿ π1¿ πI¿ πO¿ πS¿ πi¿ πj¿ πv¿ πè¿ π¿¿ π€¿ πˆ¿ ∫
¿ ∫¿ ∫¿ ∫¿ ∫,¿ ∫c¿ ∫g¿ ∫h¿ ∫t¿ ∫Ø¿ ∫À¿ ∫·¿ ∫ˆ¿ ª¿ ª+¿ ªS¿ ª†¿ ª¶¿ ª™¿ ª´¿ ª¡¿ ª‹¿ ªË¿ º(¿ º8¿ ºV¿ º}¿ ºî¿ º∏¿ Ω/¿ Ω[¿ Ωx¿ ΩÇ¿ Ωû¿ Ω∆¿ ΩË¿ æ¿ æ¿ æ7¿ æ]¿ æ{¿ æä¿ æó¿ æÈ¿ æÛ¿ ø¿ ø¿ ø$¿ ø(¿ ø)¿ ø5¿ øH¿ øc¿ øz¿ øè¿ øì¿ øï¿ øñ¿ øΩ¿ ø¡¿ ¿¿ ¿`¿ ¿v¿ ¿≠¿ ¿œ¿ ¿’¿ ¡%¿ ¡6¿ ¡<¿ ¡Å¿ ¡î¿ ¡•¿ ¡∏¿ ¡–¿ ¡÷¿ ¡◊¿ ¡„¿ ¬¿ ¬¿ ¬¿ ¬g¿ ¬É¿ ¬ò¿ ¬µ¿ ¬›¿ ¬Û¿ ¬˚¿ √¿ √7¿ √;¿ √<¿ √H¿ √¿ √ò¿ √ø¿ √÷¿ √¸¿ ƒ¿ ƒ*¿ ƒ<¿ ƒS¿ ƒy¿ ƒ¶¿ ƒ±¿ ƒ¿¿ ƒÏ¿ ≈¿ ≈
¿ ≈¿ ≈+¿ ≈1¿ ≈5¿ ≈6¿ ≈B¿ ≈Ç¿ ≈í¿ ≈≠¿ ≈‹¿ ∆¿ ∆L¿ ∆…¿ ∆”¿ ∆€¿ ∆Ó¿ ∆¯¿ ∆¸¿ ∆˛¿ ∆ˇ¿ «.¿ «2¿ «Ç¿ «–¿ «Ê¿ »¿ »I¿ »O¿ »ü¿ »ª¿ »¡¿ …¿ …¿ …L¿ …`¿ …q¿ …¨¿ …ø¿ …◊¿ …˘¿  ¿  E¿  F¿  v¿  |¿  «¿  ‚¿  Ë¿ À¿ ÀX¿ À~¿ ÀØ¿ À—¿ Àﬂ¿ ÀÂ¿ Ã ¿ Ã¿ Ã¿ Ã¿ ÃZ¿ Ãê¿ Ã±¿ Ã›¿ Õ ¿ Õ¿ Õ¿ Õ0¿ ÕF¿ ÕJ¿ ÕK¿ ÕW¿ Õµ¿ Õ∂¿ Õ¬¿ Œ
¿ Œ&¿ Œ;¿ ŒX¿ ŒÄ¿ Œñ¿ Œû¿ Œ§¿ Œ⁄¿ Œﬁ¿ Œﬂ¿ ŒÎ¿ œ"¿ œ;¿ œb¿ œy¿ œ†¿ œº¿ œŒ¿ œÍ¿ œ¸¿ –¿ –9¿ –g¿ –r¿ –Å¿ –≠¿ –√¿ –À¿ –ÿ¿ –Ï¿ –Ú¿ –ˆ¿ –˜¿ —¿ —C¿ —S¿ —n¿ —ù¿ —∆¿ “¿ “â¿ “ì¿ “õ¿ “Æ¿ “∏¿ “º¿ “æ¿ “ø¿ “‚¿ “Ê¿ ”4¿ ”}¿ ”«¿ ”˛¿ ‘!¿ ‘'¿ ‘w¿ ‘î¿ ‘ö¿ ‘ﬂ¿ ‘Ú¿ ’¿ ’¿ ’.¿ ’4¿ ’5¿ ’J¿ ’c¿ ’d¿ ’Ö¿ ’§¿ ’æ¿ ’Ò¿ ’˜¿ ÷¿ ÷¿ ÷¿ ÷ ¿ ÷O¿ ÷P¿ ÷\¿ ÷§¿ ÷∑¿ ÷“¿ ÷˚¿ ◊G¿ ◊i¿ ◊ô¿ ◊ ¿ ◊—¿ ÿ¿ ÿB¿ ÿV¿ ÿ\¿ ÿí¿ ÿñ¿ ÿó¿ ÿ£¿ ÿ⁄¿ ÿÛ¿ Ÿ¿ Ÿ1¿ ŸW¿ Ÿs¿ ŸÖ¿ Ÿó¿ Ÿ∑¿ ŸŒ¿ ŸÙ¿ ⁄!¿ ⁄,¿ ⁄;¿ ⁄g¿ ⁄}¿ ⁄Ö¿ ⁄í¿ ⁄¶¿ ⁄¨¿ ⁄∞¿ ⁄±¿ ⁄Ω¿ ⁄˝¿ €¿ €(¿ €W¿ €Ä¿ €’¿ ‹h¿ ‹r¿ ‹z¿ ‹ç¿ ‹ó¿ ‹õ¿ ‹ù¿ ‹û¿ ‹¿¿ ‹ƒ¿ ›	¿ ›J¿ ›N¿ ›å¿ ›™¿ ›Æ¿ ›Ë¿ ﬁ(¿ ﬁk¿ ﬁ¢¿ ﬁΩ¿ ﬁ√¿ ﬂ¿ ﬂa¿ ﬂ±¿ ﬂƒ¿ ﬂ ¿ ‡¿ ‡"¿ ‡3¿ ‡F¿ ‡^¿ ‡d¿ ‡e¿ ‡q¿ ‡±¿ ‡≤¿ ‡æ¿ ·¿ ·"¿ ·7¿ ·T¿ ·|¿ ·í¿ ·ö¿ ·†¿ ·÷¿ ·⁄¿ ·€¿ ·Á¿ ‚¿ ‚7¿ ‚^¿ ‚u¿ ‚õ¿ ‚∑¿ ‚…¿ ‚Á¿ ‚˘¿ „¿ „6¿ „c¿ „n¿ „}¿ „©¿ „ø¿ „«¿ „‘¿ „Ë¿ „Ó¿ „Ú¿ „Û¿ „ˇ¿ ‰?¿ ‰O¿ ‰j¿ ‰ô¿ ‰¬¿ Â	¿ Â>¿ ÂH¿ ÂP¿ Âc¿ Âm¿ Âq¿ Âs¿ Ât¿ Â∏¿ Âº¿ Ê¿ ÊC¿ Êç¿ Ê√¿ Ê‡¿ Ê˙¿ Á¿ Á3¿ ÁS¿ Áw¿ Áä¿ Á´¿ Á ¿ Á·¿ Ë¿ Ë¿ ËT¿ ËZ¿ Ë{¿ ËÅ¿ Ëœ¿ Ë˝¿ È#¿ È8¿ ÈX¿ Èr¿ Èê¿ Èû¿ È§¿ È‡¿ È¯¿ Í0¿ ÍX¿ Í^¿ Ít¿ Íx¿ Íy¿ Íë¿ Í∫¿ Í–¿ ÍÒ¿ Î¿ Î¿ Î%¿ Î?¿ ÎU¿ ÎY¿ ÎZ¿ Îv¿ Îì¿ Î£¿ Îæ¿ Îÿ¿ ÎÊ¿ ÎÏ¿ Ï ¿ Ï¿ Ï¿ Ï¿ Ï'¿ Ïn¿ Ï†¿ Ï¬¿ Ï∆¿ Ï«¿ Ï”¿ Ì¿ ÌE¿ ÌÇ¿ Ì∂¿ Ì¿ ÌÙ¿ Ìˆ¿ Ì˜¿ Ó<¿ ÓK¿ ÓO¿ Óì¿ Ó◊¿ Ô¿ Ô¿ Ô&¿ Ô,¿ Ôb¿ Ôz¿ Ôã¿ Ô¥¿ ÔÃ¿ ÔÏ¿ ¿ !¿ R¿ s¿ ä¿ Ø¿ ∞¿ Œ¿ ‘¿ Ò#¿ Ò;¿ Ò[¿ Òn¿ Òå¿ Ò¶¿ Ò¥¿ Ò∫¿ ÒŒ¿ Ò‰¿ ÒË¿ ÒÈ¿ Ú¿ Ú¿ Új¿ ÚÖ¿ Úã¿ Ú÷¿ Ú‹¿ Û¿ ÛI¿ Ûh¿ Ûí¿ Û≥¿ Û¡¿ Û«¿ Û‚¿ Û¯¿ Û¸¿ Û˝¿ Ù	¿ Ù$¿ Ù9¿ Ùc¿ Ùy¿ Ùò¿ Ù⁄¿ Ùˆ¿ ı>¿ ıD¿ ıH¿ ıI¿ ıU¿ ıù¿ ıπ¿ ıŒ¿ ıÎ¿ ˆ¿ ˆ)¿ ˆ1¿ ˆ7¿ ˆm¿ ˆq¿ ˆr¿ ˆ~¿ ˆµ¿ ˆŒ¿ ˆ‚¿ ˆ¿ ˆˆ¿ ˆ˜¿ ˜
¿ ˜>¿ ˜Ä¿ ˜û¿ ˜Æ¿ ˜œ¿ ˜Ó¿ ¯¿ ¯+¿ ¯?¿ ¯c¿ ¯ê¿ ¯ø¿ ¯Ã¿ ¯÷¿ ¯Ù¿ ¯¸¿ ˘¿ ˘¿ ˘¿ ˘D¿ ˘p¿ ˘â¿ ˘§¿ ˘π¿ ˘Ã¿ ˘È¿ ˘Ú¿ ˘¯¿ ˙D¿ ˙^¿ ˙v¿ ˙ã¿ ˙™¿ ˙≥¿ ˙π¿ ˙‹¿ ˙Ù¿ ˚¿ ˚¿ ˚*¿ ˚[¿ ˚x¿ ˚¥¿ ¸¿ ¸R¿ ¸ñ¿ ¸”¿ ¸›¿ ˝¿ ˝¿ ˝6¿ ˝X¿ ˝_¿ ˝`¿ ˝p¿ ˝ö¿ ˝≠¿ ˝∑¿ ˝ª¿ ˝º¿ ˝»¿ ˛¿ ˛:¿ ˛~¿ ˛‘¿ ˛ÿ¿ ˛⁄¿ ˛€¿ ˇ ¿ ˇ$¿ ˇh¿ ˇl¿ ˇz¿ ˇ~¿ ˇ ¿ ˇ⁄¿ ¿ D¿ J¿ É¿ â¿ ø¿ ◊¿ Ë¿¿0¿K¿e¿ñ¿∑¿∏¿ƒ¿¿¿¿Y¿u¿ä¿ß¿œ¿Â¿Ì¿Û¿)¿-¿.¿:¿q¿ä¿û¿¨¿≤¿≥¿∆¿¯¿¿&¿G¿f¿â¿°¿µ¿Ÿ¿¿5¿B¿L¿j¿r¿Ö¿è¿ê¿∫¿Ê¿ˇ¿¿(¿;¿X¿a¿g¿≥¿Õ¿‰¿¯¿¿ ¿&¿H¿`¿n¿à¿ñ¿«¿‰¿ ¿o¿æ¿	¿	?¿	I¿	o¿	x¿	°¿	√¿	 ¿	À¿	€¿
¿
¿
"¿
&¿
'¿
3¿
y¿
•¿
¯¿
¸¿
˛¿
ˇ¿$¿>¿r¿Ä¿Å¿∫¿»¿ ¿À¿¿@¿_¿e¿≥¿Ú¿¯¿G¿r¿â¿≠¿Ó¿/¿E¿f¿É¿™¿ø¿¿¿ÿ¿Ÿ¿˘¿ˇ¿!¿M¿g¿å¿¨¿∫¿¿¿Ÿ¿Ó¿¿¿!¿"¿m¿ù¿Ω¿Ë¿¿¿¿1¿G¿K¿L¿ó¿€¿ı¿˚¿>¿Ñ¿æ¿„¿¿6¿D¿J¿f¿|¿Ä¿Å¿ç¿ü¿∏¿Õ¿·¿&¿o¿ª¿¿B¿X¿\¿]¿i¿è¿Î¿Ô¿¿¸¿3¿r¿…¿˛¿¿+¿c¿x¿Ñ¿»¿⁄¿¿S¿ª¿Ÿ¿5¿ï¿Ú¿¿{¿¿˛¿¿¿)¿K¿o¿w¿}¿ü¿‘¿¿:¿^¿f¿l¿p¿q¿}¿¬¿Ì¿4¿ë¿ï¿ó¿ò¿–¿ˇ¿8¿L¿l¿Ä¿¢¿ƒ¿Á¿	¿¿5¿U¿u¿ù¿≈¿ﬂ¿„¿‰¿ 4¿ l¿ r¿ ¡¿!¿!%¿!8¿!V¿!r¿!Ä¿!Ü¿!õ¿!±¿!—¿!’¿!÷¿"¿" ¿"l¿"∂¿"º¿#¿#L¿#ú¿#Î¿$*¿${¿$≠¿$Œ¿$˙¿%¿%'¿%-¿%E¿%[¿%{¿%¿%Ä¿%º¿%¬¿&¿&I¿&¿&†¿&Ã¿&Ô¿&˝¿'¿'¿'5¿'U¿'Y¿'Z¿'f¿'¥¿'µ¿(¿(K¿(n¿(t¿(ƒ¿)¿)/¿)0¿)G¿)ñ¿)µ¿)ª¿*¿*V¿*{¿*≈¿*‰¿*Ú¿*¯¿+¿+4¿+T¿+X¿+Y¿+´¿+±¿+Ò¿,'¿,H¿,t¿,ó¿,•¿,´¿,Á¿-¿-;¿-c¿-i¿-¿-É¿-Ñ¿-µ¿-Ã¿-Î¿.¿.!¿.%¿.&¿.i¿.ä¿.¨¿.¬¿.‚¿.Ê¿.Á¿/*¿/K¿/m¿/É¿/£¿/ß¿/®¿/Î¿0¿0.¿0D¿0d¿0h¿0i¿0´¿0Ï¿1¿1&¿1F¿1J¿1K¿1z¿1≠¿1Õ¿1„¿2¿2¿2¿2-¿2y¿2±¿2 ¿2–¿2ˇ¿3¿3L¿3R¿3k¿3ê¿3«¿3ˇ¿4¿4'¿4L¿4á¿4ç¿4®¿4‹¿4‚¿4ı¿4˘¿4˙¿5¿5N¿5Ö¿5¬¿6 ¿6¿6R¿6V¿6W¿6c¿6≥¿6Ú¿7¿7\¿7v¿7≤¿7Ù¿7˝¿8¿8¿8	¿8¿8L¿8e¿8õ¿8æ¿9¿9.¿9É¿9«¿9˝¿:(¿:B¿:V¿:b¿:ã¿:©¿:Ω¿:‘¿:Ì¿;>¿;K¿;\¿;í¿;™¿;¥¿;√¿<#¿<g¿<§¿< ¿<Û¿<˛¿='¿=r¿=û¿=Ø¿=Ë¿=Ú¿>*¿>>¿>l¿>É¿>ë¿>ô¿>ü¿>£¿>§¿>∞¿>Ò¿?¿?#¿?$¿?0¿?u¿?†¿?Á¿@*¿@~¿@„¿A:¿A>¿A@¿AA¿AÜ¿Aµ¿AÈ¿A˝¿B¿BR¿Bt¿Bä¿B≠¿B¿¿Bﬂ¿C¿C+¿C@¿CA¿Cb¿Cc¿Cw¿Cù¿C´¿C±¿CÏ¿C¿CÒ¿D¿D/¿DE¿DI¿DJ¿Dq¿DÑ¿D°¿D∂¿D—¿DÍ¿E¿E¿E;¿ES¿Ei¿Eo¿Es¿Et¿Eº¿E÷¿EÂ¿Eˇ¿F¿F&¿F,¿FM¿F_¿F°¿F∫¿F«¿F‡¿F¯¿F˛¿G¿G¿G<¿GB¿Gí¿G„¿H¿H¿HX¿HÄ¿H±¿H—¿H¸¿I¿I)¿I/¿IG¿I^¿Iy¿I}¿I~¿I∫¿I¿¿J¿JG¿J}¿Jû¿J ¿JÌ¿J˚¿K¿K¿K4¿KO¿KS¿KT¿Kï¿Kñ¿K¢¿Kÿ¿KÒ¿L;¿L<¿Là¿L÷¿M"¿MC¿Mh¿Mz¿M€¿M˛¿N¿N¿N)¿NG¿Ns¿N≥¿Nø¿NŸ¿N·¿N‚¿N˜¿O¿O]¿Oœ¿P
¿P'¿PB¿P\¿P{¿Pô¿P≥¿Q	¿Q¿Q¿QA¿QG¿QK¿QL¿QX¿Qq¿Qä¿QÕ¿Q‚¿R¿RH¿Rº¿R˜¿S¿S/¿SI¿Sh¿SÜ¿S†¿S¯¿T ¿T¿T&¿TI¿TO¿TS¿TT¿Tp¿Tá¿Tà¿Tæ¿Tƒ¿T„¿U¿U/¿UP¿Ur¿Uè¿Uß¿U…¿Uœ¿U”¿U‘¿UÔ¿V¿V%¿V)¿V*¿VF¿Vd¿Vr¿Vx¿Vy¿Ví¿V¥¿V€¿VË¿V˙¿W$¿Wh¿W≤¿W˛¿Xa¿X…¿Y0¿Yb¿Yø¿Y‰¿Z¿Zg¿Zm¿Zq¿Zr¿Z«¿[¿[1¿[U¿[o¿[¿[î¿[©¿[ˆ¿[ˇ¿\¿\>¿\D¿\U¿\Y¿\Z¿\f¿\ù¿\›¿\Î¿\Ò¿]	¿]$¿]`¿]Ñ¿]û¿]Æ¿] ¿]Ï¿^7¿^[¿^d¿^q¿^™¿^∞¿^¥¿^µ¿^¡¿_¿_K¿__¿_e¿_}¿_¶¿_√¿_›¿`¿`[¿`d¿`k¿`o¿`p¿`|¿`¢¿`ƒ¿`ı¿`˘¿`˙¿a¿aG¿af¿aÅ¿aé¿a®¿aœ¿a’¿aŸ¿a⁄¿aÊ¿b+¿bV¿bå¿b‡¿cE¿cI¿cK¿cL¿cê¿cî¿c‰¿d-¿dd¿dh¿d•¿dÚ¿e¿e@¿eÑ¿e§¿e≈¿eË¿e˛¿f!¿f6¿f7¿fÄ¿fÜ¿f’¿g¿g8¿gO¿gq¿gí¿g†¿g¶¿g¿¿g÷¿gˆ¿g˙¿g˚¿h¿hO¿hí¿hœ¿i¿i'¿i_¿ic¿id¿i±¿i˙¿j¿j#¿js¿jƒ¿jﬁ¿jﬂ¿jÎ¿k;¿kZ¿kÄ¿k†¿kÓ¿l ¿l¿lV¿lò¿l°¿l®¿l¨¿l≠¿lπ¿l¿m¿m(¿mK¿m|¿mÆ¿m∏¿mæ¿m¬¿m√¿mœ¿n¿n)¿nL¿np¿nw¿n{¿n|¿nà¿nÕ¿n¯¿oE¿oú¿o†¿o¢¿o£¿o›¿o·¿p¿p_¿p`¿pö¿pû¿p“¿q¿q¿qU¿qY¿qç¿q”¿q‘¿r¿r¿rH¿rñ¿ró¿rŸ¿r›¿s¿sk¿sl¿sØ¿s≥¿sÁ¿tC¿tD¿tÑ¿tà¿tº¿u¿u¿uO¿uS¿uá¿u’¿u÷¿v¿v¿v\¿v®¿v¨¿v¸¿wB¿wm¿wq¿w±¿wµ¿x¿xL¿xï¿xõ¿xÂ¿xˇ¿y¿y/¿yE¿y^¿yx¿yò¿yπ¿y◊¿yÒ¿z¿z¿z¿z¿zg¿z∏¿z»¿zÛ¿zÙ¿{D¿{o¿{p¿{æ¿{›¿|¿|¿|S¿|Ä¿|Å¿|—¿}¿}0¿}1¿}v¿}±¿}≤¿}€¿~¿~¿~@¿~w¿~x¿~¥¿~„¿~‰¿~¿+¿K¿O¿P¿\¿ô¿≈¿Í¿Ä¿Ä¿Ä>¿Äg¿Äm¿Äê¿Ä∑¿ÄΩ¿Ä„¿Å¿Å¿Å:¿Åe¿Åk¿Åò¿Å…¿Åœ¿Å˝¿Ç/¿Ç5¿Ç`¿Çè¿Çï¿Çº¿ÇÁ¿ÇÌ¿ÇÒ¿ÇÚ¿Ç˛¿ÉC¿Én¿Éö¿É≠¿É»¿ÉÁ¿Ñ¿Ñ!¿ÑB¿Ñe¿Ñî¿Ñ≈¿Ñ¿Ö¿Ö¿Ö5¿Ö=¿ÖA¿ÖC¿ÖD¿Öí¿Öñ¿Ö‚¿Ü/¿ÜM¿ÜQ¿Ü†¿Ü¿á¿á¿áX¿á\¿áÆ¿á≤¿á¿¿áƒ¿à¿à"¿àà¿à—¿à◊¿â#¿ân¿âÑ¿âñ¿â®¿âπ¿âÂ¿ä¿ä#¿ä4¿äs¿äå¿ä¡¿ä⁄¿ã¿ã¿ã*¿ãr¿ã≥¿ã∑¿ã∏¿ãƒ¿å¿å-¿åf¿åÑ¿åä¿åé¿åè¿å‡¿ç1¿çL¿çR¿çõ¿ç„¿é+¿éf¿él¿éΩ¿è¿è-¿è3¿èP¿èn¿è~¿èô¿èµ¿èÃ¿ê¿ê1¿ê7¿ê;¿ê<¿êd¿êj¿ê£¿ê◊¿ë¿ëM¿ëm¿ëà¿ë’¿ëÌ¿ëÛ¿ë˜¿ë¯¿í¿í*¿í+¿ív¿íç¿íì¿í◊¿í˝¿í˛¿ì
¿ì.¿ì/¿ì;¿ì`¿ìw¿ìô¿ìµ¿ìÃ¿î¿îM¿îe¿îk¿îo¿îp¿î|¿î∂¿î‘¿î’¿î·¿ï¿ï¿ïA¿ïE¿ïF¿ïR¿ïd¿ïØ¿ñ
¿ñ2¿ñU¿ñi¿ñm¿ñn¿ñz¿ñµ¿ñ’¿ñŸ¿ñ⁄¿ñÊ¿ó+¿óV¿óÇ¿óï¿ó∞¿ó ¿ó‰¿ó¸¿ò¿ò¿ò&¿òè¿ò‰¿ôt¿ôx¿ôz¿ô{¿ôÆ¿ô≤¿ô˛¿öJ¿öó¿ö„¿õ1¿õÇ¿õù¿õ°¿õ¿ú>¿úè¿úﬁ¿ù)¿ùy¿ù«¿û
¿û¿ûT¿û°¿ûÌ¿ü<¿üÉ¿ü–¿†¿†6¿†t¿†u¿†Å¿†ß¿†®¿†Ú¿°¿°¿°X¿°î¿°ö¿°Î¿¢¿¢¿¢m¿¢¶¿¢ı¿£D¿£f¿£l¿£Ç¿£à¿£œ¿£Ò¿£˜¿§¿§2¿§V¿§\¿§n¿§ß¿§Ø¿§µ¿§Ë¿•¿•¿•D¿•Ω¿•¯¿¶U¿¶ö¿¶µ¿¶ø¿¶≈¿¶◊¿ß¿ß&¿ßB¿ß]¿ß~¿ß¶¿ß˙¿®¿®¿®'¿®1¿®9¿®C¿®U¿®[¿®k¿®q¿®∂¿©¿©@¿©^¿©ô¿©Â¿©È¿©Í¿™4¿™R¿™X¿™®¿™‰¿™Í¿´?¿´m¿´s¿´¡¿´˙¿¨I¿¨ò¿¨∫¿¨¿¿≠¿≠a¿≠g¿≠}¿≠É¿≠ ¿≠ˆ¿≠¸¿Æ
¿Æ@¿Æm¿Æs¿ÆÖ¿Æ–¿Æÿ¿Æﬁ¿Ø#¿ØN¿ØT¿Øs¿ØÏ¿∞%¿∞j¿∞t¿∞z¿∞å¿∞π¿∞€¿∞˜¿±¿±3¿±]¿±±¿±¬¿±—¿±ﬁ¿±Ë¿±¿±˙¿≤¿≤¿≤"¿≤(¿≤q¿≤≈¿≤˚¿≥¿≥T¿≥§¿≥®¿≥©¿≥˘¿¥H¿¥ñ¿¥·¿¥Á¿µ4¿µ@¿µF¿µî¿µ·¿µˆ¿∂7¿∂\¿∂]¿∂¨¿∂˙¿∑F¿∑ì¿∑€¿∏¿∏¿∏d¿∏p¿∏v¿∏«¿π¿π*¿πm¿πì¿πî¿π‡¿πˆ¿π¸¿∫G¿∫d¿∫t¿∫ô¿∫ø¿∫“¿∫‹¿∫‡¿∫·¿∫Ì¿ªT¿ªd¿ªë¿ªπ¿ª»¿ªÒ¿ª˘¿º¿º¿º¿º¿º'¿ºl¿ºó¿º∂¿º∆¿º„¿Ω*¿Ωì¿Ω¢¿æ¿æ6¿æ~¿æ÷¿æ˚¿øc¿øà¿ø÷¿ø¸¿¿ô¿¿æ¿¡(¿¡]¿¡æ¿¡œ¿¬3¿¬=¿¬ÿ¿√¿√!¿√4¿√>¿√W¿√ƒ¿√ ¿√Œ¿√–¿√—¿ƒ¿ƒ¿ƒ^¿ƒ≠¿ƒ˛¿≈'¿≈+¿≈<¿≈@¿≈ç¿≈ú¿≈†¿≈’¿≈Ÿ¿∆¿∆¿∆(¿∆,¿∆z¿∆®¿∆€¿«¿«3¿«I¿«c¿«t¿«ƒ¿«ˇ¿»¿»"¿»?¿»n¿»É¿»Ñ¿»ƒ¿» ¿…¿…h¿…n¿…•¿…«¿…Ÿ¿…ˆ¿ ¿ "¿ (¿ ?¿ d¿ Ü¿ å¿ ê¿ ë¿ Ò¿ ˜¿À6¿À<¿Àã¿Àö¿ÀË¿Ã!¿Ã%¿ÃZ¿Ãv¿Ãù¿Ãƒ¿Ã“¿Ãÿ¿Ã¯¿Õ¿Õ¿Õ¿Õ)¿Õq¿Õ¥¿Õ∏¿Õπ¿Õ≈¿Œ¿Œ,¿Œ:¿Œ@¿Œn¿Œr¿Œs¿Œ¿Œ∆¿Œ¯¿œI¿œf¿œ¥¿œ∏¿œπ¿œ≈¿–
¿–5¿–{¿–è¿–∞¿–Õ¿–È¿—D¿—M¿—T¿—X¿—Z¿—[¿—´¿—˙¿“¿“@¿“i¿“|¿“ñ¿“¨¿“…¿“ﬁ¿“ﬂ¿”¿”"¿”m¿”æ¿”Î¿”Ò¿‘.¿‘P¿‘b¿‘¿‘ù¿‘´¿‘±¿‘»¿‘ı¿‘˘¿‘˙¿’¿’9¿’M¿’_¿’e¿’ò¿’ú¿’ù¿’©¿’‹¿’¿÷¿÷¿÷;¿÷?¿÷@¿÷L¿÷¿÷ì¿÷•¿÷´¿÷ﬁ¿÷‚¿÷„¿÷Ô¿◊"¿◊6¿◊H¿◊N¿◊Å¿◊Ö¿◊Ü¿◊í¿◊’¿◊È¿◊¸¿ÿ¿ÿ>¿ÿB¿ÿC¿ÿO¿ÿu¿ÿv¿ÿÇ¿ÿ∏¿ÿÃ¿ÿÔ¿ÿı¿Ÿ%¿Ÿ)¿Ÿ*¿Ÿ6¿ŸO¿Ÿe¿ŸÄ¿ŸÑ¿ŸÖ¿Ÿë¿Ÿ™¿Ÿæ¿Ÿ‡¿ŸÌ¿⁄
¿⁄¿⁄¿⁄¿⁄!¿⁄i¿⁄¨¿⁄∞¿⁄±¿⁄Ω¿⁄„¿€¿€¿€¿€ ¿€,¿€c¿€w¿€Ö¿€ã¿€≠¿€±¿€≤¿€æ¿€˛¿‹¿‹ ¿‹&¿‹T¿‹X¿‹Y¿‹e¿‹™¿‹’¿›¿›¿›¿›+¿›]¿›v¿›ò¿›û¿›º¿›‹¿›Û¿ﬁJ¿ﬁS¿ﬁZ¿ﬁ^¿ﬁ`¿ﬁa¿ﬁü¿ﬁ£¿ﬁÓ¿ﬂ:¿ﬂã¿ﬂÿ¿‡ ¿‡¿‡¿‡¿‡f¿‡u¿‡y¿‡Æ¿‡≤¿‡Ô¿‡Û¿·¿·¿·O¿·ô¿·Ã¿‚¿‚,¿‚B¿‚]¿‚n¿‚æ¿‚˘¿‚ˇ¿„¿„;¿„j¿„¿„Ä¿„∆¿„Ã¿‰¿‰f¿‰v¿‰|¿‰≥¿‰◊¿‰Í¿Â¿Â'¿Â5¿Â;¿ÂS¿Âx¿Âö¿Â†¿Â§¿Â•¿Âı¿Ê¿Ê¿ÊP¿ÊV¿Ê•¿Ê¥¿Á¿Á;¿Á?¿Át¿Áê¿Á∑¿Áﬁ¿ÁÏ¿ÁÚ¿Ë¿Ë2¿Ë6¿Ë7¿ËC¿Ëã¿Ë†¿Ë¬¿Ë˜¿Ë˚¿Ë¸¿È¿ÈH¿Èo¿È}¿ÈÉ¿È±¿Èµ¿È∂¿È¬¿Í	¿Í;¿Íå¿Í©¿Í˜¿Í˚¿Í¸¿Î¿ÎM¿Îx¿Îø¿Î”¿ÎÙ¿Ï¿Ï,¿ÏÖ¿Ïé¿Ïï¿Ïô¿Ïõ¿Ïú¿ÏÀ¿Ïœ¿Ì ¿Ìq¿Ìº¿Ì·¿Ó"¿Ó\¿Ób¿Ó¨¿Óø¿Ó“¿ÓÊ¿Ó˜¿Ó˝¿Ó˛¿Ô1¿ÔE¿ÔF¿ÔR¿Ôó¿Ô¬¿
¿¿¿¿X¿t¿ƒ¿Ò¿Ò1¿ÒB¿Òa¿Òå¿Ò√¿Ò¯¿Ú¿Ú)¿Ú@¿Úc¿Úú¿Ú—¿Ú“¿Û!¿ÛK¿ÛQ¿Ûü¿ÛÏ¿Ù¿Ù¿ÙW¿Ùß¿Ùˆ¿ı@¿ıã¿ı©¿ı‰¿ˆ¿ˆ=¿ˆy¿ˆá¿ˆç¿ˆ®¿ˆ»¿ˆÃ¿ˆÕ¿˜¿˜.¿˜L¿˜u¿˜ê¿˜û¿˜§¿˜–¿˜‰¿¯¿¯/¿¯5¿¯9¿¯:¿¯ç¿¯ ¿¯Ù¿˘)¿˘J¿˘X¿˘^¿˘ê¿˘™¿˘”¿˘ı¿˘˚¿˘ˇ¿˙ ¿˙@¿˙î¿˙ ¿˚¿˚7¿˚E¿˚K¿˚à¿˚≠¿˚÷¿˚¯¿˚˛¿¸¿¸¿¸2¿¸Ç¿¸∂¿¸ı¿˝¿˝-¿˝3¿˝n¿˝ë¿˝∫¿˝‹¿˝‚¿˝Ê¿˝Á¿˛*¿˛q¿˛±¿˛¿ˇ¿ˇ¿ˇ¿ˇ*¿ˇq¿ˇ£¿ˇ§¿ˇ‰¿  ¿ ¿ R¿ z¿ Ä¿ ™¿ „¿¿'¿_¿ô¿°¿ß¿œ¿¿;¿C¿{¿µ¿Ω¿√¿«¿»¿¯¿;¿?¿@¿f¿ê¿Œ¿ˇ¿E¿Ü¿ê¿ñ¿ö¿õ¿¬¿Ï¿)¿Z¿†¿·¿Î¿Ò¿ı¿ˆ¿¿B¿Å¿∞¿ˆ¿7¿A¿G¿K¿L¿r¿ö¿ÿ¿¿M¿é¿ò¿û¿¢¿£¿Ø¿Ù¿	¿	K¿	k¿	ò¿	◊¿
¿
¿
5¿
S¿
Y¿
ù¿
°¿
£¿
§¿
·¿¿^¿d¿œ¿Ó¿¿1¿M¿r¿ï¿∏¿⁄¿˙¿,¿Z¿à¿∞¿“¿È¿¿¿¿f¿õ¿æ¿Ï¿¿¿ ¿9¿c¿É¿á¿à¿œ¿¿D¿J¿û¿Ì¿	¿-¿@¿^¿|¿ä¿ê¿®¿»¿Ã¿Õ¿¿]¿c¿≥¿¿¿c¿ß¿À¿—¿¿V¿ä¿¿¿‹¿¿+¿9¿?¿`¿Ä¿Ñ¿Ö¿—¿Ï¿Ú¿>¿å¿‘¿¿ ¿E¿k¿y¿¿û¿æ¿¬¿√¿¿¿S¿é¿±¿„¿˝¿"¿H¿V¿\¿{¿õ¿ü¿†¿‹¿¿N¿ô¿‰¿¿¿ ¿k¿è¿÷¿⁄¿€¿&¿J¿ë¿ï¿ñ¿Œ¿Ò¿¿D¿W¿è¿ì¿î¿Ã¿Ô¿!¿G¿Z¿í¿ñ¿ó¿·¿¿I¿M¿N¿t¿ö¿…¿¯¿ ¿ ¿ n¿ {¿ Å¿ «¿ Û¿! ¿!Y¿!ú¿!“¿!Û¿"¿"A¿"O¿"U¿"q¿"ë¿"ï¿"ñ¿"¢¿"‚¿"˛¿#¿#¿#@¿#D¿#E¿#Q¿#ò¿# ¿#ı¿$)¿$^¿$j¿$”¿%¿%"¿%.¿%y¿%¬¿%…¿% ¿%Ò¿&¿&%¿&L¿&z¿&Ä¿&•¿&Ÿ¿&ﬂ¿'¿'4¿':¿'b¿'ì¿'ô¿'ø¿'Ï¿'Ú¿(¿(J¿(P¿(t¿(ù¿(£¿(…¿(ˆ¿(¸¿)'¿)^¿)d¿)ä¿)∑¿)Ω¿)Ê¿*¿*¿*G¿*x¿*~¿*ß¿*⁄¿*‡¿+¿+6¿+<¿+t¿+≈¿+À¿+Û¿,$¿,*¿,S¿,Ü¿,å¿,≤¿,ﬂ¿,Â¿-
¿-5¿-;¿-_¿-ë¿-ó¿-ª¿-Ì¿-Û¿. ¿.d¿.j¿.ó¿.€¿.·¿/¿/4¿/:¿/a¿/é¿/î¿/Í¿0"¿0(¿0S¿0à¿0é¿0∏¿0Î¿0Ò¿1¿1N¿1T¿1Ç¿1º¿1¬¿1Ù¿26¿2<¿2]¿2â¿2è¿2∂¿2‚¿2Ë¿3¿3S¿3Y¿3¶¿3ı¿47¿4\¿4~¿4Ñ¿4Ø¿4›¿4„¿5¿56¿5<¿5h¿5ò¿5û¿5À¿5˝¿6¿6-¿6Y¿6_¿6ã¿6ª¿6¡¿6Î¿7¿7¿7G¿7s¿7y¿7ü¿7√¿7…¿7Ó¿8¿8¿8=¿8c¿8i¿8ß¿8˚¿9¿9@¿9ñ¿9ú¿9’¿:¿:%¿:_¿:´¿:±¿:ﬂ¿;¿;¿;B¿;l¿;r¿;≠¿;˚¿<¿<<¿<ä¿<ê¿<∆¿=¿=¿=¿=¿=3¿=R¿=V¿=W¿=t¿=ô¿=ù¿=û¿=π¿=‹¿=‡¿=·¿=ˇ¿>%¿>)¿>*¿>I¿>p¿>t¿>u¿>ë¿>µ¿>π¿>∫¿>ÿ¿>˛¿?¿?¿?¿?C¿?G¿?H¿?d¿?à¿?å¿?ç¿?•¿?≈¿?…¿? ¿?·¿@ ¿@¿@¿@¿@?¿@C¿@D¿@à¿@œ¿@”¿@‘¿A¿Aa¿Ae¿Af¿A•¿AÁ¿AÎ¿AÏ¿B,¿Bo¿Bs¿Bt¿B´¿B‹¿B‡¿B·¿C¿C.¿C2¿C3¿C`¿Cï¿Cô¿Cö¿C«¿C¸¿D ¿D¿D¿DR¿Dn¿Dr¿D¡¿Dı¿E)¿Ex¿EÖ¿Eû¿E¥¿EŒ¿EÎ¿F ¿F¿FN¿Fû¿F¿¿F“¿FÔ¿G¿G¿G!¿G8¿GX¿G\¿G]¿Gi¿G∞¿G‚¿H%¿H)¿H*¿H6¿H{¿H¶¿HÎ¿HÔ¿HÒ¿HÚ¿I5¿Ix¿Iå¿Iê¿I◊¿J¿JP¿JÑ¿J“¿K¿K¿K¿Kc¿Kï¿K†¿K¬¿KÚ¿Kˆ¿K¯¿K˘¿L+¿L/¿L~¿Lö¿Lû¿LÂ¿M ¿MV¿Mü¿M∫¿M–¿MÎ¿N
¿N¿N ¿Ne¿Nâ¿Nú¿N∫¿NŸ¿NÁ¿NÌ¿O¿O%¿O)¿O*¿O6¿Ov¿Oã¿Oô¿Oü¿OÕ¿O—¿O“¿Oﬁ¿P#¿PN¿Pï¿Pô¿Põ¿Pú¿PŸ¿P›¿Q'¿Qp¿Q¢¿QÃ¿Q–¿Qﬁ¿Q‚¿R%¿R[¿R´¿R∆¿R‹¿RÙ¿S¿S ¿S!¿ST¿So¿S}¿Sñ¿S∞¿Sæ¿Sƒ¿Sÿ¿S¯¿S¸¿S˝¿T	¿TP¿TÇ¿T§¿T®¿T©¿Tµ¿T˙¿U%¿Uc¿Ug¿Ui¿Uj¿Uû¿U¢¿U∞¿U¥¿UÚ¿V3¿Vd¿Vù¿V≥¿V–¿VÊ¿V˚¿W¿W¿W_¿W}¿WÉ¿W‘¿WÓ¿X¿X ¿X>¿XX¿Xf¿Xl¿Xâ¿Xú¿X√¿XÒ¿X˜¿Y¿Y¿Y¿Y¿YI¿YJ¿Yò¿YÊ¿Z(¿ZE¿ZF¿ZR¿Zk¿ZÜ¿Z¶¿Z¬¿Z∆¿Z«¿Z”¿[
¿[#¿[Z¿[g¿[§¿[∂¿[Ã¿[Á¿[Ì¿\&¿\6¿\`¿\s¿\}¿\Å¿\Ç¿\é¿\”¿\˛¿]@¿]D¿]F¿]G¿]ï¿]»¿]Ã¿^¿^¿^g¿^∏¿^Ã¿^–¿^ﬁ¿^‚¿_"¿_e¿_ò¿_”¿_Î¿`¿`*¿`K¿`{¿`≠¿`√¿`ÿ¿a¿a¿aC¿al¿aÅ¿aÇ¿a»¿a˛¿b¿b0¿bN¿bh¿bv¿b|¿bè¿b•¿b©¿b™¿bÓ¿c,¿c2¿cÉ¿c≈¿cÀ¿d¿dk¿dü¿d—¿dÎ¿e¿e6¿eD¿eJ¿ei¿e¿eÉ¿eÑ¿e—¿e˚¿f¿f-¿fJ¿ff¿ft¿fz¿fè¿f•¿f©¿f™¿f˘¿g¿g¿g]¿g¢¿gÒ¿h3¿hÇ¿h√¿i¿i.¿iC¿iI¿ip¿iü¿i∫¿i‡¿j¿j¿j¿j1¿jG¿jK¿jL¿jò¿j“¿jÿ¿k¿k ¿kG¿kz¿kó¿kø¿k„¿kÒ¿k˜¿l¿l*¿l.¿l/¿l;¿lM¿l_¿ls¿lw¿lx¿lÑ¿lØ¿l∞¿lÊ¿lÚ¿m/¿m0¿mÄ¿mÜ¿m÷¿n¿nV¿np¿ní¿nŒ¿n“¿n”¿nﬂ¿o'¿oh¿oú¿o∞¿o∂¿oÒ¿p.¿pl¿pÜ¿pæ¿p¬¿p√¿pœ¿q¿qH¿qp¿qä¿q∆¿r¿r¿r¿r¿r¿r)¿r`¿ré¿rö¿rı¿sJ¿sï¿s¿¿s«¿t¿t¿tr¿tã¿t®¿tº¿tË¿u¿u5¿u>¿uK¿uW¿un¿uú¿uÀ¿uÓ¿uÙ¿v¿v¿v,¿v?¿vl¿v ¿vÎ¿w¿w%¿w>¿wG¿wN¿w^¿wà¿wõ¿w•¿w©¿w™¿w∂¿w˜¿x&¿x*¿x+¿x7¿x|¿xß¿xÈ¿y>¿yÅ¿y€¿yﬂ¿y·¿y‚¿z1¿z5¿zC¿zG¿zã¿z–¿{¿{¿{_¿{q¿{w¿{ƒ¿{ˆ¿{¸¿|+¿|E¿|[¿|t¿|ä¿|°¿|∏¿|Õ¿|Œ¿}¿} ¿},¿}G¿}e¿}s¿}y¿}ê¿}¶¿}™¿}´¿}ˇ¿~¿~*¿~D¿~_¿~m¿~s¿~á¿~ù¿~°¿~¢¿~Æ¿~⁄¿~€¿~Á¿¿x¿ª¿»¿È¿Ä¿Ä¿ÄH¿ÄL¿ÄN    
Ä•Ä∫ÄºÄ‰ÄÁ  Å  Å:  Åb  Åã  Å¥  Å«  Å‹  Å˘  ÇÇ7Çö *ÇùÑsÖèÇÎ/// A base class for render boxes that resemble their children.
///
/// A proxy box has a single child and mimics all the properties of that
/// child by calling through to the child for each function in the render box
/// protocol. For example, a proxy box determines its size by asking its child
/// to layout with the same constraints and then matching the size.
///
/// A proxy box isn't useful on its own because you might as well just replace
/// the proxy box with its child. However, RenderProxyBox is a useful base class
/// for render objects that wish to mimic most, but not all, of the properties
/// of their child.
///
/// See also:
///
///  * [RenderProxySliver], a base class for render slivers that resemble their
///    children. ÖˇÅ ÜŒÜ‹Äƒ/// Creates a proxy render box.
///
/// Proxy render boxes are rarely created directly because they proxy
/// the render box protocol to [child]. Instead, consider using one of the
/// subclasses.ÜﬁÜÍ       í‹ÖõìDX/// A RenderProxyBox subclass that allows you to customize the
/// hit-testing behavior. ìÅÄ˝ ì˛îv/// Initializes member variables for subclasses.
///
/// By default, the [behavior] is [HitTestBehavior.deferToChild].î&,î,  îXîd  î6îEîFîqîvî|îwîÇÅ1ï´Å/// How to behave during hit testing when deciding how the hit test propagates
/// to children and whether to consider targets behind this one.
///
/// Defaults to [HitTestBehavior.deferToChild].
///
/// See [HitTestBehavior] for the allowed values and their meanings.  ï∏Åáï…  ï—ï„  ïÏï˝  ï∏ïπóCTóT  ó`óh  óCóDóõÄ⁄ó¨  ó¿&ó›  óõóú òyêØöcÅ„/// Imposes additional constraints on its child.
///
/// A render constrained box proxies most functions in the render box protocol
/// to its child, except that when laying out its child, it tightens the
/// constraints provided by its parent by enforcing the [additionalConstraints]
/// as well.
///
/// For example, if you wanted [child] to have a minimum height of 50.0 logical
/// pixels, you could use `const BoxConstraints(minHeight: 50.0)` as the
/// [additionalConstraints]. öìÅ\ õ	õo/// Creates a render box that constrains its child.
///
/// The [additionalConstraints] argument must be valid.õ$õ0  õ:-õS  õpõvõ°õwõåõçõüõ†õ¬õ´õƒõ‚õÁõÌõËúy%úà  õÛÄÉúF=/// Additional constraints to apply to [child] during layout.   ú¢Ä◊ú¶  úºúÃ   ù}Å≤ùê  ù©ù±  ù}ù~ü3Å≤üF  ü_üg  ü3ü4†ÈÅª†¸  °°  †È†Í¢®Åª¢ª  ¢’¢›  ¢®¢©§gÅL§x   §g§h•∑Å•»  •Ÿ•È  •∑•∏¶»Åt¶Ÿ  ¶Ë¶˘  ßß	  ¶»¶…®@ÄÊ®Q  ®e&®Ç  ®@®A ©*åW´†Ço/// Constrains the child's [BoxConstraints.maxWidth] and
/// [BoxConstraints.maxHeight] if they're otherwise unconstrained.
///
/// This has the effect of giving the child a natural dimension in unbounded
/// environments. For example, by providing a [maxHeight] to a widget that
/// normally tries to be as big as possible, the widget will normally size
/// itself to fit its parent, but when placed in a vertical list, it will take
/// on the given height.
///
/// This is useful when composing widgets that normally try to match their
/// parents' size, so that they behave reasonably in lists (which are
/// unbounded). ´ÃÅ ¨≥¨√Ä‹/// Creates a render box that imposes a maximum width or maximum height on its
/// child if the child is otherwise unconstrained.
///
/// The [maxWidth] and [maxHeight] arguments not be null and must be
/// non-negative.¨ ¨÷  ¨‡!¨Ë  ≠"≠  ¨Ú¨¯¨˘≠≠ ≠!≠2≠8≠H≠B≠9≠E≠R≠X≠i≠c≠Y≠f≠}≠s≠≠õ≠ê≠ù≠Ø≠¥≠∫≠µÆ9Æ@  ØhØo  ≠¿vÆ R/// The value to use for maxWidth if the incoming maxWidth constraint is infinite.   ÆMÄöÆQ  ÆZÆb   ÆÎzØMT/// The value to use for maxHeight if the incoming maxHeight constraint is infinite.   Ø}ÄùØÅ  ØãØì   ∞Åç∞-  ∞?∞O   ±ØÅC±¥  ±¬#±€  ±Á"±ˇ   ≤ˆÄ∏≥  ≥≥(  ≤ˆ≤˜≥≤Äò≥√   ≥≤≥≥¥NÅ1¥_  ¥s&¥ê  ¥N¥O µÉñîºÜ{/// Attempts to size the child to a specific aspect ratio.
///
/// The render object first tries the largest width permitted by the layout
/// constraints. The height of the render object is determined by applying the
/// given aspect ratio to the width, expressed as a ratio of width to height.
///
/// For example, a 16:9 width:height aspect ratio would have a value of
/// 16.0/9.0. If the maximum width is infinite, the initial width is determined
/// by applying the aspect ratio to the maximum height.
///
/// Now consider a second example, this time with an aspect ratio of 2.0 and
/// layout constraints that require the width to be between 0.0 and 100.0 and
/// the height to be between 0.0 and 100.0. We'll select a width of 100.0 (the
/// biggest allowed) and a height of 50.0 (to match the aspect ratio).
///
/// In that same situation, if the aspect ratio is 0.5, we'll also select a
/// width of 100.0 (still the biggest allowed) and we'll attempt to use a height
/// of 200.0. Unfortunately, that violates the constraints because the child can
/// be at most 100.0 pixels tall. The render object will then take that value
/// and apply the aspect ratio again to obtain a width of 50.0. That width is
/// permitted by the constraints and the child receives a width of 50.0 and a
/// height of 100.0. If the width were not permitted, the render object would
/// continue iterating through the constraints. If the render object does not
/// find a feasible size after consulting each constraint, the render object
/// will eventually select a size for the child that meets the layout
/// constraints but fails to meet the aspect ratio constraints. º2ÅO º∏º…/// Creates as render object with a specific aspect ratio.
///
/// The [aspectRatio] argument must be a finite, positive value.º–º‹  ºÊº˜  Ω
ΩΩ"ΩΩΩΩ,Ω2ΩGΩ3Ω>Ω?Ω^ΩQΩ`ΩtΩyΩΩzævæ}  ΩÖÄÓæWÄæ/// The aspect ratio to attempt to use.
///
/// The aspect ratio is expressed as a ratio of width to height. For example,
/// a 16:9 width:height aspect ratio would have a value of 16.0/9.0.   æçÄææë  æùæ•   øOÄÊøb  ø{øÉ  øOøP¿ @9ÄÊ¿ @L  ¿ @e¿ @m  ¿ @9¿ @:¿ A#Ä‰¿ A6  ¿ AP¿ AX  ¿ A#¿ A$¿ BÄ‰¿ B  ¿ B8¿ B@  ¿ B¿ B¿ BÛáK¿ B¯  ¿ C
¿ C   ¿ JBn¿ JS  ¿ Jd¿ Jt  ¿ JB¿ JC¿ J¥Ä†¿ J≈   ¿ J¥¿ Jµ¿ KXÄΩ¿ Ki  ¿ K}&¿ Kö  ¿ KX¿ KY ¿ Lïv¿ R€Üº/// Sizes its child to the child's maximum intrinsic width.
///
/// This class is useful, for example, when unlimited width is available and
/// you would like a child that would otherwise attempt to expand infinitely to
/// instead size itself to a more reasonable width.
///
/// The constraints that this object passes to its child will adhere to the
/// parent's constraints, so if the constraints are not large enough to satisfy
/// the child's maximum intrinsic width, then the child will get less width
/// than it otherwise would. Likewise, if the minimum width constraint is
/// larger than the child's maximum intrinsic width, the child will be given
/// more width than it otherwise would.
///
/// If [stepWidth] is non-null, the child's width will be snapped to a multiple
/// of the [stepWidth]. Similarly, if [stepHeight] is non-null, the child's
/// height will be snapped to a multiple of the [stepHeight].
///
/// This class is relatively expensive, because it adds a speculative layout
/// pass before the final layout phase. Avoid using it where possible. In the
/// worst case, this render object can result in a layout that is O(N¬≤) in the
/// depth of the tree.
///
/// See also:
///
///  * [Align], a widget that aligns its child within itself. This can be used
///    to loosen the constraints passed to the [RenderIntrinsicWidth],
///    allowing the [RenderIntrinsicWidth]'s child to be smaller than that of
///    its parent.
///  * [Row], which when used with [CrossAxisAlignment.stretch] can be used
///    to loosen just the width constraints that are passed to the
///    [RenderIntrinsicWidth], allowing the [RenderIntrinsicWidth]'s child's
///    width to be smaller than that of its parent. ¿ SÅ„ ¿ S“¿ SÊÄæ/// Creates a render object that sizes itself to its child's intrinsic width.
///
/// If [stepWidth] is non-null it must be > 0.0. Similarly If [stepHeight] is
/// non-null it must be > 0.0.¿ SÌ¿ Sˆ  ¿ T¿ T  ¿ T¿ T(  ¿ T5¿ T;¿ T`¿ TN¿ TF¿ T<¿ TI¿ T[¿ TQ¿ T]¿ Tj¿ Tp¿ Tó¿ TÑ¿ T|¿ Tq¿ T¿ Tí¿ Tá¿ Tî¿ T¨¿ T°¿ TÆ¿ TÃ¿ T¿¿ TŒ¿ T·¿ TÊ¿ TÏ¿ TÁ¿ Uí¿ Uö  ¿ V˝¿ W  ¿ TÚÄù¿ Uwr/// If non-null, force the child's width to be a multiple of this value.
///
/// This value must be null or > 0.0.   ¿ U®ÄÆ¿ U¨  ¿ U∂¿ Uø   ¿ VZÄ†¿ V‡s/// If non-null, force the child's height to be a multiple of this value.
///
/// This value must be null or > 0.0.   ¿ WÄ±¿ W  ¿ W#¿ W,   	¿ W…Ä±¿ W◊  ¿ W‚¿ WÍ  ¿ W¿ W˘   ¿ X~m¿ Xë  ¿ X™¿ X≤  ¿ X~¿ X¿ XÔÄŸ¿ Y  ¿ Y¿ Y#  ¿ XÔ¿ X¿ YÃÅR¿ Yﬂ  ¿ Y˘¿ Z  ¿ YÃ¿ YÕ¿ ["ÅR¿ [5  ¿ [O¿ [W  ¿ ["¿ [#¿ \xÇ¬¿ \}  ¿ \ã"¿ \£  ¿ \Ø#¿ \»   ¿ _>Ä∏¿ _O  ¿ _`¿ _p  ¿ _>¿ _?¿ _˙Äò¿ `   ¿ _˙¿ _˚¿ `ñÄ˜¿ `ß  ¿ `ª&¿ `ÿ  ¿ `ñ¿ `ó ¿ aëåÉ¿ g~ÖÁ/// Sizes its child to the child's intrinsic height.
///
/// This class is useful, for example, when unlimited height is available and
/// you would like a child that would otherwise attempt to expand infinitely to
/// instead size itself to a more reasonable height.
///
/// The constraints that this object passes to its child will adhere to the
/// parent's constraints, so if the constraints are not large enough to satisfy
/// the child's maximum intrinsic height, then the child will get less height
/// than it otherwise would. Likewise, if the minimum height constraint is
/// larger than the child's maximum intrinsic height, the child will be given
/// more height than it otherwise would.
///
/// This class is relatively expensive, because it adds a speculative layout
/// pass before the final layout phase. Avoid using it where possible. In the
/// worst case, this render object can result in a layout that is O(N¬≤) in the
/// depth of the tree.
///
/// See also:
///
///  * [Align], a widget that aligns its child within itself. This can be used
///    to loosen the constraints passed to the [RenderIntrinsicHeight],
///    allowing the [RenderIntrinsicHeight]'s child to be smaller than that of
///    its parent.
///  * [Column], which when used with [CrossAxisAlignment.stretch] can be used
///    to loosen just the height constraints that are passed to the
///    [RenderIntrinsicHeight], allowing the [RenderIntrinsicHeight]'s child's
///    height to be smaller than that of its parent. ¿ gØÄì ¿ h ¿ hN/// Creates a render object that sizes itself to its child's intrinsic height.¿ h¿ h(  ¿ h5¿ h:¿ h@¿ h;  ¿ hFÅ¿ hY  ¿ hr¿ hz  ¿ hF¿ hG¿ ihÅ¿ i{  ¿ iî¿ iú  ¿ ih¿ ii¿ jäm¿ jù  ¿ j∑¿ jø  ¿ jä¿ jã¿ j˚Åø¿ k   ¿ k"¿ k&  ¿ k2#¿ kK   ¿ læÄ∏¿ lœ  ¿ l‡¿ l  ¿ læ¿ lø¿ mzÄò¿ mã   ¿ mz¿ m{ ¿ nÅÇ¿ n]@/// Excludes the child from baseline computations in the parent. ¿ nçÄ§ ¿ n¿ o`/// Create a render object that causes the parent to ignore the child for baseline computations.¿ o¿ o  ¿ o$¿ o)¿ o/¿ o*  ¿ o5a¿ oI  ¿ oi¿ ow  ¿ o5¿ o6 ¿ oöçñ¿ qÖÅ‰/// Makes its child partially transparent.
///
/// This class paints its child into an intermediate buffer and then blends the
/// child back into the scene partially transparent.
///
/// For values of opacity other than 0.0 and 1.0, this class is relatively
/// expensive because it requires painting the child into an intermediate
/// buffer. For the value 0.0, the child is not painted at all. For the
/// value 1.0, the child is painted immediately without an intermediate buffer. ¿ qÆÅπ ¿ r.¿ r;y/// Creates a partially transparent render object.
///
/// The [opacity] argument must be between 0.0 and 1.0, inclusive.¿ rB¿ rJ  ¿ r\#¿ rb  ¿ rÖ¿ rë   ¿ rS¿ rz¿ rû¿ r§¿ r≈¿ r¥¿ r≠¿ r•¿ r∞¿ rø¿ r∑¿ r¬¿ rÿ¿ rœ¿ r⁄¿ s¿ rÍ¿ s¿ s*¿ s#¿ s,¿ s.¿ s/¿ s4¿ s5¿ sH¿ sP¿ sI¿ sZ¿ s_¿ se¿ s`¿ sˇ
¿ t  ¿ uv¿ u}  ¿ xî¿ xô  ¿ skK¿ sÄ   ¿ sk¿ sl¿ s∫A¿ sœ   ¿ s∫¿ sª¿ tÅe¿ u_Å5/// The fraction to scale the child's alpha value.
///
/// An opacity of 1.0 is fully opaque. An opacity of 0.0 is fully transparent
/// (i.e., invisible).
///
/// Values 1.0 and 0.0 are painted with a fast path. Other values
/// require painting the child into an intermediate buffer, which is
/// expensive.   ¿ uâÇ ¿ uç  ¿ uï¿ uù   ¿ w≠Ä‰¿ x_Äû/// Whether child semantics are included regardless of the opacity.
///
/// If false, semantics are excluded when [opacity] is 0.0.
///
/// Defaults to false.   ¿ x¥Ä±¿ x∏  ¿ xœ
¿ x’   ¿ yil¿ yz  ¿ yÜ¿ yë  ¿ yi¿ yj¿ yŸÄ«¿ yÒ  ¿ z)¿ z*  ¿ yŸ¿ y⁄¿ z§Ä¢¿ zµ  ¿ zª¿ zÃ  ¿ z‘¿ z‹  ¿ z§¿ z•¿ {JÄÆ¿ {[  ¿ {u¿ {ä  ¿ {J¿ {K¿ {¸Å2¿ |  ¿ |!&¿ |>  ¿ {¸¿ {˝ ¿ åÇO¿ å‰Ä«/// Makes its child partially transparent, driven from an [Animation].
///
/// This is a variant of [RenderOpacity] that uses an [Animation<double>] rather
/// than a [double] to control the opacity. ¿ ç@Å# ¿ çu¿ çä2/// Creates a partially transparent render object.¿ çë"¿ ç≠  ¿ çπ#¿ çø  ¿ ç‚¿ çÓ  ¿ ç◊¿ ç˚¿ é ¿ é¿ é    ¿ è(â¿ èÔÄ¿/// Applies a mask generated by a [Shader] to its child.
///
/// For example, [RenderShaderMask] can be used to gradually fade out the edge
/// of a child by using a [ui.Gradient.linear] mask. ¿ êÅ7 ¿ ês¿ êÉU/// Creates a render object that applies a mask generated by a [Shader] to its child.¿ êä¿ êñ  ¿ ê†&¿ êπ  ¿ êÃ(¿ ê◊  ¿ ê‚¿ êÎ¿ êÏ¿ ë¿ ê˝¿ ë¿ ë1¿ ë&¿ ë3¿ ëE¿ ëJ¿ ëP¿ ëK¿ ìû¿ ì≠  ¿ ïj¿ ït  ¿ ëVJ¿ ëw   ¿ ëV¿ ëW¿ ë§Å˜¿ ìyÅ-/// Called to creates the [Shader] that generates the mask.
///
/// The shader callback is called with the current size of the child so that
/// it can customize the shader to the size and location of the child.
///
/// The rectangle will always be at the origin when called by
/// [RenderShaderMask].   ¿ ì¿Äô¿ ìƒ  ¿ ì”¿ ì„   ¿ î]Å
¿ ïOÄ€/// The [BlendMode] to use when applying the shader to the child.
///
/// The default, [BlendMode.modulate], is useful for applying an alpha blend
/// to the child. Other blend modes can be used to create other effects.   ¿ ïÇÄÖ¿ ïÜ  ¿ ïê¿ ïõ   ¿ ñ=¿ ñ    ¿ ñ¿ ñ¿ ñLÅÂ¿ ñ]  ¿ ñc¿ ñt  ¿ ñ|¿ ñÑ  ¿ ñL¿ ñM ¿ ò5áN¿ òÒÄµ/// Applies a filter to the existing painted content and then paints [child].
///
/// This effect is relatively expensive, especially if the filter is non-local,
/// such as a blur. ¿ ô!Å# ¿ ôá¿ ôõ\/// Creates a backdrop filter.
/// The [blendMode] argument defaults to [BlendMode.srcOver].¿ ôû¿ ô™  ¿ ô∞¿ ô…  ¿ ô–'¿ ô€  ¿ ôÊ¿ ôÔ¿ ô¿ ö	¿ ö¿ ö¿ ö$¿ ö¿ ö&¿ ö7¿ ö<¿ öB¿ ö=¿ õç¿ õú  ¿ ú˚¿ ù  ¿ öHR¿ öm   ¿ öH¿ öI¿ öûÄÏ¿ õxÄº/// The image filter to apply to the existing painted content before painting
/// the child.
///
/// For example, consider using [ui.ImageFilter.blur] to create a backdrop
/// blur effect.   ¿ õßÄÅ¿ õ´  ¿ õ≤¿ õ¬   ¿ ú,ÄÃ¿ ú‡Äù/// The blend mode to use to apply the filtered background content onto the background
/// surface.
///
/// {@macro flutter.widgets.BackdropFilter.blendMode}   ¿ ùÄÖ¿ ù  ¿ ù!¿ ù,   ¿ ùú=¿ ù±   ¿ ùú¿ ùù¿ ù›Å§¿ ùÓ  ¿ ùÙ¿ û  ¿ û¿ û  ¿ ù›¿ ùﬁ ¿ üÖéó¿ £ÁÑR/// An interface for providing custom clips.
///
/// This class is used by a number of clip widgets (e.g., [ClipRect] and
/// [ClipPath]).
///
/// The [getClip] method is called whenever the custom clip needs to be updated.
///
/// The [shouldReclip] method is called when a new instance of the class
/// is provided, to check if the new instance actually represents different
/// information.
///
/// The most efficient way to update the clip provided by this class is to
/// supply a `reclip` argument to the constructor of the [CustomClipper]. The
/// custom object will listen to this animation and update the clip whenever the
/// animation ticks, avoiding both the build and layout phases of the pipeline.
///
/// See also:
///
///  * [ClipRect], which can be customized with a [CustomClipper<Rect>].
///  * [ClipRRect], which can be customized with a [CustomClipper<RRect>].
///  * [ClipOval], which can be customized with a [CustomClipper<Rect>].
///  * [ClipPath], which can be customized with a [CustomClipper<Path>].
///  * [ShapeBorderClipper], for specifying a clip path using a [ShapeBorder].¿ £ı¿ £ı¿ §Ä∂ ¿ §å¿ §ôp/// Creates a custom clipper.
///
/// The clipper will update its clip whenever [reclip] notifies its listeners.¿ §ú¿ §©  ¿ §º¿ §¥¿ §æ¿ §…¿ §€   ¿ §ÁÅU¿ •˜ÄÙ/// Register a closure to be notified when it is time to reclip.
///
/// The [CustomClipper] implementation merely forwards to the same method on
/// the [Listenable] provided to the constructor in the `reclip` argument, if
/// it was not null. ¿ ¶¿ ¶  ¿ •Ê¿ •Á¿ ¶@Åô¿ ßéÅ0/// Remove a previously registered closure from the list of closures that the
/// object notifies when it is time to reclip.
///
/// The [CustomClipper] implementation merely forwards to the same method on
/// the [Listenable] provided to the constructor in the `reclip` argument, if
/// it was not null. ¿ ßù¿ ß´  ¿ ß}¿ ß~¿ ß›ÄÑ¿ ®Nj/// Returns a description of the clip given that the render object being
/// clipped is of the given size. ¿ ®V	¿ ®\   ¿ ®eÇ¿ ™AÅ∆/// Returns an approximation of the clip returned by [getClip], as
/// an axis-aligned Rect. This is used by the semantics layer to
/// determine whether widgets should be excluded.
///
/// By default, this returns a rectangle that is the same size as
/// the RenderObject. If getClip returns a shape that is roughly the
/// same size as the RenderObject (e.g. it's a rounded rectangle
/// with very small arcs in the corners), then this may be adequate. ¿ ™X	¿ ™^   ¿ ™}ÉO¿ ≠òÇ˜/// Called whenever a new instance of the custom clipper delegate class is
/// provided to the clip object, or any time that a new clip object is created
/// with a new instance of the custom clipper delegate class (which amounts to
/// the same thing, because the latter is implemented in terms of the former).
///
/// If the new instance represents different information than the old
/// instance, then the method should return true, otherwise it should return
/// false.
///
/// If the method returns false, then the [getClip] call might be optimized
/// away.
///
/// It's possible that the [getClip] method will get called even if
/// [shouldReclip] returns false or if the [shouldReclip] method is never
/// called at all (e.g. if the box changes size). ¿ ≠•%¿ ≠¡   ¿ ≠–J¿ ≠„   ¿ ≠–¿ ≠— ¿ ÆÖj¿ ÆkF/// A [CustomClipper] that clips to the outer path of a [ShapeBorder]. ¿ ÆûÅ• ¿ Ø¯¿ ∞
ÅG/// Creates a [ShapeBorder] clipper.
///
/// The [textDirection] argument must be provided non-null if [shape]
/// has a text direction dependency (for example if it is expressed in terms
/// of "start" and "end" instead of "left" and "right"). It may be null if
/// the border will not need the text direction to paint itself.¿ ∞¿ ∞   ¿ ∞*¿ ∞0   ¿ ∞GV¿ ∞ò</// The shape border whose outer path this clipper clips to. ¿ ∞¢Ä‚¿ ±wÄ∑/// The text direction to use for getting the outer path for [shape].
///
/// [ShapeBorder]s can depend on the text direction (e.g having a "dent"
/// towards the start of the shape).  ¿ ±âÄØ¿ ±œ2/// Returns the outer path of [shape] as the clip. ¿ ±◊	¿ ±›  ¿ ±æ¿ ±ø¿ ≤<ÅJ¿ ≤M  ¿ ≤Z¿ ≤o  ¿ ≤<¿ ≤= ¿ ≥äå
¿ ≥ô ¿ ≥´¿ ≥´¿ ≥…Ä≈ ¿ ≥…¿ ≥⁄ ¿ ≥·¿ ≥Ì  ¿ ≥˜¿ ¥
  ¿ ¥"¿ ¥  ¿ ¥*¿ ¥.¿ ¥/¿ ¥J¿ ¥A¿ ¥L¿ ¥j¿ ¥\¿ ¥l¿ ¥Å¿ ¥Ü¿ ¥å¿ ¥á¿ ¥˝¿ µ  ¿ ∏ú¿ ∏ü  ¿ πU¿ πZ  ¿ ª≠¿ ª¥  ¿ ª√¿ ª–  ¿ ¥íh¿ ¥Ê;/// If non-null, determines which clip to use on the child.   ¿ µÇ!¿ µ  ¿ µ'¿ µ:   ¿ ∏Ü¿ ∏å    ¿ ∏©'¿ ∏≤    ¿ ∏”¿ ∏◊  ¿ ∏‰
¿ ∏Í   ¿ ∑@v¿ ∑Q  ¿ ∑X¿ ∑g  ¿ ∑@¿ ∑A¿ ∑∫a¿ ∑À   ¿ ∑∫¿ ∑ª¿ ∏c¿ ∏$    ¿ πlÄß¿ π}   ¿ πl¿ πm¿ ∫O¿ ∫    ¿ ∫jÅ?¿ ∫|  ¿ ∫ô¿ ∫ß  ¿ ∫j¿ ∫k¿ ªﬁÉI¿ ªÔ  ¿ ª˛¿ º  ¿ º¿ º  ¿ ªﬁ¿ ªﬂ¿ ø+g¿ ø<   ¿ ø+¿ ø, ¿ øñág¿ ¿|Äﬂ/// Clips its child using a rectangle.
///
/// By default, [RenderClipRect] prevents its child from painting outside its
/// bounds, but the size and location of the clip rect can be customized using a
/// custom [clipper]. ¿ ¿ØÅ& ¿ ¡É¿ ¡ëÄ«/// Creates a rectangular clip.
///
/// If [clipper] is null, the clip will match the layout size and position of
/// the child.
///
/// If [clipBehavior] is [Clip.none], no clipping will be applied.¿ ¡ò¿ ¡ü  ¿ ¡©¿ ¡∞  ¿ ¡º¿ ¡√    ¿ ¡Ÿ8¿ ¡Ó   ¿ ¡Ÿ¿ ¡⁄¿ ¬Å%¿ ¬&  ¿ ¬.¿ ¬@  ¿ ¬I¿ ¬Z  ¿ ¬¿ ¬¿ √>Åˆ¿ √O  ¿ √U¿ √f  ¿ √n¿ √v  ¿ √>¿ √?¿ ≈8Å√¿ ≈I  ¿ ≈X¿ ≈i  ¿ ≈q¿ ≈y  ¿ ≈8¿ ≈9 ¿ ∆ˇãæ¿ «ÏÄÊ/// Clips its child using a rounded rectangle.
///
/// By default, [RenderClipRRect] uses its own bounds as the base rectangle for
/// the clip, but the size and location of the clip can be customized using a
/// custom [clipper]. ¿ »!Ç# ¿ …N¿ …]Å/// Creates a rounded-rectangular clip.
///
/// The [borderRadius] defaults to [BorderRadius.zero], i.e. a rectangle with
/// right-angled corners.
///
/// If [clipper] is non-null, then [borderRadius] is ignored.
///
/// If [clipBehavior] is [Clip.none], no clipping will be applied.¿ …d¿ …k  ¿ …u5¿ …ã  ¿ …∞¿ …∑  ¿ …√¿ …   ¿ …€¿ …Î  	¿ …ô¿ …•¿ …¶¿  ¿   ¿  ¿  4¿  %¿  6¿ ÀZ"¿ Ào  ¿ Ãí¿ Ã°  ¿  HÅ¿ À9ÄÀ/// The border radius of the rounded corners.
///
/// Values are clamped so that horizontal and vertical radii sums do not
/// exceed width/height.
///
/// This value is ignored if [clipper] is non-null.   ¿ ÀÄÄô¿ ÀÑ  ¿ Àë¿ Àß   ¿ Ãr¿ Ão</// The text direction with which to resolve [borderRadius].   ¿ Ã≥Äñ¿ Ã∑  ¿ Ã≈¿ Ã’   ¿ ÕMg¿ Õc   ¿ ÕM¿ ÕN¿ Õ∏Å%¿ Õ…  ¿ Õ—¿ Õ„  ¿ ÕÏ¿ Õ˝  ¿ Õ∏¿ Õπ¿ Œ·Ç¿ ŒÚ  ¿ Œ¯¿ œ	  ¿ œ¿ œ  ¿ Œ·¿ Œ‚¿ –˘Å¬¿ —
  ¿ —¿ —*  ¿ —2¿ —:  ¿ –˘¿ –˙ ¿ “øâ›¿ ”ÕÅ/// Clips its child using an oval.
///
/// By default, inscribes an axis-aligned oval into its layout dimensions and
/// prevents its child from painting outside that oval, but the size and
/// location of the clip oval can be customized using a custom [clipper]. ¿ ‘ Å3 ¿ ‘·¿ ‘ÔÄ‘/// Creates an oval-shaped clip.
///
/// If [clipper] is null, the oval will be inscribed into the layout size and
/// position of the child.
///
/// If [clipBehavior] is [Clip.none], no clipping will be applied.¿ ‘ˆ¿ ‘˝  ¿ ’¿ ’  ¿ ’¿ ’!   ¿ ’7¿ ’=  ¿ ’L¿ ’V  ¿ ÷8¿ ÷+   ¿ ÷¿ ÷¿ ’fÄ¨¿ ’k  ¿ ’x	¿ ’~   ¿ ÷RÇC¿ ÷c  ¿ ÷k¿ ÷}  ¿ ÷Ü¿ ÷ó  ¿ ÷R¿ ÷S¿ ÿôÇ¿ ÿ™  ¿ ÿ∞¿ ÿ¡  ¿ ÿ…¿ ÿ—  ¿ ÿô¿ ÿö¿ ⁄≥ÅÁ¿ ⁄ƒ  ¿ ⁄”¿ ⁄‰  ¿ ⁄Ï¿ ⁄Ù  ¿ ⁄≥¿ ⁄¥ ¿ ‹ûà‘¿ ﬁqÅÃ/// Clips its child using a path.
///
/// Takes a delegate whose primary method returns a path that should
/// be used to prevent the child from painting outside the path.
///
/// Clipping to a path is expensive. Certain shapes have more
/// optimized render objects:
///
///  * To clip to a rectangle, consider [RenderClipRect].
///  * To clip to an oval or circle, consider [RenderClipOval].
///  * To clip to a rounded rectangle, consider [RenderClipRRect]. ¿ ﬁ§Åø ¿ ‡¿ ‡Å\/// Creates a path clip.
///
/// If [clipper] is null, the clip will be a rectangle that matches the layout
/// size and location of the child. However, rather than use this default,
/// consider using a [RenderClipRect], which can achieve the same effect more
/// efficiently.
///
/// If [clipBehavior] is [Clip.none], no clipping will be applied.¿ ‡&¿ ‡-  ¿ ‡7¿ ‡>  ¿ ‡J¿ ‡Q    ¿ ‡gI¿ ‡|   ¿ ‡g¿ ‡h¿ ‡¥Å%¿ ‡≈  ¿ ‡Õ¿ ‡ﬂ  ¿ ‡Ë¿ ‡˘  ¿ ‡¥¿ ‡µ¿ ·›Ç¿ ·Ó  ¿ ·Ù¿ ‚  ¿ ‚¿ ‚  ¿ ·›¿ ·ﬁ¿ „ıÅ{¿ ‰  ¿ ‰¿ ‰&  ¿ ‰.¿ ‰6  ¿ „ı¿ „ˆ ¿ ÂtàÅ¿ ÊRÄŒ/// A physical model layer casts a shadow based on its [elevation].
///
/// The concrete implementations [RenderPhysicalModel] and [RenderPhysicalShape]
/// determine the actual shape of the physical model.¿ Êk¿ Êk¿ ÊèÅt ¿ Ê≈¿ Ê›3/// The [elevation] parameter must be non-negative.¿ Ê‰¿ ÊÙ  ¿ Ê˛¿ Á  ¿ Á¿ Á-  ¿ Á7¿ ÁG  ¿ ÁW¿ Á^  ¿ Á{¿ ÁÇ  ¿ Ál¿ Áp¿ Áq¿ Áë¿ Áó¿ Á®¿ Á¢¿ Áò¿ Á•¿ ÁΩ¿ Á≤¿ Áø¿ Áÿ¿ Á—¿ Á⁄¿ Áı¿ ÁË¿ Á˜¿ È%¿ È,  ¿ Íº¿ Í¬  ¿ Îï¿ Îõ  ¿ ËÅ¿ È
ÄÎ/// The z-coordinate relative to the parent at which to place this material.
///
/// The value is non-negative.
///
/// If [debugDisableShadows] is set, this value is ignored and no shadow is
/// drawn (an outline is rendered instead).   ¿ È:Å=¿ È>  ¿ ÈH¿ ÈP   ¿ Í{>¿ Íù/// The shadow color.   ¿ Í“ÄÜ¿ Í÷  ¿ Í‚¿ ÍÈ   ¿ Î\6¿ ÎÇ/// The background color.   ¿ Î•t¿ Î©  ¿ ÎØ¿ Î∂   ¿ ÏÄ®¿ Ï.  ¿ ÏM¿ Ïe  ¿ Ï¿ Ï¿ Ï…Å*¿ Ï⁄  ¿ ÏÓ'¿ Ì  ¿ Ï…¿ Ï  ¿ Ì˜ê‚¿ ÓôÄõ/// Creates a physical model layer that clips its child to a rounded
/// rectangle.
///
/// A physical model layer casts a shadow based on its [elevation]. ¿ ÓŸÅ’ ¿ Ôd¿ ÔwÄÄ/// Creates a rounded-rectangular clip.
///
/// The [color] is required.
///
/// The [elevation] parameter must be non-negative.¿ Ô~¿ ÔÖ  ¿ Ôè#¿ Ôô  ¿ Ô∏¿ Ôø  ¿ Ô–¿ Ôﬂ  ¿ Ô¿ Ô˜  ¿ ¿   ¿ %+¿ ,  ¿ Ô†¿ Ô®¿ Ô©¿ ¿ 9¿ ?¿ D¿ O¿ E¿ Y¿ _¿ p¿ j¿ `¿ m¿ Å¿ z¿ É¿ ü¿ ë¿ °¿ Ò]¿ Òf  ¿ ÛK¿ ÛY  ¿ ≤Ä®¿ ÒJÄÇ/// The shape of the layer.
///
/// Defaults to [BoxShape.rectangle]. The [borderRadius] affects the corners
/// of the rectangle.   ¿ Òpw¿ Òt  ¿ Òz¿ ÒÑ   ¿ ÒÎÅ]¿ Û*Å/// The border radius of the rounded corners.
///
/// Values are clamped so that horizontal and vertical radii sums do not
/// exceed width/height.
///
/// This property is ignored if the [shape] is not [BoxShape.rectangle].
///
/// The value null is treated like [BorderRadius.zero].   ¿ ÛjÄë¿ Ûn  ¿ Û{¿ Ûä   ¿ ÛˇÅH¿ Ù   ¿ Ûˇ¿ Ù ¿ ıKÅ%¿ ı\  ¿ ıd¿ ıv  ¿ ı¿ ıê  ¿ ıK¿ ıL¿ ˆtáF¿ ˆÖ  ¿ ˆã¿ ˆú  ¿ ˆ§¿ ˆ¨  ¿ ˆt¿ ˆu¿ ˝æÅ¿ ˝œ  ¿ ˝„'¿ ˛   ¿ ˝æ¿ ˝ø ¿ ˛€å"¿ ˇ‡Ä˛/// Creates a physical shape layer that clips its child to a [Path].
///
/// A physical shape layer casts a shadow based on its [elevation].
///
/// See also:
///
///  * [RenderPhysicalModel], which is optimized for rounded rectangles and
///    circles. ¿ Åó ¿ ¡¿ ‘Äó/// Creates an arbitrary shape clip.
///
/// The [color] and [clipper] parameters are required.
///
/// The [elevation] parameter must be non-negative.¿ €¿ ‚  ¿ Ï*¿  ¿¿#  ¿4¿;  ¿O¿_  ¿i+¿p  ¿F¿}¿É¿à¿ì¿â¿ù¿£¿¥¿Æ¿§¿± ¿∫I¿œ   ¿∫¿ª¿Å%¿  ¿ ¿2  ¿;¿L  ¿¿¿0Üı¿A  ¿G¿X  ¿`¿h  ¿0¿1¿
)Ä“¿
:  ¿
N'¿
k  ¿
)¿
* ¿ÀëÀ¿B/// Paints a [Decoration] either before or after its child paints. ¿BÇ| ¿t¿ÜÅ#/// Creates a decorated box.
///
/// The [decoration], [position], and [configuration] arguments must not be
/// null. By default the decoration paints behind the child.
///
/// The [ImageConfiguration] will be passed to the decoration (with the size
/// filled in) to let it resolve images.¿ç¿¢  ¿±;¿≈  ¿Ú;¿  ¿3¿?  ¿œ¿·¿‚¿¿'¿(¿X¿L¿Z¿w¿m¿y¿ô¿ä¿õ¿±¿∂¿º¿∑¿¬¿Œ  ¿O¿Z  ¿ü¿≤  ¿¿!¿”  ¿€q¿2A/// What decoration to paint.
///
/// Commonly a [BoxDecoration].   ¿iÄ∑¿m  ¿x¿Ñ   ¿$x¿ÜH/// Whether to paint the box decoration behind or in front of the child.   ¿øÄã¿√  ¿Ã¿‡   ¿NÅo¿ùÅ+/// The settings to pass to the decoration when painting, so that it can
/// resolve images appropriately. See [ImageProvider.resolve] and
/// [BoxPainter.paint].
///
/// The [ImageConfiguration.textDirection] field is also used by
/// direction-sensitive [Decoration]s for painting and hit-testing.   ¿ÂÄö¿È  ¿˜¿   ¿ÉÅÿ¿î   ¿É¿Ñ¿_Äè¿p  ¿|¿Ñ  ¿_¿`¿ÚÜ}¿  ¿	¿  ¿"¿*  ¿Ú¿Û¿sÅ!¿Ñ  ¿ò&¿µ  ¿s¿t ¿ò£ß¿÷7/// Applies a transformation before painting its child. ¿Å· ¿:¿I6/// Creates a render object that transforms its child.¿P¿b  ¿p¿y  ¿Ñ¿ò  ¿¶¿∂  ¿»¿Œ  ¿Î¿˚  ¿¿  ¿·¿&¿+¿1¿,¿!'¿!/  ¿$Ø¿$¬  ¿&Å¿&ê  ¿'∑Åv¿)ÅS/// When set to true, hit tests are performed based on the position of the
/// child as it is painted. When set to false, hit tests are performed
/// ignoring the transformation.
///
/// [applyPaintTransform], and therefore [localToGlobal] and [globalToLocal],
/// always honor the transformation, regardless of the value of this property. ¿)2¿);  ¿,)¿,8  ¿ÊÅ>¿!Å/// The origin of the coordinate system (relative to the upper left corner of
/// this render object) in which to apply the matrix.
///
/// Setting an origin is equivalent to conjugating the transform matrix by a
/// translation. This property is provided just for convenience.   ¿!:Äö¿!>  ¿!E¿!N   ¿!ÿÇ‘¿$îÇé/// The alignment of the origin, relative to the size of the box.
///
/// This is equivalent to setting an origin based on the size of the box.
/// If it is specified at the same time as an offset, both are applied.
///
/// An [AlignmentDirectional.centerStart] value is the same as an [Alignment]
/// whose [Alignment.x] value is `-1.0` if [textDirection] is
/// [TextDirection.ltr], and `1.0` if [textDirection] is [TextDirection.rtl].
/// Similarly [AlignmentDirectional.centerEnd] is the same as an [Alignment]
/// whose [Alignment.x] value is `1.0` if [textDirection] is
/// [TextDirection.ltr], and `-1.0` if [textDirection] is [TextDirection.rtl].   ¿$–ÄÆ¿$‘  ¿$ﬁ¿$Ú   ¿%ÇÄ¸¿&^Ä¿/// The text direction with which to resolve [alignment].
///
/// This may be changed to null, but only after [alignment] has been changed
/// to a value that does not depend on the direction.   ¿&¢Ä∂¿&¶  ¿&¥¿&ƒ   ¿'\W¿'q   ¿'\¿']¿)IÇ¿*ÅÅ'/// The matrix to transform the child by during painting. The provided value
/// is copied on assignment.
///
/// There is no getter for [transform], because [Matrix4] is mutable, and
/// mutations outside of the control of the render object could not reliably
/// be reflected in the rendering. ¿*ã¿*î   ¿+[ÄÀ¿,Äë/// The filter quality with which to apply the transform as a bitmap operation.
///
/// {@macro flutter.widgets.Transform.optional.FilterQuality}   ¿,JÅ8¿,N  ¿,\¿,l   ¿2
ÇÓ¿2    ¿-ÜÄû¿-º./// Sets the transform to the identity matrix.   ¿.(ÄΩ¿.p@/// Concatenates a rotation about the x axis into the transform. ¿.x¿.Ä   ¿.ÈÄΩ¿/1@/// Concatenates a rotation about the y axis into the transform. ¿/9¿/A   ¿/™ÄΩ¿/Ú@/// Concatenates a rotation about the z axis into the transform. ¿/˙¿0   ¿0kÄﬁ¿0≤?/// Concatenates a translation by (x, y, z) into the transform. ¿0º¿0ƒ  ¿0»¿0–  ¿0ÿ¿0‡  ¿0”¿0„¿1MÄπ¿1Å,/// Concatenates a scale into the transform. ¿1á¿1è  ¿1ì	¿1ú  ¿1û	¿1ß   ¿4¸ÅY¿5  ¿5¿5'  ¿50¿5A  ¿4¸¿4˝¿6YÅÆ¿6j  ¿6z¿6å  ¿6ï¿6¶  ¿6Y¿6Z¿8Üó¿8  ¿8"¿83  ¿8;¿8C  ¿8¿8¿>¶|¿>∑  ¿>À¿>÷  ¿>‹¿>Â  ¿>¶¿>ß¿?&Ç¿?7  ¿?K&¿?h  ¿?&¿?' ¿AA¢	¿AåD/// Scales and positions its child within itself according to [fit]. ¿A∑Åà ¿AÎ¿A˙1/// Scales and positions its child within itself.¿B¿B	  ¿B".¿B5  ¿BV¿Bf  ¿Bx¿BÑ  ¿Bé¿Bî  ¿B¿B¿B¿B@¿BI¿BJ¿B¢¿B¶¿Bß¿Bπ¿B¥¿Bª¿B“¿B«¿B‘¿Bı¿BÊ¿B˜¿C¿C¿C¿C2¿C7¿C=¿C8¿CC¿CN  ¿Eÿ¿Eﬂ  ¿H≥¿H≈  ¿J¿Jé  ¿TV¿T\  ¿Tr¿T{  ¿U¿U ¿U$¿U(¿U)¿Ev_¿E…E/// How to inscribe the child into the space allocated during layout.   ¿EÁÅ¿EÎ  ¿EÔ¿E˜   ¿GÅ´¿HòÅl/// How to align the child within its parent's bounds.
///
/// An alignment of (0.0, 0.0) aligns the child to the top-left corner of its
/// parent's bounds. An alignment of (1.0, 0.5) aligns the child to the middle
/// of the right edge of its parent's bounds.
///
/// If this is set to an [AlignmentDirectional] object, then
/// [textDirection] must not be null.   ¿H”Ä©¿H◊  ¿H·¿HÙ   ¿IÄÄ¸¿J\Ä¿/// The text direction with which to resolve [alignment].
///
/// This may be changed to null, but only after [alignment] has been changed
/// to a value that does not depend on the direction.   ¿J†Ä≤¿J§  ¿J≤¿J¬   ¿TäÄÇ¿TÓT/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none].   ¿U1Ä°¿U5  ¿UB
¿UH   ¿CeÄä¿Cj    ¿CÛU¿C¯    ¿DLÅ&¿DQ  ¿Dc
¿Dk   ¿KòÖ≤¿K©  ¿K∫¿K   ¿Kò¿Kô¿QNÉ¿Q_   ¿QN¿QO¿U÷R¿U€    ¿V,ÑD¿V1    ¿ZtÅ‰¿ZÑ  ¿Zù¿ZÆ  ¿Z∂¿Zæ   ¿\\ÇW¿\m  ¿\s¿\Ñ  ¿\å¿\î  ¿\\¿\]¿^∑Å∑¿^»  ¿^ÿ¿^Í  ¿^Û¿_  ¿^∑¿^∏¿`rÄÜ¿`É  ¿`è¿`ö  ¿`r¿`s¿`¸Ä‹¿a  ¿a!¿a,  ¿a2¿a;  ¿`¸¿`˝¿a‹Ål¿aÌ  ¿b&¿b  ¿a‹¿a› ¿cLåU¿eÅ∏/// Applies a translation transformation before painting its child.
///
/// The translation is expressed as an [Offset] scaled to the child's size. For
/// example, an [Offset] with a `dx` of 0.25 will result in a horizontal
/// translation of one quarter the width of the child.
///
/// Hit tests will only be detected inside the bounds of the
/// [RenderFractionalTranslation], even if the contents are offset such that
/// they overflow. ¿eBÄÛ ¿eÜ¿e°A/// Creates a render object that translates its child's painting.¿e®¿eπ  ¿e…¿eœ  ¿eÏ¿e¯  ¿e‚¿f¿f¿f¿f(¿f-¿f3¿f.¿g:¿gA  ¿ifÅv¿jÀÅS/// When set to true, hit tests are performed based on the position of the
/// child as it is painted. When set to false, hit tests are performed
/// ignoring the transformation.
///
/// applyPaintTransform(), and therefore localToGlobal() and globalToLocal(),
/// always honor the transformation, regardless of the value of this property. ¿f9Ä˛¿gÄŒ/// The translation to apply to the child, scaled to the child's size.
///
/// For example, an [Offset] with a `dx` of 0.25 will result in a horizontal
/// translation of one quarter the width of the child.   ¿gQÄ®¿gU  ¿ga¿gi   ¿g˝Åe¿h  ¿h¿h(  ¿h1¿hB  ¿g˝¿g˛¿j·Å ¿jÚ  ¿k¿k  ¿k¿k.  ¿j·¿j‚¿lØÅ¿l¿  ¿l∆¿l◊  ¿lﬂ¿lÁ  ¿lØ¿l∞¿m≈Äµ¿m÷  ¿mÍ¿mı  ¿m˚¿n  ¿m≈¿m∆¿n~Å!¿nè  ¿n£&¿n¿  ¿n~¿n ¿u÷èl¿x
Ç-/// Calls callbacks in response to common pointer events.
///
/// It responds to events that can construct gestures, such as when the
/// pointer is pointer is pressed and moved, and then released or canceled.
///
/// It does not respond to events that are exclusive to mouse, such as when the
/// mouse enters and exits a region without pressing any buttons. For
/// these events, use [RenderMouseRegion].
///
/// If it has a child, defers to the child for sizing behavior.
///
/// If it does not have a child, grows to fit the parent-provided constraints. ¿xNÅÕ ¿xÁ¿x¸Äí/// Creates a render object that forwards pointer events to callbacks.
///
/// The [behavior] argument defaults to [HitTestBehavior.deferToChild].¿y¿y	  ¿y¿y!  ¿y3¿y9  ¿yI¿yO  ¿yb¿yh  ¿y|¿yÇ  ¿yú¿y¢  ¿yΩ¿y√  ¿y€¿y·  ¿yı¿y¸  ¿z	¿z   	¿zÄ“¿z‰Ä§/// Called when a pointer comes into contact with the screen (for touch
/// pointers), or has its button pressed (for mouse pointers) at this widget's
/// location. ¿zˆw¿{`M/// Called when a pointer that triggered an [onPointerDown] changes position. ¿{rÄê¿{˜h/// Called when a pointer that triggered an [onPointerDown] is no longer in
/// contact with the screen. ¿|w¿|pK/// Called when a pointer that has not an [onPointerDown] changes position. ¿|ÉÄ´¿}{/// Called when the input from a pointer that triggered an [onPointerDown] is
/// no longer directed towards this receiver. ¿}3|¿}öB/// Called when a pan/zoom begins such as from a trackpad gesture. ¿}¥b¿~ &/// Called when a pan/zoom is updated. ¿~Z¿~b$/// Called when a pan/zoom finishes. ¿~zg¿~“9/// Called when a pointer signal occurs over this object.  ¿~Êh¿~˜  ¿¿  ¿~Ê¿~Á¿RÉû¿c  ¿o¿}  ¿É¿ë  ¿R¿S¿ÇÙÇL¿É  ¿É&¿É6  ¿ÇÙ¿Çı ¿ÖDî5¿à(Ç›/// Calls callbacks in response to pointer events that are exclusive to mice.
///
/// It responds to events that are related to hovering, i.e. when the mouse
/// enters, exits (with or without pressing buttons), or moves over a region
/// without pressing buttons.
///
/// It does not respond to common events that construct gestures, such as when
/// the pointer is pressed, moved, then released or canceled. For these events,
/// use [RenderPointerListener].
///
/// If it has a child, it defers to the child for sizing behavior.
///
/// If it does not have a child, it grows to fit the parent-provided constraints.
///
/// See also:
///
///  * [MouseRegion], a widget that listens to hover events using
///    [RenderMouseRegion]. ¿àäÇí ¿âp¿âÅÄ›/// Creates a render object that forwards pointer events to callbacks.
///
/// All parameters are optional. By default this method creates an opaque
/// mouse region with no callbacks and cursor being [MouseCursor.defer].¿âà¿âé  ¿âö¿â†  ¿â¨¿â≤  ¿âΩ&¿â   ¿âÈ ¿âÔ  ¿ä¿ä  ¿ä'¿ä.  ¿ä89¿äJ  ¿â“¿â›¿âﬁ¿ä¿ä¿ä[¿äj¿äk¿äÇ¿äz¿äÑ¿ä©¿äì¿ä´¿ä–¿ä»¿ä“¿ä·¿äÊ¿ã¿äÔ¿äÁ¿ã¿äÒ¿ã¿ã¿ã¿èp¿èu  ¿ë˙.¿í! ¿ë˙¿ë˚¿í-ÄŒ¿íÙÄ£/// Triggered when a pointer has moved onto or within the region without
/// buttons pressed.
///
/// This callback is not triggered by the movement of the object. ¿ì ,¿ì& ¿ì ¿ì¿ìb¿ìn  ¿î∏¿îΩ  ¿åëÇ‹¿è[Ç§/// Whether this object should prevent [RenderMouseRegion]s visually behind it
/// from detecting the pointer, thus affecting how their [onHover], [onEnter],
/// and [onExit] behave.
///
/// If [opaque] is true, this object will absorb the mouse pointer and
/// prevent this object's siblings (or any other objects that are not
/// ancestors or descendants of this object) from detecting the mouse
/// pointer even when the pointer is within their areas.
///
/// If [opaque] is false, this object will not affect how [RenderMouseRegion]s
/// behind it behave, which will detect the mouse pointer as long as the
/// pointer is within their areas.
///
/// This defaults to true.   ¿èÄÄ∫¿èÑ  ¿èã
¿èë   ¿ê>Äò¿ê∫`/// How to behave during hit testing.
///
/// This defaults to [HitTestBehavior.opaque] if null.   ¿êŸÅ¿ê›  ¿êÌ¿êˇ   ¿ì1.¿ìM   ¿ì1¿ì2¿ìyÄı¿ì}  ¿ìÑ¿ìë   ¿îrC¿îá   ¿îr¿îs¿ã Äñ¿ã1  ¿ã9¿ãK  ¿ãT¿ãe  ¿ã ¿ã!¿ã∫Ä”¿ãÀ  ¿ã◊¿ãÂ  ¿ãÎ¿ã˘  ¿ã∫¿ãª¿î◊m¿îË  ¿îÔ¿î˛  ¿î◊¿îÿ¿ïHÅ$¿ïY   ¿ïH¿ïI¿ñph¿ñÅ  ¿ñó¿ñß  ¿ñp¿ñq¿ñ‹Çõ¿ñÌ  ¿ó&¿ó  ¿ñ‹¿ñ› ¿ô{™T¿ü÷ÜT/// Creates a separate display list for its child.
///
/// This render object creates a separate display list for its child, which
/// can improve performance if the subtree repaints at different times than
/// the surrounding parts of the tree. Specifically, when the child does not
/// repaint but its parent does, we can re-use the display list we recorded
/// previously. Similarly, when the child repaints but the surround tree does
/// not, we can re-record its display list without re-recording the display list
/// for the surround tree.
///
/// In some cases, it is necessary to place _two_ (or more) repaint boundaries
/// to get a useful effect. Consider, for example, an e-mail application that
/// shows an unread count and a list of e-mails. Whenever a new e-mail comes in,
/// the list would update, but so would the unread count. If only one of these
/// two parts of the application was behind a repaint boundary, the entire
/// application would repaint each time. On the other hand, if both were behind
/// a repaint boundary, a new e-mail would only change those two parts of the
/// application and the rest of the application would not repaint.
///
/// To tell if a particular RenderRepaintBoundary is useful, run your
/// application in debug mode, interacting with it in typical ways, and then
/// call [debugDumpRenderTree]. Each RenderRepaintBoundary will include the
/// ratio of cases where the repaint boundary was useful vs the cases where it
/// was not. These counts can also be inspected programmatically using
/// [debugAsymmetricPaintCount] and [debugSymmetricPaintCount] respectively. ¿†l ¿†8¿†M./// Creates a repaint boundary around [child].¿†P¿†\  ¿†f¿†k¿†q¿†l¿∂9!¿∂= ¿∂Y¿πo"¿πs ¿πê¿†w/¿†å   ¿†w¿†x¿≥´Çã¿∂ Ç6/// The number of times that this render object repainted at the same time as
/// its parent. Repaint boundaries are only useful when the parent and child
/// paint at different times. When both paint at the same time, the repaint
/// boundary is redundant, and may be actually making performance worse.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// zero.
///
/// Can be reset using [debugResetMetrics]. See [debugAsymmetricPaintCount]
/// for the corresponding count of times where only the parent or only the
/// child painted.   ¿∂_É¿π4Ç≤/// The number of times that either this render object repainted without the
/// parent being painted, or the parent repainted without this object being
/// painted. When a repaint boundary is used at a seam in the render tree
/// where the parent tends to repaint at entirely different times than the
/// child, it can improve performance by reducing the number of paint
/// operations that have to be recorded each frame.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// zero.
///
/// Can be reset using [debugResetMetrics]. See [debugSymmetricPaintCount] for
/// the corresponding count of times where both the parent and the child
/// painted together.   ¿†™â>¿©áÁ/// Capture an image of the current state of this render object and its
/// children.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes in the dimensions
/// of the render object, multiplied by the [pixelRatio].
///
/// To use [toImage], the render object must have gone through the paint phase
/// (i.e. [debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [dart:ui.FlutterView.devicePixelRatio] for the device, so specifying 1.0
/// (the default) will give you a 1:1 mapping between logical pixels and the
/// output pixels in the image.
///
/// {@tool snippet}
///
/// The following is an example of how to go from a `GlobalKey` on a
/// `RepaintBoundary` to a PNG:
///
/// ```dart
/// class PngHome extends StatefulWidget {
///   const PngHome({super.key});
///
///   @override
///   State<PngHome> createState() => _PngHomeState();
/// }
///
/// class _PngHomeState extends State<PngHome> {
///   GlobalKey globalKey = GlobalKey();
///
///   Future<void> _capturePng() async {
///     final RenderRepaintBoundary boundary = globalKey.currentContext!.findRenderObject()! as RenderRepaintBoundary;
///     final ui.Image image = await boundary.toImage();
///     final ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
///     final Uint8List pngBytes = byteData!.buffer.asUint8List();
///     print(pngBytes);
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return RepaintBoundary(
///       key: globalKey,
///       child: Center(
///         child: TextButton(
///           onPressed: _capturePng,
///           child: const Text('Hello World', textDirection: TextDirection.ltr),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [OffsetLayer.toImage] for a similar API at the layer level.
///  * [dart:ui.Scene.toImage] for more information about the image returned. ¿©#¿©+  ¿©7¿©Ïâª¿≤–àb/// Capture an image of the current state of this render object and its
/// children synchronously.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes in the dimensions
/// of the render object, multiplied by the [pixelRatio].
///
/// To use [toImageSync], the render object must have gone through the paint phase
/// (i.e. [debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [dart:ui.FlutterView.devicePixelRatio] for the device, so specifying 1.0
/// (the default) will give you a 1:1 mapping between logical pixels and the
/// output pixels in the image.
///
/// This API functions like [toImage], except that rasterization begins eagerly
/// on the raster thread and the image is returned before this is completed.
///
/// {@tool snippet}
///
/// The following is an example of how to go from a `GlobalKey` on a
/// `RepaintBoundary` to an image handle:
///
/// ```dart
/// class ImageCaptureHome extends StatefulWidget {
///   const ImageCaptureHome({super.key});
///
///   @override
///   State<ImageCaptureHome> createState() => _ImageCaptureHomeState();
/// }
///
/// class _ImageCaptureHomeState extends State<ImageCaptureHome> {
///   GlobalKey globalKey = GlobalKey();
///
///   void _captureImage() {
///     final RenderRepaintBoundary boundary = globalKey.currentContext!.findRenderObject()! as RenderRepaintBoundary;
///     final ui.Image image = boundary.toImageSync();
///     print('Image dimensions: ${image.width}x${image.height}');
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return RepaintBoundary(
///       key: globalKey,
///       child: Center(
///         child: TextButton(
///           onPressed: _captureImage,
///           child: const Text('Hello World', textDirection: TextDirection.ltr),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [OffsetLayer.toImageSync] for a similar API at the layer level.
///  * [dart:ui.Scene.toImageSync] for more information about the image returned. ¿≤ﬁ¿≤Ê  ¿≤Ú¿πñÅI¿∫NÄ™/// Resets the [debugSymmetricPaintCount] and [debugAsymmetricPaintCount]
/// counts to zero.
///
/// Only valid when asserts are enabled. Does nothing in release builds.   ¿∫„Å6¿∫Ù  ¿ª¿ª  ¿ª4¿ª:  ¿∫„¿∫‰¿ª.¿ªI¿ºá∞¿º.  ¿ºB&¿º_  ¿º¿º ¿√—çà¿∆ÆÇ÷/// A render object that is invisible during hit testing.
///
/// When [ignoring] is true, this render object (and its subtree) is invisible
/// to hit testing. It still consumes space during layout and paints its child
/// as usual. It just cannot be the target of located events, because its render
/// object returns false from [hitTest].
///
/// ## Semantics
///
/// Using this class may also affect how the semantics subtree underneath is
/// collected.
///
/// {@macro flutter.widgets.IgnorePointer.semantics}
///
/// {@macro flutter.widgets.IgnorePointer.ignoringSemantics}
///
/// See also:
///
///  * [RenderAbsorbPointer], which takes the pointer events but prevents any
///    nodes in the subtree from seeing them. ¿∆›Å• ¿«¿«0=/// Creates a render object that is invisible to hit testing.¿«7¿«C  ¿«M¿«S  ¿«gÄπ¿»  ¿«]¿«g¿«h¿«r¿»¿«z¿« ¿»3¿»)¿»5¿»Y¿»F¿»[¿»u¿»z¿»Ä¿»{¿……¿…Œ  ¿Ã\¿Ãb  ¿»ÜÅ@¿…∞Å/// Whether this render object is ignored during hit testing.
///
/// Regardless of whether this render object is ignored during hit testing, it
/// will still consume space during layout and be visible during painting.
///
/// {@macro flutter.widgets.IgnorePointer.semantics}   ¿…€Ä¥¿…ﬂ  ¿…Ë
¿…Ó   ¿ ìÅ∆¿Ã1ÄÔ/// Whether the semantics of this render object is ignored when compiling the semantics tree.
///
/// {@macro flutter.widgets.IgnorePointer.ignoringSemantics}
///
/// See [SemanticsNode] for additional information about the semantics tree.  ¿Àç¿Àé¿Àò¿Ã#¿Àû¿ÀÏ¿ÃxÄ£¿Ã|  ¿Ãé¿Ãï   ¿ÕÄò¿Õ0  ¿Õ8¿ÕJ  ¿ÕS¿Õd  ¿Õ¿Õ ¿ÕªÄ∂¿ÕÃ  ¿ÕÊ¿Õ˚  ¿Õª¿Õº¿ŒuÅB¿ŒÜ  ¿Œ•¿ŒΩ  ¿Œu¿Œv¿œªÅú¿œÃ  ¿œ‡&¿œ˝  ¿œª¿œº ¿—[ç¿“Ä∂/// Lays the child out as if it was in the tree, but without painting anything,
/// without making the child available for hit testing, and without taking any
/// room in the parent. ¿“BÄõ ¿“k¿“y&/// Creates an offstage render object.¿“Ä¿“Ü  ¿“ö¿“¶  ¿“ê¿“Ω¿“≥¿“ø¿“–¿“’¿“€¿“÷¿‘R¿‘W  ¿“·Ån¿‘9Å@/// Whether the child is hidden from the rest of the tree.
///
/// If true, the child is laid out as if it was in the tree, but without
/// painting anything, without making the child available for hit testing, and
/// without taking any room in the parent.
///
/// If false, the child is included in the tree as normal.   ¿‘dÄî¿‘h  ¿‘q
¿‘w   ¿ÿE/¿ÿZ   ¿ÿE¿ÿF¿‘¸Äü¿’  ¿’(¿’0  ¿‘¸¿‘˝¿’üÄü¿’≤  ¿’À¿’”  ¿’ü¿’†¿÷BÄü¿÷U  ¿÷o¿÷w  ¿÷B¿÷C¿÷ÂÄü¿÷¯  ¿◊¿◊  ¿÷Â¿÷Ê¿◊àÄπ¿◊ú  ¿◊º¿◊   ¿◊à¿◊â¿ÿxÄ∞¿ÿâ  ¿ÿö¿ÿ™  ¿ÿx¿ÿy¿Ÿ,W¿Ÿ=   ¿Ÿ,¿Ÿ-¿ŸáÄå¿Ÿò   ¿Ÿá¿Ÿà¿⁄Äò¿⁄(  ¿⁄0¿⁄B  ¿⁄K¿⁄\  ¿⁄¿⁄¿⁄≥k¿⁄ƒ  ¿⁄–¿⁄€  ¿⁄≥¿⁄¥¿€"Äé¿€3  ¿€9¿€J  ¿€R¿€Z  ¿€"¿€#¿€¥Ä£¿€≈  ¿€ﬂ¿€Ù  ¿€¥¿€µ¿‹[Ä¬¿‹l  ¿‹Ä&¿‹ù  ¿‹[¿‹\¿›!Å<¿›C   ¿›!¿›" ¿ﬁaé9¿·üÉ7/// A render object that absorbs pointers during hit testing.
///
/// When [absorbing] is true, this render object prevents its subtree from
/// receiving pointer events by terminating hit testing at itself. It still
/// consumes space during layout and paints its child as usual. It just prevents
/// its children from being the target of located events, because its render
/// object returns true from [hitTest].
///
/// ## Semantics
///
/// Using this class may also affect how the semantics subtree underneath is
/// collected.
///
/// {@macro flutter.widgets.AbsorbPointer.semantics}
///
/// {@macro flutter.widgets.AbsorbPointer.ignoringSemantics}
///
/// See also:
///
///  * [RenderIgnorePointer], which has the opposite effect: removing the
///    subtree from considering entirely for the purposes of hit testing. ¿·ŒÅ∞ ¿‚¿‚)E/// Creates a render object that absorbs pointers during hit testing.¿‚0¿‚<  ¿‚F¿‚L  ¿‚aÄπ¿„
  ¿‚W¿‚a¿‚b¿‚l¿‚˝¿‚t¿‚ƒ¿„.¿„#¿„0¿„U¿„B¿„W¿„q¿„v¿„|¿„w¿‰Ÿ¿‰ﬁ  ¿Áv¿Á|  ¿„ÇÅT¿‰æÅ$/// Whether this render object absorbs pointers during hit testing.
///
/// Regardless of whether this render object absorbs pointers during hit
/// testing, it will still consume space during layout and be visible during
/// painting.
///
/// {@macro flutter.widgets.AbsorbPointer.semantics}   ¿‰ÏÄ∑¿‰  ¿‰˙
¿Â    ¿ÂßÅÃ¿ÁKÄÛ/// Whether the semantics of this render object is ignored when compiling the
/// semantics tree.
///
/// {@macro flutter.widgets.AbsorbPointer.ignoringSemantics}
///
/// See [SemanticsNode] for additional information about the semantics tree.  ¿Êß¿Ê®¿Ê≤¿Á=¿Ê∏¿Á¿ÁíÄ£¿Áñ  ¿Á®¿ÁØ   ¿Ë9Ä¡¿ËJ  ¿ËR¿Ëd  ¿Ëm¿Ë~  ¿Ë9¿Ë:¿Ë˛Ä∂¿È  ¿È)¿È>  ¿Ë˛¿Ëˇ¿È∏ÅB¿È…  ¿ÈË¿Í   ¿È∏¿Èπ¿Í˛Åö¿Î  ¿Î#&¿Î@  ¿Í˛¿Íˇ ¿ÏúÉs¿ÌÁÅD/// Holds opaque meta data in the render tree.
///
/// Useful for decorating the render tree with information that will be consumed
/// later. For example, you could store information in the render tree that will
/// be used when the user interacts with the render tree but has no visual
/// impact prior to the interaction. ¿Ó$Äÿ ¿ÓÆ¿ÓºÄÉ/// Creates a render object that hold opaque meta data.
///
/// The [behavior] argument defaults to [HitTestBehavior.deferToChild].¿Ó√¿Ó…  ¿Ó÷¿Ó›  ¿ÓÍ¿ÓÒ   ¿Ô C¿Ô;0/// Opaque meta data ignored by the render tree.  ¿ÔHÄ≈¿ÔY  ¿Ôm&¿Ôä  ¿ÔH¿ÔI ¿öë¿zb/// Listens for the specified gestures from the semantics server (e.g.
/// an accessibility tool). ¿∆Ç
 ¿Ò¿Ò.H/// Creates a render object that listens for specific semantic gestures.¿Ò5¿Ò<  ¿ÒF¿Ò[  ¿Òe%¿ÒÄ  ¿Òê1¿Ò¨  ¿Ò«/¿Ò„  ¿Ò¸¿Ú  ¿Ú¿Ú   ¿Ú¿Ú7¿Ú0¿Ú9¿ÚT¿ÚG¿ÚV¿ÚÇ¿Új¿ÚÑ¿Úπ¿Ú£¿Úª¿ıÊ#¿ı¸  ¿˜0¿˜D  ¿¯Ã&¿¯Ê  ¿˙ñ2¿˙±  ¿¸Ñ0¿¸ü  ¿˝ÈÅ2¿ˇÅ/// The fraction of the dimension of this render box to use when
/// scrolling. For example, if this is 0.8 and the box is 200 pixels
/// wide, then when a left-scroll action is received from the
/// accessibility system, it will translate into a 160 pixel
/// leftwards drag. 
¿Ú‘É¿ı≈Çº/// If non-null, the set of actions to allow. Other actions will be omitted,
/// even if their callback is provided.
///
/// For example, if [onTap] is non-null but [validActions] does not contain
/// [SemanticsAction.tap], then the semantic description of this node will
/// not claim to support taps.
///
/// This is normally used to filter the actions made available by
/// [onHorizontalDragUpdate] and [onVerticalDragUpdate]. Normally, these make
/// both the right and left, or up and down, actions available. For example,
/// if [onHorizontalDragUpdate] is set but [validActions] only contains
/// [SemanticsAction.scrollLeft], then the [SemanticsAction.scrollRight]
/// action will be omitted.   ¿ˆÄæ¿ˆ  ¿ˆ¿ˆ5   ¿ˆœ^¿˜3/// Called when the user taps on the render object.   ¿˜NÄÍ¿˜R  ¿˜X¿˜m   ¿¯<Äç¿¯≠P/// Called when the user presses on the render object for a long period of time.   ¿¯ˆÅ¿¯˙  ¿˘¿˘!   ¿˙Äë¿˙a=/// Called when the user scrolls to the left or to the right.   ¿˙ÃÅ5¿˙–  ¿˙Á ¿˚   ¿¸|¿¸S,/// Called when the user scrolls up or down.   ¿¸∏Å-¿¸º  ¿¸— ¿¸Ì   ¿ˇ É¶¿ˇ1  ¿ˇP¿ˇh  ¿ˇ ¿ˇ!¿ t¿œ  ¿ﬁ¿Ô   ¿BÅW¿G    ¿ùÅW¿¢    ¿¯ÅR¿˝    ¿NÅS¿S    ¿•Å˚¿∂  ¿ &¿Á  ¿•¿¶ ¿
§π]¿
Á</// Add annotations to the [SemanticsNode] for this subtree. ¿Ç˘ ¿—¿ÎÄ≠/// Creates a render object that attaches a semantic annotation.
///
/// If the [SemanticsProperties.attributedLabel] is not null, the [textDirection] must also not be null.¿Ú¿˛  ¿'¿&  ¿5¿;  ¿Q¿W  ¿v¿|  ¿ô¿ü  ¿º¿Ã  ¿F¿k¿é¿±¿Ì¿‚¿Ô¿¿¿¿F¿4¿H¿t¿b¿v¿ü¿ê¿°¿ƒ¿∏¿∆¿⁄¿ﬂ¿Â¿‡¿ù¿±  ¿/¿4  ¿¬¿«  ¿¿  ¿Â¿Í  ¿P"¿b  ¿v"¿à  ¿ú+¿Æ  ¿À+¿›  ¿˙!¿   ¿!‘¿!„  ¿ÄÄ¿ÄK/// All of the [SemanticsProperties] for this [RenderSemanticsAnnotations].   ¿¿Ä∆¿ƒ  ¿œ¿‰   ¿äÅ¢¿År/// If 'container' is true, this [RenderObject] will introduce a new
/// node in the semantics tree. Otherwise, the semantics will be
/// merged with the semantics of any ancestors.
///
/// Whether descendants of this [RenderObject] can add their semantic information
/// to the [SemanticsNode] introduced by this configuration is controlled by
/// [explicitChildNodes].   ¿BÄâ¿F  ¿P
¿V   ¿œÇ¿ïÇ¢/// Whether descendants of this [RenderObject] are allowed to add semantic
/// information to the [SemanticsNode] annotated by this widget.
///
/// When set to false descendants are allowed to annotate [SemanticsNode]s of
/// their parent with the semantic information they want to contribute to the
/// semantic tree.
/// When set to true the only way for descendants to contribute semantic
/// information to the semantic tree is to introduce new explicit
/// [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with
/// [SemanticsConfiguration.isSemanticBoundary] to create semantic boundaries
/// that are either writable or not for children.   ¿ﬁÄ•¿‚  ¿ı
¿˚   ¿áÅ~¿ﬂÅB/// Whether descendants of this [RenderObject] should have their semantic
/// information ignored.
///
/// When this flag is set to true, all child semantics nodes are ignored.
/// This can be used as a convenience for cases where a child is wrapped in
/// an [ExcludeSemantics] widget and then another [Semantics] widget.   ¿"Äü¿&  ¿7
¿=   ¿≈Å¿ºÄ„/// Whether to block user interactions for the semantics subtree.
///
/// Setting this true prevents user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿ˇÄü¿  ¿
¿   ¿  Å±¿!±Åm/// If non-null, sets the [SemanticsNode.textDirection] semantic to the given
/// value.
///
/// This must not be null if [SemanticsProperties.attributedLabel],
/// [SemanticsProperties.attributedHint],
/// [SemanticsProperties.attributedValue],
/// [SemanticsProperties.attributedIncreasedValue], or
/// [SemanticsProperties.attributedDecreasedValue] are not null.   ¿!ıÄü¿!˘  ¿"¿"   ¿¢Å|¿ß  ¿ø¿‘   ¿"Ä∑¿4  ¿N¿c   ¿›Ä∑¿Ô  ¿	¿   ¿òÄ˙¿™  ¿‘¿È   ¿ñÄˇ¿®  ¿“¿Á   ¿ôÄ≥¿´  ¿ƒ¿Ÿ   ¿"òÄ´¿"©  ¿"√¿"ÿ  ¿"ò¿"ô¿#Gô”¿#X  ¿#w¿#è  ¿#G¿#H¿=7¿=#    ¿=YC¿=^    ¿=†?¿=•    ¿=„E¿=Ë    ¿>,G¿>1    ¿>wA¿>|    ¿>ºE¿>¡    ¿?A¿?
    ¿?JA¿?O    ¿?è9¿?î    ¿?Ã7¿?—    ¿@;¿@    ¿@FÄå¿@K  ¿@p¿@v   ¿@÷Äé¿@€  ¿A¿A   ¿AhÄÇ¿Am  ¿Aç¿Aì   ¿AÓÄÑ¿AÛ  ¿B¿B   ¿Bvi¿B{  ¿Bê¿Bü   ¿B„N¿BË  ¿B¯¿C    ¿C5c¿C:    ¿Cúc¿C°     ¿DÑÌ¿D˚ÄÒ/// Causes the semantics of all earlier render objects below the same semantic
/// boundary to be dropped.
///
/// This is useful in a stack where an opaque mask should prevent interactions
/// with the render objects painted below the mask. ¿E+Ä‘ ¿Eá¿EõW/// Create a render object that blocks semantics for nodes below it in paint
/// order.¿E¢¿EÆ  ¿E∏¿Eæ  ¿E»¿Eﬂ¿E’¿E·¿EÚ¿E˜¿E˝¿E¯¿F¬¿F«  ¿FÄº¿F©Äò/// Whether this render object is blocking semantics of previously painted
/// [RenderObject]s below a common semantics boundary from the semantic tree.   ¿F‘Äá¿Fÿ  ¿F·
¿FÁ   ¿G_Ä…¿Gp  ¿Gè¿Gß  ¿G_¿G`¿H,Ä¬¿H=  ¿HQ&¿Hn  ¿H,¿H- ¿HÚÉ¿JVÅ]/// Causes the semantics of all descendants to be merged into this
/// node such that the entire subtree becomes a single leaf in the
/// semantics tree.
///
/// Useful for combining the semantics of multiple render objects that
/// form part of a single conceptual widget, e.g. a checkbox, a label,
/// and the gesture detector that goes with them. ¿JÜÄà ¿J‘¿JËK/// Creates a render object that merges the semantics from its descendants.¿JÎ¿J˜  ¿K¿K¿K¿K  ¿KÄ„¿K#  ¿KB¿KZ  ¿K¿K ¿K˘Ñ°¿M&Å&/// Excludes this subtree from the semantic tree.
///
/// When [excluding] is true, this render object (and its subtree) is excluded
/// from the semantic tree.
///
/// Useful e.g. for hiding text that is redundant with other text next
/// to it (e.g. text included only for the visual effect). ¿MXÄ∆ ¿M°¿M∑F/// Creates a render object that ignores the semantics of its subtree.¿Mæ¿M   ¿M‘¿M⁄  ¿MÂ¿M˝¿MÚ¿Mˇ¿N¿N¿N¿N¿Nã¿Nê  ¿N"f¿NpB/// Whether this render object is excluded from the semantic tree.   ¿NûÄä¿N¢  ¿N¨
¿N≤   ¿O,Ä§¿O=  ¿OW¿Ol  ¿O,¿O-¿O‘Äƒ¿OÂ  ¿O˘&¿P  ¿O‘¿O’ ¿PúÑÃ¿R+Åà/// A render objects that annotates semantics with an index.
///
/// Certain widgets will automatically provide a child index for building
/// semantics. For example, the [ScrollView] uses the index of the first
/// visible child semantics node to determine the
/// [SemanticsConfiguration.scrollIndex].
///
/// See also:
///
///  * [CustomScrollView], for an explanation of scroll semantics. ¿R]Ä¬ ¿R≠¿R√M/// Creates a render object that annotates the child semantics with an index.¿R ¿R÷  ¿R‡¿RÓ  ¿S¿R˚¿S¿S¿S¿S¿S¿Sq
¿Su  ¿S#K¿S^0/// The index used to annotated child semantics.   ¿S|¿SÉ  ¿Sâ	¿Sé   ¿SˇÄ®¿T  ¿T/¿TG  ¿Sˇ¿T ¿T´Äª¿Tº  ¿T–&¿TÌ  ¿T´¿T¨ ¿Ujá€¿V9Ä»/// Provides an anchor for a [RenderFollowerLayer].
///
/// See also:
///
///  * [CompositedTransformTarget], the corresponding widget.
///  * [LeaderLayer], the layer that this render object creates. ¿VfÄ© ¿Vü¿V∞6/// Creates a render object that uses a [LeaderLayer].¿V∑¿VÀ  ¿V‘¿V‡  ¿VÛ¿VÌ¿Vı¿W¿W¿W¿W¿X¿X  ¿Z*¿Z0  ¿WÄ˘¿W˛Ä“/// The link object that connects this [RenderLeaderLayer] with one or more
/// [RenderFollowerLayer]s.
///
/// The object must not be associated with another [RenderLeaderLayer] that is
/// also being painted.   ¿X"ÄÓ¿X&  ¿X+¿X6   ¿Y4¿Y)   ¿Y¿Y¿ZH}¿ZY   ¿ZH¿ZI¿Z…Å∑¿Z⁄  ¿Z‡¿ZÒ  ¿Z˘¿[  ¿Z…¿Z ¿\ÑÄø¿\ï  ¿\©&¿\∆  ¿\Ñ¿\Ö ¿]Gúô¿_kÇ/// Transform the child so that its origin is [offset] from the origin of the
/// [RenderLeaderLayer] with the same [LayerLink].
///
/// The [RenderLeaderLayer] in question must be earlier in the paint order.
///
/// Hit testing on descendants of this render object will only work if the
/// target position is within the box that this render object's parent considers
/// to be hittable.
///
/// See also:
///
///  * [CompositedTransformFollower], the corresponding widget.
///  * [FollowerLayer], the layer that this render object creates. ¿_öÅÊ ¿_’¿_Ë8/// Creates a render object that uses a [FollowerLayer].¿_Ô¿`  ¿`¿`  ¿`.¿`6  ¿`O*¿`Z  ¿`,¿`ä  ¿`±¿`Ω  ¿`$¿`>¿`D¿`E¿`h¿`q¿`r¿`ö¿`£¿`§¿`–¿` ¿`“¿`Ò¿`ﬂ¿`Û¿a¿a¿a¿a3¿a%¿a5¿aZ¿aJ¿a\¿as¿ax¿a~¿ay¿b¿b)  ¿d”¿dÿ  ¿f¿f$  ¿i°¿i´  ¿k|¿kÜ  ¿aÑÄò¿bw/// The link object that connects this [RenderFollowerLayer] with a
/// [RenderLeaderLayer] earlier in the paint order.   ¿b2v¿b6  ¿b;¿bF   ¿b¨Ç$¿d™Å‚/// Whether to show the render object's contents when there is no
/// corresponding [RenderLeaderLayer] with the same [link].
///
/// When the render object is linked, the child is positioned such that it has
/// the same global position as the linked [RenderLeaderLayer].
///
/// When the render object is not linked, then: if [showWhenUnlinked] is true,
/// the child is visible and not repositioned; if it is false, then child is
/// hidden, and its hit testing is also disabled.   ¿dÌÄï¿dÒ  ¿e
¿e   ¿eÜÄî¿fr/// The offset to apply to the origin of the linked [RenderLeaderLayer] to
/// obtain this render object's origin.   ¿f/y¿f3  ¿f:¿fB   ¿f¨ÇÚ¿iÄÇ©/// The anchor point on the linked [RenderLeaderLayer] that [followerAnchor]
/// will line up with.
///
/// {@template flutter.rendering.RenderFollowerLayer.leaderAnchor}
/// For example, when [leaderAnchor] and [followerAnchor] are both
/// [Alignment.topLeft], this [RenderFollowerLayer] will be top left aligned
/// with the linked [RenderLeaderLayer]. When [leaderAnchor] is
/// [Alignment.bottomLeft] and [followerAnchor] is [Alignment.topLeft], this
/// [RenderFollowerLayer] will be left aligned with the linked
/// [RenderLeaderLayer], and its top edge will line up with the
/// [RenderLeaderLayer]'s bottom edge.
/// {@endtemplate}
///
/// Defaults to [Alignment.topLeft].   ¿iºÄé¿i¿  ¿iÕ¿iÿ   ¿jNÅ+¿kWÄÓ/// The anchor point on this [RenderFollowerLayer] that will line up with
/// [followerAnchor] on the linked [RenderLeaderLayer].
///
/// {@macro flutter.rendering.RenderFollowerLayer.leaderAnchor}
///
/// Defaults to [Alignment.topLeft].   ¿kôÄî¿kù  ¿k¨¿k∑   ¿lz4¿lè   ¿lz¿l{¿l≤|¿m3/// The layer we created when we were last painted.  ¿lË¿lÈ¿l1E¿lB   ¿l1¿l2¿m2Åü¿nzÅ3/// Return the transform that was used in the last composition phase, if any.
///
/// If the [FollowerLayer] has not yet been created, was never composited, or
/// was unable to determine the transform (see
/// [FollowerLayer.getLastTransform]), this returns the identity matrix (see
/// [Matrix4.identity].   ¿n’ÅÏ¿nÊ  ¿nÓ¿o   ¿o	¿o  ¿n’¿n÷¿p≈ÅV¿p÷  ¿pÊ¿p¯  ¿q¿q  ¿p≈¿p∆¿rÖâ¿r0  ¿r6¿rG  ¿rO¿rW  ¿r¿r ¿w¨}¿wΩ  ¿w—¿w‹  ¿w‚¿wÎ  ¿w¨¿w≠¿x-Å±¿x>  ¿xR&¿xo  ¿x-¿x. ¿y‚Ük¿z÷ÄÌ/// Render object which inserts an [AnnotatedRegionLayer] into the layer tree.
///
/// See also:
///
///  * [Layer.find], for an example of how this value is retrieved.
///  * [AnnotatedRegionLayer], the layer this render object creates.¿zÏ¿zÏ¿{Å≤ ¿|-¿|BÅ/// Creates a new [RenderAnnotatedRegion] to insert [value] into the
/// layer tree.
///
/// If [sized] is true, the layer is provided with the size of this render
/// object to clip the results of [Layer.find].
///
/// Neither [value] nor [sized] can be null.¿|I¿|U  ¿|_¿|n  ¿|x¿|Ñ  
¿|ò¿|ë¿|ö¿|Ø¿|®¿|±¿|ø¿|ƒ¿| ¿|≈¿}"¿}$  ¿~¿~"  ¿~§4¿~ª ¿~§¿~•¿~‘¿|–O¿}6/// A value which can be retrieved using [Layer.find].   ¿}.{¿}2  ¿}9
¿}<   ¿}≠m¿~
Q/// Whether the render object will pass its [size] to the [AnnotatedRegionLayer].   ¿~,t¿~0  ¿~6
¿~<   ¿~›Ån¿~Ó  ¿~Ù¿  ¿¿  ¿~›¿~ﬁ  ê™Ç0ê”#/// How to behave during hit tests.  êÁÄñëqÄÖ/// Targets that defer to their children receive events within their bounds
/// only if one of their children is hit by the hit test. ëÇÄΩí9Ä∞/// Opaque targets can be hit by hit tests, causing them to both receive
/// events within their bounds and prevent targets visually behind them from
/// also receiving events. íDÄìíÃÄÉ/// Translucent targets both receive events within their bounds and permit
/// targets visually behind them to also receive events.    ¿
ˇÄ ¿)$/// Where to paint a box decoration.  ¿@>¿t1/// Paint the box decoration behind the children. ¿ÉC¿º6/// Paint the box decoration in front of the children.         	¿ égÄø¿ é¯Äà/// Signature for a function that creates a [Shader] for a given [Rect].
///
/// Used by [RenderShaderMask] and the [ShaderMask] widget.  ¿ è¿ è   ¿o£Äª¿pq/// Signature for listening to [PointerDownEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿pF¿pX   ¿p`Äª¿p⁄q/// Signature for listening to [PointerMoveEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿q¿q   ¿qÄµ¿qïo/// Signature for listening to [PointerUpEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿qº¿qÃ   ¿q‘Ä¡¿rPs/// Signature for listening to [PointerCancelEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿r{¿rè   ¿róÄ”¿sy/// Signature for listening to [PointerPanZoomStartEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿sJ¿sd   ¿slÄ÷¿sÔz/// Signature for listening to [PointerPanZoomUpdateEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿t!¿t<   ¿tDÄÕ¿tƒw/// Signature for listening to [PointerPanZoomEndEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿tÛ¿u   ¿uÄ¡¿uès/// Signature for listening to [PointerSignalEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿u∫¿uŒ   áâñà≠ÅÇ/// Implementation of [RenderProxyBox].
///
/// Use this mixin in situations where the proxying behavior
/// of [RenderProxyBox] is desired but inheriting from [RenderProxyBox] is
/// impractical (e.g. because you want to inherit from a different class).
///
/// If a class already inherits from [RenderProxyBox] and also uses this mixin,
/// you can safely delete the use of the mixin.à¡à¡   âÅâ  â'â5  ââäwä  ä7ä?  äääÜwäô  ä≤ä∫  äÜäáãwã  ã.ã6  ããã|wãè  ã©ã±  ã|ã}ã˜Äƒå  å+å9  ã˜ã¯åøÄñå–  å·åÒ  åøå¿çYÄ¶çj   çYçZéÄÍéïÄà/// Calculate the size the [RenderProxyBox] would have under the given
/// [BoxConstraints] for the case where it does not have a child. é´éª   éÒÄùè  èè$  è-è>  éÒéÚèíOè£  è∑è≈  èÀè‘  èíèìèÂÄ¡èˆ  è¸ê  êê  èÂèÊàïàñ¿ }2é‚¿ ~sÅ:/// Implementation of [RenderAnimatedOpacity] and [RenderSliverAnimatedOpacity].
///
/// This mixin allows the logic of animating opacity to be used with different
/// layout models, e.g. the way that [RenderAnimatedOpacity] uses it for [RenderBox]
/// and [RenderSliverAnimatedOpacity] uses it for [RenderSliver].¿ ~é¿ ~é ¿ ~À¿ ~–  ¿ 6!¿ <  ¿ Ç+¿ Ç>  ¿ Ñ˚¿ Ö  ¿ ~€X¿ ~   ¿ ~€¿ ~‹¿ Ä<ÅÏ¿ ÇÅ¨/// The animation that drives this render object's opacity.
///
/// An opacity of 1.0 is fully opaque. An opacity of 0.0 is fully transparent
/// (i.e., invisible).
///
/// To change the opacity of a child in a static manner, not animated,
/// consider [RenderOpacity] instead.
///
/// This getter cannot be read until the value has been set. It should be set
/// by the constructor of the class in which this mixin is included.   ¿ ÇJÅ(¿ ÇN  ¿ ÇV¿ Çi   ¿ ÉvÅÇ¿ Ñ≈Å5/// Whether child semantics are included regardless of the opacity.
///
/// If false, semantics are excluded when [opacity] is 0.0.
///
/// Defaults to false.
///
/// This getter cannot be read until the value has been set. It should be set
/// by the constructor of the class in which this mixin is included.   ¿ ÖÄ±¿ Ö   ¿ Ö7
¿ Ö=   ¿ \Ä‹¿ t  ¿ ã)¿ ≠  ¿ \¿ ]¿ Ö—Äª¿ Ö‚  ¿ ÖÈ¿ Ö¯  ¿ Ö—¿ Ö“¿ Üê_¿ Ü°   ¿ Üê¿ Üë¿ ÜÛÇ¿ Ü¯    ¿ âv¿ â  ¿ â$¿ â2  ¿ â¿ â¿ âÅÄë¿ âí  ¿ âò¿ â©  ¿ â±¿ âπ  ¿ âÅ¿ âÇ¿ äÄÆ¿ ä'  ¿ äA¿ äV  ¿ ä¿ ä¿ ä»ÅJ¿ äŸ  ¿ äÌ&¿ ã
  ¿ ä»¿ ä…    ì¶ <ÄÜÄ§Ä•ÄÊÄÁÅÅ:ÅbÅãÅ≥Å¥Å«Å‹Å˘ÇÇÇ<ÇRÇfÇvÇäÇúÇùÇ›Ç·É*ÉxÉ«ÑÑÑ^ÑØÑ˛ÖÖÖ$Ö(ÖxÖâÖ˝ÜÜ%ÜmÜ∫ÜÃÜÛááááá:á>á{á∆àààeàïàßâââ=âââ¨â◊â˛äää	ääHääÉäÑäêä√ä˙ä˛äˇãã>ãuãyãzãÜãπããÙãıååDå|å∏åºåΩå…åˇçRçVçWçcç|ç¡çç¸é ééJééé…éÍéÓéÔé˚èKèãèèèêèúè‚è„èÔê&êOêhêvê|ê£êßê©ê™êŒêÂë3ëoëëÄëÀíí7íAíBíèí íŸí€í‹ìì5ìì≤ì∏ì¸î"îTîjîîÄî—ïïïLïRïôïµï∂ï¬ñ
ñ&ñIñ°ñ„óó ó&ó<ó@óAóMóòóôó•óÍòòròvòxòyò™òÆò˝ôFôñô£ôßô˜ö@ö]öëö«öÕõõ õ6õiõ§õ€õõÒú1úwú†ú‘ú¸ù'ù5ù;ù_ùvùzù{ùáù∫ûûBûHûâû•ûŸüüü,ü0ü1ü=üpü ü¯ü˛†?†[†è† †–†‚†Ê†Á†Û°&°Ç°±°∑°˘¢¢K¢à¢é¢°¢•¢¶¢≤¢Â£A£p£v£∏£’§
§G§M§`§d§e§q§ä§√§‹•4•N•[•™•∞•¥•µ•¡•˜¶¶_¶l¶ª¶¡¶≈¶∆¶“ßß=ßMßfßòß∞ß›®®®/®9®=®>®J®è®∫©#©'©)©*©c©¶©™©˜™B™ç™‹™ı™˘´D´ä´ö´ ¨¨P¨V¨ù¨±¨∆¨‹≠≠+≠K≠l≠â≠®≠Ω≠æÆÆ7ÆKÆjÆÑÆ¢Æ∞Æ∂ÆÕÆ‰ÆËÆÈØ@ØfØ{ØõØµØ‘Ø‚ØË∞ ∞∞∞∞]∞x∞û±	±1±°±®±¨±≠≤≤(≤z≤©≤Ø≤Ô≤Û≤Ù≥ ≥6≥O≥o≥§≥´≥Ø≥∞≥º≥’≥Ó¥¥@¥G¥K¥L¥X¥ù¥»µ!µ|µÄµÇµÉµæµ¬∂∂]∂´∂Ø∂˜∑G∑∑É∑–∏∏m∏¥∏∏ππUπ¶πÙ∫B∫ê∫ﬁª,ªyªøªˇº0ºmºsº∂ºÃº‚ΩΩ%ΩJΩmΩÇΩÉΩ≠Ω≥ææJætæãæ≠æ∆æ‚øøøø1øHøLøMøYøåøßøÀø—øÍ¿ @¿ @"¿ @2¿ @6¿ @7¿ @C¿ @v¿ @ë¿ @µ¿ @ª¿ @‘¿ A¿ A¿ A¿ A ¿ A!¿ A-¿ A`¿ Az¿ Aù¿ A£¿ Aº¿ AÓ¿ AÙ¿ B¿ B¿ B	¿ B¿ BH¿ Bb¿ BÖ¿ Bã¿ B§¿ B÷¿ B‹¿ BÏ¿ B¿ BÒ¿ C(¿ CV¿ Cf¿ C±¿ CÕ¿ D¿ DZ¿ D´¿ D˝¿ E¿ E&¿ E.¿ EA¿ EK¿ EL¿ Ek¿ Eé¿ Eî¿ Eï¿ Eæ¿ E—¿ E“¿ F¿ Fk¿ FÇ¿ Fú¿ F¡¿ FŒ¿ FÙ¿ G¿ G¿ G ¿ Gn¿ G∏¿ H¿ H¿ H¿ HD¿ Hh¿ Hç¿ Hì¿ Hî¿ Hæ¿ H‰¿ I	¿ I¿ I¿ I8¿ I\¿ IÅ¿ Iá¿ Ià¿ I≤¿ Iÿ¿ I˝¿ J¿ J¿ J;¿ J?¿ J@¿ JL¿ JÇ¿ J≠¿ J±¿ J≤¿ Jæ¿ J◊¿ K¿ K¿ KK¿ KQ¿ KU¿ KV¿ Kb¿ Kß¿ K“¿ L¿ L¿ L¿ L¿ LU¿ LY¿ L¶¿ Lˆ¿ M*¿ M.¿ Mz¿ M ¿ N¿ N`¿ N≠¿ N’¿ NŸ¿ O)¿ Ou¿ O≥¿ O∑¿ P¿ PR¿ P°¿ P∏¿ Pº¿ P ¿ PŒ¿ Q¿ Qd¿ Q≤¿ Q≈¿ R¿ RT¿ R°¿ R’¿ S	¿ SY¿ S_¿ SØ¿ S–¿ SÈ¿ T ¿ T¿ T.¿ Tc¿ Tö¿ Tπ¿ T⁄¿ TÔ¿ T¿ U;¿ UA¿ Ui¿ Uê¿ U¶¿ U«¿ UÒ¿ V¿ V¿ V$¿ V<¿ VS¿ VW¿ VX¿ V§¿ V™¿ V“¿ V˚¿ W¿ W4¿ W^¿ W~¿ Wå¿ Wí¿ W´¿ W¬¿ W∆¿ W«¿ X ¿ X¿ X4¿ XH¿ XN¿ Xw¿ X{¿ X|¿ Xà¿ Xª¿ XË¿ XÏ¿ XÌ¿ X˘¿ Y,¿ YE¿ YW¿ Y]¿ Yõ¿ Y≈¿ Y…¿ Y ¿ Y÷¿ Z	¿ Z"¿ Z4¿ Z:¿ ZU¿ Zé¿ Zî¿ Z∞¿ ZÔ¿ [¿ [¿ [ ¿ [,¿ [_¿ [x¿ [ä¿ [ê¿ [´¿ [‰¿ [Í¿ \¿ \E¿ \q¿ \u¿ \v¿ \◊¿ \¿ ]¿ ]i¿ ]â¿ ]⁄¿ ]‚¿ ^¿ ^U¿ ^v¿ ^ ¿ ^“¿ _¿ _¿ _1¿ _7¿ _;¿ _<¿ _H¿ _~¿ _ó¿ _Ã¿ _Ï¿ _Û¿ _˜¿ _¯¿ `¿ `¿ `6¿ `h¿ `à¿ `è¿ `ì¿ `î¿ `†¿ `Â¿ a¿ aL¿ aä¿ aé¿ aê¿ aë¿ a∆¿ a ¿ b¿ bh¿ bù¿ b°¿ bÌ¿ c=¿ cã¿ c÷¿ d$¿ dM¿ dQ¿ dû¿ dÏ¿ e;¿ eR¿ eV¿ ed¿ eh¿ e∑¿ eˇ¿ fN¿ fa¿ f∞¿ fÙ¿ gC¿ gx¿ g≠¿ g˛¿ h¿ h.¿ hC¿ hD¿ hP¿ hÉ¿ hú¿ hÆ¿ h¥¿ h–¿ i¿ i¿ i1¿ ia¿ ie¿ if¿ ir¿ i•¿ iæ¿ i–¿ i÷¿ iÚ¿ j0¿ j6¿ jS¿ jÉ¿ já¿ jà¿ jî¿ j«¿ jÙ¿ j¯¿ j˘¿ kZ¿ ks¿ kú¿ kÓ¿ l¿ lJ¿ lR¿ lÅ¿ lé¿ l±¿ l∑¿ lª¿ lº¿ l»¿ l˛¿ m¿ mL¿ ml¿ ms¿ mw¿ mx¿ mÑ¿ mù¿ m∂¿ mË¿ n¿ n¿ n¿ n¿ n¿ nW¿ nã¿ nÓ¿ o¿ o¿ o2¿ o3¿ o?¿ oÇ¿ oì¿ oó¿ oô¿ oö¿ o≈¿ o…¿ p¿ pN¿ pR¿ pù¿ pÁ¿ q/¿ q¿ q¨¿ q·¿ qÁ¿ r,¿ r>¿ rX¿ rÅ¿ ró¿ r»¿ r„¿ s¿ sS¿ sh¿ si¿ su¿ s∑¿ s∏¿ sƒ¿ s¸¿ s˝¿ t¿ t¿ tA¿ tG¿ tó¿ t∞¿ t∂¿ t˙¿ uA¿ uR¿ ut¿ uá¿ u•¿ uœ¿ uÏ¿ u˙¿ v ¿ v<¿ ve¿ v{¿ v∞¿ vË¿ w¿ w¿ w<¿ w~¿ w†¿ w¶¿ w™¿ w´¿ wÒ¿ w˜¿ x5¿ x;¿ xT¿ xí¿ x≤¿ x›¿ y	¿ y¿ y¿ yB¿ yb¿ yf¿ yg¿ ys¿ yô¿ yª¿ y“¿ y÷¿ y◊¿ y„¿ z6¿ zq¿ zã¿ zù¿ z°¿ z¢¿ zÆ¿ zÂ¿ {¿ {¿ {!¿ {C¿ {G¿ {H¿ {T¿ {î¿ {ÿ¿ {Ô¿ {ı¿ {˘¿ {˙¿ |¿ |K¿ |v¿ |Æ¿ }+¿ }/¿ }1¿ }2¿ }É¿ }á¿ }÷¿ ~+¿ ~m¿ ~…¿ ~ÿ¿ ~Ÿ¿ ~Â¿ 4¿ Y¿ Z¿ f¿ π¿ ˚¿ Ä¿ Ä5¿ Ä9¿ Ä:¿ Äx¿ Ä~¿ ÄŒ¿ ÄÁ¿ ÄÌ¿ Å6¿ Å^¿ Åd¿ Å¥¿ Å˚¿ Ç)¿ ÇH¿ Çq¿ Çé¿ Çú¿ Ç¢¿ Ç ¿ Ç¯¿ Ç˛¿ É¿ É(¿ ÉS¿ ÉY¿ Éo¿ És¿ Ét¿ É∫¿ É¿¿ É˛¿ Ñ¿ Ñ¿ Ñ#¿ Ñs¿ Ñ∫¿ Ñ˘¿ Ö¿ ÖE¿ Öq¿ Ö¿ ÖÖ¿ Ö™¿ Ö ¿ ÖŒ¿ Öœ¿ Ö€¿ Ü ¿ Ü¿ ÜB¿ Üâ¿ Üç¿ Üé¿ Üö¿ Ü¨¿ Üÿ¿ ÜÏ¿ Ü¿ ÜÒ¿ á¿ á-¿ ág¿ áÖ¿ á…¿ á˙¿ àJ¿ àt¿ à|¿ à§¿ àŒ¿ àÚ¿ à˙¿ â ¿ â¿ â¿ â¿ â:¿ â\¿ âz¿ â~¿ â¿ âã¿ â¬¿ âŸ¿ âÁ¿ âÌ¿ ä¿ ä¿ ä¿ ä ¿ ä`¿ ä§¿ äª¿ ä¡¿ ä≈¿ ä∆¿ ä“¿ ã¿ ãB¿ ãí¿ å¿ å¿ å¿ å¿ å]¿ åa¿ å≤¿ åﬁ¿ ç>¿ çs¿ çç¿ çµ¿ çﬁ¿ çÙ¿ é
¿ é&¿ é`¿ éd¿ éf¿ ég¿ é∞¿ é¥¿ é¿ è'¿ è(¿ èa¿ èe¿ è¥¿ èÈ¿ ê¿ êq¿ êÜ¿ êú¿ ê»¿ êˆ¿ ë¿ ë>¿ ëS¿ ëT¿ ë`¿ ë°¿ ë¢¿ ë‡¿ ëÊ¿ í5¿ í~¿ íÑ¿ íƒ¿ íﬁ¿ ì,¿ ìd¿ ìú¿ ìæ¿ ìÎ¿ î¿ î¿ î#¿ î@¿ îV¿ îZ¿ î[¿ îü¿ î•¿ îÙ¿ ï?¿ ïh¿ ïÄ¿ ï£¿ ï¬¿ ï–¿ ï÷¿ ïÓ¿ ñ¿ ñ¿ ñ	¿ ñ¿ ñI¿ ñJ¿ ñV¿ ñç¿ ñ¶¿ ñ∆¿ ñÈ¿ ñˆ¿ ó-¿ óP¿ ór¿ ó®¿ ó∫¿ óÊ¿ ó˚¿ ò¿ ò¿ ò(¿ ò.¿ ò2¿ ò4¿ ò5¿ òÉ¿ òá¿ ò◊¿ òÎ¿ ô¿ ô@¿ ôE¿ ôÖ¿ ô˚¿ ö¿ ö1¿ öE¿ öF¿ öR¿ öõ¿ öú¿ öÏ¿ ö˝¿ õ¿ õP¿ õc¿ õã¿ õ•¿ õ ¿ õÊ¿ õÙ¿ õ˙¿ ú¿ ú%¿ ú)¿ ú*¿ úÉ¿ úí¿ úò¿ ú–¿ ú˘¿ ù¿ ù4¿ ùS¿ ùa¿ ùg¿ ù¿ ùï¿ ùô¿ ùö¿ ù¶¿ ù⁄¿ ù€¿ ùÁ¿ û¿ û7¿ ûW¿ û~¿ ûù¿ û¬¿ û¯¿ ü
¿ ü6¿ üK¿ üW¿ üd¿ üx¿ ü~¿ üÇ¿ üÑ¿ üÖ¿ ü≤¿ ü∂¿ üˇ¿ †¿ †¿ †e¿ †i¿ †≤¿ †˛¿ °¿ °¿ °^¿ °¨¿ °˝¿ ¢M¿ ¢Q¿ ¢_¿ ¢c¿ ¢¨¿ ¢˜¿ £@¿ £â¿ £ÿ¿ §¿ §-¿ §3¿ §Ñ¿ §∆¿ §«¿ §‰¿ §Â¿ •(¿ •.¿ •}¿ •Õ¿ •‰¿ •¿ ¶=¿ ¶>¿ ¶é¿ ¶ø¿ ¶≈¿ ß¿ ßd¿ ß{¿ ßá¿ ß⁄¿ ß€¿ ®&¿ ®J¿ ®b¿ ®c¿ ®®¿ ®Î¿ ©¿ ©%¿ ©i¿ ©∞¿ ©Û¿ ™:¿ ™z¿ ™{¿ ™»¿ ´¿ ´j¿ ´ª¿ ´¡¿ ¨	¿ ¨X¿ ¨e¿ ¨k¿ ¨π¿ ¨≈¿ ¨À¿ ≠¿ ≠]¿ ≠ë¿ ≠Õ¿ ≠Œ¿ ≠⁄¿ Æ¿ Æ¿ Æ¿ Æe¿ Æú¿ Æ√¿ Æ…¿ Ø¿ Ø`¿ Ø≠¿ Ø¿ ∞¿ ∞&¿ ∞>¿ ∞D¿ ∞E¿ ∞Ñ¿ ∞ü¿ ∞†¿ ∞Ë¿ ∞Ó¿ ±9¿ ±`¿ ±Ü¿ ±á¿ ±º¿ ±»¿ ±‰¿ ≤5¿ ≤9¿ ≤:¿ ≤F¿ ≤|¿ ≤¥¿ ≤«¿ ≤Õ¿ ≥¿ ≥H¿ ≥É¿ ≥á¿ ≥â¿ ≥ä¿ ≥«¿ ≥›¿ ≥Û¿ ¥¿ ¥:¿ ¥U¿ ¥z¿ ¥è¿ ¥ê¿ ¥Œ¿ ¥˚¿ µ¿ µG¿ µi¿ µw¿ µ}¿ µ∞¿ µÀ¿ ∂¿ ∂5¿ ∂q¿ ∂†¿ ∂∏¿ ∂æ¿ ∂“¿ ∑¿ ∑3¿ ∑9¿ ∑=¿ ∑>¿ ∑J¿ ∑o¿ ∑à¿ ∑≥¿ ∑∑¿ ∑∏¿ ∑ƒ¿ ∑÷¿ ∏¿ ∏¿ ∏¿ ∏¿ ∏7¿ ∏I¿ ∏_¿ ∏¿ ∏É¿ ∏Ñ¿ ∏ö¿ ∏¶¿ ∏ß¿ ∏—¿ ∏Ú¿ π¿ π1¿ πI¿ πO¿ πS¿ πi¿ πj¿ πv¿ πè¿ π¿¿ π€¿ πˆ¿ ∫
¿ ∫¿ ∫¿ ∫¿ ∫,¿ ∫c¿ ∫g¿ ∫h¿ ∫t¿ ∫Ø¿ ∫À¿ ∫·¿ ∫ˆ¿ ª¿ ª+¿ ªS¿ ª†¿ ª¶¿ ª™¿ ª´¿ ª¡¿ ª‹¿ ªË¿ º(¿ º8¿ ºV¿ º}¿ ºî¿ º∏¿ Ω/¿ Ω[¿ Ωx¿ ΩÇ¿ Ωû¿ Ω∆¿ ΩË¿ æ¿ æ¿ æ7¿ æ]¿ æ{¿ æä¿ æó¿ æÈ¿ æÛ¿ ø¿ ø¿ ø$¿ ø(¿ ø)¿ ø5¿ øH¿ øc¿ øz¿ øè¿ øì¿ øï¿ øñ¿ øΩ¿ ø¡¿ ¿¿ ¿`¿ ¿v¿ ¿≠¿ ¿œ¿ ¿’¿ ¡%¿ ¡6¿ ¡<¿ ¡Å¿ ¡î¿ ¡•¿ ¡∏¿ ¡–¿ ¡÷¿ ¡◊¿ ¡„¿ ¬¿ ¬¿ ¬¿ ¬g¿ ¬É¿ ¬ò¿ ¬µ¿ ¬›¿ ¬Û¿ ¬˚¿ √¿ √7¿ √;¿ √<¿ √H¿ √¿ √ò¿ √ø¿ √÷¿ √¸¿ ƒ¿ ƒ*¿ ƒ<¿ ƒS¿ ƒy¿ ƒ¶¿ ƒ±¿ ƒ¿¿ ƒÏ¿ ≈¿ ≈
¿ ≈¿ ≈+¿ ≈1¿ ≈5¿ ≈6¿ ≈B¿ ≈Ç¿ ≈í¿ ≈≠¿ ≈‹¿ ∆¿ ∆L¿ ∆…¿ ∆”¿ ∆€¿ ∆Ó¿ ∆¯¿ ∆¸¿ ∆˛¿ ∆ˇ¿ «.¿ «2¿ «Ç¿ «–¿ «Ê¿ »¿ »I¿ »O¿ »ü¿ »ª¿ »¡¿ …¿ …¿ …L¿ …`¿ …q¿ …¨¿ …ø¿ …◊¿ …˘¿  ¿  E¿  F¿  v¿  |¿  «¿  ‚¿  Ë¿ À¿ ÀX¿ À~¿ ÀØ¿ À—¿ Àﬂ¿ ÀÂ¿ Ã ¿ Ã¿ Ã¿ Ã¿ ÃZ¿ Ãê¿ Ã±¿ Ã›¿ Õ ¿ Õ¿ Õ¿ Õ0¿ ÕF¿ ÕJ¿ ÕK¿ ÕW¿ Õµ¿ Õ∂¿ Õ¬¿ Œ
¿ Œ&¿ Œ;¿ ŒX¿ ŒÄ¿ Œñ¿ Œû¿ Œ§¿ Œ⁄¿ Œﬁ¿ Œﬂ¿ ŒÎ¿ œ"¿ œ;¿ œb¿ œy¿ œ†¿ œº¿ œŒ¿ œÍ¿ œ¸¿ –¿ –9¿ –g¿ –r¿ –Å¿ –≠¿ –√¿ –À¿ –ÿ¿ –Ï¿ –Ú¿ –ˆ¿ –˜¿ —¿ —C¿ —S¿ —n¿ —ù¿ —∆¿ “¿ “â¿ “ì¿ “õ¿ “Æ¿ “∏¿ “º¿ “æ¿ “ø¿ “‚¿ “Ê¿ ”4¿ ”}¿ ”«¿ ”˛¿ ‘!¿ ‘'¿ ‘w¿ ‘î¿ ‘ö¿ ‘ﬂ¿ ‘Ú¿ ’¿ ’¿ ’.¿ ’4¿ ’5¿ ’J¿ ’c¿ ’d¿ ’Ö¿ ’§¿ ’æ¿ ’Ò¿ ’˜¿ ÷¿ ÷¿ ÷¿ ÷ ¿ ÷O¿ ÷P¿ ÷\¿ ÷§¿ ÷∑¿ ÷“¿ ÷˚¿ ◊G¿ ◊i¿ ◊ô¿ ◊ ¿ ◊—¿ ÿ¿ ÿB¿ ÿV¿ ÿ\¿ ÿí¿ ÿñ¿ ÿó¿ ÿ£¿ ÿ⁄¿ ÿÛ¿ Ÿ¿ Ÿ1¿ ŸW¿ Ÿs¿ ŸÖ¿ Ÿó¿ Ÿ∑¿ ŸŒ¿ ŸÙ¿ ⁄!¿ ⁄,¿ ⁄;¿ ⁄g¿ ⁄}¿ ⁄Ö¿ ⁄í¿ ⁄¶¿ ⁄¨¿ ⁄∞¿ ⁄±¿ ⁄Ω¿ ⁄˝¿ €¿ €(¿ €W¿ €Ä¿ €’¿ ‹h¿ ‹r¿ ‹z¿ ‹ç¿ ‹ó¿ ‹õ¿ ‹ù¿ ‹û¿ ‹¿¿ ‹ƒ¿ ›	¿ ›J¿ ›N¿ ›å¿ ›™¿ ›Æ¿ ›Ë¿ ﬁ(¿ ﬁk¿ ﬁ¢¿ ﬁΩ¿ ﬁ√¿ ﬂ¿ ﬂa¿ ﬂ±¿ ﬂƒ¿ ﬂ ¿ ‡¿ ‡"¿ ‡3¿ ‡F¿ ‡^¿ ‡d¿ ‡e¿ ‡q¿ ‡±¿ ‡≤¿ ‡æ¿ ·¿ ·"¿ ·7¿ ·T¿ ·|¿ ·í¿ ·ö¿ ·†¿ ·÷¿ ·⁄¿ ·€¿ ·Á¿ ‚¿ ‚7¿ ‚^¿ ‚u¿ ‚õ¿ ‚∑¿ ‚…¿ ‚Á¿ ‚˘¿ „¿ „6¿ „c¿ „n¿ „}¿ „©¿ „ø¿ „«¿ „‘¿ „Ë¿ „Ó¿ „Ú¿ „Û¿ „ˇ¿ ‰?¿ ‰O¿ ‰j¿ ‰ô¿ ‰¬¿ Â	¿ Â>¿ ÂH¿ ÂP¿ Âc¿ Âm¿ Âq¿ Âs¿ Ât¿ Â∏¿ Âº¿ Ê¿ ÊC¿ Êç¿ Ê√¿ Ê‡¿ Ê˙¿ Á¿ Á3¿ ÁS¿ Áw¿ Áä¿ Á´¿ Á ¿ Á·¿ Ë¿ Ë¿ ËT¿ ËZ¿ Ë{¿ ËÅ¿ Ëœ¿ Ë˝¿ È#¿ È8¿ ÈX¿ Èr¿ Èê¿ Èû¿ È§¿ È‡¿ È¯¿ Í0¿ ÍX¿ Í^¿ Ít¿ Íx¿ Íy¿ Íë¿ Í∫¿ Í–¿ ÍÒ¿ Î¿ Î¿ Î%¿ Î?¿ ÎU¿ ÎY¿ ÎZ¿ Îv¿ Îì¿ Î£¿ Îæ¿ Îÿ¿ ÎÊ¿ ÎÏ¿ Ï ¿ Ï¿ Ï¿ Ï¿ Ï'¿ Ïn¿ Ï†¿ Ï¬¿ Ï∆¿ Ï«¿ Ï”¿ Ì¿ ÌE¿ ÌÇ¿ Ì∂¿ Ì¿ ÌÙ¿ Ìˆ¿ Ì˜¿ Ó<¿ ÓK¿ ÓO¿ Óì¿ Ó◊¿ Ô¿ Ô¿ Ô&¿ Ô,¿ Ôb¿ Ôz¿ Ôã¿ Ô¥¿ ÔÃ¿ ÔÏ¿ ¿ !¿ R¿ s¿ ä¿ Ø¿ ∞¿ Œ¿ ‘¿ Ò#¿ Ò;¿ Ò[¿ Òn¿ Òå¿ Ò¶¿ Ò¥¿ Ò∫¿ ÒŒ¿ Ò‰¿ ÒË¿ ÒÈ¿ Ú¿ Ú¿ Új¿ ÚÖ¿ Úã¿ Ú÷¿ Ú‹¿ Û¿ ÛI¿ Ûh¿ Ûí¿ Û≥¿ Û¡¿ Û«¿ Û‚¿ Û¯¿ Û¸¿ Û˝¿ Ù	¿ Ù$¿ Ù9¿ Ùc¿ Ùy¿ Ùò¿ Ù⁄¿ Ùˆ¿ ı>¿ ıD¿ ıH¿ ıI¿ ıU¿ ıù¿ ıπ¿ ıŒ¿ ıÎ¿ ˆ¿ ˆ)¿ ˆ1¿ ˆ7¿ ˆm¿ ˆq¿ ˆr¿ ˆ~¿ ˆµ¿ ˆŒ¿ ˆ‚¿ ˆ¿ ˆˆ¿ ˆ˜¿ ˜
¿ ˜>¿ ˜Ä¿ ˜û¿ ˜Æ¿ ˜œ¿ ˜Ó¿ ¯¿ ¯+¿ ¯?¿ ¯c¿ ¯ê¿ ¯ø¿ ¯Ã¿ ¯÷¿ ¯Ù¿ ¯¸¿ ˘¿ ˘¿ ˘¿ ˘D¿ ˘p¿ ˘â¿ ˘§¿ ˘π¿ ˘Ã¿ ˘È¿ ˘Ú¿ ˘¯¿ ˙D¿ ˙^¿ ˙v¿ ˙ã¿ ˙™¿ ˙≥¿ ˙π¿ ˙‹¿ ˙Ù¿ ˚¿ ˚¿ ˚*¿ ˚[¿ ˚x¿ ˚¥¿ ¸¿ ¸R¿ ¸ñ¿ ¸”¿ ¸›¿ ˝¿ ˝¿ ˝6¿ ˝X¿ ˝_¿ ˝`¿ ˝p¿ ˝ö¿ ˝≠¿ ˝∑¿ ˝ª¿ ˝º¿ ˝»¿ ˛¿ ˛:¿ ˛~¿ ˛‘¿ ˛ÿ¿ ˛⁄¿ ˛€¿ ˇ ¿ ˇ$¿ ˇh¿ ˇl¿ ˇz¿ ˇ~¿ ˇ ¿ ˇ⁄¿ ¿ D¿ J¿ É¿ â¿ ø¿ ◊¿ Ë¿¿0¿K¿e¿ñ¿∑¿∏¿ƒ¿¿¿¿Y¿u¿ä¿ß¿œ¿Â¿Ì¿Û¿)¿-¿.¿:¿q¿ä¿û¿¨¿≤¿≥¿∆¿¯¿¿&¿G¿f¿â¿°¿µ¿Ÿ¿¿5¿B¿L¿j¿r¿Ö¿è¿ê¿∫¿Ê¿ˇ¿¿(¿;¿X¿a¿g¿≥¿Õ¿‰¿¯¿¿ ¿&¿H¿`¿n¿à¿ñ¿«¿‰¿ ¿o¿æ¿	¿	?¿	I¿	o¿	x¿	°¿	√¿	 ¿	À¿	€¿
¿
¿
"¿
&¿
'¿
3¿
y¿
•¿
¯¿
¸¿
˛¿
ˇ¿$¿>¿r¿Ä¿Å¿∫¿»¿ ¿À¿¿@¿_¿e¿≥¿Ú¿¯¿G¿r¿â¿≠¿Ó¿/¿E¿f¿É¿™¿ø¿¿¿ÿ¿Ÿ¿˘¿ˇ¿!¿M¿g¿å¿¨¿∫¿¿¿Ÿ¿Ó¿¿¿!¿"¿m¿ù¿Ω¿Ë¿¿¿¿1¿G¿K¿L¿ó¿€¿ı¿˚¿>¿Ñ¿æ¿„¿¿6¿D¿J¿f¿|¿Ä¿Å¿ç¿ü¿∏¿Õ¿·¿&¿o¿ª¿¿B¿X¿\¿]¿i¿è¿Î¿Ô¿¿¸¿3¿r¿…¿˛¿¿+¿c¿x¿Ñ¿»¿⁄¿¿S¿ª¿Ÿ¿5¿ï¿Ú¿¿{¿¿˛¿¿¿)¿K¿o¿w¿}¿ü¿‘¿¿:¿^¿f¿l¿p¿q¿}¿¬¿Ì¿4¿ë¿ï¿ó¿ò¿–¿ˇ¿8¿L¿l¿Ä¿¢¿ƒ¿Á¿	¿¿5¿U¿u¿ù¿≈¿ﬂ¿„¿‰¿ 4¿ l¿ r¿ ¡¿!¿!%¿!8¿!V¿!r¿!Ä¿!Ü¿!õ¿!±¿!—¿!’¿!÷¿"¿" ¿"l¿"∂¿"º¿#¿#L¿#ú¿#Î¿$*¿${¿$≠¿$Œ¿$˙¿%¿%'¿%-¿%E¿%[¿%{¿%¿%Ä¿%º¿%¬¿&¿&I¿&¿&†¿&Ã¿&Ô¿&˝¿'¿'¿'5¿'U¿'Y¿'Z¿'f¿'¥¿'µ¿(¿(K¿(n¿(t¿(ƒ¿)¿)/¿)0¿)G¿)ñ¿)µ¿)ª¿*¿*V¿*{¿*≈¿*‰¿*Ú¿*¯¿+¿+4¿+T¿+X¿+Y¿+´¿+±¿+Ò¿,'¿,H¿,t¿,ó¿,•¿,´¿,Á¿-¿-;¿-c¿-i¿-¿-É¿-Ñ¿-µ¿-Ã¿-Î¿.¿.!¿.%¿.&¿.i¿.ä¿.¨¿.¬¿.‚¿.Ê¿.Á¿/*¿/K¿/m¿/É¿/£¿/ß¿/®¿/Î¿0¿0.¿0D¿0d¿0h¿0i¿0´¿0Ï¿1¿1&¿1F¿1J¿1K¿1z¿1≠¿1Õ¿1„¿2¿2¿2¿2-¿2y¿2±¿2 ¿2–¿2ˇ¿3¿3L¿3R¿3k¿3ê¿3«¿3ˇ¿4¿4'¿4L¿4á¿4ç¿4®¿4‹¿4‚¿4ı¿4˘¿4˙¿5¿5N¿5Ö¿5¬¿6 ¿6¿6R¿6V¿6W¿6c¿6≥¿6Ú¿7¿7\¿7v¿7≤¿7Ù¿7˝¿8¿8¿8	¿8¿8L¿8e¿8õ¿8æ¿9¿9.¿9É¿9«¿9˝¿:(¿:B¿:V¿:b¿:ã¿:©¿:Ω¿:‘¿:Ì¿;>¿;K¿;\¿;í¿;™¿;¥¿;√¿<#¿<g¿<§¿< ¿<Û¿<˛¿='¿=r¿=û¿=Ø¿=Ë¿=Ú¿>*¿>>¿>l¿>É¿>ë¿>ô¿>ü¿>£¿>§¿>∞¿>Ò¿?¿?#¿?$¿?0¿?u¿?†¿?Á¿@*¿@~¿@„¿A:¿A>¿A@¿AA¿AÜ¿Aµ¿AÈ¿A˝¿B¿BR¿Bt¿Bä¿B≠¿B¿¿Bﬂ¿C¿C+¿C@¿CA¿Cb¿Cc¿Cw¿Cù¿C´¿C±¿CÏ¿C¿CÒ¿D¿D/¿DE¿DI¿DJ¿Dq¿DÑ¿D°¿D∂¿D—¿DÍ¿E¿E¿E;¿ES¿Ei¿Eo¿Es¿Et¿Eº¿E÷¿EÂ¿Eˇ¿F¿F&¿F,¿FM¿F_¿F°¿F∫¿F«¿F‡¿F¯¿F˛¿G¿G¿G<¿GB¿Gí¿G„¿H¿H¿HX¿HÄ¿H±¿H—¿H¸¿I¿I)¿I/¿IG¿I^¿Iy¿I}¿I~¿I∫¿I¿¿J¿JG¿J}¿Jû¿J ¿JÌ¿J˚¿K¿K¿K4¿KO¿KS¿KT¿Kï¿Kñ¿K¢¿Kÿ¿KÒ¿L;¿L<¿Là¿L÷¿M"¿MC¿Mh¿Mz¿M€¿M˛¿N¿N¿N)¿NG¿Ns¿N≥¿Nø¿NŸ¿N·¿N‚¿N˜¿O¿O]¿Oœ¿P
¿P'¿PB¿P\¿P{¿Pô¿P≥¿Q	¿Q¿Q¿QA¿QG¿QK¿QL¿QX¿Qq¿Qä¿QÕ¿Q‚¿R¿RH¿Rº¿R˜¿S¿S/¿SI¿Sh¿SÜ¿S†¿S¯¿T ¿T¿T&¿TI¿TO¿TS¿TT¿Tp¿Tá¿Tà¿Tæ¿Tƒ¿T„¿U¿U/¿UP¿Ur¿Uè¿Uß¿U…¿Uœ¿U”¿U‘¿UÔ¿V¿V%¿V)¿V*¿VF¿Vd¿Vr¿Vx¿Vy¿Ví¿V¥¿V€¿VË¿V˙¿W$¿Wh¿W≤¿W˛¿Xa¿X…¿Y0¿Yb¿Yø¿Y‰¿Z¿Zg¿Zm¿Zq¿Zr¿Z«¿[¿[1¿[U¿[o¿[¿[î¿[©¿[ˆ¿[ˇ¿\¿\>¿\D¿\U¿\Y¿\Z¿\f¿\ù¿\›¿\Î¿\Ò¿]	¿]$¿]`¿]Ñ¿]û¿]Æ¿] ¿]Ï¿^7¿^[¿^d¿^q¿^™¿^∞¿^¥¿^µ¿^¡¿_¿_K¿__¿_e¿_}¿_¶¿_√¿_›¿`¿`[¿`d¿`k¿`o¿`p¿`|¿`¢¿`ƒ¿`ı¿`˘¿`˙¿a¿aG¿af¿aÅ¿aé¿a®¿aœ¿a’¿aŸ¿a⁄¿aÊ¿b+¿bV¿bå¿b‡¿cE¿cI¿cK¿cL¿cê¿cî¿c‰¿d-¿dd¿dh¿d•¿dÚ¿e¿e@¿eÑ¿e§¿e≈¿eË¿e˛¿f!¿f6¿f7¿fÄ¿fÜ¿f’¿g¿g8¿gO¿gq¿gí¿g†¿g¶¿g¿¿g÷¿gˆ¿g˙¿g˚¿h¿hO¿hí¿hœ¿i¿i'¿i_¿ic¿id¿i±¿i˙¿j¿j#¿js¿jƒ¿jﬁ¿jﬂ¿jÎ¿k;¿kZ¿kÄ¿k†¿kÓ¿l ¿l¿lV¿lò¿l°¿l®¿l¨¿l≠¿lπ¿l¿m¿m(¿mK¿m|¿mÆ¿m∏¿mæ¿m¬¿m√¿mœ¿n¿n)¿nL¿np¿nw¿n{¿n|¿nà¿nÕ¿n¯¿oE¿oú¿o†¿o¢¿o£¿o›¿o·¿p¿p_¿p`¿pö¿pû¿p“¿q¿q¿qU¿qY¿qç¿q”¿q‘¿r¿r¿rH¿rñ¿ró¿rŸ¿r›¿s¿sk¿sl¿sØ¿s≥¿sÁ¿tC¿tD¿tÑ¿tà¿tº¿u¿u¿uO¿uS¿uá¿u’¿u÷¿v¿v¿v\¿v®¿v¨¿v¸¿wB¿wm¿wq¿w±¿wµ¿x¿xL¿xï¿xõ¿xÂ¿xˇ¿y¿y/¿yE¿y^¿yx¿yò¿yπ¿y◊¿yÒ¿z¿z¿z¿z¿zg¿z∏¿z»¿zÛ¿zÙ¿{D¿{o¿{p¿{æ¿{›¿|¿|¿|S¿|Ä¿|Å¿|—¿}¿}0¿}1¿}v¿}±¿}≤¿}€¿~¿~¿~@¿~w¿~x¿~¥¿~„¿~‰¿~¿+¿K¿O¿P¿\¿ô¿≈¿Í¿Ä¿Ä¿Ä>¿Äg¿Äm¿Äê¿Ä∑¿ÄΩ¿Ä„¿Å¿Å¿Å:¿Åe¿Åk¿Åò¿Å…¿Åœ¿Å˝¿Ç/¿Ç5¿Ç`¿Çè¿Çï¿Çº¿ÇÁ¿ÇÌ¿ÇÒ¿ÇÚ¿Ç˛¿ÉC¿Én¿Éö¿É≠¿É»¿ÉÁ¿Ñ¿Ñ!¿ÑB¿Ñe¿Ñî¿Ñ≈¿Ñ¿Ö¿Ö¿Ö5¿Ö=¿ÖA¿ÖC¿ÖD¿Öí¿Öñ¿Ö‚¿Ü/¿ÜM¿ÜQ¿Ü†¿Ü¿á¿á¿áX¿á\¿áÆ¿á≤¿á¿¿áƒ¿à¿à"¿àà¿à—¿à◊¿â#¿ân¿âÑ¿âñ¿â®¿âπ¿âÂ¿ä¿ä#¿ä4¿äs¿äå¿ä¡¿ä⁄¿ã¿ã¿ã*¿ãr¿ã≥¿ã∑¿ã∏¿ãƒ¿å¿å-¿åf¿åÑ¿åä¿åé¿åè¿å‡¿ç1¿çL¿çR¿çõ¿ç„¿é+¿éf¿él¿éΩ¿è¿è-¿è3¿èP¿èn¿è~¿èô¿èµ¿èÃ¿ê¿ê1¿ê7¿ê;¿ê<¿êd¿êj¿ê£¿ê◊¿ë¿ëM¿ëm¿ëà¿ë’¿ëÌ¿ëÛ¿ë˜¿ë¯¿í¿í*¿í+¿ív¿íç¿íì¿í◊¿í˝¿í˛¿ì
¿ì.¿ì/¿ì;¿ì`¿ìw¿ìô¿ìµ¿ìÃ¿î¿îM¿îe¿îk¿îo¿îp¿î|¿î∂¿î‘¿î’¿î·¿ï¿ï¿ïA¿ïE¿ïF¿ïR¿ïd¿ïØ¿ñ
¿ñ2¿ñU¿ñi¿ñm¿ñn¿ñz¿ñµ¿ñ’¿ñŸ¿ñ⁄¿ñÊ¿ó+¿óV¿óÇ¿óï¿ó∞¿ó ¿ó‰¿ó¸¿ò¿ò¿ò&¿òè¿ò‰¿ôt¿ôx¿ôz¿ô{¿ôÆ¿ô≤¿ô˛¿öJ¿öó¿ö„¿õ1¿õÇ¿õù¿õ°¿õ¿ú>¿úè¿úﬁ¿ù)¿ùy¿ù«¿û
¿û¿ûT¿û°¿ûÌ¿ü<¿üÉ¿ü–¿†¿†6¿†t¿†u¿†Å¿†ß¿†®¿†Ú¿°¿°¿°X¿°î¿°ö¿°Î¿¢¿¢¿¢m¿¢¶¿¢ı¿£D¿£f¿£l¿£Ç¿£à¿£œ¿£Ò¿£˜¿§¿§2¿§V¿§\¿§n¿§ß¿§Ø¿§µ¿§Ë¿•¿•¿•D¿•Ω¿•¯¿¶U¿¶ö¿¶µ¿¶ø¿¶≈¿¶◊¿ß¿ß&¿ßB¿ß]¿ß~¿ß¶¿ß˙¿®¿®¿®'¿®1¿®9¿®C¿®U¿®[¿®k¿®q¿®∂¿©¿©@¿©^¿©ô¿©Â¿©È¿©Í¿™4¿™R¿™X¿™®¿™‰¿™Í¿´?¿´m¿´s¿´¡¿´˙¿¨I¿¨ò¿¨∫¿¨¿¿≠¿≠a¿≠g¿≠}¿≠É¿≠ ¿≠ˆ¿≠¸¿Æ
¿Æ@¿Æm¿Æs¿ÆÖ¿Æ–¿Æÿ¿Æﬁ¿Ø#¿ØN¿ØT¿Øs¿ØÏ¿∞%¿∞j¿∞t¿∞z¿∞å¿∞π¿∞€¿∞˜¿±¿±3¿±]¿±±¿±¬¿±—¿±ﬁ¿±Ë¿±¿±˙¿≤¿≤¿≤"¿≤(¿≤q¿≤≈¿≤˚¿≥¿≥T¿≥§¿≥®¿≥©¿≥˘¿¥H¿¥ñ¿¥·¿¥Á¿µ4¿µ@¿µF¿µî¿µ·¿µˆ¿∂7¿∂\¿∂]¿∂¨¿∂˙¿∑F¿∑ì¿∑€¿∏¿∏¿∏d¿∏p¿∏v¿∏«¿π¿π*¿πm¿πì¿πî¿π‡¿πˆ¿π¸¿∫G¿∫d¿∫t¿∫ô¿∫ø¿∫“¿∫‹¿∫‡¿∫·¿∫Ì¿ªT¿ªd¿ªë¿ªπ¿ª»¿ªÒ¿ª˘¿º¿º¿º¿º¿º'¿ºl¿ºó¿º∂¿º∆¿º„¿Ω*¿Ωì¿Ω¢¿æ¿æ6¿æ~¿æ÷¿æ˚¿øc¿øà¿ø÷¿ø¸¿¿ô¿¿æ¿¡(¿¡]¿¡æ¿¡œ¿¬3¿¬=¿¬ÿ¿√¿√!¿√4¿√>¿√W¿√ƒ¿√ ¿√Œ¿√–¿√—¿ƒ¿ƒ¿ƒ^¿ƒ≠¿ƒ˛¿≈'¿≈+¿≈<¿≈@¿≈ç¿≈ú¿≈†¿≈’¿≈Ÿ¿∆¿∆¿∆(¿∆,¿∆z¿∆®¿∆€¿«¿«3¿«I¿«c¿«t¿«ƒ¿«ˇ¿»¿»"¿»?¿»n¿»É¿»Ñ¿»ƒ¿» ¿…¿…h¿…n¿…•¿…«¿…Ÿ¿…ˆ¿ ¿ "¿ (¿ ?¿ d¿ Ü¿ å¿ ê¿ ë¿ Ò¿ ˜¿À6¿À<¿Àã¿Àö¿ÀË¿Ã!¿Ã%¿ÃZ¿Ãv¿Ãù¿Ãƒ¿Ã“¿Ãÿ¿Ã¯¿Õ¿Õ¿Õ¿Õ)¿Õq¿Õ¥¿Õ∏¿Õπ¿Õ≈¿Œ¿Œ,¿Œ:¿Œ@¿Œn¿Œr¿Œs¿Œ¿Œ∆¿Œ¯¿œI¿œf¿œ¥¿œ∏¿œπ¿œ≈¿–
¿–5¿–{¿–è¿–∞¿–Õ¿–È¿—D¿—M¿—T¿—X¿—Z¿—[¿—´¿—˙¿“¿“@¿“i¿“|¿“ñ¿“¨¿“…¿“ﬁ¿“ﬂ¿”¿”"¿”m¿”æ¿”Î¿”Ò¿‘.¿‘P¿‘b¿‘¿‘ù¿‘´¿‘±¿‘»¿‘ı¿‘˘¿‘˙¿’¿’9¿’M¿’_¿’e¿’ò¿’ú¿’ù¿’©¿’‹¿’¿÷¿÷¿÷;¿÷?¿÷@¿÷L¿÷¿÷ì¿÷•¿÷´¿÷ﬁ¿÷‚¿÷„¿÷Ô¿◊"¿◊6¿◊H¿◊N¿◊Å¿◊Ö¿◊Ü¿◊í¿◊’¿◊È¿◊¸¿ÿ¿ÿ>¿ÿB¿ÿC¿ÿO¿ÿu¿ÿv¿ÿÇ¿ÿ∏¿ÿÃ¿ÿÔ¿ÿı¿Ÿ%¿Ÿ)¿Ÿ*¿Ÿ6¿ŸO¿Ÿe¿ŸÄ¿ŸÑ¿ŸÖ¿Ÿë¿Ÿ™¿Ÿæ¿Ÿ‡¿ŸÌ¿⁄
¿⁄¿⁄¿⁄¿⁄!¿⁄i¿⁄¨¿⁄∞¿⁄±¿⁄Ω¿⁄„¿€¿€¿€¿€ ¿€,¿€c¿€w¿€Ö¿€ã¿€≠¿€±¿€≤¿€æ¿€˛¿‹¿‹ ¿‹&¿‹T¿‹X¿‹Y¿‹e¿‹™¿‹’¿›¿›¿›¿›+¿›]¿›v¿›ò¿›û¿›º¿›‹¿›Û¿ﬁJ¿ﬁS¿ﬁZ¿ﬁ^¿ﬁ`¿ﬁa¿ﬁü¿ﬁ£¿ﬁÓ¿ﬂ:¿ﬂã¿ﬂÿ¿‡ ¿‡¿‡¿‡¿‡f¿‡u¿‡y¿‡Æ¿‡≤¿‡Ô¿‡Û¿·¿·¿·O¿·ô¿·Ã¿‚¿‚,¿‚B¿‚]¿‚n¿‚æ¿‚˘¿‚ˇ¿„¿„;¿„j¿„¿„Ä¿„∆¿„Ã¿‰¿‰f¿‰v¿‰|¿‰≥¿‰◊¿‰Í¿Â¿Â'¿Â5¿Â;¿ÂS¿Âx¿Âö¿Â†¿Â§¿Â•¿Âı¿Ê¿Ê¿ÊP¿ÊV¿Ê•¿Ê¥¿Á¿Á;¿Á?¿Át¿Áê¿Á∑¿Áﬁ¿ÁÏ¿ÁÚ¿Ë¿Ë2¿Ë6¿Ë7¿ËC¿Ëã¿Ë†¿Ë¬¿Ë˜¿Ë˚¿Ë¸¿È¿ÈH¿Èo¿È}¿ÈÉ¿È±¿Èµ¿È∂¿È¬¿Í	¿Í;¿Íå¿Í©¿Í˜¿Í˚¿Í¸¿Î¿ÎM¿Îx¿Îø¿Î”¿ÎÙ¿Ï¿Ï,¿ÏÖ¿Ïé¿Ïï¿Ïô¿Ïõ¿Ïú¿ÏÀ¿Ïœ¿Ì ¿Ìq¿Ìº¿Ì·¿Ó"¿Ó\¿Ób¿Ó¨¿Óø¿Ó“¿ÓÊ¿Ó˜¿Ó˝¿Ó˛¿Ô1¿ÔE¿ÔF¿ÔR¿Ôó¿Ô¬¿
¿¿¿¿X¿t¿ƒ¿Ò¿Ò1¿ÒB¿Òa¿Òå¿Ò√¿Ò¯¿Ú¿Ú)¿Ú@¿Úc¿Úú¿Ú—¿Ú“¿Û!¿ÛK¿ÛQ¿Ûü¿ÛÏ¿Ù¿Ù¿ÙW¿Ùß¿Ùˆ¿ı@¿ıã¿ı©¿ı‰¿ˆ¿ˆ=¿ˆy¿ˆá¿ˆç¿ˆ®¿ˆ»¿ˆÃ¿ˆÕ¿˜¿˜.¿˜L¿˜u¿˜ê¿˜û¿˜§¿˜–¿˜‰¿¯¿¯/¿¯5¿¯9¿¯:¿¯ç¿¯ ¿¯Ù¿˘)¿˘J¿˘X¿˘^¿˘ê¿˘™¿˘”¿˘ı¿˘˚¿˘ˇ¿˙ ¿˙@¿˙î¿˙ ¿˚¿˚7¿˚E¿˚K¿˚à¿˚≠¿˚÷¿˚¯¿˚˛¿¸¿¸¿¸2¿¸Ç¿¸∂¿¸ı¿˝¿˝-¿˝3¿˝n¿˝ë¿˝∫¿˝‹¿˝‚¿˝Ê¿˝Á¿˛*¿˛q¿˛±¿˛¿ˇ¿ˇ¿ˇ¿ˇ*¿ˇq¿ˇ£¿ˇ§¿ˇ‰¿  ¿ ¿ R¿ z¿ Ä¿ ™¿ „¿¿'¿_¿ô¿°¿ß¿œ¿¿;¿C¿{¿µ¿Ω¿√¿«¿»¿¯¿;¿?¿@¿f¿ê¿Œ¿ˇ¿E¿Ü¿ê¿ñ¿ö¿õ¿¬¿Ï¿)¿Z¿†¿·¿Î¿Ò¿ı¿ˆ¿¿B¿Å¿∞¿ˆ¿7¿A¿G¿K¿L¿r¿ö¿ÿ¿¿M¿é¿ò¿û¿¢¿£¿Ø¿Ù¿	¿	K¿	k¿	ò¿	◊¿
¿
¿
5¿
S¿
Y¿
ù¿
°¿
£¿
§¿
·¿¿^¿d¿œ¿Ó¿¿1¿M¿r¿ï¿∏¿⁄¿˙¿,¿Z¿à¿∞¿“¿È¿¿¿¿f¿õ¿æ¿Ï¿¿¿ ¿9¿c¿É¿á¿à¿œ¿¿D¿J¿û¿Ì¿	¿-¿@¿^¿|¿ä¿ê¿®¿»¿Ã¿Õ¿¿]¿c¿≥¿¿¿c¿ß¿À¿—¿¿V¿ä¿¿¿‹¿¿+¿9¿?¿`¿Ä¿Ñ¿Ö¿—¿Ï¿Ú¿>¿å¿‘¿¿ ¿E¿k¿y¿¿û¿æ¿¬¿√¿¿¿S¿é¿±¿„¿˝¿"¿H¿V¿\¿{¿õ¿ü¿†¿‹¿¿N¿ô¿‰¿¿¿ ¿k¿è¿÷¿⁄¿€¿&¿J¿ë¿ï¿ñ¿Œ¿Ò¿¿D¿W¿è¿ì¿î¿Ã¿Ô¿!¿G¿Z¿í¿ñ¿ó¿·¿¿I¿M¿N¿t¿ö¿…¿¯¿ ¿ ¿ n¿ {¿ Å¿ «¿ Û¿! ¿!Y¿!ú¿!“¿!Û¿"¿"A¿"O¿"U¿"q¿"ë¿"ï¿"ñ¿"¢¿"‚¿"˛¿#¿#¿#@¿#D¿#E¿#Q¿#ò¿# ¿#ı¿$)¿$^¿$j¿$”¿%¿%"¿%.¿%y¿%¬¿%…¿% ¿%Ò¿&¿&%¿&L¿&z¿&Ä¿&•¿&Ÿ¿&ﬂ¿'¿'4¿':¿'b¿'ì¿'ô¿'ø¿'Ï¿'Ú¿(¿(J¿(P¿(t¿(ù¿(£¿(…¿(ˆ¿(¸¿)'¿)^¿)d¿)ä¿)∑¿)Ω¿)Ê¿*¿*¿*G¿*x¿*~¿*ß¿*⁄¿*‡¿+¿+6¿+<¿+t¿+≈¿+À¿+Û¿,$¿,*¿,S¿,Ü¿,å¿,≤¿,ﬂ¿,Â¿-
¿-5¿-;¿-_¿-ë¿-ó¿-ª¿-Ì¿-Û¿. ¿.d¿.j¿.ó¿.€¿.·¿/¿/4¿/:¿/a¿/é¿/î¿/Í¿0"¿0(¿0S¿0à¿0é¿0∏¿0Î¿0Ò¿1¿1N¿1T¿1Ç¿1º¿1¬¿1Ù¿26¿2<¿2]¿2â¿2è¿2∂¿2‚¿2Ë¿3¿3S¿3Y¿3¶¿3ı¿47¿4\¿4~¿4Ñ¿4Ø¿4›¿4„¿5¿56¿5<¿5h¿5ò¿5û¿5À¿5˝¿6¿6-¿6Y¿6_¿6ã¿6ª¿6¡¿6Î¿7¿7¿7G¿7s¿7y¿7ü¿7√¿7…¿7Ó¿8¿8¿8=¿8c¿8i¿8ß¿8˚¿9¿9@¿9ñ¿9ú¿9’¿:¿:%¿:_¿:´¿:±¿:ﬂ¿;¿;¿;B¿;l¿;r¿;≠¿;˚¿<¿<<¿<ä¿<ê¿<∆¿=¿=¿=¿=¿=3¿=R¿=V¿=W¿=t¿=ô¿=ù¿=û¿=π¿=‹¿=‡¿=·¿=ˇ¿>%¿>)¿>*¿>I¿>p¿>t¿>u¿>ë¿>µ¿>π¿>∫¿>ÿ¿>˛¿?¿?¿?¿?C¿?G¿?H¿?d¿?à¿?å¿?ç¿?•¿?≈¿?…¿? ¿?·¿@ ¿@¿@¿@¿@?¿@C¿@D¿@à¿@œ¿@”¿@‘¿A¿Aa¿Ae¿Af¿A•¿AÁ¿AÎ¿AÏ¿B,¿Bo¿Bs¿Bt¿B´¿B‹¿B‡¿B·¿C¿C.¿C2¿C3¿C`¿Cï¿Cô¿Cö¿C«¿C¸¿D ¿D¿D¿DR¿Dn¿Dr¿D¡¿Dı¿E)¿Ex¿EÖ¿Eû¿E¥¿EŒ¿EÎ¿F ¿F¿FN¿Fû¿F¿¿F“¿FÔ¿G¿G¿G!¿G8¿GX¿G\¿G]¿Gi¿G∞¿G‚¿H%¿H)¿H*¿H6¿H{¿H¶¿HÎ¿HÔ¿HÒ¿HÚ¿I5¿Ix¿Iå¿Iê¿I◊¿J¿JP¿JÑ¿J“¿K¿K¿K¿Kc¿Kï¿K†¿K¬¿KÚ¿Kˆ¿K¯¿K˘¿L+¿L/¿L~¿Lö¿Lû¿LÂ¿M ¿MV¿Mü¿M∫¿M–¿MÎ¿N
¿N¿N ¿Ne¿Nâ¿Nú¿N∫¿NŸ¿NÁ¿NÌ¿O¿O%¿O)¿O*¿O6¿Ov¿Oã¿Oô¿Oü¿OÕ¿O—¿O“¿Oﬁ¿P#¿PN¿Pï¿Pô¿Põ¿Pú¿PŸ¿P›¿Q'¿Qp¿Q¢¿QÃ¿Q–¿Qﬁ¿Q‚¿R%¿R[¿R´¿R∆¿R‹¿RÙ¿S¿S ¿S!¿ST¿So¿S}¿Sñ¿S∞¿Sæ¿Sƒ¿Sÿ¿S¯¿S¸¿S˝¿T	¿TP¿TÇ¿T§¿T®¿T©¿Tµ¿T˙¿U%¿Uc¿Ug¿Ui¿Uj¿Uû¿U¢¿U∞¿U¥¿UÚ¿V3¿Vd¿Vù¿V≥¿V–¿VÊ¿V˚¿W¿W¿W_¿W}¿WÉ¿W‘¿WÓ¿X¿X ¿X>¿XX¿Xf¿Xl¿Xâ¿Xú¿X√¿XÒ¿X˜¿Y¿Y¿Y¿Y¿YI¿YJ¿Yò¿YÊ¿Z(¿ZE¿ZF¿ZR¿Zk¿ZÜ¿Z¶¿Z¬¿Z∆¿Z«¿Z”¿[
¿[#¿[Z¿[g¿[§¿[∂¿[Ã¿[Á¿[Ì¿\&¿\6¿\`¿\s¿\}¿\Å¿\Ç¿\é¿\”¿\˛¿]@¿]D¿]F¿]G¿]ï¿]»¿]Ã¿^¿^¿^g¿^∏¿^Ã¿^–¿^ﬁ¿^‚¿_"¿_e¿_ò¿_”¿_Î¿`¿`*¿`K¿`{¿`≠¿`√¿`ÿ¿a¿a¿aC¿al¿aÅ¿aÇ¿a»¿a˛¿b¿b0¿bN¿bh¿bv¿b|¿bè¿b•¿b©¿b™¿bÓ¿c,¿c2¿cÉ¿c≈¿cÀ¿d¿dk¿dü¿d—¿dÎ¿e¿e6¿eD¿eJ¿ei¿e¿eÉ¿eÑ¿e—¿e˚¿f¿f-¿fJ¿ff¿ft¿fz¿fè¿f•¿f©¿f™¿f˘¿g¿g¿g]¿g¢¿gÒ¿h3¿hÇ¿h√¿i¿i.¿iC¿iI¿ip¿iü¿i∫¿i‡¿j¿j¿j¿j1¿jG¿jK¿jL¿jò¿j“¿jÿ¿k¿k ¿kG¿kz¿kó¿kø¿k„¿kÒ¿k˜¿l¿l*¿l.¿l/¿l;¿lM¿l_¿ls¿lw¿lx¿lÑ¿lØ¿l∞¿lÊ¿lÚ¿m/¿m0¿mÄ¿mÜ¿m÷¿n¿nV¿np¿ní¿nŒ¿n“¿n”¿nﬂ¿o'¿oh¿oú¿o∞¿o∂¿oÒ¿p.¿pl¿pÜ¿pæ¿p¬¿p√¿pœ¿q¿qH¿qp¿qä¿q∆¿r¿r¿r¿r¿r¿r)¿r`¿ré¿rö¿rı¿sJ¿sï¿s¿¿s«¿t¿t¿tr¿tã¿t®¿tº¿tË¿u¿u5¿u>¿uK¿uW¿un¿uú¿uÀ¿uÓ¿uÙ¿v¿v¿v,¿v?¿vl¿v ¿vÎ¿w¿w%¿w>¿wG¿wN¿w^¿wà¿wõ¿w•¿w©¿w™¿w∂¿w˜¿x&¿x*¿x+¿x7¿x|¿xß¿xÈ¿y>¿yÅ¿y€¿yﬂ¿y·¿y‚¿z1¿z5¿zC¿zG¿zã¿z–¿{¿{¿{_¿{q¿{w¿{ƒ¿{ˆ¿{¸¿|+¿|E¿|[¿|t¿|ä¿|°¿|∏¿|Õ¿|Œ¿}¿} ¿},¿}G¿}e¿}s¿}y¿}ê¿}¶¿}™¿}´¿}ˇ¿~¿~*¿~D¿~_¿~m¿~s¿~á¿~ù¿~°¿~¢¿~Æ¿~⁄¿~€¿~Á¿¿x¿ª¿»¿È¿Ä¿Ä¿ÄH¿ÄL¿ÄN    .RenderProxyBoxRenderProxyBoxMixinHitTestBehavior!RenderProxyBoxWithHitTestBehaviorRenderConstrainedBoxRenderLimitedBoxRenderAspectRatioRenderIntrinsicWidthRenderIntrinsicHeightRenderIgnoreBaselineRenderOpacityRenderAnimatedOpacityMixinRenderAnimatedOpacityRenderShaderMaskRenderBackdropFilterCustomClipperShapeBorderClipper_RenderCustomClipRenderClipRectRenderClipRRectRenderClipOvalRenderClipPath_RenderPhysicalModelBaseRenderPhysicalModelRenderPhysicalShapeDecorationPositionRenderDecoratedBoxRenderTransformRenderFittedBoxRenderFractionalTranslationRenderPointerListenerRenderMouseRegionRenderRepaintBoundaryRenderIgnorePointerRenderOffstageRenderAbsorbPointerRenderMetaDataRenderSemanticsGestureHandlerRenderSemanticsAnnotationsRenderBlockSemanticsRenderMergeSemanticsRenderExcludeSemanticsRenderIndexedSemanticsRenderLeaderLayerRenderFollowerLayerRenderAnnotatedRegion 
›