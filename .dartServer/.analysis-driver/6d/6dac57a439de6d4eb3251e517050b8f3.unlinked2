Ä—value==hashCodetoString_currentElementcurrentContextcurrentWidgetcurrentState_debugLabelkeycreateElementtoStringShortdebugFillProperties	canUpdate_debugConcreteSubtypebuildcreateStatecreatedinitializedreadydefunctwidget_widget_debugLifecycleState_debugTypesAreRightcontext_elementmounted	initStatedidUpdateWidget
reassemblesetState
deactivateactivatedisposedidChangeDependencieschilddebugIsValidRenderObjectdebugTypicalAncestorWidgetClass%debugTypicalAncestorWidgetDescription%_debugDescribeIncorrectParentDataTypeapplyParentDatadebugCanApplyOutOfTurnupdateShouldNotifycreateRenderObjectupdateRenderObjectdidUnmountRenderObjectchildreninitialactiveinactive_locked	_elements_unmount_unmountAll_deactivateRecursivelyaddremovedebugContainsownerdebugDoingBuildfindRenderObjectsizedependOnInheritedElement"dependOnInheritedWidgetOfExactTypegetInheritedWidgetOfExactType'getElementForInheritedWidgetOfExactTypefindAncestorWidgetOfExactTypefindAncestorStateOfTypefindRootAncestorStateOfTypefindAncestorRenderObjectOfTypevisitAncestorElementsvisitChildElementsdispatchNotificationdescribeElementdescribeWidgetdescribeMissingAncestordescribeOwnershipChainonBuildScheduled_inactiveElements_dirtyElements_scheduledFlushDirtyElements_dirtyElementsNeedsResorting_debugIsInBuildScopefocusManagerscheduleBuildFor_debugStateLockLevel_debugStateLockeddebugBuilding_debugBuilding_debugCurrentBuildTarget	lockState
buildScope>_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans_debugElementWasRebuilt_globalKeyRegistry_debugIllFatedElements_debugGlobalKeyReservationsglobalKeyCount#_debugRemoveGlobalKeyReservationFor_registerGlobalKey_unregisterGlobalKey_debugReserveGlobalKeyFor _debugVerifyGlobalKeyReservation_debugVerifyIllFatedPopulationfinalizeTreeonNotificationattachNotificationTreecurrentparent_parent_notificationTreeslot_slotdepth_depth_sortdebugIsDefunctdebugIsActive_owner_debugIsInScoperenderObjectrenderObjectAttachingChilddescribeElements_lifecycleStatevisitChildrendebugVisitOnstageChildrenupdateChildupdateChildrenmount _debugRemoveGlobalKeyReservationupdateupdateSlotForChild
updateSlot_updateDepthdetachRenderObjectattachRenderObject_retakeInactiveElementinflateWidget_debugCheckForCyclesdeactivateChild$_debugForgottenChildrenWithGlobalKeyforgetChild_activateWithParent_activateRecursivelydebugDeactivatedunmountdebugExpectsRenderObjectForSlot_inheritedElements_dependencies_hadUnsatisfiedDependencies)_debugCheckStateIsActiveForAncestorLookupdoesDependOnInheritedElement_updateInheritance!_debugCheckOwnerBuildTargetExistsdebugGetCreatorChaindebugGetDiagnosticChaintoDiagnosticsNodedebugDescribeChildrendirty_dirty_inDirtyList_debugBuiltOncemarkNeedsBuildrebuildperformRebuildstateful	toJsonMapbuilder_defaultErrorWidgetBuilder
_stringifymessage_flutterError_child_debugDoingBuild_firstBuildstate_state_didChangeDependenciesupdatednotifyClientsdebugParentDataType_applyParentDataapplyWidgetOutOfTurn_dependentsgetDependenciessetDependenciesupdateDependenciesnotifyDependent_renderObject_ancestorRenderObjectElement _findAncestorRenderObjectElement_debugCheckCompetingAncestors_findAncestorParentDataElements_debugUpdateRenderObjectOwner_performRebuild_updateParentDatainsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChildassignOwner	_children_forgottenChildren$_debugCheckHasAssociatedRenderObject._debugCheckMustNotAttachRenderObjectToAncestorelementindexinstance7
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycleStateSetter_flutterWidgetsLibraryStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsElementVisitorConditionalElementVisitorBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetBuilderErrorWidgetWidgetBuilderIndexedWidgetBuilderNullableIndexedWidgetBuilderTransitionBuilderComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementRootElementMixinLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementRenderTreeRootElementDebugCreator_reportExceptionIndexedSlot_NullElement_NullWidgetÅófactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTestingErrorDescription	ErrorHintErrorSummaryFlutterError
debugPrintdebugPrintStackValueChangedValueGetterValueSetterVoidCallbackDiagnosticLevelDiagnosticsNodeKeyLocalKeyValueKey	RenderBoxRenderObjectdebugDumpLayerTreedebugDumpRenderTreekey	identicalObjectoverrideboolruntimeTypevalueinthashidentityHashCodeStringdescribeIdentityobjectRuntimeType
deactivate	UniqueKeyGestureDetector	initState
debugLabelemptyWidgetsBindinginstance
buildOwner_globalKeyRegistrywidgetstateconstructor	shortHashendsWith	substringlengthcreateStateupdateDiagnosticableTreevoidDiagnosticPropertiesBuilderdebugFillPropertiesdefaultDiagnosticsTreeStyleDiagnosticsTreeStyledense
nonVirtualhashCoderebuildRowColumnPaddingSizedBoxAlignCustomSingleChildLayout	Container
DecorationCustomPaintThemesetState	canUpdate"dependOnInheritedWidgetOfExactTypeStreamChangeNotifierdisposedidChangeDependenciesIgnorePointerignoringKeyedSubtreeDiagnosticablecreated kFlutterMemoryAllocationsEnabledMemoryAllocationsdispatchObjectCreatedlibrary	classNameobject
reassembleBindingBasereassembleApplicationImage
ListenableAnimationControllermarkNeedsLayoutmarkNeedsPaintmarkNeedsBuilddefunct	fromPartsdynamicFutureactivaterunAppshrinkAppLifecycleListenerreadydispatchObjectDisposedAnimatedWidgetaddEnumPropertydefaultValueObjectFlagPropertyifNull
parentDataStack
ParentData
PositionedSizeTypeIterableparentDataCreatorownershipChainchildapplyWidgetOutOfTurnColorof	ThemeDataBuilderInheritedNotifierInheritedModel#SlottedMultiChildRenderObjectWidgetmountcreateRenderObjectupdateRenderObjectRenderObjectWithChildMixinContainerRenderObjectMixinRenderBoxContainerDefaultsMixinRenderStackListSetHashSet_lifecycleStateinactive$debugPrintGlobalKeyedWidgetLifecyclevisitChildren_parentunmounttoListsort_sortclearreversedforEachisEmptyactivedebugDeactivatedcontainsremovevisitChildElementsvisitAncestorElementsbuildcontext
showDialogbuilderScaffoldStateshowBottomSheetScaffoldmounted	drawFrame
RenderViewaspectMaterialInkWellNotificationListenerNotificationdescribeElementserrorPropertydebugCheckHasMaterialassignOwnerOffstageFocusManagerregisterGlobalHandlers
FocusScopeFocusScopeNodenewowner debugPrintScheduleBuildForStackslabeldirtydescribeElement_inDirtyListdebugPrintBuildScopepragmacallbackkReleaseModeMap"debugEnhanceBuildTimelineArgumentsFlutterTimeline	startSync	arguments_debugIsInScopeDiagnosticsPropertystyle
kDebugModetoDiagnosticsNodetoTimelineArgumentsestackinformationCollectorDiagnosticsDebugCreator
finishSyncanyelementHashMapputIfAbsentcontainsKeyparentrenderObjectattached
childToKeytoStringcurrentChildforgetChildkeys_unmountAll
isNotEmptyaddAllmapcountjoin_notificationTreeonNotificationdispatchNotificationdebugProfileBuildsEnabled$debugProfileBuildsEnabledUserWidgetsdebugIsWidgetLocalCreationcreateElementinitialdepthTimer	AnimationViewrenderObjectAttachingChildexpectedAncestorTypeDiagnosticsBlocknamechildrenallowTruncateStringPropertyOverlayFindervisitChildrenForSemantics_debugStateLocked_debugConcreteSubtypeslot_debugElementWasRebuilt_debugReserveGlobalKeyForindexslotsforgottenChildrenfilledvaluesoldChildeveryinsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChild_registerGlobalKey#_debugRemoveGlobalKeyReservationFor
updateSlot_updateDepthdetachRenderObjectattachRenderObject_currentElementB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansdeactivateChild_inactiveElements_activateWithParentscheduleBuildFor
dependency_dependents_unregisterGlobalKey
ViewAnchorviewViewCollection_debugBuildingErrorSpacerRenderSliverdescribeForErrorhasSizedebugNeedsLayoutsizePersistentHashMapupdateDependencies_inheritedElementsupdateShouldNotify_debugCurrentBuildTargettoStringShortshowNamelevelhiddenFlagPropertyifTruea	compareTobsparsedescriptiondescribeWidget
ColoredBoxcolorupdateChildrendidUpdateWidgetAnimatedBuilderforcedebugOnRebuildDirtyWidgetcalldebugPrintRebuildDirtyWidgetsDiagnosticableTreeNode DiagnosticsSerializationDelegate	toJsonMapdebugIsDefunctreportErrorFlutterErrorDetailsonErrorerrorRenderErrorBox	exceptionwithDetailsmessagequoted
whitespaceOverlayEntryValueWidgetBuilderListViewSliverChildBuilderDelegate
childCountListenableBuilder
WidgetsAppMaterialAppdebugWidgetBuilderValueperformRebuildupdateChild_debugTypesAreRight_element_widget_debugLifecycleStateinitialized_firstBuilddependOnInheritedElementstatefulUnsupportedError_updateParentDataapplyParentDatadebugCanApplyOutOfTurnAutomaticKeepAlive	KeepAliveputupdated!_debugCheckOwnerBuildTargetExists	dependent_dependenciesupdateSlotForChildPageStorageperformLayoutinvokeLayoutCallback
buildScopedebugDumpAppdebugExpectsRenderObjectForSlotwhereancestordebugParentDataTypedebugTypicalAncestorWidgetClassdebugGetCreatorChain
stackTracedebugDisposeddebugCreatordidUnmountRenderObjectdebugIsValidRenderObject%_debugDescribeIncorrectParentDataType_slotparentDataElement
Deprecated_ownerdebugDescribeChildrendebugValidateChilddebugChildrenHaveDuplicateKeysContainerParentDataMixininsertaftermoveinflateWidgetiPipelineOwnerrootNode _findAncestorRenderObjectElement
StackTraceInformationCollectorUnimplementedErrorLocalKeyKey	GlobalKeyDiagnosticableTreeWidgetDiagnosticableProxyWidgetRenderObjectWidgetElementBuildContextDiagnosticableTreeNodeLeafRenderObjectWidgetComponentElementProxyElementRenderObjectElementRootElementMixin‘~Ôÿ„p'Údiì‹‡ÛÀ Ç Çnfactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTesting Å◊package:flutter/foundation.dartÇôÇÚErrorDescription	ErrorHintErrorSummaryFlutterError
debugPrintdebugPrintStack Çppackage:flutter/foundation.dartÉÉVValueChangedValueGetterValueSetterVoidCallback ÇÙpackage:flutter/foundation.dartÉÅÉ¶DiagnosticLevelDiagnosticsNode ÉXpackage:flutter/foundation.dartÉ—ÉÌKeyLocalKeyValueKey É®package:flutter/foundation.dartÑÑ\	RenderBoxRenderObjectdebugDumpLayerTreedebugDumpRenderTree ÉÔpackage:flutter/rendering.dart  Ä¶  
dart:async  Äª  dart:collection  Ä÷  package:flutter/foundation.dart  Å   package:flutter/rendering.dart  Å*  binding.dart  ÅA  
debug.dart  ÅV  focus_manager.dart  Ås  inherited_model.dart  Åí  notification_listener.dart  Å∑  widget_inspector.dart    	dart:core¿ ‹ ¿É\õä <ÄÜÄ§Ä•Ä∫Ä‘Ä’ÄˇÅ(Å)Å@ÅUÅrÅëÅ∂Å÷Å◊ÇÇÇÇ.ÇBÇOÇ[ÇpÇÙÉXÉ®ÉÔÑ^Ñ_ÑwÑïÑªÑÙÖIÖîÖÎÜÜÅÜ∂ááçàEàià~àŒàıàˆâEâêâ„ääää)äXä]ädäwäçäèäêäºäΩä≈ä∆ããã]ãwã{ãâãçã∏å	åå9åÑå£å§åËåˇç çç/ç[çoçuçìçΩç¡ç¬çŒééé$é:é^éãéëé‰éËéÍéÎèèèoèºêêêUê§êÛëDëRëVë¢ëÒí=íeíiíπíÓíÚì>ìzì~ìéìíì·î î$îqî¿ï	ïYï©ïºï¿ññXñ\ñjñnñøñÃñﬁó&ówóàóéóﬁóò@òAòmòsò¡ò‘ôôôfôgô©ôØö ööNöOöêöñöÊö˝õ5õ6õáõçõÿú)úbúzú®úŒùù6ùNùdùlùrùÉùáùâùäù≥ù∑ûû,û>ûçû¿û∆û˙üPüåüçü™ü´ü∑üÕ††=†r†x†®†¨†Æ†Ø†˚†ˇ°M°g°k°≠°±¢¢D¢ï¢·¢ˆ¢˙££1£R£X£`£d£Æ£˚§§§f§∏§Û§Ù•8•N•O•[•~•™•æ•ƒ•Î¶¶¶¶&¶U¶V¶b¶x¶∫ß ß}ßößœßÙ®=®C®x®|®~®®±®µ©©P©ï©ô©Ë™3™m™ª™€™ﬂ´0´Ä´À¨¨-¨1¨¨ ≠≠i≠∑ÆÆÆÆ$Æ(ÆtÆûÆÍØØ]ØêØõØŒØˆ∞∞∞X∞^∞•∞ˆ±H±ò±Î±˜±˝≤M≤û≤Ï≥7≥à≥©≥Ø¥ ¥¥¥-¥3¥f¥x¥y¥≥¥πµµ^µ´µ˚∂∂∂)∂D∂E∂x∂Ñ∂ü∂⁄∑∑∑∑∑^∑â∑“∑÷∑◊∑„∑Ò∏%∏&∏2∏@∏f∏g∏∑∏Á∏Ìπ>πçπ“πÿ∫)∫w∫à∫∆ª ª+ª/ª0ªzªœº#º|º∞º⁄ΩΩΩΩΩΩLΩPΩ†ΩÔæ9æÅæ“æ÷øøøiø±¿ @¿ @L¿ @ö¿ @ø¿ @√¿ @Â¿ @È¿ A8¿ AÑ¿ A‘¿ B¿ B¿ BY¿ B™¿ BÙ¿ C¿ C¿ CZ¿ C}¿ CÅ¿ C“¿ D"¿ Dq¿ D¬¿ E¿ E]¿ Eî¿ Eò¿ EÈ¿ F'¿ F+¿ F{¿ FÀ¿ G¿ G3¿ G7¿ GÇ¿ GÃ¿ H¿ Hm¿ Hª¿ I¿ I[¿ Iq¿ Iº¿ J¿ JX¿ J©¿ Jˆ¿ KB¿ Kì¿ K–¿ K„¿ KÁ¿ L8¿ Lo¿ Ls¿ L∂¿ L∫¿ LŒ¿ L“¿ M%¿ M)¿ Mz¿ Mï¿ Mô¿ M•¿ M”¿ M˘¿ M˝¿ N¿ N8¿ Nr¿ Nz¿ NÄ¿ Nà¿ Nò¿ Nú¿ N∞¿ N¥¿ O¿ O¿ O¿ O+¿ OT¿ Og¿ Oz¿ O®¿ Oº¿ O∆¿ O ¿ O„¿ O˛¿ P¿ P¿ P=¿ Pt¿ P|¿ PÇ¿ Pä¿ Pö¿ Pû¿ PÁ¿ Q6¿ QY¿ Q]¿ Qk¿ Qo¿ Qª¿ QÂ¿ R1¿ RW¿ Rá¿ RØ¿ R◊¿ Rÿ¿ S)¿ S/¿ Sl¿ Sx¿ S∂¿ S∑¿ T¿ T¿ TY¿ T©¿ TÙ¿ UG¿ Uo¿ Uu¿ U¿¿ V¿ V^¿ Vß¿ V„¿ VÈ¿ W9¿ Wá¿ W¨¿ W≤¿ X ¿ XI¿ Xñ¿ Xﬂ¿ Y*¿ Ym¿ Ys¿ Y∞¿ Y∂¿ Z¿ Z¿ ZL¿ Zá¿ Zç¿ Z’¿ Zı¿ Z˚¿ [¿ [¿ [j¿ [w¿ [ù¿ [ü¿ [†¿ [≈¿ […¿ \¿ \d¿ \Ø¿ \ˆ¿ \˙¿ ]I¿ ]ò¿ ]‚¿ ^*¿ ^{¿ ^¿ ^À¿ _¿ _b¿ _∞¿ _Û¿ `
¿ `¿ `Q¿ `U¿ `•¿ `Í¿ a8¿ aâ¿ aΩ¿ a¡¿ a˛¿ bG¿ bñ¿ b‡¿ c1¿ cÅ¿ cß¿ c´¿ cı¿ dC¿ dç¿ dÿ¿ e$¿ es¿ e¡¿ f¿ f`¿ f±¿ fˇ¿ gO¿ gõ¿ gü¿ g¡¿ g≈¿ h ¿ h¿ hU¿ h•¿ hÙ¿ iD¿ iî¿ i‡¿ j1¿ jM¿ jQ¿ jõ¿ jÊ¿ k7¿ kÄ¿ k—¿ kÏ¿ k¿ l7¿ lY¿ l]¿ l™¿ lÒ¿ mA¿ mo¿ ms¿ mƒ¿ n¿ nY¿ n®¿ n€¿ nﬂ¿ o*¿ ot¿ o∆¿ p¿ pf¿ pª¿ p„¿ pÁ¿ q3¿ qS¿ qW¿ qß¿ q¯¿ rG¿ rî¿ r‡¿ s-¿ sx¿ s∆¿ sÎ¿ sÔ¿ t:¿ tÜ¿ t ¿ u¿ uG¿ uK¿ uì¿ uó¿ uË¿ v¿ v#¿ vf¿ vj¿ v¨¿ v’¿ vŸ¿ vÌ¿ vÒ¿ w;¿ w?¿ wá¿ w“¿ x¿ x"¿ x.¿ x\¿ xÉ¿ xá¿ xó¿ x‘¿ x⁄¿ xﬁ¿ y¿ y%¿ yP¿ yä¿ yí¿ yò¿ y†¿ y∞¿ yƒ¿ y»¿ z¿ z_¿ z¿ zÉ¿ zè¿ z∑¿ z ¿ z›¿ {¿ {¿ {)¿ {-¿ {F¿ {a¿ {e¿ {u¿ {¶¿ {¨¿ {∞¿ {€¿ {ı¿ {˘¿ |¿ |5¿ |=¿ |A¿ |Q¿ ||¿ |ñ¿ |µ¿ |ˆ¿ }¿ } ¿ }(¿ }.¿ }6¿ }F¿ }J¿ }ì¿ }‚¿ ~¿ ~	¿ ~¿ ~¿ ~`¿ ~≠¿ ~‡¿ ,¿ R¿ Å¿ ©¿ –¿ —¿ Ä!¿ Ä'¿ Äd¿ Äp¿ Ä¨¿ Ä≠¿ Ä˛¿ Å¿ ÅK¿ ÅÄ¿ ÅÜ¿ Åî¿ Å§¿ Å·¿ ÅÎ¿ ÅÒ¿ Ç>¿ Çç¿ Çﬁ¿ É-¿ É}¿ É»¿ Éﬂ¿ ÉÏ¿ É˜¿ Ñ¿ Ñ¿ Ñ¿ ÑW¿ Ñn¿ ÑΩ¿ Ñ…¿ Ñ‘¿ Ñ’¿ Ö"¿ Öv¿ ÖÖ¿ ÖÜ¿ Ö÷¿ Ö‰¿ ÖÌ¿ ÖÓ¿ Ü9¿ ÜX¿ Üc¿ Üe¿ Üf¿ Üó¿ ÜÕ¿ ÜŒ¿ á¿ á¿ áN¿ áR¿ á°¿ áÌ¿ à8¿ à¿ àÉ¿ à√¿ â¿ â^¿ â≠¿ â˜¿ ä>¿ äé¿ äﬁ¿ ã(¿ ã,¿ ã^¿ ãb¿ ãõ¿ ã¿¿ å¿ å\¿ å™¿ å˜¿ ç¿ çb¿ ç¨¿ ç˙¿ éC¿ éR¿ é£¿ éÔ¿ èB¿ èê¿ è·¿ ê1¿ êv¿ ê≈¿ ë¿ ëX¿ ë°¿ ë±¿ ë˛¿ íG¿ íî¿ íÂ¿ ì6¿ ìÜ¿ ì”¿ î ¿ îm¿ îñ¿ î‰¿ ï-¿ ïs¿ ïΩ¿ ñ
¿ ñY¿ ñ™¿ ñ˜¿ óD¿ ó}¿ ó ¿ ò¿ òc¿ ò∞¿ ô¿ ôJ¿ ôî¿ ô£¿ ôÙ¿ öD¿ öí¿ ö›¿ õ¿ õN¿ õõ¿ õÎ¿ ú0¿ ú4¿ úB¿ úF¿ úó¿ ú”¿ ù ¿ ùS¿ ùü¿ ù≈¿ ù˝¿ û¿ ûT¿ ûu¿ û{¿ û»¿ ü¿ üa¿ ü™¿ ü˚¿ †J¿ †]¿ †y¿ †á¿ †à¿ †»¿ †Œ¿ °¿ °j¿ °¨¿ °≠¿ °¯¿ ¢$¿ ¢^¿ ¢_¿ ¢ò¿ ¢û¿ ¢È¿ £2¿ £Å¿ £“¿ £È¿ £Ô¿ §8¿ §b¿ §¿ §è¿ §≠¿ §…¿ •A¿ •À¿ •÷¿ •ﬁ¿ •Ò¿ •˚¿ ¶¿ ¶¿ ¶2¿ ¶3¿ ¶m¿ ¶s¿ ¶Ω¿ ß¿ ßO¿ ß†¿ ßø¿ ß≈¿ ®¿ ®/¿ ®0¿ ®i¿ ®o¿ ®æ¿ ®–¿ ®÷¿ ©¿ ©p¿ ©∑¿ ©Ω¿ ©Ô¿ ™8¿ ™Ä¿ ™Õ¿ ´¿ ´9¿ ´?¿ ´q¿ ´Ω¿ ¨¿ ¨!¿ ¨U¿ ¨[¿ ¨p¿ ¨v¿ ¨À¿ ≠¿ ≠l¿ ≠Å¿ ≠á¿ ≠÷¿ ≠ˇ¿ Æ¿ Æ¿ Æ2¿ Æo¿ Æõ¿ Æ”¿ Æ¸¿ Ø¿ Ø/¿ Ø8¿ Ø>¿ ØB¿ ØC¿ Ø{¿ ØÅ¿ Ø—¿ ∞¿ ∞b¿ ∞¨¿ ∞€¿ ∞·¿ ±1¿ ±M¿ ±S¿ ±£¿ ±Î¿ ±Ò¿ ≤ ¿ ≤&¿ ≤u¿ ≤≠¿ ≤≥¿ ≥¿ ≥¿ ≥.¿ ≥;¿ ≥m¿ ≥n¿ ≥†¿ ≥¶¿ ≥¿ ¥9¿ ¥à¿ ¥é¿ ¥û¿ ¥§¿ ¥¬¿ ¥Ô¿ µ#¿ µ0¿ µA¿ µY¿ µZ¿ µ©¿ µØ¿ µ˙¿ ∂2¿ ∂8¿ ∂F¿ ∂s¿ ∂}¿ ∂É¿ ∂–¿ ∑¿ ∑T¿ ∑Z¿ ∑™¿ ∑˘¿ ∏J¿ ∏X¿ ∏^¿ ∏™¿ ∏˜¿ π4¿ π:¿ πá¿ π’¿ ∫%¿ ∫u¿ ∫ß¿ ∫≠¿ ∫ª¿ ∫Í¿ ª ¿ ª¿ ª"¿ ªà¿ ª∑¿ ª˛¿ º¿ º¿ º¿ ºb¿ º≥¿ º˛¿ Ω¿ Ω"¿ Ωn¿ Ω´¿ Ω±¿ Ωø¿ Ω÷¿ æ¿ æ¿ æ!¿ æG¿ æQ¿ æW¿ æ•¿ æÒ¿ ø@¿ øé¿ øﬁ¿ øÙ¿ ø˙¿ ¿¿ ¿¿ ¿l¿ ¿£¿ ¿—¿ ¿◊¿ ¡'¿ ¡x¿ ¡»¿ ¬¿ ¬	¿ ¬J¿ ¬P¿ ¬ù¿ ¬Ï¿ √=¿ √è¿ √¬¿ √»¿ ƒ¿ ƒg¿ ƒm¿ ƒë¿ ƒó¿ ƒÁ¿ ≈6¿ ≈á¿ ≈◊¿ ∆'¿ ∆I¿ ∆O¿ ∆ü¿ ∆¿ «>¿ «u¿ «{¿ «Ã¿ »¿ »1¿ »7¿ »G¿ »M¿ »ô¿ »’¿ »‚¿ …¿ …¿ …R¿ …ä¿ …Œ¿ …Í¿  G¿  †¿  ˜¿ À8¿ ÀE¿ ÀZ¿ ÀÉ¿ À⁄¿ Ã/¿ ÃÑ¿ Ãô¿ Ã¶¿ Ãª¿ Õ¿ Õd¿ Õ≥¿ Œ¿ Œ¿ Œ¿ Œ$¿ Œm¿ Œ•¿ ŒË¿ Œ˝¿ œV¿ œ∞¿ –¿ –:¿ –G¿ –S¿ –[¿ –n¿ –x¿ –§¿ –¥¿ –“¿ —
¿ —U¿ —q¿ —»¿ “	¿ “¿ “+¿ “Ö¿ “·¿ ”¿ ”+¿ ”7¿ ”?¿ ”è¿ ”±¿ ”ƒ¿ ”Œ¿ ”Ó¿ ”Ú¿ ”Û¿ ‘+¿ ‘1¿ ‘¿ ‘À¿ ’¿ ’l¿ ’∂¿ ÷¿ ÷U¿ ÷§¿ ÷Ù¿ ◊B¿ ◊í¿ ◊¿¿ ◊∆¿ ÿ¿ ÿ`¿ ÿ°¿ ÿß¿ ÿÙ¿ Ÿ¿ Ÿ$¿ Ÿ4¿ Ÿ:¿ Ÿä¿ ŸÆ¿ Ÿª¿ ŸÃ¿ Ÿ‰¿ ŸÂ¿ ⁄1¿ ⁄Q¿ ⁄W¿ ⁄•¿ ⁄¿ €'¿ €-¿ €|¿ €…¿ ‹¿ ‹c¿ ‹≥¿ › ¿ ›H¿ ›î¿ ›‰¿ ﬁ,¿ ﬁ}¿ ﬁÉ¿ ﬁ—¿ ﬂ¿ ﬂ4¿ ﬂ:¿ ﬂâ¿ ﬂ±¿ ﬂ∑¿ ﬂ«¿ ﬂÕ¿ ‡¿ ‡]¿ ‡j¿ ‡{¿ ‡ë¿ ‡í¿ ‡÷¿ ‡‹¿ ·&¿ ·t¿ ·√¿ ‚¿ ‚^¿ ‚d¿ ‚≥¿ ‚Ï¿ ‚Ú¿ „!¿ „'¿ „t¿ „õ¿ „°¿ „ø¿ „≈¿ ‰¿ ‰_¿ ‰®¿ ‰ˆ¿ Â(¿ Â.¿ Ây¿ Â¥¿ Â∫¿ Ê¿ ÊF¿ ÊL¿ Êö¿ Ê…¿ Êœ¿ Êﬂ¿ ÊÂ¿ Á ¿ Á-¿ Á>¿ ÁQ¿ Áå¿ Áú¿ Á“¿ ÁÂ¿ ÁÔ¿ Ë¿ Ëb¿ Ëh¿ Ël¿ Ëm¿ Ë∏¿ Ëæ¿ È¿ È¿ È"¿ ÈF¿ Èp¿ Èü¿ È‰¿ Í,¿ Í}¿ Í§¿ Í™¿ Í˘¿ Î*¿ Î0¿ Î{¿ Î»¿ Ï¿ Ïb¿ Ïû¿ Ï§¿ ÏÙ¿ ÌC¿ Ìé¿ Ìî¿ Ì‚¿ Ó+¿ Óz¿ Ó»¿ Ô¿ Ôc¿ Ô¢¿ Ô®¿ Ô√¿ Ô…¿ ¿ ¿ g¿ µ¿ Ò¿ Ò¿ Ò ¿ Òk¿ Òº¿ Ú¿ Ú\¿ Ú®¿ Ú‚¿ ÚË¿ Û9¿ ÛÉ¿ Û”¿ ÛŸ¿ Ù)¿ Ùw¿ Ùπ¿ ı¿ ıY¿ ır¿ ıx¿ ıÜ¿ ı∞¿ ıﬂ¿ ˆ¿ ˆ¿ ˆ4¿ ˆ:¿ ˆL¿ ˆÜ¿ ˆ¶¿ ˆ€¿ ˆË¿ ˆÚ¿ ˆ˙¿ ˜¿ ˜
¿ ˜[¿ ˜¶¿ ˜ˆ¿ ¯C¿ ¯ê¿ ¯›¿ ¯¿ ¯ˆ¿ ˘C¿ ˘ì¿ ˘Æ¿ ˘¥¿ ˘¬¿ ˘¿ ˙/¿ ˙5¿ ˙P¿ ˙_¿ ˙g¿ ˙m¿ ˙°¿ ˙∞¿ ˙¬¿ ˙Ô¿ ˚¿ ˚M¿ ˚Z¿ ˚d¿ ˚l¿ ˚v¿ ˚|¿ ˚Õ¿ ¸¿ ¸j¿ ¸∑¿ ¸ÿ¿ ¸ﬁ¿ ¸Ó¿ ¸Ù¿ ˝L¿ ˝Y¿ ˝¿ ˝Ä¿ ˝ø¿ ˝≈¿ ˛¿ ˛P¿ ˛Ö¿ ˛ã¿ ˛Ÿ¿ ˇ(¿ ˇ.¿ ˇx¿ ˇƒ¿ ¿ [¿ Ç¿ è¿ †¿ √¿ ƒ¿ –¿¿@¿P¿”¿Ê¿¿D¿™¿Æ¿∞¿±¿ ¿¿¿\¿t¿x¿Ü¿ä¿÷¿¸¿5¿~¿´¿˜¿!¿n¿°¿Ÿ¿¿?¿x¿y¿©¿Ø¿„¿5¿à¿—¿Ê¿¸¿˛¿ˇ¿L¿g¿k¿ß¿ı¿	5¿	9¿	â¿	ª¿	ø¿	”¿	◊¿
&¿
k¿
o¿
{¿
º¿
”¿
Ê¿¿ ¿*¿.¿E¿I¿Y¿ë¿Ì¿¿6¿ä¿¥¿æ¿∆¿ ¿⁄¿¿¿#¿3¿7¿E¿I¿Ü¿Õ¿¿W¿Ñ¿“¿¿H¿î¿Â¿-¿l¿m¿y¿ø¿¿¿¿¿"¿h¿∏¿‰¿Í¿6¿d¿°¿ª¿ÿ¿¿¿¿T¿ç¿ì¿·¿¿<¿B¿[¿a¿∞¿€¿'¿i¿o¿}¿è¿Ã¿÷¿‹¿,¿y¿ ¿ˆ¿˜¿E¿~¿Ñ¿“¿˜¿˝¿N¿í¿Ï¿Ì¿1¿V¿Å¿¶¿≠¿«¿‰¿Â¿Y¿w¿ï¿Ø¿ˇ¿	¿¿.¿§¿Ø¿¿¿'¿ù¿¶¿À¿ﬁ¿L¿W¿y¿ì¿¿¿¿"¿#¿u¿{¿¿¿˛¿N¿ù¿¬¿»¿ ¿ b¿ ≥¿!¿!S¿!Y¿!•¿!ﬁ¿"+¿"I¿"V¿"â¿"ä¿"◊¿"Ô¿"ı¿#A¿#å¿#í¿#¢¿#®¿#¯¿$¿$¿$>¿$@¿$A¿$í¿$ñ¿$Ÿ¿$›¿%.¿%z¿%~¿%Õ¿&	¿&¿&P¿&T¿&h¿&l¿&∑¿&ª¿&«¿&ı¿'¿' ¿'=¿'[¿'e¿'i¿'Ç¿'Ü¿'æ¿(¿(¿(¿(D¿(x¿(π¿(—¿(Ÿ¿(›¿(Ì¿)=¿)C¿)K¿)[¿)_¿)í¿)ñ¿)Ê¿*¿*W¿*†¿*§¿*ı¿+D¿+í¿+◊¿+€¿,*¿,z¿,©¿,≠¿,˚¿-L¿-ú¿-Ê¿.+¿.v¿.ë¿.ï¿.¬¿.∆¿/¿/f¿/w¿/{¿/è¿/ì¿/„¿0¿0¿0)¿0T¿0¿0†¿0§¿0¥¿0ﬂ¿0¯¿1¿14¿1P¿1Ö¿1¢¿1¬¿2¿2"¿23¿2B¿2O¿2Z¿2b¿2h¿2p¿2Ä¿2Ñ¿2ò¿2ú¿2Ê¿36¿3i¿3m¿3y¿3§¿3®¿3ÿ¿3˛¿4¿4¿4=¿4V¿4q¿4í¿4´¿4«¿5¿5¿5'¿52¿5:¿5@¿5H¿5ó¿5õ¿5©¿5≠¿5¯¿6!¿6m¿6ü¿6÷¿7¿7h¿7}¿7Õ¿7ˆ¿8+¿8|¿8ƒ¿9¿9¿9¿9M¿9N¿9ü¿9•¿9ˆ¿:G¿:ñ¿:ﬂ¿:Ú¿:¯¿;H¿;ò¿;‰¿;Ú¿;ˇ¿<?¿<A¿<B¿<í¿<‹¿<Ì¿<Ò¿=<¿=`¿=d¿=§¿=Ú¿>A¿>ã¿>µ¿>π¿?¿?9¿?ä¿?“¿?˝¿?˛¿@L¿@X¿@c¿@ä¿@ã¿@À¿A¿A8¿A>¿Aè¿A—¿B¿BK¿By¿BÜ¿Bë¿B ¿BÀ¿C¿Cg¿Cå¿Cí¿C‡¿D*¿Du¿D•¿D‘¿D·¿E:¿E;¿Eâ¿E”¿F	¿F¿F]¿F_¿F`¿F¥¿Fœ¿F”¿G ¿Gc¿G¥¿G¸¿H+¿H,¿H8¿HÑ¿HÜ¿Há¿H€¿H˛¿I¿IC¿Ië¿I‚¿J¿J¿Jj¿J¥¿K¿KM¿Kè¿Kê¿K¿¿K∆¿K˜¿L¿L¿L¿Lu¿Lw¿Lx¿LÃ¿M¿Mb¿Mn¿Mr¿M©¿M˘¿NB¿Nç¿N—¿N¯¿N¸¿OI¿OM¿O[¿O_¿Oö¿OÁ¿Oˆ¿P7¿Pà¿P¨¿Pı¿Q¿Qu¿Qv¿Qß¿Q≠¿Q˝¿RB¿Rê¿Rü¿R•¿RÔ¿S@¿Së¿Sÿ¿Sﬁ¿SÏ¿T¿TE¿Tx¿T~¿Tõ¿T≥¿T„¿TÒ¿T˚¿U¿U¿U@¿UÉ¿UÆ¿U∏¿U¿¿U ¿U–¿V¿V¿V#¿V[¿Vé¿Vî¿V±¿V…¿W¿WR¿Wå¿Wö¿W§¿W™¿Wº¿WÈ¿X5¿Xi¿Xs¿X{¿XÖ¿X§¿X•¿X±¿Y	¿Y¿Y¿Y¿Y¿Y¿Y3¿Y>¿YH¿YT¿Y_¿Ya¿Yb¿Y|¿Yî¿Y…¿Y ¿YÌ¿Z0¿Z@¿Zr¿Z°¿ZÎ¿Zı¿Z˝¿[¿[¿[F¿[n¿[Ö¿[ç¿[§¿[Ê¿[Í¿[Î¿\¿\¿\b¿\y¿\É¿\Æ¿\æ¿\ﬂ¿\ˆ¿\¸¿] ¿]¿]9¿]z¿]î¿]◊¿^
¿^¿^<¿^O¿^Y¿^]¿^^¿^|¿^í¿^º¿^·¿_ ¿_G¿_M¿_i¿_m¿_n¿_è¿_•¿_Œ¿_Û¿`¿`S¿`W¿`X¿`Ä¿`ñ¿`¶¿`“¿`Â¿`Ô¿a¿a¿a¿a	¿aN¿aR¿a¿aÉ¿a ¿a›¿b¿b¿b_¿bc¿bì¿bó¿b∫¿b˛¿bˇ¿c<¿c@¿c¿c»¿cÃ¿d¿di¿d∂¿e¿e;¿e?¿eã¿eŸ¿f$¿f(¿fw¿f∆¿g¿ge¿g∂¿h¿hT¿h£¿hÔ¿i9¿il¿ip¿iø¿j
¿jS¿j£¿jÏ¿j¿j¸¿k
¿k3¿kd¿k{¿kÆ¿k≈¿kÒ¿l¿l;¿lY¿lï¿l¿¿lÊ¿m¿m<¿mg¿må¿m≥¿mÌ¿n¿nR¿n~¿nƒ¿nÚ¿o*¿oK¿oi¿oÜ¿o°¿o∫¿o—¿oÊ¿o˘¿p
¿p¿p&¿p0¿p9¿p?¿pG¿pK¿põ¿pÍ¿q7¿qX¿q\¿qü¿q£¿qÚ¿r@¿r~¿r–¿s!¿s\¿s`¿sl¿s|¿sß¿s∆¿sÊ¿t*¿tM¿tx¿tÜ¿tì¿tø¿t ¿t“¿t⁄¿tÌ¿tÒ¿u?¿uç¿u´¿u˘¿v¿v¿vY¿vë¿v™¿v´¿vÛ¿w¿w¿wj¿w∏¿wÃ¿w“¿x ¿x&¿xc¿xw¿xx¿xƒ¿x ¿y¿yI¿yö¿yº¿z¿z&¿z,¿z}¿zæ¿zÍ¿z¿{(¿{D¿{E¿{â¿{◊¿|$¿|@¿|F¿|ë¿|›¿}"¿}q¿}û¿}§¿}Ù¿~D¿~ì¿~⁄¿~Ï¿~Ú¿>¿`¿f¿≥¿ˇ¿ÄO¿Äu¿Äô¿Äö¿Ä‹¿Ä‚¿Å.¿Åz¿Å√¿ÅÏ¿ÅÚ¿Ç>¿Ç`¿Çf¿Ç∑¿É¿ÉT¿É°¿Éß¿ÉÙ¿Ñ@¿Ñê¿Ñ∂¿Ñ»¿Ñ…¿Ö¿ÖL¿ÖR¿Ös¿Öy¿Ö√¿Ü¿ÜH¿ÜN¿Ü¢¿Ü–¿á+¿á,¿á|¿á¥¿á∫¿à¿àT¿à°¿à¿â1¿â7¿ââ¿â‘¿âÊ¿âÏ¿ä4¿äÄ¿äÕ¿ã¿ãl¿ãª¿ã’¿ã€¿å+¿åz¿åÀ¿ç¿çL¿çR¿ç†¿çÌ¿é!¿é'¿éx¿é£¿é©¿é˘¿èE¿èñ¿è·¿ê¿ê¿êE¿êå¿ê–¿êˆ¿ë¿ëc¿ëd¿ë¥¿ëË¿ëÓ¿í>¿íã¿í‹¿ì¿ì¿ìn¿ìΩ¿î¿î[¿îè¿îï¿î„¿ï0¿ïd¿ïj¿ï™¿ïÎ¿ïÏ¿ñA¿ñà¿ñé¿ñæ¿ñƒ¿ó¿ó[¿óa¿ó∞¿óÊ¿óÏ¿ò<¿òã¿ò≈¿ô¿ôh¿ôì¿ô®¿ö¿ö¿öV¿öÇ¿öà¿ö’¿õ"¿õs¿õΩ¿ú¿úZ¿úß¿ú¯¿ùH¿ùî¿ùö¿ùÊ¿û1¿ûj¿ûp¿û¬¿ü¿ü\¿üØ¿üµ¿†¿†"¿†7¿†o¿†p¿†¡¿†Ú¿†¯¿°?¿°ê¿°·¿¢5¿¢à¿¢‘¿£ ¿£D¿£J¿£ó¿£Ê¿§7¿§i¿§o¿§ª¿•¿•?¿•E¿•ó¿•„¿¶1¿¶~¿¶ì¿¶ô¿¶Ø¿¶µ¿¶√¿ß¿ß%¿ß7¿ßh¿ßi¿ßª¿ßÏ¿ßÚ¿®=¿®ï¿®·¿©¿©¿©b¿©s¿©à¿©Ω¿©æ¿™¿™K¿™Q¿™ü¿™¿´A¿´ï¿´‰¿¨4¿¨Å¿¨∏¿¨æ¿≠
¿≠U¿≠é¿≠î¿≠Ê¿Æ2¿ÆÄ¿Æ‘¿ÆÈ¿Ø(¿Ø)¿Øz¿Ø±¿Ø∑¿Ø¸¿∞K¿∞ö¿∞ﬂ¿∞Â¿±¿± ¿±s¿±y¿±À¿≤¿≤f¿≤±¿≤∆¿≥¿≥¿≥1¿≥7¿≥y¿≥ƒ¿¥¿¥b¿¥í¿¥ò¿¥Ê¿µ2¿µ@¿µF¿µë¿µ›¿µ„¿∂4¿∂~¿∂œ¿∑ ¿∑9¿∑N¿∑Å¿∑Ç¿∑≈¿∑À¿∏¿∏e¿∏{¿∏≥¿∏¥¿π¿π¿π`¿πf¿πv¿π|¿π”¿∫F¿∫G¿∫û¿∫§¿∫Ò¿ªc¿ªd¿ª≥¿ªÿ¿ªﬁ¿º-¿ºÜ¿ºá¿º—¿ºÏ¿ºÚ¿Ω>¿Ωu¿Ωw¿Ωx¿Ω•¿Ω©¿Ωˆ¿æG¿æî¿æ∫¿ææ¿ø
¿øJ¿øk¿øo¿øª¿øø¿øÓ¿¿3¿¿D¿¿H¿¿\¿¿™¿¿Ù¿¡8¿¡<¿¡à¿¡ò¿¡´¿¡Ÿ¿¡ﬂ¿¬+¿¬w¿¬¡¿√¿√+¿√q¿√¬¿√√¿ƒ¿ƒ¿ƒ=¿ƒ>¿ƒÅ¿ƒÇ¿ƒ∂¿ƒ„¿ƒ‰¿≈/¿≈_¿≈e¿≈¥¿≈∫¿∆¿∆¿∆D¿∆E¿∆à¿∆é¿∆÷¿«¿« ¿«N¿«T¿«¢¿«Ÿ¿«ﬂ¿»
¿»¿»Z¿»©¿»˘¿…I¿…\¿…y¿…z¿…∆¿  ¿ +¿ N¿ ^¿ å¿À¿À¿À9¿Àq¿À–¿Ã&¿ÃB¿Ã•¿Ã–¿Ã›¿ÃÚ¿ÕP¿Õú¿ÕÓ¿Õ˚¿Œ¿Œ¿Œ"¿Œ,¿ŒL¿Œ^¿Œé¿œC¿œM¿œr¿œ¨¿œˇ¿–¿–p¿–Ω¿–Ã¿–⁄¿–‰¿–˘¿—¿—0¿—>¿—D¿—â¿—¥¿—œ¿—’¿—ˆ¿“¿“'¿“U¿“í¿“ö¿“≠¿“∑¿“ª¿“º¿“‹¿”¿”¿”M¿”S¿”~¿”™¿”…¿”Ó¿”Ô¿‘?¿‘a¿‘g¿‘∑¿‘ÿ¿’¿’)¿’9¿’Z¿’m¿’w¿’Å¿’ì¿’£¿’µ¿’ÿ¿’Ì¿’˘¿’ˇ¿÷&¿÷*¿÷+¿÷w¿÷√¿÷˘¿÷ˇ¿◊M¿◊ç¿◊ì¿◊‡¿ÿ,¿ÿ|¿ÿæ¿ÿË¿ÿÓ¿Ÿ<¿Ÿã¿Ÿº¿Ÿ¬¿Ÿ˜¿Ÿ˝¿⁄7¿⁄=¿⁄Ñ¿⁄—¿€¿€,¿€Y¿€ö¿€–¿€ﬁ¿€‰¿‹¿‹(¿‹8¿‹Z¿‹π¿‹¡¿‹‚¿‹ˇ¿›¿›¿›5¿›h¿›z¿›¨¿›·¿ﬁ¿ﬁE¿ﬁx¿ﬁ°¿ﬁÆ¿ﬁ∏¿ﬁÕ¿ﬁŸ¿ﬁ˙¿ﬂ¿ﬂ5¿ﬂ>¿ﬂD¿ﬂN¿ﬂy¿ﬂó¿ﬂ∫¿ﬂÂ¿ﬂ˘¿‡8¿‡f¿‡}¿‡ã¿‡π¿‡«¿‡›¿‡Ò¿·¿·@¿·Å¿·Ø¿·»¿·ÿ¿·‚¿·Í¿‚¿‚@¿‚n¿‚É¿‚¶¿‚›¿„¿„¿„Å¿„Ω¿‰¿‰2¿‰ó¿‰Ò¿Â¿Â¿ÂÇ¿ÂÈ¿ÊN¿Ê¢¿Ê≥¿Êﬂ¿Á¿Á+¿Áf¿Áw¿Á£¿Ë¿Ë3¿Ën¿Ë¿Ëè¿Ëõ¿Ë≤¿Ë¿¿È$¿ÈE¿È|¿Èí¿È÷¿Í7¿ÍE¿Í^¿Ín¿Íì¿Í¿¿ÍÔ¿Í¸¿Î¿Î¿Î1¿ÎN¿Îj¿Î´¿Î∫¿ÎÕ¿Ï¿ÏG¿Ïá¿Ï∏¿Ì)¿Ì<¿Ó¿Ó'¿Ó4¿Ó>¿Ó_¿Óá¿Óë¿Ó•¿Ó¯¿Ô&¿ÔV¿ÔÑ¿Ô≈¿(¿Å¿‰¿ÒG¿Òß¿Ú¿Ú>¿ÚV¿Úb¿Úl¿Út¿ÚÜ¿Û¿Û=¿ÛÅ¿ÛÓ¿Ùh¿Ùv¿ÙÄ¿Ùï¿Ù°¿Ù±¿ÙÁ¿ı¿ı3¿ı;¿ıY¿ıÖ¿ı∞¿ıÀ¿ıÒ¿ı˘¿ˆ¿ˆ)¿ˆI¿ˆl¿ˆê¿ˆΩ¿ˆ«¿ˆ‹¿ˆË¿ˆÓ¿˜¿˜¿˜¿˜z¿˜{¿˜‰¿¯O¿¯Ø¿¯Â¿¯¯¿¯¸¿¯˝¿˘,¿˘~¿˘Ç¿˘É¿˘–¿˘—¿˙)¿˙c¿˙q¿˙»¿˙…¿˚¿˚:¿˚ä¿˚ß¿˚¨¿¸¿¸>¿¸L¿¸”¿¸‘¿˝!¿˝\¿˝ì¿˝î¿˝‡¿˝¿˛+¿˛>¿˛H¿˛L¿˛M¿˛â¿˛ô¿˛ ¿ˇ¿ˇT¿ˇÖ¿ˇç¿ˇ†¿ˇ™¿ˇ—¿ˇ’¿ˇ÷¿ ¿ $¿ {¿ ∏¿¿¿ ¿*¿X¿~¿Ñ¿à¿â¿⁄¿Í¿1¿k¿~¿à¿å¿ç¿π¿…¿¿u¿±¿¿0¿:¿v¿¬¿¿#¿J¿^¿j¿∂¿¿C¿r¿ø¿¿T¿â¿≥¿Ÿ¿¿Q¿ú¿æ¿	"¿	A¿	`¿	√¿	÷¿	Ë¿	˝¿
=¿
à¿
™¿¿]¿}¿‡¿Û¿¿¿`¿Æ¿¸¿"¿L¿á¿¥¿‡¿Ú¿¿¿<¿w¿§¿–¿‚¿Ù¿¿¿.¿U¿a¿m¿w¿£¿∂¿¿¿ƒ¿≈¿Ô¿ˇ¿/¿Ç¿∆¿Ù¿6¿m¿£¿Ê¿>¿_¿ë¿õ¿£¿ ¿Í¿1¿Ö¿º¿ˆ¿E¿ï¿‰¿5¿n¿‰¿Ó¿j¿ù¿•¿∏¿¬¿∆¿«¿¿)¿/¿c¿i¿∫¿◊¿›¿-¿Z¿á¿ü¿∏¿Í¿¿˙¿M¿_¿m¿õ¿«¿¿{¿π¿+¿u¿›¿Ì¿˚¿¿l¿ ¿¿I¿b¿ç¿ü¿Ø¿Ë¿'¿I¿o¿à¿Û¿¿¿é¿‡¿ L¿ ã¿ €¿ Ù¿!'¿!9¿!I¿!Ü¿!Õ¿!Ô¿"¿"6¿"≠¿"ø¿"—¿"˝¿#>¿#z¿#ø¿$¿$^¿$¶¿$Ï¿%>¿%ã¿%ﬁ¿&)¿&ï¿&”¿'#¿'u¿'ú¿'æ¿(2¿(•¿) ¿)2¿)ß¿*-¿*•¿+¿+à¿+¡¿+ı¿,Z¿,m¿,¿,ç¿,ô¿,≠¿- ¿-
¿-¿-+¿-D¿-í¿-›¿-˝¿.Q¿.a¿.|¿.¢¿.™¿.∞¿.¥¿.µ¿/¿/P¿/°¿/¿¿/∆¿0¿04¿0M¿0ê¿0ñ¿0†¿0ƒ¿0Ê¿0ˇ¿1¿1*¿1P¿1X¿1^¿1b¿1d¿1e¿1≤¿1∆¿1 ¿1ÿ¿2*¿2T¿2ù¿2π¿2ø¿3¿3V¿3à¿3â¿3ï¿3∑¿4¿4¿4
¿4¿4%¿4U¿4V¿4y¿4ñ¿4ó¿4–¿5	¿5¿5¿5M¿5Q¿5S¿5T¿5Ö¿5´¿5⁄¿6	¿6¿6¿6U¿6Y¿6©¿6˙¿7K¿7ñ¿7Ê¿7˝¿8¿8O¿8õ¿8ü¿8 ¿8Œ¿9¿9g¿9∑¿:¿:N¿:õ¿:Ë¿:˜¿;B¿;ë¿;‡¿<1¿<¿<œ¿=¿=Z¿=™¿=˙¿>G¿>ò¿>≈¿?¿?]¿?®¿?Ó¿@?¿@å¿@Ÿ¿A'¿Ax¿Aú¿AÍ¿B7¿BG¿Bë¿B¬¿C¿CX¿C^¿Cü¿C∏¿C—¿C˝¿D5¿D^¿D}¿Dì¿Dú¿D¢¿D¶¿Dß¿Dª¿D„¿D‰¿E¿E¿E\¿Eß¿E‡¿EÊ¿F5¿FÉ¿F—¿G ¿G&¿Gs¿G¬¿H¿HX¿H^¿H®¿HÍ¿H¯¿I¿IP¿Iå¿Iç¿I›¿IÔ¿Iı¿JF¿Jñ¿JÆ¿JÀ¿J‹¿J›¿K*¿Kv¿Kà¿Kò¿K“¿L(¿L0¿LC¿LM¿L`¿Ld¿Lw¿Lx¿L…¿Lﬂ¿M
¿M2¿Mi¿M~¿Më¿Mó¿MÊ¿N¿N*¿NI¿Ni¿No¿N¢¿N∞¿N¥¿Nµ¿O ¿OU¿O™¿P¿P7¿Pc¿Pê¿Pû¿P¢¿P£¿PÕ¿P”¿Q¿Qi¿Qπ¿R¿RU¿Rã¿Ró¿R∏¿RÀ¿RÃ¿Rÿ¿Rˇ¿S ¿S.¿S4¿Sz¿S ¿SÊ¿T¿T¿TR¿Te¿To¿TÖ¿Tâ¿Tä¿T∑¿TΩ¿U¿US¿Un¿Uâ¿Uô¿U◊¿UÍ¿UÙ¿V	¿V¿V¿VK¿VW¿Vz¿Vê¿Vë¿V∆¿W¿W2¿W8¿Wá¿W”¿WÛ¿W˘¿XH¿Xò¿X≠¿X≥¿Y¿YU¿Y†¿Y¿Z9¿ZÜ¿Z◊¿[¿['¿[-¿[=¿[C¿[_¿[å¿[¿¿[—¿[ﬁ¿[Ù¿\
¿\.¿\H¿\P¿\T¿\U¿\~¿\õ¿\π¿\ÿ¿\Ì¿\ı¿]¿]¿].¿]2¿]3¿]t¿]z¿]À¿^¿^I¿^O¿^ú¿^Ê¿_3¿_d¿_á¿_§¿_¬¿`¿`¿`F¿`k¿`z¿`∞¿`∏¿`æ¿`œ¿`”¿`‘¿a%¿ae¿ak¿aª¿b¿bO¿bõ¿b»¿bŒ¿c¿cd¿cq¿cù¿c∞¿c‘¿d¿d3¿d;¿dL¿dP¿dQ¿d]¿d∑¿d˙¿e+¿eY¿ew¿eä¿eí¿eì¿e≈¿f¿f'¿fX¿f`¿fa¿fÅ¿f⁄¿fÁ¿g¿gL¿gê¿gö¿g†¿g∏¿gº¿gΩ¿h¿hi¿hÜ¿hò¿i¿i+¿i2¿i6¿i7¿iC¿i∑¿i˙¿i˛¿iˇ¿j¿j~¿j¡¿j≈¿j∆¿j“¿k
¿kU¿k†¿k≥¿kÓ¿kÚ¿kÛ¿l<¿lR¿lì¿lî¿l„¿m¿m¿mY¿mÇ¿mà¿m‘¿n%¿nv¿næ¿nÔ¿n¿o,¿o2¿oÅ¿oë¿oó¿oÂ¿p2¿p¿p¥¿p∫¿q
¿q(¿q.¿q>¿qD¿qx¿q≤¿r¿rQ¿r`¿r¥¿rµ¿rÓ¿r˙¿s.¿s>¿sv¿sã¿sì¿s…¿t¿t&¿tw¿t«¿u¿uG¿uR¿u\¿uf¿uÇ¿uÜ¿uá¿u∆¿uÃ¿v¿vj¿vp¿v¿¿v∆¿w¿wk¿wq¿w¿¿w˙¿x ¿xQ¿x¢¿xÛ¿y>¿yg¿ym¿yæ¿y–¿y÷¿z%¿zs¿zØ¿zµ¿zÂ¿zÎ¿{<¿{ç¿{ﬁ¿|d¿|j¿|ª¿}¿}L¿}ñ¿}‰¿~)¿~/¿~Ä¿~ç¿~´¿~¯¿¿0¿P¿X¿k¿q¿r¿é¿ß¿Ã¿Ä¿Äm¿Ä¿¿Å¿Åe¿Ån¿Å¡¿Ç¿Çr¿Çà¿Çë¿Ç‡¿É,¿É}¿É∆¿Éÿ¿Ñ"¿Ñn¿Ñ≠¿Ñ¬¿ÑŒ¿Ö
¿ÖS¿Öû¿Ö–¿Öı¿Ü#¿Ü-¿ÜG¿Üö¿Üø¿ÜÌ¿Ü˜¿áV¿áw¿áÆ¿áƒ¿à¿àd¿àr¿àã¿àõ¿à¿¿àË¿â¿â$¿â.¿âO¿âp¿âò¿â¢¿âÕ¿â·¿ä¿ä/¿ä=¿äW¿äf¿äÜ¿ä≠¿ä˜¿ãG¿ãz¿ã∞¿ã∏¿ã≈¿å¿å[¿åå¿å¿¿å∆¿å«¿å◊¿åÚ¿ç#¿ç+¿çQ¿ço¿çé¿çÕ¿ç’¿çË¿çÚ¿çÛ¿é¿é¿é¿éL¿éR¿éõ¿éÏ¿è¿è¿èl¿è∏¿ê	¿êT¿êü¿ê¿ë%¿ë+¿ë|¿ëÕ¿í¿íl¿íº¿ì¿ì\¿ì†¿ìÒ¿î ¿î&¿î_¿î¨¿î˙¿ïF¿ïç¿ï€¿ñ¿ñ¿ñ]¿ñ®¿ñÙ¿óC¿óÖ¿óŒ¿ò!¿òl¿òΩ¿ò˙¿ôF¿ôî¿ôÂ¿ô˝¿ö
¿öö¿ö⁄¿ö€¿õ¿õp¿õv¿õw¿õ∏¿õ”¿õÙ¿ú5¿ú;¿ú<¿ú~¿úÕ¿ù¿ù^¿ù_¿ùé¿ùÆ¿ù–¿û¿û:¿û}¿ûƒ¿û≈¿ü¿üf¿üÄ¿üŒ¿†¿†g¿†à¿†Ã¿†Ù¿°8¿°k¿°¶¿°“¿¢¿¢^¿¢§¿¢∑¿¢∏¿¢‘¿¢¿£#¿£W¿£X¿£æ¿£ø¿£€¿£‹¿£ˇ¿§\¿§µ¿§¿•H¿•ó¿•¶¿•Æ¿¶¿¶\¿¶ä¿¶™¿¶≈¿¶‡¿¶Ê¿¶Á¿ß¿ßh¿ßƒ¿®¿®Z¿®©¿®∏¿®¿¿®ﬁ¿®¸¿©¿©¿©;¿©Å¿©™¿©≈¿©¿™$¿™¿™Ÿ¿™˘¿´&¿´e¿´x¿´ü¿´´¿´µ¿´“¿´⁄¿´‡¿´·¿¨¿¨9¿¨R¿¨ç¿¨™¿¨“¿¨Ì¿≠¿≠<¿≠|¿≠ü¿≠Ï¿Æ¿Æ-¿Æs¿Æí¿Æ†¿Æ¨¿Æ∂¿Ææ¿Ø¿Øx¿Øº¿∞,¿∞Z¿∞z¿∞ï¿∞õ¿∞ú¿∞¡¿∞ˆ¿±+¿±Ç¿±±¿±·¿±‚¿≤¿≤e¿≤°¿≤›¿≥!¿≥\¿≥ò¿¥¿¥F¿¥¢¿¥–¿¥¿µ¿µ&¿µ,¿µ-¿µr¿µ≠¿µÌ¿∂?¿∂d¿∂n¿∂v¿∂|¿∂ ¿∂‚¿∂Ê¿∂Á¿∑1¿∑7¿∑à¿∑‘¿∏"¿∏W¿∏]¿∏≠¿∏—¿∏◊¿π&¿πv¿π≠¿π‚¿πË¿∫7¿∫k¿∫|¿∫≠¿∫Á¿ª¿ªV¿ªp¿ªÜ¿ªõ¿ªÀ¿º¿º¿ºh¿ºØ¿º„¿Ω ¿Ω¿Ω!¿ΩB¿Ω^¿Ωä¿Ωê¿Ω™¿Ω»¿ΩÃ¿ΩÕ¿æ¿æ!¿æ^¿æb¿æc¿æõ¿æ°¿æÈ¿ø8¿øp¿øv¿øæ¿øœ¿ø˚¿¿4¿¿n¿¿z¿¿¨¿¿À¿¿˚¿¡¿¡S¿¡§¿¡ı¿¬@¿¬i¿¬y¿¬–¿√¿√¿√"¿√;¿√?¿√@¿√É¿√â¿√⁄¿ƒ+¿ƒZ¿ƒg¿ƒ£¿ƒ‹¿ƒˇ¿≈!¿≈D¿≈ä¿≈™¿≈≈¿≈Õ¿≈”¿≈Â¿≈È¿≈Í¿∆;¿∆o¿∆|¿∆ç¿∆≤¿∆Î¿«¿«J¿«_¿«c¿«d¿«ã¿«∫¿«‹¿«˙¿» ¿»K¿»U¿»[¿»_¿»`¿»í¿»ò¿»–¿…
¿…Z¿…é¿…î¿…ø¿…›¿ ¿ #¿ +¿ =¿ A¿ B¿ ñ¿ ú¿ ‘¿À¿À^¿Àé¿Àî¿À‰¿Ã¿Ã+¿ÃO¿Ãx¿ÃÄ¿Ãï¿Ãô¿Ãö¿Ãﬂ¿Õ4¿Õà¿Õ÷¿Œ'¿Œt¿Œ ¿Œ¸¿œ¿œ*¿œ0¿œh¿œ{¿œÅ¿œë¿œ√¿–;¿–C¿–V¿–`¿–ç¿–ß¿–π¿–◊¿—¿—r¿—¬¿“¿“v¿”¿”É¿”ë¿”õ¿”ı¿‘¿‘¿‘!¿‘6¿‘B¿‘e¿‘å¿‘í¿‘∑¿‘Â¿‘˘¿‘˝¿‘˛¿’I¿’j¿’p¿’π¿÷¿÷¿÷¿÷h¿÷∑¿◊¿◊Y¿◊_¿◊Ø¿◊µ¿ÿ¿ÿ3¿ÿ@¿ÿ^¿ÿõ¿ÿˆ¿Ÿ¿ŸF¿ŸX¿Ÿò¿Ÿ¿Ÿ˙¿⁄¿⁄¿⁄<¿⁄`¿⁄ã¿⁄î¿⁄ö¿⁄õ¿⁄•¿⁄À¿⁄È¿€3¿€S¿€¿€ï¿€¡¿€⁄¿€Í¿€˙¿‹3¿‹K¿‹Ø¿‹¡¿‹Í¿›¿›G¿›U¿›j¿›v¿›…¿›ı¿ﬁ¿ﬁ¿ﬁ'¿ﬁa¿ﬁs¿ﬁõ¿ﬁ∞¿ﬁº¿ﬁ·¿ﬂ%¿ﬂ&¿ﬂ=¿ﬂM¿ﬂl¿ﬂí¿ﬂö¿ﬂ†¿ﬂ§¿ﬂ•¿ﬂ’¿ﬂ˚¿‡¿‡&¿‡K¿‡i¿‡q¿‡Ω¿‡–¿‡⁄¿‡ﬁ¿‡ﬂ¿·,¿·V¿·\¿·¨¿·˝¿‚"¿‚(¿‚h¿‚n¿‚ª¿„	¿„Z¿„©¿„¿„˝¿‰%¿‰H¿‰b¿‰Ç¿‰◊¿‰Á¿Â¿ÂF¿Ââ¿Âì¿Âõ¿ÂÆ¿Â∏¿Âº¿ÂΩ¿Ê¿ÊX¿Ê]¿Êµ¿ÊÔ¿Ê˝¿Áb¿Ác¿Á≤¿ÁÓ¿ÁÙ¿ËA¿Ë`¿Ëf¿Ë¥¿È¿ÈQ¿Èd¿Èj¿È∏¿ÈŸ¿ÈÊ¿È˜¿Í¿Íg¿Í±¿Íˇ¿ÎJ¿Îô¿Î«¿Î◊¿Ï¿Ï<¿ÏD¿ÏW¿Ïa¿Ïe¿Ïf¿Ï§¿Ïﬂ¿Ïı¿Ì¿Ì7¿Ìz¿ÌÇ¿Ìï¿Ìü¿Ì¡¿Ì·¿Ó¿Ó;¿Ó?¿Ó@¿Óv¿Óπ¿Ó—¿Ô¿ÔC¿ÔG¿ÔH¿Ôé¿Ôî¿Ô‰¿5¿~¿Œ¿‘¿Ò$¿Ò*¿Òy¿Ò°¿Ò≤¿Ò∆¿Ú¿Ú¿Úí¿Ú¬¿Û¿ÛV¿Ûr¿Ûõ¿Ûµ¿Û”¿ÛÂ¿Ù
¿Ù¿Ù+¿ÙJ¿ÙP¿ÙT¿ÙU¿Ùõ¿Ù°¿ÙÒ¿ıB¿ıê¿ı€¿ˆ,¿ˆG¿ˆM¿ˆÖ¿ˆã¿ˆ€¿ˆ·¿˜.¿˜X¿˜i¿˜¿˜∏¿¯¿¯W¿¯ô¿¯∆¿¯Œ¿˘¿˘m¿˘Ω¿˙¿˙Z¿˙v¿˙|¿˙õ¿˙Õ¿˙—¿˙“¿˚(¿˚.¿˚a¿˚r¿˚é¿˚…¿˚Õ¿˚Œ¿¸¿¸¿¸j¿¸∏¿˝	¿˝Q¿˝W¿˝¶¿˝º¿˝¬¿˛¿˛]¿˛ë¿˛ó¿˛Á¿˛Ì¿ˇ:¿ˇa¿ˇr¿ˇÖ¿ˇ¿¿ !¿ <¿ h¿ Ø¿ µ¿ ˝¿ ¿<¿j¿p¿∫¿Ó¿¿¿M¿Q¿R¿¢¿Û¿.¿4¿Ö¿÷¿‹¿*¿z¿≈¿¿d¿Ø¿˛¿J¿Z¿`¿≠¿˝¿G¿ò¿Ÿ¿ﬂ¿+¿K¿â¿ä¿ñ¿ª¿À¿	¿	<¿	Ñ¿	†¿	¿
,¿
t¿
ƒ¿
Í¿
˜¿X¿d¿l¿¿â¿¢¿¶¿ß¿≥¿∆¿÷¿¿_¿é¿∆¿¿"¿s¿Ø¿ˆ¿¿V¿b¿j¿ç¿≈¿˛¿¿l¿º¿¿Z¿û¿´¿ƒ¿Ÿ¿)¿{¿œ¿!¿B¿O¿h¿ª¿«¿œ¿‚¿Ï¿'¿7¿Y¿ë¿’¿Í¿=¿í¿Ê¿9¿o¿|¿œ¿€¿„¿¿E¿Ö¿ö¿›¿-¿z¿¿¿¿-¿:¿ç¿⁄¿Ê¿Ó¿¿N¿ß¿º¿¿d¿µ¿Ê¿Û¿F¿ì¿ü¿ß¿—¿Î¿#¿Ö¿ö¿Ï¿?¿é¿‡¿*¿7¿ä¿Í¿ˆ¿˛¿ ¿X¿ø¿‘¿ .¿ ã¿ Â¿!<¿!b¿!o¿!¬¿""¿"7¿"ë¿"Ÿ¿"Ê¿"Ú¿"˙¿#¿#¿#<¿#\¿#b¿#s¿#w¿#x¿#π¿#·¿$¿$¿$C¿$S¿$å¿$ƒ¿%¿%1¿%Ç¿%ô¿%¶¿%ª¿&
¿&j¿&©¿&∂¿&¬¿& ¿&›¿&Á¿&¯¿&¸¿&˝¿'W¿'d¿'¶¿'Ë¿'È¿'ı¿(Q¿(Ñ¿(¶¿(’¿)¿)¿)	¿)¿)l¿)•¿*¿*$¿*j¿*p¿*ò¿*©¿*≠¿*Æ¿*∫¿*¸¿+C¿+G¿+H¿+T¿+Ø¿+Ë¿,K¿,`¿,d¿,e¿,∏¿,’¿,€¿-2¿-Ü¿-ò¿-û¿-Æ¿.¿.¿.0¿.d¿.h¿.i¿.á¿.¿¿.ˆ¿.˙¿.˚¿/¿/@¿/y¿/ö¿/›¿0 ¿0¿0)¿0-¿0.¿0:¿0|¿0µ¿0÷¿0ı¿15¿1D¿1L¿1o¿1u¿1¡¿1Î¿1Ô¿1¿1¸¿2B¿2{¿2ú¿2√¿2‚¿3"¿3G¿3O¿3r¿3x¿3¢¿3¶¿3ß¿3≥¿3Û¿4,¿4M¿4l¿4∑¿4‚¿4Í¿5¿5¿5$¿5(¿5)¿55¿5w¿5∞¿5—¿6¿6(¿6.¿62¿63¿6k¿6q¿6«¿7¿7i¿7ñ¿7Â¿8¿80¿8Q¿8±¿8˘¿9¿9¿9¿9R¿9b¿9ó¿9œ¿9Á¿:-¿:P¿:]¿:µ¿: ¿;¿;5¿;Z¿;|¿;ï¿;È¿;ˆ¿<¿<
¿<¿<'¿<8¿<<¿<=¿<Ñ¿<ä¿<ø¿<Í¿=¿=/¿=b¿=â¿=§¿=™¿=¬¿=›¿=„¿>¿>
¿>¿>Z¿>`¿>±¿>ﬂ¿?¿?<¿?Y¿?t¿?ã¿?¶¿?¨¿?æ¿?¬¿?√¿?œ¿@¿@C¿@G¿@H¿@|¿@à¿@Ê¿@Á¿@Û¿AH¿As¿AÖ¿Aò¿A¨¿A≥¿A∑¿A∏¿Aƒ¿B	¿B4¿B|¿B¥¿C¿C¿Ce¿CÏ¿D¿Dd¿Dõ¿D∆¿E¿EG¿EÑ¿E”¿FD¿FW¿F‡¿FÊ¿FÍ¿FÎ¿F˜¿G)¿Gi¿Gç¿Gº¿Gƒ¿GŸ¿G›¿Gﬁ¿H'¿H-¿Hp¿H∫¿H·¿H˝¿I¿I¿Ib¿IÆ¿IÀ¿IÃ¿J¿J'¿J(¿Jv¿Jó¿Jù¿J„¿K*¿Kx¿Kê¿K™¿K‰¿L¿L)¿L/¿LJ¿LÉ¿Lì¿L∂¿LÔ¿M¿MZ¿Mq¿M{¿M¿¿N¿N+¿Nó¿NÔ¿OF¿Oú¿OÒ¿PD¿Ps¿PÄ¿P‡¿PÎ¿Q"¿Q¡¿QÀ¿Q˛¿R+¿Rc¿R¡¿R›¿S3¿Sc¿Sp¿S–¿S‹¿S‰¿S˜¿T¿T¿T ¿T&¿T9¿T\¿T`¿Ta¿TØ¿T¡¿T«¿U¿Ub¿Uú¿U¢¿UÔ¿V?¿Vs¿Vy¿Vó¿Vù¿V≥¿Vπ¿W	¿WV¿Wî¿Wö¿WÈ¿X7¿Xá¿X ¿X–¿Y ¿Yq¿Y¬¿YÈ¿YÔ¿Z¿Z¿Zk¿Zì¿Zô¿ZË¿[¿[$¿[p¿[ü¿[•¿[˛¿\¿\¿\¿\m¿\π¿]¿]K¿]ê¿]ñ¿]·¿^-¿^3¿^}¿^Õ¿_¿_l¿_§¿_—¿_◊¿`!¿`o¿`ï¿`õ¿`·¿a1¿aÄ¿aç¿aì¿a„¿b/¿b{¿b´¿b±¿b ¿b–¿c ¿cX¿c^¿cÆ¿c˝¿dN¿dö¿dﬂ¿dÂ¿e0¿ez¿e∆¿f¿fa¿f±¿f˚¿gB¿gí¿g·¿h-¿h3¿h}¿hÕ¿i¿il¿i∫¿j¿j¿ja¿j•¿jÓ¿k¿k3¿km¿kª¿k…¿kœ¿kﬂ¿l¿lH¿lh¿lê¿l≤¿l√¿lÌ¿l˜¿lˇ¿m¿m¿mU¿m{¿m¢¿m≤¿mÙ¿n"¿n5¿n?¿nI¿na¿nq¿nÉ¿n±¿nÍ¿o.¿oC¿oO¿oU¿oj¿on¿oo¿oò¿oû¿oÂ¿oÎ¿p'¿p4¿pE¿p_¿ps¿pw¿py¿pz¿p¿¿p„¿pÛ¿q¿q/¿qJ¿qP¿qQ¿qh¿qi¿qu¿q√¿r¿r2¿rU¿rû¿r§¿r≈¿r÷¿r⁄¿r‹¿r›¿s)¿s@¿sD¿så¿sê¿sû¿s¢¿sÈ¿t¿tR¿t°¿t∂¿u¿u¿u4¿u8¿uÑ¿u’¿v!¿v\¿v`¿vå¿vê¿v§¿v¯¿w*¿w.¿wl¿wp¿wΩ¿wÕ¿w—¿wﬂ¿w„¿x.¿xt¿x√¿xﬂ¿y¿yL¿yR¿yü¿yÏ¿z	¿z¿z_¿zÆ¿z◊¿z˜¿{¿{b¿{Å¿{Ç¿{¿¿{∆¿|¿|@¿|Ü¿|£¿|¬¿|√¿|ı¿|˚¿}D¿}ã¿}¨¿}≤¿~¿~P¿~ú¿~Ì¿9¿?¿ç¿Œ¿Ä¿Äd¿Ä´¿Ä±¿Ä˛¿ÅA¿ÅG¿ÅW¿Å]¿Å¶¿Åı¿ÇB¿ÇU¿Ç¶¿Çƒ¿É¿É¿ÉQ¿Éj¿Éz¿É·¿ÉÙ¿É˛¿Ñ.¿Ñô¿Ñù¿Ñû¿ÑŒ¿Ñÿ¿Ñ˚¿Ö¿Ök¿Ö√¿Ü¿Ü¿Ü+¿Ü/¿Ü0¿ÜN¿Üf¿Üã¿Üå¿Üò¿ÜÈ¿ÜÍ¿Üˆ¿á;¿áf¿áá¿á–¿á›¿à<¿àB¿àF¿àH¿àI¿àö¿à∞¿à¥¿à¿àÙ¿â¿â¿âO¿âî¿â·¿ä ¿ä!¿är¿ä|¿äÄ¿ä—¿ä’¿ä„¿äÁ¿ã1¿ãv¿ã√¿å¿å¿åf¿åÖ¿åâ¿åŒ¿ç¿ç%¿ç)¿çw¿çƒ¿é¿é]¿é¶¿éÚ¿éˆ¿è¿è¿èR¿èó¿èŸ¿ê3¿ê4¿êf¿êj¿êÆ¿ê≤¿êˆ¿ë+¿ë/¿ë=¿ëA¿ëä¿ë“¿í¿íp¿íq¿í¢¿í¶¿í˜¿ì4¿ì8¿ìa¿ìì¿ì›¿ìˇ¿î ¿î¿î¿î5¿îA¿îq¿îr¿î~¿î≥¿î¥¿î¿¿îÒ¿ï¿ï/¿ïh¿ï{¿ïó¿ïõ¿ïú¿ï≥¿ñ¿ñ;¿ñ?¿ñ@¿ñè¿ñﬂ¿ó¿ó$¿ór¿ó£¿óØ¿ó‹¿óˆ¿ò	¿ò¿ò%¿òF¿ò[¿òg¿ò~¿òê¿ò≤¿ò«¿ò”¿ô¿ô¿ô:¿ô]¿ôw¿ô•¿ô≤¿ô√¿ô¸¿ö¿öS¿ö`¿ök¿öt¿öÑ¿ö“¿õ¿õV¿õ\¿õf¿õó¿õµ¿õŒ¿õÒ¿ú¿ú9¿úF¿úW¿úê¿ú¨¿úÁ¿úÙ¿úˇ¿ù¿ù7¿ù=¿ùA¿ùB¿ùí¿ùﬁ¿ùÚ¿ùˇ¿û¿û¿û¿ûM¿ûg¿û¿ûÖ¿ûâ¿ûä¿ûñ¿û∫¿û◊¿ûÍ¿ü¿ü¿ü¿ü¿üT¿üÜ¿ü–¿†¿†¿†¿†L¿†M¿†Y¿†Ñ¿†°¿†¬¿†‹¿†‡¿†‚¿†„¿°'¿°X¿°¢¿°À¿°Ú¿¢
¿¢¿¢J¿¢Ç¿¢Ó¿£
¿£]¿£§¿£˘¿§¿§¿§¿§-¿§7¿§[¿§v¿§Ç¿§ü¿§Ó¿•=¿•W¿•^¿•z¿•Ω¿•¡¿•¬¿•Œ¿•ı¿•ˆ¿¶<¿¶B¿¶ã¿¶€¿ß¿ß0¿ßQ¿ßR¿ß^¿ßt¿ßå¿ß§¿ß®¿ß©¿ßµ¿ßÃ¿®¿®]¿®m¿®†¿®ÿ¿©'¿©ä¿©ü¿©ˆ¿™A¿™N¿™Z¿™b¿™u¿™¿™è¿™œ¿™‚¿™Ï¿´¿´¿´Y¿´l¿´v¿´è¿´ì¿´î¿´†¿´∫¿´‹¿¨¿¨'¿¨-¿¨I¿¨M¿¨N¿¨Z¿¨Ñ¿¨°¿¨¬¿¨˜¿≠%¿≠Ç¿≠í¿≠≈¿≠˝¿ÆR¿Æº¿Æ—¿Ø.¿Øy¿ØÜ¿Øí¿Øö¿Ø≠¿Ø∑¿Ø—¿Ø’¿Ø÷¿Ø‚¿Øˆ¿∞¿∞"¿∞s¿∞¡¿∞¯¿±X¿±n¿±r¿±s¿±¿±ï¿±≠¿±≈¿±…¿± ¿±÷¿±È¿±˛¿≤¿≤#¿≤f¿≤{¿≤É¿≤π¿≥¿≥'¿≥å¿≥◊¿≥‚¿≥Ï¿≥ˆ¿¥¿¥[¿¥è¿¥¢¿¥¶¿¥ß¿¥≥¿µ¿µ¿µQ¿µî¿µÃ¿∂u¿∂ë¿∂Ú¿∑K¿∑ù¿∑Ú¿∏¿∏ ¿∏5¿∏•¿π¿πq¿π~¿πä¿πí¿π’¿∫¿∫ö¿∫∂¿ª¿ªc¿ª≤¿ªÓ¿ºI¿ºV¿ºk¿º¡¿Ω¿ΩV¿ΩØ¿Ωƒ¿Ω—¿ΩÊ¿æ ¿æ{¿æ ¿ø¿øW¿ød¿øp¿øx¿øã¿øï¿øÓ¿øÚ¿øÛ¿¿A¿¿ë¿¿‡¿¡¿¡¿¡n¿¡ß¿¡˜¿¬(¿¬O¿¬P¿¬\¿¬}¿¬†¿¬√¿¬«¿¬»¿¬‘¿√)¿√T¿√f¿√y¿√ç¿√£¿√™¿√Æ¿√Ø¿√ª¿ƒ ¿ƒ+¿ƒê¿ƒî¿ƒñ¿ƒó¿ƒÿ¿≈¿≈8¿≈b¿≈c¿≈o¿≈¢¿≈£¿≈Ø¿≈÷¿∆¿∆0¿∆M¿∆n¿∆Ü¿∆†¿∆§¿∆•¿∆ﬁ¿∆‰¿«4¿«¿«û¿«´¿«›¿«˚¿«ˇ¿» ¿»L¿»[¿»a¿»®¿»Ô¿»¸¿…3¿…5¿…6¿…|¿…¡¿ ¿ B¿ C¿ í¿ ù¿ £¿ Ï¿À¿À"¿À2¿ÀB¿ÀR¿Àe¿Ào¿Àá¿Àõ¿À°¿Àˆ¿À˙¿À˚¿Ã1¿Ãb¿Ãå¿Ãµ¿Ãƒ¿Ã˘¿Õ¿Õ¿Õ2¿Õ6¿Õ7¿ÕÜ¿ÕÃ¿Õ„¿ÕÈ¿Œ6¿Œá¿Œ≤¿Œ∏¿œ¿œV¿œ¶¿œº¿œ¬¿–¿–]¿–™¿–∞¿–˝¿—L¿—R¿—Ü¿—œ¿—’¿“¿“ ¿“p¿“¿¿”¿”_¿”Ø¿”˚¿‘-¿‘j¿‘ö¿‘‡¿’¿’¿’¿’¿’H¿’}¿’Å¿’É¿’Ñ¿’ ¿’¯¿÷B¿÷t¿÷u¿÷æ¿÷ø¿÷À¿÷È¿◊"¿◊h¿◊»¿ÿ¿ÿ¿ÿ¿ÿ!¿ÿ=¿ÿM¿ÿp¿ÿÉ¿ÿç¿ÿ´¿ÿØ¿ÿ∞¿ÿÓ¿Ÿ¿Ÿ¿ŸR¿Ÿâ¿Ÿ–¿⁄¿⁄¿⁄O¿⁄à¿⁄°¿⁄ß¿⁄¯¿⁄˛¿€¿€¿€]¿€ô¿€„¿€ı¿‹>¿‹ä¿‹⁄¿› ¿›¿›<¿›_¿›c¿›d¿›Æ¿›¥¿›Ù¿ﬁ+¿ﬁx¿ﬁ∆¿ﬁÃ¿ﬂ¿ﬂ[¿ﬂa¿ﬂ≤¿ﬂ∏¿ﬂ»¿ﬂŒ¿‡¿‡S¿‡ü¿‡±¿‡˙¿·K¿·õ¿·¡¿·Œ¿‚	¿‚-¿‚1¿‚2¿‚à¿‚é¿‚◊¿„&¿„?¿„E¿„í¿„€¿„Ó¿„Ù¿‰;¿‰z¿‰Ä¿‰ê¿‰ñ¿‰‚¿‰Ù¿Â>¿Âá¿Â”¿Ê#¿ÊI¿ÊV¿Êï¿Êª¿Êø¿Ê¿¿ÊÙ¿Ê˙¿Á6¿Á<¿Áz¿Á¡¿Á«¿Á◊¿Á›¿Ë&¿Ëb¿ËÆ¿Ë¿¿È
¿ÈZ¿ÈÄ¿Èç¿Èﬁ¿Í¿Í	¿Í
¿ÍT¿Íç¿Íì¿ÍÀ¿Í—¿Î¿Î ¿ÎL¿Îë¿Î±¿Î∑¿Îª¿Îº¿Ï¿Ï<¿ÏB¿Ïç¿Ï‹¿Ì&¿Ì,¿Ì<¿ÌB¿Ìê¿Ì—¿Ì›¿Ó¿ÓO¿Óá¿Óô¿ÓÀ¿Ó˙¿Ô1¿ÔX¿Ôb¿ÔÉ¿Ôè¿Ôª¿ÔÚ¿¿%¿)¿+¿,¿t¿x¿∆¿Ò¿Ò-¿Ò1¿ÒW¿Ò[¿Ò¨¿Ò∞¿Òﬁ¿Ò‚¿Ú(¿Ú,¿Ú}¿Úñ¿Úö¿ÚË¿ÚÙ¿Ú¯¿ÛC¿Û\¿Û`¿Û±¿Ù¿ÙG¿Ùò¿ÙÕ¿Ù—¿ı¿ıj¿ıå¿ıê¿ı±¿ıµ¿ı˙¿ˆD¿ˆã¿ˆ“¿˜¿˜¿˜¿˜D¿˜d¿˜h¿˜¶¿˜–¿˜‡¿¯%¿¯)¿¯=¿¯Å¿¯«¿¯Ë¿˘¿˘¿˘&¿˘*¿˘7¿˘=¿˘E¿˘I¿˘W¿˘[¿˘§¿˘›¿˘·¿˙-¿˙{¿˙¬¿˚¿˚H¿˚L¿˚ü¿˚Ó¿¸9¿¸â¿¸◊¿˝¿˝¿˝]¿˝®¿˝¬¿˝∆¿˝‡¿˝‰¿˛.¿˛{¿˛»¿˛Ê¿˛Í¿ˇ9¿ˇâ¿ˇŸ¿ )¿ l¿ p¿ ¿¿¿]¿Æ¿ˆ¿F¿o¿s¿ø¿¿^¿©¿≠¿Ú¿ˆ¿A¿ë¿≤¿∂¿Ú¿ˆ¿E¿ñ¿‰¿¿X¿®¿Â¿È¿/¿}¿∆¿ ¿¿d¿§¿®¿œ¿”¿	"¿	p¿	ø¿
¿
¿
#¿
>¿
B¿
ç¿
“¿¿g¿¥¿¿¿¿e¿Ø¿‚¿Ê¿4¿Ñ¿”¿¿5¿9¿d¿h¿•¿Ú¿A¿`¿d¿≤¿¿"¿&¿C¿G¿í¿„¿0¿t¿©¿Û¿+¿,¿b¿h¿¨¿∏¿⁄¿¿2¿6¿U¿V¿b¿ï¿ñ¿∑¿√¿Û¿Ù¿)¿*¿f¿á¿ ¿¿h¿û¿Ï¿¿¿S¿n¿x¿ç¿ô¿Ω¿√¿”¿¿2¿:¿M¿W¿Ñ¿à¿â¿Ø¿ﬂ¿¿%¿K¿Q¿a¿ú¿«¿/¿Å¿∞¿¿(¿w¿ƒ¿Ù¿.¿n¿å¿⁄¿˝¿¿Ö¿–¿‡¿ ¿I¿ò¿¥¿¿6¿G¿e¿´¿¸¿-¿<¿S¿û¿Ó¿ =¿ p¿ ¿ ñ¿ ﬁ¿!-¿!r¿!ú¿!´¿!…¿"¿"U¿"d¿"r¿"ú¿"∏¿"Ù¿#¿#%¿#2¿#<¿#D¿#W¿#a¿#e¿#f¿#∞¿#—¿$+¿$^¿$ì¿$ ¿$À¿%¿%3¿%~¿%Ã¿%Ò¿&:¿&u¿&¬¿'¿'X¿'¶¿'ø¿( ¿(H¿(è¿(—¿)¿)@¿)A¿)Ñ¿)ª¿)ı¿*o¿*¨¿*∏¿*œ¿*Â¿+¿+¿+.¿+4¿+D¿+t¿+â¿+ë¿+æ¿+„¿+Û¿,¿,-¿,L¿,U¿,h¿,r¿,Ö¿,â¿,ä¿,ñ¿,«¿,È¿,˘¿-¿-+¿-5¿-Ç¿-Æ¿-æ¿-ﬁ¿-Ò¿-˚¿.¿.2¿.E¿.O¿.l¿.ç¿.ƒ¿.»¿.…¿.’¿/¿/*¿/K¿/[¿/Ç¿/ï¿/ü¿/€¿/ﬂ¿/‡¿0	¿0¿0O¿0b¿0l¿0p¿0q¿0}¿0–¿1¿1¿1¿1/¿1J¿1Z¿1y¿1å¿1ñ¿1·¿1Ò¿2¿2$¿2.¿2e¿2i¿2j¿2v¿2å¿2§¿2∞¿2Œ¿3¿3G¿3N¿3R¿3S¿3_¿3r¿3~¿3¢¿3Ù¿4¿4¿4Y¿4n¿4z¿4ò¿4‚¿5¿5¿5I¿5g¿5Å¿5Ö¿5Ü¿5–¿5Ò¿6¿6¿6U¿6x¿6≤¿6Ú¿79¿7l¿7…¿8¿8"¿80¿8:¿8^¿8Æ¿8˛¿9N¿9ï¿9Ì¿9ı¿:¿:¿:-¿:c¿:i¿:m¿:n¿:z¿:ü¿:¡¿:·¿; ¿;¿;m¿;√¿;«¿;»¿;‘¿<¿<3¿<H¿<è¿<ü¿<—¿=)¿=D¿=\¿=≈¿=“¿=Ó¿>V¿>c¿>x¿>◊¿?(¿?5¿??¿?L¿?T¿?g¿?q¿?√¿@)¿@Å¿@‘¿@⁄¿@ﬁ¿@ﬂ¿@Î¿A	¿A9¿Aä¿Aµ¿Aª¿AÕ¿A—¿A“¿B¿B¿Bj¿B∏¿C¿CX¿Cê¿C•¿C≤¿D¿D	¿DS¿DY¿D£¿D©¿DÙ¿D˙¿EI¿Eò¿EÏ¿F>¿Fê¿F„¿G4¿Gl¿Gy¿GÎ¿GÏ¿H¿H$¿Hr¿Hü¿H¨¿I¿I¿I¿IT¿I¿IÈ¿IÌ¿IÔ¿I¿J@¿JP¿JT¿J¢¿J¬¿Jœ¿JÚ¿K)¿K+¿KÜ¿KØ¿Kæ¿K„¿L¿L ¿LI¿LK¿LL¿L¿LÉ¿L…¿L˝¿M!¿Mm¿Mê¿Mñ¿M«¿MÕ¿N¿NW¿Nß¿NÎ¿O¿O^¿OÖ¿Oô¿Où¿Oû¿O™¿O€¿P¿P'¿PD¿Pf¿Pj¿Pl¿Pm¿Pπ¿Pı¿Q?¿Q¿QÄ¿Qå¿Q∞¿Q√¿Q·¿QÂ¿QÊ¿QÚ¿R5¿RH¿RL¿RM¿RY¿RÆ¿R¡¿R≈¿R∆¿R“¿S¿S(¿S,¿S-¿S9¿Sk¿Sñ¿Sö¿Sú¿Sù¿S¿SÙ¿T¿T¿TY¿T™¿TË¿U+¿Uu¿U√¿Uƒ¿U◊¿Uÿ¿U‰¿V¿V-¿VE¿VK¿VO¿VP¿V\¿VÄ¿Vù¿V∞¿VŒ¿V“¿V”¿Vﬂ¿W¿W2¿Wã¿Wè¿Wê¿Wú¿W’¿WÚ¿X¿Xl¿Xp¿Xq¿X}¿X¿¿YA¿Y[¿Yè¿YØ¿Yﬁ¿Y‚¿Y„¿YÔ¿ZD¿ZW¿Z[¿Z\¿Zh¿Z´¿[,¿[F¿[o¿[é¿[Ω¿[¡¿[√¿[ƒ¿\¿\¿\`¿\≤¿]¿]C¿]G¿]U¿]Y¿]•¿]Ã¿^¿^G¿^â¿^”¿_¿_f¿_g¿_s¿_Ÿ¿`L¿`P¿`Q¿`Ö¿`ã¿`ÿ¿`Ó¿`˚¿a¿a}¿a~¿aû¿aÓ¿b¿bP¿bQ¿b]¿bÆ¿c+¿c_¿c†¿cœ¿c”¿c‘¿c‡¿dQ¿dŒ¿d¯¿e:¿ei¿em¿en¿ez¿eΩ¿f:¿fd¿fÑ¿f≥¿f∑¿f∏¿fƒ¿fÛ¿g ¿gQ¿gi¿gq¿gw¿g{¿g|¿gà¿g¨¿g”¿h¿h'¿hE¿hI¿hJ¿hä¿hö¿h≈¿hÁ¿i¿iG¿i¡¿i⁄¿j1¿jo¿jÄ¿jÎ¿k*¿k:¿kG¿kR¿kZ¿km¿kw¿kà¿kå¿kç¿kô¿k÷¿l¿lX¿lm¿lq¿lr¿l~¿lØ¿l—¿m?¿mΩ¿mŸ¿n¿nç¿n´¿nÀ¿n—¿nÎ¿nÔ¿n¿n¸¿o4¿oQ¿oø¿o‡¿p<¿pµ¿p’¿pŸ¿p€¿p‹¿q"¿q&¿qr¿qø¿q˛¿rG¿rÖ¿r§¿rÁ¿s1¿sX¿sY¿se¿sv¿s£¿s∏¿sˆ¿s˙¿s˚¿t¿t¿t6¿tH¿tL¿tM¿tY¿t~¿tù¿t€¿tﬂ¿t‡¿u¿u1¿uD¿uJ¿uÄ¿u§¿uø¿u◊¿vR¿v_¿v{¿v„¿v¿w¿we¿w¡¿x ¿x¿x"¿x}¿x⁄¿y$¿y1¿y<¿yE¿yK¿y\¿y`¿yb¿yc¿y≤¿y∂¿z¿z¿z/¿zl¿zä¿zã¿z¥¿zÕ¿zŒ¿z⁄¿{¿{¿{¿{<¿{W¿{k¿{Ç¿{∞¿{µ¿{¿|
¿|¿|<¿|R¿|Ç¿|á¿|¨¿|æ¿|¿¿|¡¿|ı¿}¿}¿}g¿}≠¿}¸¿~C¿~\¿~`¿~n¿~r¿~¡¿¿¿F¿ë¿æ¿ø¿Ä¿Ä&¿Ä7¿Ä8¿Äq¿ÄÑ¿ÄÖ¿Äë¿Ä¥¿Ä‡¿ÄÙ¿Ä˙¿Å¿Å:¿Å[¿Å_¿Å`¿Ål¿Åù¿Åü¿Å†¿ÅÂ¿Ç
¿Ç/¿Ç^¿Ç_¿Çê¿Çë¿Çù¿Ç◊¿ÇŸ¿Ç⁄¿Ç˝¿É¿É¿É!¿ÉZ¿É\    
Ä•  Ä∫  Ä’  Äˇ  Å)  Å@  ÅU  År  Åë  Å∂  Å◊Ç ÇnÇpÇôÇÚÇÙÉÉVÉXÉÅÉ¶É®É—ÉÌÉÔÑÑ\ 'äd*äj  äy ääâ       ä∆Ñ#åÅO/// A key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// See also:
///
///  * [Key], the base class for all keys.
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys. å;g åååïH/// Creates a key that uses [identical] on [value] for its [operator==].åñ
åú   å¶Wå¯A/// The object whose identity is used by this key's [operator==]. çƒRçÿ   çƒç≈çÄæç  çç'  ççéÄÕé-   éé éÎéùñÌá‡/// A key that is unique across the entire app.
///
/// Global keys uniquely identify elements. Global keys provide access to other
/// objects that are associated with those elements, such as [BuildContext].
/// For [StatefulWidget]s, global keys also provide access to [State].
///
/// Widgets that have global keys reparent their subtrees when they are moved
/// from one location in the tree to another location in the tree. In order to
/// reparent its subtree, a widget must arrive at its new location in the tree
/// in the same animation frame in which it was removed from its old location in
/// the tree.
///
/// Reparenting an [Element] using a global key is relatively expensive, as
/// this operation will trigger a call to [State.deactivate] on the associated
/// [State] and all of its descendants; then force all widgets that depends
/// on an [InheritedWidget] to rebuild.
///
/// If you don't need any of the features listed above, consider using a [Key],
/// [ValueKey], [ObjectKey], or [UniqueKey] instead.
///
/// You cannot simultaneously include two widgets in the tree with the same
/// global key. Attempting to do so will assert at runtime.
///
/// ## Pitfalls
///
/// GlobalKeys should not be re-created on every build. They should usually be
/// long-lived objects owned by a [State] object, for example.
///
/// Creating a new GlobalKey on every build will throw away the state of the
/// subtree associated with the old key and create a new fresh subtree for the
/// new key. Besides harming performance, this can also cause unexpected
/// behavior in widgets in the subtree. For example, a [GestureDetector] in the
/// subtree will be unable to track ongoing gestures since it will be recreated
/// on each build.
///
/// Instead, a good practice is to let a State object own the GlobalKey, and
/// instantiate it outside the build method, such as in [State.initState].
///
/// See also:
///
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys.ñ˜ñ˜ó(Å ó˙òÄø/// Creates a [LabeledGlobalKey], which is a [GlobalKey] with a label used for
/// debugging.
///
/// The label is purely for debugging and not used for comparing the identity
/// of the key.òò   òCÄ¡òÂòÊòÒÄä/// Creates a global key without a label.
///
/// Used by subclasses because the factory constructor shadows the implicit
/// constructor. òˆò˚ò¸ôô ô]ô    ôiÄ‰ö+Äß/// The build context in which the widget with this key builds.
///
/// The current context is null if there is no widget in the tree that matches
/// this global key.   öQÄ„õÄ•/// The widget in the tree that currently has this global key.
///
/// The current widget is null if there is no widget in the tree that matches
/// this global key.   õ8ÇNúkÅ!/// The [State] for the widget in the tree that currently has this global key.
///
/// The current state is null if (1) there is no widget in the tree that
/// matches this global key, (2) that widget is not a [StatefulWidget], or the
/// associated [State] object is not a subtype of `T`.    ñÃñÕùäÉ#ûDÄ°/// A global key with a debugging label.
///
/// The debug label is useful for documentation and for debugging. The label
/// does not affect the key's identity.ûUûUûèÄ¸ üRübf/// Creates a global key with a debugging label.
///
/// The label does not affect the key's identity.ücüi  üwü|ü}üàüâüèüù   ü≠Ä˛ü¿   ü≠üÆû,û-†ØáŒ§ÉV/// A global key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// Any [GlobalObjectKey] created for the same object will match.
///
/// If the object is not private, then it is possible that collisions will occur
/// where independent widgets will reuse the same object as their
/// [GlobalObjectKey] value in a different part of the tree, leading to a global
/// key conflict. To avoid this problem, create a private [GlobalObjectKey]
/// subclass, as in:
///
/// ```dart
/// class _MyKey extends GlobalObjectKey {
///   const _MyKey(super.value);
/// }
/// ```
///
/// Since the [runtimeType] of the key is part of its identity, this will
/// prevent clashes with other [GlobalObjectKey]s even if they have the same
/// value.§.§.§hÄä §¿§œO/// Creates a global key that uses [identical] on [value] for its [operator==].§–
§÷  §ﬁ§„§‰§Ô§§ˆV•GA/// The object whose identity is used by this key's [operator==]. ¶8¶0   ¶¶•QÄ«•k  •n•v  •Q•R¶XÇ#¶k   ¶X¶Y§§®îôØ™á/// Describes the configuration for an [Element].
///
/// Widgets are the central class hierarchy in the Flutter framework. A widget
/// is an immutable description of part of a user interface. Widgets can be
/// inflated into elements, which manage the underlying render tree.
///
/// Widgets themselves have no mutable state (all their fields must be final).
/// If you wish to associate mutable state with a widget, consider using a
/// [StatefulWidget], which creates a [State] object (via
/// [StatefulWidget.createState]) whenever it is inflated into an element and
/// incorporated into the tree.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.
///
/// The [key] property controls how one widget replaces another widget in the
/// tree. If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state. Ø–C Ø˛∞%/// Initializes [key] for subclasses.∞∞   ∞Ñ_¥sÑ$/// Controls how one widget replaces another widget in the tree.
///
/// If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// In addition, using a [GlobalKey] as the widget's [key] allows the element
/// to be moved around the tree (changing parent) without losing state. When a
/// new widget is found (its key and type do not match a previous widget in
/// the same location), but there was a widget with that same global key
/// elsewhere in the tree in the previous frame, then that widget's element is
/// moved to the new location.
///
/// Generally, a widget that is the only child of another widget does not need
/// an explicit key.
///
/// See also:
///
///  * The discussions at [Key] and [GlobalKey]. ∏(=∏J   ∏(∏)∏4∏5¥{Å»∂3Åâ/// Inflates this configuration to a concrete instance.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.  ∂∂∂ ∂!∂GÄƒ∂ç0/// A short, textual description of this widget.  ∂z∂{∑Ä∆∑   ∑4&∑Q  ∑∑∑ŸK∏  ∏∏  ∑Ÿ∑⁄∑Â∑Ê∏iÇ≈∫ñÇ/// Whether the `newWidget` can be used to update an [Element] that currently
/// has the `oldWidget` as its configuration.
///
/// An element that uses a given widget as its configuration can be updated to
/// use another widget as its configuration if, and only if, the two widgets
/// have [runtimeType] and [key] properties that are [operator==].
///
/// If the widgets have no key (their key is null), then they are considered a
/// match if they have the same type, even if their children are completely
/// different. ∫†∫®  ∫≤∫∫   º~Äòºâ  ºüºß   ØêØëΩûÑ¿ Rfï</// A widget that does not require mutable state.
///
/// A stateless widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=wE7khGHVkYY}
///
/// Stateless widget are useful when the part of the user interface you are
/// describing does not depend on anything other than the configuration
/// information in the object itself and the [BuildContext] in which the widget
/// is inflated. For compositions that can change dynamically, e.g. due to
/// having an internal clock-driven state, or depending on some system state,
/// consider using [StatefulWidget].
///
/// ## Performance considerations
///
/// The [build] method of a stateless widget is typically only called in three
/// situations: the first time the widget is inserted in the tree, when the
/// widget's parent changes its configuration (see [Element.rebuild]), and when
/// an [InheritedWidget] it depends on changes.
///
/// If a widget's parent will regularly change the widget's configuration, or if
/// it depends on inherited widgets that frequently change, then it is important
/// to optimize the performance of the [build] method to maintain a fluid
/// rendering performance.
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateless widget:
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. For example, instead of an elaborate arrangement
///    of [Row]s, [Column]s, [Padding]s, and [SizedBox]es to position a single
///    child in a particularly fancy manner, consider using just an [Align] or a
///    [CustomSingleChildLayout]. Instead of an intricate layering of multiple
///    [Container]s and with [Decoration]s to draw just the right graphical
///    effect, consider a single [CustomPaint] widget.
///
///  * Use `const` widgets where possible, and provide a `const` constructor for
///    the widget so that users of the widget can also do so.
///
///  * Consider refactoring the stateless widget into a stateful widget so that
///    it can use some of the techniques described at [StatefulWidget], such as
///    caching common parts of subtrees and using [GlobalKey]s when changing the
///    tree structure.
///
///  * If the widget is likely to get rebuilt frequently due to the use of
///    [InheritedWidget]s, consider refactoring the stateless widget into
///    multiple widgets, with the parts of the tree that change being pushed to
///    the leaves. For example instead of building a tree with four widgets, the
///    inner-most widget depending on the [Theme], consider factoring out the
///    part of the build function that builds the inner-most widget into its own
///    widget, so that only the inner-most widget needs to be rebuilt when the
///    theme changes.
/// {@template flutter.flutter.widgets.framework.prefer_const_over_helper}
///  * When trying to create a reusable piece of UI, prefer using a widget
///    rather than a helper method. For example, if there was a function used to
///    build a widget, a [State.setState] call would require Flutter to entirely
///    rebuild the returned wrapping widget. If a [Widget] was used instead,
///    Flutter would be able to efficiently re-render only those parts that
///    really need to be updated. Even better, if the created widget is `const`,
///    Flutter would short-circuit most of the rebuild work.
/// {@endtemplate}
///
/// This video gives more explanations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// The following is a skeleton of a stateless widget subclass called `GreenFrog`.
///
/// Normally, widgets have more constructor arguments, each of which corresponds
/// to a `final` property.
///
/// ```dart
/// class GreenFrog extends StatelessWidget {
///   const GreenFrog({ super.key });
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFF2DBD3A));
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// This next example shows the more generic widget `Frog` which can be given
/// a color and a child:
///
/// ```dart
/// class Frog extends StatelessWidget {
///   const Frog({
///     super.key,
///     this.color = const Color(0xFF2DBD3A),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   Widget build(BuildContext context) {
///     return ColoredBox(color: color, child: child);
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ RâM ¿ R∑¿ R∆%/// Initializes [key] for subclasses.¿ R…	¿ R–     ¿ R⁄Ä€¿ SãÄç/// Creates a [StatelessElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ Sn¿ So¿ Sπá„¿ [Äáf/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method when this widget is inserted into the tree
/// in a given [BuildContext] and when the dependencies of this widget change
/// (e.g., an [InheritedWidget] referenced by this widget changes). This
/// method can potentially be called in every frame and should not have any side
/// effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor and
/// from the given [BuildContext].
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. A
/// given widget might be built with multiple different [BuildContext]
/// arguments over time if the widget is moved around the tree or if the
/// widget is inserted into the tree in multiple places at once.
///
/// The implementation of this method must only depend on:
///
/// * the fields of the widget, which themselves must not change over time,
///   and
/// * any ambient state obtained from the `context` using
///   [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// If a widget's [build] method is to depend on anything else, use a
/// [StatefulWidget] instead.
///
/// See also:
///
///  * [StatelessWidget], which contains the discussion on performance considerations. ¿ [Ü¿ [î  ¿ [l¿ [m ¿ [†®o¿ a£±/// A widget that has mutable state.
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// A stateful widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// Stateful widgets are useful when the part of the user interface you are
/// describing can change dynamically, e.g. due to having an internal
/// clock-driven state, or depending on some system state. For compositions that
/// depend only on the configuration information in the object itself and the
/// [BuildContext] in which the widget is inflated, consider using
/// [StatelessWidget].
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=AqCMFXEmf3w}
///
/// [StatefulWidget] instances themselves are immutable and store their mutable
/// state either in separate [State] objects that are created by the
/// [createState] method, or in objects to which that [State] subscribes, for
/// example [Stream] or [ChangeNotifier] objects, to which references are stored
/// in final fields on the [StatefulWidget] itself.
///
/// The framework calls [createState] whenever it inflates a
/// [StatefulWidget], which means that multiple [State] objects might be
/// associated with the same [StatefulWidget] if that widget has been inserted
/// into the tree in multiple places. Similarly, if a [StatefulWidget] is
/// removed from the tree and later inserted in to the tree again, the framework
/// will call [createState] again to create a fresh [State] object, simplifying
/// the lifecycle of [State] objects.
///
/// A [StatefulWidget] keeps the same [State] object when moving from one
/// location in the tree to another if its creator used a [GlobalKey] for its
/// [key]. Because a widget with a [GlobalKey] can be used in at most one
/// location in the tree, a widget that uses a [GlobalKey] has at most one
/// associated element. The framework takes advantage of this property when
/// moving a widget with a global key from one location in the tree to another
/// by grafting the (unique) subtree associated with that widget from the old
/// location to the new location (instead of recreating the subtree at the new
/// location). The [State] objects associated with [StatefulWidget] are grafted
/// along with the rest of the subtree, which means the [State] object is reused
/// (instead of being recreated) in the new location. However, in order to be
/// eligible for grafting, the widget must be inserted into the new location in
/// the same animation frame in which it was removed from the old location.
///
/// ## Performance considerations
///
/// There are two primary categories of [StatefulWidget]s.
///
/// The first is one which allocates resources in [State.initState] and disposes
/// of them in [State.dispose], but which does not depend on [InheritedWidget]s
/// or call [State.setState]. Such widgets are commonly used at the root of an
/// application or page, and communicate with subwidgets via [ChangeNotifier]s,
/// [Stream]s, or other such objects. Stateful widgets following such a pattern
/// are relatively cheap (in terms of CPU and GPU cycles), because they are
/// built once then never update. They can, therefore, have somewhat complicated
/// and deep build methods.
///
/// The second category is widgets that use [State.setState] or depend on
/// [InheritedWidget]s. These will typically rebuild many times during the
/// application's lifetime, and it is therefore important to minimize the impact
/// of rebuilding such a widget. (They may also use [State.initState] or
/// [State.didChangeDependencies] and allocate resources, but the important part
/// is that they rebuild.)
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateful widget:
///
///  * Push the state to the leaves. For example, if your page has a ticking
///    clock, rather than putting the state at the top of the page and
///    rebuilding the entire page each time the clock ticks, create a dedicated
///    clock widget that only updates itself.
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. Ideally, a stateful widget would only create a
///    single widget, and that widget would be a [RenderObjectWidget].
///    (Obviously this isn't always practical, but the closer a widget gets to
///    this ideal, the more efficient it will be.)
///
///  * If a subtree does not change, cache the widget that represents that
///    subtree and re-use it each time it can be used. To do this, assign
///    a widget to a `final` state variable and re-use it in the build method. It
///    is massively more efficient for a widget to be re-used than for a new (but
///    identically-configured) widget to be created. Another caching strategy
///    consists in extracting the mutable part of the widget into a [StatefulWidget]
///    which accepts a child parameter.
///
///  * Use `const` widgets where possible. (This is equivalent to caching a
///    widget and re-using it.)
///
///  * Avoid changing the depth of any created subtrees or changing the type of
///    any widgets in the subtree. For example, rather than returning either the
///    child or the child wrapped in an [IgnorePointer], always wrap the child
///    widget in an [IgnorePointer] and control the [IgnorePointer.ignoring]
///    property. This is because changing the depth of the subtree requires
///    rebuilding, laying out, and painting the entire subtree, whereas just
///    changing the property will require the least possible change to the
///    render tree (in the case of [IgnorePointer], for example, no layout or
///    repaint is necessary at all).
///
///  * If the depth must be changed for some reason, consider wrapping the
///    common parts of the subtrees in widgets that have a [GlobalKey] that
///    remains consistent for the life of the stateful widget. (The
///    [KeyedSubtree] widget may be useful for this purpose if no other widget
///    can conveniently be assigned the key.)
///
/// {@macro flutter.flutter.widgets.framework.prefer_const_over_helper}
///
/// This video gives more explanations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// For more details on the mechanics of rebuilding a widget, see
/// the discussion at [Element.rebuild].
///
/// {@tool snippet}
///
/// This is a skeleton of a stateful widget subclass called `YellowBird`.
///
/// In this example, the [State] has no actual state. State is normally
/// represented as private member fields. Also, normally widgets have more
/// constructor arguments, each of which corresponds to a `final` property.
///
/// ```dart
/// class YellowBird extends StatefulWidget {
///   const YellowBird({ super.key });
///
///   @override
///   State<YellowBird> createState() => _YellowBirdState();
/// }
///
/// class _YellowBirdState extends State<YellowBird> {
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFFFFE306));
///   }
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// This example shows the more generic widget `Bird` which can be given a
/// color and a child, and which has some internal state with a method that
/// can be called to mutate it:
///
/// ```dart
/// class Bird extends StatefulWidget {
///   const Bird({
///     super.key,
///     this.color = const Color(0xFFFFE306),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   State<Bird> createState() => _BirdState();
/// }
///
/// class _BirdState extends State<Bird> {
///   double _size = 1.0;
///
///   void grow() {
///     setState(() { _size += 0.1; });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(
///       color: widget.color,
///       transform: Matrix4.diagonal3Values(_size, _size, 1.0),
///       child: widget.child,
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [State], where the logic behind a [StatefulWidget] is hosted.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ ÉL ¿ ±¿ ø%/// Initializes [key] for subclasses.¿ ¬	¿ …     ¿ ”Äÿ¿ ÄÇÄå/// Creates a [StatefulElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ Äf¿ Äg¿ ÄØÉ^¿ ÉˇÉ/// Creates the mutable state for this widget at a given location in the tree.
///
/// Subclasses should override this method to return a newly created
/// instance of their associated [State] subclass:
///
/// ```dart
/// @override
/// State<SomeWidget> createState() => _SomeWidgetState();
/// ```
///
/// The framework can call this method multiple times over the lifetime of
/// a [StatefulWidget]. For example, if the widget is inserted into the tree
/// in multiple locations, the framework will create a separate [State] object
/// for each location. Similarly, if the widget is removed from the tree and
/// later inserted into the tree again, the framework will call [createState]
/// again to create a fresh [State] object, simplifying the lifecycle of
/// [State] objects.  ¿ É·¿ É‚¿ ÉÓ¿ ÉÔ ¿ á¿ {ö¿ ûñÁ/// The logic and internal state for a [StatefulWidget].
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// [State] objects are created by the framework by calling the
/// [StatefulWidget.createState] method when inflating a [StatefulWidget] to
/// insert it into the tree. Because a given [StatefulWidget] instance can be
/// inflated multiple times (e.g., the widget is incorporated into the tree in
/// multiple places at once), there might be more than one [State] object
/// associated with a given [StatefulWidget] instance. Similarly, if a
/// [StatefulWidget] is removed from the tree and later inserted in to the tree
/// again, the framework will call [StatefulWidget.createState] again to create
/// a fresh [State] object, simplifying the lifecycle of [State] objects.
///
/// [State] objects have the following lifecycle:
///
///  * The framework creates a [State] object by calling
///    [StatefulWidget.createState].
///  * The newly created [State] object is associated with a [BuildContext].
///    This association is permanent: the [State] object will never change its
///    [BuildContext]. However, the [BuildContext] itself can be moved around
///    the tree along with its subtree. At this point, the [State] object is
///    considered [mounted].
///  * The framework calls [initState]. Subclasses of [State] should override
///    [initState] to perform one-time initialization that depends on the
///    [BuildContext] or the widget, which are available as the [context] and
///    [widget] properties, respectively, when the [initState] method is
///    called.
///  * The framework calls [didChangeDependencies]. Subclasses of [State] should
///    override [didChangeDependencies] to perform initialization involving
///    [InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is
///    called, the [didChangeDependencies] method will be called again if the
///    inherited widgets subsequently change or if the widget moves in the tree.
///  * At this point, the [State] object is fully initialized and the framework
///    might call its [build] method any number of times to obtain a
///    description of the user interface for this subtree. [State] objects can
///    spontaneously request to rebuild their subtree by calling their
///    [setState] method, which indicates that some of their internal state
///    has changed in a way that might impact the user interface in this
///    subtree.
///  * During this time, a parent widget might rebuild and request that this
///    location in the tree update to display a new widget with the same
///    [runtimeType] and [Widget.key]. When this happens, the framework will
///    update the [widget] property to refer to the new widget and then call the
///    [didUpdateWidget] method with the previous widget as an argument. [State]
///    objects should override [didUpdateWidget] to respond to changes in their
///    associated widget (e.g., to start implicit animations). The framework
///    always calls [build] after calling [didUpdateWidget], which means any
///    calls to [setState] in [didUpdateWidget] are redundant. (See alse the
///    discussion at [Element.rebuild].)
///  * During development, if a hot reload occurs (whether initiated from the
///    command line `flutter` tool by pressing `r`, or from an IDE), the
///    [reassemble] method is called. This provides an opportunity to
///    reinitialize any data that was prepared in the [initState] method.
///  * If the subtree containing the [State] object is removed from the tree
///    (e.g., because the parent built a widget with a different [runtimeType]
///    or [Widget.key]), the framework calls the [deactivate] method. Subclasses
///    should override this method to clean up any links between this object
///    and other elements in the tree (e.g. if you have provided an ancestor
///    with a pointer to a descendant's [RenderObject]).
///  * At this point, the framework might reinsert this subtree into another
///    part of the tree. If that happens, the framework will ensure that it
///    calls [build] to give the [State] object a chance to adapt to its new
///    location in the tree. If the framework does reinsert this subtree, it
///    will do so before the end of the animation frame in which the subtree was
///    removed from the tree. For this reason, [State] objects can defer
///    releasing most resources until the framework calls their [dispose]
///    method.
///  * If the framework does not reinsert this subtree by the end of the current
///    animation frame, the framework will call [dispose], which indicates that
///    this [State] object will never build again. Subclasses should override
///    this method to release any resources retained by this object (e.g.,
///    stop any active animations).
///  * After the framework calls [dispose], the [State] object is considered
///    unmounted and the [mounted] property is false. It is an error to call
///    [setState] at this point. This stage of the lifecycle is terminal: there
///    is no way to remount a [State] object that has been disposed.
///
/// See also:
///
///  * [StatefulWidget], where the current configuration of a [State] is hosted,
///    and whose documentation has sample code for [State].
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [Widget], for an overview of widgets in general.¿ û$¿ û$ ¿ †{
¿ †~  ¿ †äÅ ¿ °|ÄŸ/// The current stage in the lifecycle for this state object.
///
/// This field is used by the framework when asserts are enabled to verify
/// that [State] objects move through their lifecycle in an orderly fashion.¿ °ì¿ °¢¿ °£¿ ¶¿ ¶(  ¿ ûVÇ"¿ †eÅˆ/// The current configuration.
///
/// A [State] object's configuration is the corresponding [StatefulWidget]
/// instance. This property is initialized by the framework before calling
/// [initState]. If the parent updates this location in the tree to a new
/// widget with the same [runtimeType] and [Widget.key] as the current
/// configuration, the framework will update this property to refer to the new
/// widget and then call [didUpdateWidget], passing the old configuration as
/// an argument.   ¿ ¢aÉ≥¿ §uÅÓ/// The location in the tree where this widget builds.
///
/// The framework associates [State] objects with a [BuildContext] after
/// creating them with [StatefulWidget.createState] and before calling
/// [initState]. The association is permanent: the [State] object will never
/// change its [BuildContext]. However, the [BuildContext] itself can be moved
/// around the tree.
///
/// After calling [dispose], the framework severs the [State] object's
/// connection with the [BuildContext].   ¿ ¶5Å˘¿ ®Å¡/// Whether this [State] object is currently in a tree.
///
/// After creating a [State] object and before calling [initState], the
/// framework "mounts" the [State] object by associating it with a
/// [BuildContext]. The [State] object remains mounted until the framework
/// calls [dispose], after which time the framework will never ask the [State]
/// object to [build] again.
///
/// It is an error to call [setState] unless [mounted] is true.   ¿ °ØÄÆ¿ ¢+r/// Verifies that the [State] that was created is one that expects to be
/// created for that particular [Widget]. ¿ ¢?¿ ¢G   ¿ ®2á¿ Æ$Öê/// Called when this object is inserted into the tree.
///
/// The framework will call this method exactly once for each [State] object
/// it creates.
///
/// Override this method to perform initialization that depends on the
/// location at which this object was inserted into the tree (i.e., [context])
/// or on the widget used to configure this object (i.e., [widget]).
///
/// {@template flutter.widgets.State.initState}
/// If a [State]'s [build] method depends on an object that can itself
/// change state, for example a [ChangeNotifier] or [Stream], or some
/// other object to which one can subscribe to receive notifications, then
/// be sure to subscribe and unsubscribe properly in [initState],
/// [didUpdateWidget], and [dispose]:
///
///  * In [initState], subscribe to the object.
///  * In [didUpdateWidget] unsubscribe from the old object and subscribe
///    to the new one if the updated widget configuration requires
///    replacing the object.
///  * In [dispose], unsubscribe from the object.
///
/// {@endtemplate}
///
/// You should not use [BuildContext.dependOnInheritedWidgetOfExactType] from this
/// method. However, [didChangeDependencies] will be called immediately
/// following this method, and [BuildContext.dependOnInheritedWidgetOfExactType] can
/// be used there.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.initState()`.  ¿ Æ¿ Æ¿ Æ¿ Æ¿ ØEÑ'¿ ≥BÉØ/// Called whenever the widget configuration changes.
///
/// If the parent widget rebuilds and requests that this location in the tree
/// update to display a new widget with the same [runtimeType] and
/// [Widget.key], the framework will update the [widget] property of this
/// [State] object to refer to the new widget and then call this method
/// with the previous widget as an argument.
///
/// Override this method to respond when the [widget] changes (e.g., to start
/// implicit animations).
///
/// The framework always calls [build] after calling [didUpdateWidget], which
/// means any calls to [setState] in [didUpdateWidget] are redundant.
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.didUpdateWidget(oldWidget)`.
///
/// _See the discussion at [Element.rebuild] for more information on when this
/// method is called._ ¿ ≥R¿ ≥_  ¿ ≥¿ ≥ ¿ ≥0¿ ≥1¿ ≥pÅË¿ µHÅû/// {@macro flutter.widgets.Element.reassemble}
///
/// In addition to this method being invoked, it is guaranteed that the
/// [build] method will be invoked when a reassemble is signaled. Most
/// widgets therefore do not need to do anything in the [reassemble] method.
///
/// See also:
///
///  * [Element.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿ µ%¿ µ&¿ µ2¿ µ3¿ µ\ûï¿ »Èí¶/// Notify the framework that the internal state of this object has changed.
///
/// Whenever you change the internal state of a [State] object, make the
/// change in a function that you pass to [setState]:
///
/// ```dart
/// setState(() { _myState = newValue; });
/// ```
///
/// The provided callback is immediately called synchronously. It must not
/// return a future (the callback cannot be `async`), since then it would be
/// unclear when the state was actually being set.
///
/// Calling [setState] notifies the framework that the internal state of this
/// object has changed in a way that might impact the user interface in this
/// subtree, which causes the framework to schedule a [build] for this [State]
/// object.
///
/// If you just change the state directly without calling [setState], the
/// framework might not schedule a [build] and the user interface for this
/// subtree might not be updated to reflect the new state.
///
/// Generally it is recommended that the [setState] method only be used to
/// wrap the actual changes to the state, not any computation that might be
/// associated with the change. For example, here a value used by the [build]
/// function is incremented, and then the change is written to disk, but only
/// the increment is wrapped in the [setState]:
///
/// ```dart
/// Future<void> _incrementCounter() async {
///   setState(() {
///     _counter++;
///   });
///   Directory directory = await getApplicationDocumentsDirectory(); // from path_provider package
///   final String dirName = directory.path;
///   await File('$dirName/counter.txt').writeAsString('$_counter');
/// }
/// ```
///
/// Sometimes, the changed state is in some other object not owned by the
/// widget [State], but the widget nonetheless needs to be updated to react to
/// the new state. This is especially common with [Listenable]s, such as
/// [AnimationController]s.
///
/// In such cases, it is good practice to leave a comment in the callback
/// passed to [setState] that explains what state changed:
///
/// ```dart
/// void _update() {
///   setState(() { /* The animation changed. */ });
/// }
/// //...
/// animation.addListener(_update);
/// ```
///
/// It is an error to call this method after the framework calls [dispose].
/// You can determine whether it is legal to call this method by checking
/// whether the [mounted] property is true. That said, it is better practice
/// to cancel whatever work might trigger the [setState] rather than merely
/// checking for [mounted] before calling [setState], as otherwise CPU cycles
/// will be wasted.
///
/// ## Design discussion
///
/// The original version of this API was a method called `markNeedsBuild`, for
/// consistency with [RenderObject.markNeedsLayout],
/// [RenderObject.markNeedsPaint], _et al_.
///
/// However, early user testing of the Flutter framework revealed that people
/// would call `markNeedsBuild()` much more often than necessary. Essentially,
/// people used it like a good luck charm, any time they weren't sure if they
/// needed to call it, they would call it, just in case.
///
/// Naturally, this led to performance issues in applications.
///
/// When the API was changed to take a callback instead, this practice was
/// greatly reduced. One hypothesis is that prompting developers to actually
/// update their state in a callback caused developers to think more carefully
/// about what exactly was being updated, and thus improved their understanding
/// of the appropriate times to call the method.
///
/// In practice, the [setState] method's implementation is trivial: it calls
/// the provided callback synchronously, then calls [Element.markNeedsBuild].
///
/// ## Performance considerations
///
/// There is minimal _direct_ overhead to calling this function, and as it is
/// expected to be called at most once per frame, the overhead is irrelevant
/// anyway. Nonetheless, it is best to avoid calling this function redundantly
/// (e.g. in a tight loop), as it does involve creating a closure and calling
/// it. The method is idempotent, there is no benefit to calling it more than
/// once per [State] per frame.
///
/// The _indirect_ cost of causing this function, however, is high: it causes
/// the widget to rebuild, possibly triggering rebuilds for the entire subtree
/// rooted at this widget, and further triggering a relayout and repaint of
/// the entire corresponding [RenderObject] subtree.
///
/// For this reason, this method should only be called when the [build] method
/// will, as a result of whatever state change was detected, change its result
/// meaningfully.
///
/// See also:
///
///  * [StatefulWidget], the API documentation for which has a section on
///    performance considerations that are relevant here. ¿ »Ú¿ …   ¿ »◊¿ »ÿ¿ ”ıÖÓ¿ Ÿ”ÖÜ/// Called when this object is removed from the tree.
///
/// The framework calls this method whenever it removes this [State] object
/// from the tree. In some cases, the framework will reinsert the [State]
/// object into another part of the tree (e.g., if the subtree containing this
/// [State] object is grafted from one location in the tree to another due to
/// the use of a [GlobalKey]). If that happens, the framework will call
/// [activate] to give the [State] object a chance to reacquire any resources
/// that it released in [deactivate]. It will then also call [build] to give
/// the [State] object a chance to adapt to its new location in the tree. If
/// the framework does reinsert this subtree, it will do so before the end of
/// the animation frame in which the subtree was removed from the tree. For
/// this reason, [State] objects can defer releasing most resources until the
/// framework calls their [dispose] method.
///
/// Subclasses should override this method to clean up any links between
/// this object and other elements in the tree (e.g. if you have provided an
/// ancestor with a pointer to a descendant's [RenderObject]).
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.
///
/// See also:
///
///  * [dispose], which is called after [deactivate] if the widget is removed
///    from the tree permanently.  ¿ Ÿ∞¿ Ÿ±¿ ŸΩ¿ Ÿæ¿ ŸÁÜ©¿ ‡ÇÜ;/// Called when this object is reinserted into the tree after having been
/// removed via [deactivate].
///
/// In most cases, after a [State] object has been deactivated, it is _not_
/// reinserted into the tree, and its [dispose] method will be called to
/// signal that it is ready to be garbage collected.
///
/// In some cases, however, after a [State] object has been deactivated, the
/// framework will reinsert it into another part of the tree (e.g., if the
/// subtree containing this [State] object is grafted from one location in
/// the tree to another due to the use of a [GlobalKey]). If that happens,
/// the framework will call [activate] to give the [State] object a chance to
/// reacquire any resources that it released in [deactivate]. It will then
/// also call [build] to give the object a chance to adapt to its new
/// location in the tree. If the framework does reinsert this subtree, it
/// will do so before the end of the animation frame in which the subtree was
/// removed from the tree. For this reason, [State] objects can defer
/// releasing most resources until the framework calls their [dispose] method.
///
/// The framework does not call this method the first time a [State] object
/// is inserted into the tree. Instead, the framework calls [initState] in
/// that situation.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.
///
/// See also:
///
///  * [Element.activate], the corresponding method when an element
///    transitions from the "inactive" to the "active" lifecycle state.  ¿ ‡_¿ ‡`¿ ‡l¿ ‡m¿ ‡îá◊¿ ÁEÜE/// Called when this object is removed from the tree permanently.
///
/// The framework calls this method when this [State] object will never
/// build again. After the framework calls [dispose], the [State] object is
/// considered unmounted and the [mounted] property is false. It is an error
/// to call [setState] at this point. This stage of the lifecycle is terminal:
/// there is no way to remount a [State] object that has been disposed.
///
/// Subclasses should override this method to release any resources retained
/// by this object (e.g., stop any active animations).
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// ## Application shutdown
///
/// This method is _not_ invoked when the application shuts down, because
/// there is no way to predict when that will happen. For example, a user's
/// battery could catch fire, or the user could drop the device into a
/// swimming pool, or the operating system could unilaterally terminate the
/// application process due to memory pressure.
///
/// Applications are responsible for ensuring that they are well-behaved
/// even in the face of a rapid unscheduled termination.
///
/// To artificially cause the entire widget tree to be disposed, consider
/// calling [runApp] with a widget such as [SizedBox.shrink].
///
/// To listen for platform shutdown messages (and other lifecycle changes),
/// consider the [AppLifecycleListener] API.
///
/// See also:
///
///  * [deactivate], which is called prior to [dispose].  ¿ Á"¿ Á#¿ Á/¿ Á0¿ Ëoï¿ ˝bìÙ/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method in a number of different situations. For
/// example:
///
///  * After calling [initState].
///  * After calling [didUpdateWidget].
///  * After receiving a call to [setState].
///  * After a dependency of this [State] object changes (e.g., an
///    [InheritedWidget] referenced by the previous [build] changes).
///  * After calling [deactivate] and then reinserting the [State] object into
///    the tree at another location.
///
/// This method can potentially be called in every frame and should not have
/// any side effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor, the
/// given [BuildContext], and the internal state of this [State] object.
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. The
/// [BuildContext] argument is always the same as the [context] property of
/// this [State] object and will remain the same for the lifetime of this
/// object. The [BuildContext] argument is provided redundantly here so that
/// this method matches the signature for a [WidgetBuilder].
///
/// ## Design discussion
///
/// ### Why is the [build] method on [State], and not [StatefulWidget]?
///
/// Putting a `Widget build(BuildContext context)` method on [State] rather
/// than putting a `Widget build(BuildContext context, State state)` method
/// on [StatefulWidget] gives developers more flexibility when subclassing
/// [StatefulWidget].
///
/// For example, [AnimatedWidget] is a subclass of [StatefulWidget] that
/// introduces an abstract `Widget build(BuildContext context)` method for its
/// subclasses to implement. If [StatefulWidget] already had a [build] method
/// that took a [State] argument, [AnimatedWidget] would be forced to provide
/// its [State] object to subclasses even though its [State] object is an
/// internal implementation detail of [AnimatedWidget].
///
/// Conceptually, [StatelessWidget] could also be implemented as a subclass of
/// [StatefulWidget] in a similar manner. If the [build] method were on
/// [StatefulWidget] rather than [State], that would not be possible anymore.
///
/// Putting the [build] function on [State] rather than [StatefulWidget] also
/// helps avoid a category of bugs related to closures implicitly capturing
/// `this`. If you defined a closure in a [build] function on a
/// [StatefulWidget], that closure would implicitly capture `this`, which is
/// the current widget instance, and would have the (immutable) fields of that
/// instance in scope:
///
/// ```dart
/// // (this is not valid Flutter code)
/// class MyButton extends StatefulWidgetX {
///   MyButton({super.key, required this.color});
///
///   final Color color;
///
///   @override
///   Widget build(BuildContext context, State state) {
///     return SpecialWidget(
///       handler: () { print('color: $color'); },
///     );
///   }
/// }
/// ```
///
/// For example, suppose the parent builds `MyButton` with `color` being blue,
/// the `$color` in the print function refers to blue, as expected. Now,
/// suppose the parent rebuilds `MyButton` with green. The closure created by
/// the first build still implicitly refers to the original widget and the
/// `$color` still prints blue even through the widget has been updated to
/// green; should that closure outlive its widget, it would print outdated
/// information.
///
/// In contrast, with the [build] function on the [State] object, closures
/// created during [build] implicitly capture the [State] instance instead of
/// the widget instance:
///
/// ```dart
/// class MyButton extends StatefulWidget {
///   const MyButton({super.key, this.color = Colors.teal});
///
///   final Color color;
///   // ...
/// }
///
/// class MyButtonState extends State<MyButton> {
///   // ...
///   @override
///   Widget build(BuildContext context) {
///     return SpecialWidget(
///       handler: () { print('color: ${widget.color}'); },
///     );
///   }
/// }
/// ```
///
/// Now when the parent rebuilds `MyButton` with green, the closure created by
/// the first build still refers to [State] object, which is preserved across
/// rebuilds, but the framework has updated that [State] object's [widget]
/// property to refer to the new `MyButton` instance and `${widget.color}`
/// prints green, as expected.
///
/// See also:
///
///  * [StatefulWidget], which contains the discussion on performance considerations. ¿ ˝h¿ ˝v  ¿ ˝N¿ ˝O¿ ˝ÇÉ@¿ ßÇÂ/// Called when a dependency of this [State] object changes.
///
/// For example, if the previous call to [build] referenced an
/// [InheritedWidget] that later changed, the framework would call this
/// method to notify this object about the change.
///
/// This method is also called immediately after [initState]. It is safe to
/// call [BuildContext.dependOnInheritedWidgetOfExactType] from this method.
///
/// Subclasses rarely override this method because the framework always
/// calls [build] after a dependency changes. Some subclasses do override
/// this method because they need to do some expensive work (e.g., network
/// fetches) when their dependencies change, and that work would be too
/// expensive to do for every build.  ¿ Ñ¿ Ö¿ ë¿ í¿ ∆ÅÁ¿ ◊  ¿ Î&¿  ¿ ∆¿ «¿ ù˝¿ ù˛¿±ÖL¿ËÉ'/// A widget that has a child widget provided to it, instead of building a new
/// widget.
///
/// Useful as a base class for other widgets, such as [InheritedWidget] and
/// [ParentDataWidget].
///
/// See also:
///
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [ParentDataWidget], for widgets that populate the
///    [RenderObject.parentData] slot of their child's [RenderObject] to
///    configure the parent widget's layout.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general. ¿p ¿G¿R7/// Creates a widget that has exactly one child widget.¿U	¿\  ¿`¿o   ¿{Å¿ıÅ^/// The widget below this widget in the tree.
///
/// {@template flutter.widgets.ProxyWidget.child}
/// This widget can only have one child. To lay out multiple children, let this
/// widget's child be a widget such as [Row], [Column], or [Stack], which have a
/// `children` property, and then provide the children to that widget.
/// {@endtemplate}    ¿ˇú@¿WáH/// Base class for widgets that hook [ParentData] information to children of
/// [RenderObjectWidget]s.
///
/// This can be used to provide per-child configuration for
/// [RenderObjectWidget]s with more than one child. For example, [Stack] uses
/// the [Positioned] parent data widget to position each child.
///
/// A [ParentDataWidget] is specific to a particular kind of [ParentData]. That
/// class is `T`, the [ParentData] type argument.
///
/// {@tool snippet}
///
/// This example shows how you would build a [ParentDataWidget] to configure a
/// `FrogJar` widget's children by specifying a [Size] for each one.
///
/// ```dart
/// class FrogSize extends ParentDataWidget<FrogJarParentData> {
///   const FrogSize({
///     super.key,
///     required this.size,
///     required super.child,
///   });
///
///   final Size size;
///
///   @override
///   void applyParentData(RenderObject renderObject) {
///     final FrogJarParentData parentData = renderObject.parentData! as FrogJarParentData;
///     if (parentData.size != size) {
///       parentData.size = size;
///       final RenderFrogJar targetParent = renderObject.parent! as RenderFrogJar;
///       targetParent.markNeedsLayout();
///     }
///   }
///
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [RenderObject], the superclass for layout algorithms.
///  * [RenderObject.parentData], the slot that this class configures.
///  * [ParentData], the superclass of the data that will be placed in
///    [RenderObject.parentData] slots. The `T` type parameter for
///    [ParentDataWidget] is a [ParentData].
///  * [RenderObjectWidget], the class for widgets that wrap [RenderObject]s.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.¿h¿h¿ñÄ’ ¿5¿EÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿H	¿O  ¿S¿c    ¿ÉÌ¿’Éó/// Describes the [RenderObjectWidget] that is typically used to set up the
/// [ParentData] that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this [ParentDataWidget] through
/// [debugTypicalAncestorWidgetDescription].
///
/// ## Implementations
///
/// The returned Type should describe a subclass of `RenderObjectWidget`. If
/// more than one Type is supported, use
/// [debugTypicalAncestorWidgetDescription], which typically inserts this
/// value but can be overridden to describe more than one Type.
///
/// ```dart
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// ```
///
/// If the "typical" parent is generic (`Foo<T>`), consider specifying either
/// a typical type argument (e.g. `Foo<int>` if `int` is typically how the
/// type is specialized), or specifying the upper bound (e.g. `Foo<Object?>`).   ¿˘ÅÚ¿üÅä/// Describes the [RenderObjectWidget] that is typically used to set up the
/// [ParentData] that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this [ParentDataWidget].
///
/// Returns [debugTypicalAncestorWidgetClass] by default as a String. This can
/// be overridden to describe more than one Type of valid parent.   ¿oO¿ê   ¿o¿p¿¬ÇB¿kÅë/// Checks if this widget can apply its parent data to the provided
/// `renderObject`.
///
/// The [RenderObject.parentData] of the provided `renderObject` is
/// typically set up by an ancestor [RenderObjectWidget] of the type returned
/// by [debugTypicalAncestorWidgetClass].
///
/// This is called just before [applyParentData] is invoked with the same
/// [RenderObject] provided to that method. ¿Ñ¿í   ¿ÔÖ2¿	  ¿5¿K  ¿Z%¿o  ¿Ö¿ó   ¿%Ñc¿"]Ñ/// Write the data from this widget into the given render object's parent data.
///
/// The framework calls this function whenever it detects that the
/// [RenderObject] associated with the [child] has outdated
/// [RenderObject.parentData]. For example, if the render object was recently
/// inserted into the render tree, the render object's parent data might not
/// match the data in this widget.
///
/// Subclasses are expected to override this function to copy data from their
/// fields into the [RenderObject.parentData] field of the given render
/// object. The render object's parent is guaranteed to have been created by a
/// widget of type `T`, which usually means that this function can assume that
/// the render object's parent data object inherits from a particular class.
///
/// If this function modifies data that can change the parent's layout or
/// painting, this function is responsible for calling
/// [RenderObject.markNeedsLayout] or [RenderObject.markNeedsPaint] on the
/// parent, as appropriate. ¿"m¿"{  ¿"K¿"L¿"åÅ±¿$Åh/// Whether the [ParentDataElement.applyWidgetOutOfTurn] method is allowed
/// with this widget.
///
/// This should only return true if this widget represents a [ParentData]
/// configuration that will have no impact on the layout or paint phase.
///
/// See also:
///
///  * [ParentDataElement.applyWidgetOutOfTurn], which verifies this in debug
///    mode.  ¿$	¿$
 ¿$Aóˇ¿8ì¥/// Base class for widgets that efficiently propagate information down the tree.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=og-vJqLzg2c}
///
/// To obtain the nearest instance of a particular type of inherited widget from
/// a build context, use [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// Inherited widgets, when referenced in this way, will cause the consumer to
/// rebuild when the inherited widget itself changes state.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=Zbm3hjPjQMk}
///
/// {@tool snippet}
///
/// The following is a skeleton of an inherited widget called `FrogColor`:
///
/// ```dart
/// class FrogColor extends InheritedWidget {
///   const FrogColor({
///     super.key,
///     required this.color,
///     required super.child,
///   });
///
///   final Color color;
///
///   static FrogColor? maybeOf(BuildContext context) {
///     return context.dependOnInheritedWidgetOfExactType<FrogColor>();
///   }
///
///   static FrogColor of(BuildContext context) {
///     final FrogColor? result = maybeOf(context);
///     assert(result != null, 'No FrogColor found in context');
///     return result!;
///   }
///
///   @override
///   bool updateShouldNotify(FrogColor oldWidget) => color != oldWidget.color;
/// }
/// ```
/// {@end-tool}
///
/// ## Implementing the `of` and `maybeOf` methods
///
/// The convention is to provide two static methods, `of` and `maybeOf`, on the
/// [InheritedWidget] which call
/// [BuildContext.dependOnInheritedWidgetOfExactType]. This allows the class to
/// define its own fallback logic in case there isn't a widget in scope.
///
/// The `of` method typically returns a non-nullable instance and asserts if the
/// [InheritedWidget] isn't found, and the `maybeOf` method returns a nullable
/// instance, and returns null if the [InheritedWidget] isn't found. The `of`
/// method is typically implemented by calling `maybeOf` internally.
///
/// Sometimes, the `of` and `maybeOf` methods return some data rather than the
/// inherited widget itself; for example, in this case it could have returned a
/// [Color] instead of the `FrogColor` widget.
///
/// Occasionally, the inherited widget is an implementation detail of another
/// class, and is therefore private. The `of` and `maybeOf` methods in that case
/// are typically implemented on the public class instead. For example, [Theme]
/// is implemented as a [StatelessWidget] that builds a private inherited
/// widget; [Theme.of] looks for that private inherited widget using
/// [BuildContext.dependOnInheritedWidgetOfExactType] and then returns the
/// [ThemeData] inside it.
///
/// ## Calling the `of` or `maybeOf` methods
///
/// When using the `of` or `maybeOf` methods, the `context` must be a descendant
/// of the [InheritedWidget], meaning it must be "below" the [InheritedWidget]
/// in the tree.
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the [Builder], which is
/// a child of the `FrogColor` widget, so this works.
///
/// ```dart
/// // continuing from previous example...
/// class MyPage extends StatelessWidget {
///   const MyPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Builder(
///           builder: (BuildContext innerContext) {
///             return Text(
///               'Hello Frog',
///               style: TextStyle(color: FrogColor.of(innerContext).color),
///             );
///           },
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the `MyOtherPage`
/// widget, which is a parent of the `FrogColor` widget, so this does not work,
/// and will assert when `FrogColor.of` is called.
///
/// ```dart
/// // continuing from previous example...
///
/// class MyOtherPage extends StatelessWidget {
///   const MyOtherPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Text(
///           'Hello Frog',
///           style: TextStyle(color: FrogColor.of(context).color),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool} {@youtube 560 315 https://www.youtube.com/watch?v=1t-8rBCGBYw}
///
/// See also:
///
/// * [StatefulWidget] and [State], for widgets that can build differently
///   several times over their lifetime.
/// * [StatelessWidget], for widgets that always build the same way given a
///   particular configuration and ambient state.
/// * [Widget], for an overview of widgets in general.
/// * [InheritedNotifier], an inherited widget whose value can be a
///   [Listenable], and which will notify dependents whenever the value sends
///   notifications.
/// * [InheritedModel], an inherited widget that allows clients to subscribe to
///   changes for subparts of the value. ¿8-Ä‘ ¿8Ã¿8€Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿8ﬁ	¿8Â  ¿8È¿8˘     ¿9G¿9"   ¿9¿9¿9PÇÓ¿<Çã/// Whether the framework should notify widgets that inherit from this widget.
///
/// When this widget is rebuilt, sometimes we need to rebuild the widgets that
/// inherit from this widget but sometimes we do not. For example, if the data
/// held by this widget is the same as the data held by `oldWidget`, then we
/// do not need to rebuild the widgets that inherited the data held by
/// `oldWidget`.
///
/// The framework distinguishes these cases by calling this function with the
/// widget that previously occupied this location in the tree as an argument.
/// The given widget is guaranteed to have the same [runtimeType] as this
/// object. ¿<#¿<4  ¿;Ù¿;ı ¿<Bä¿?Ç√/// [RenderObjectWidget]s provide the configuration for [RenderObjectElement]s,
/// which wrap [RenderObject]s, which provide the actual rendering of the
/// application.
///
/// Usually, rather than subclassing [RenderObjectWidget] directly, render
/// object widgets subclass one of:
///
///  * [LeafRenderObjectWidget], if the widget has no children.
///  * [SingleChildRenderObjectElement], if the widget has exactly one child.
///  * [MultiChildRenderObjectWidget], if the widget takes a list of children.
///  * [SlottedMultiChildRenderObjectWidget], if the widget organizes its
///    children in different named slots.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿?;Ä¡ ¿?⁄¿?ÏÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿?Ô	¿?ˆ     ¿@ Äâ¿@yK/// RenderObjectWidgets always inflate to a [RenderObjectElement] subclass.  ¿@N¿@O¿@Z¿@[¿@çÇ<¿B†Å€/// Creates an instance of the [RenderObject] class that this
/// [RenderObjectWidget] represents, using the configuration described by this
/// [RenderObjectWidget].
///
/// This method should not do anything with the children of the render object.
/// That should instead be handled by the method that overrides
/// [RenderObjectElement.mount] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.mount]. ¿B≥¿B¡  ¿B{¿B|¿Bà¿Bâ¿BÕÇl¿DËÅˆ/// Copies the configuration described by this [RenderObjectWidget] to the
/// given [RenderObject], which will be of the same type as returned by this
/// object's [createRenderObject].
///
/// This method should not do anything to update the children of the render
/// object. That should instead be handled by the method that overrides
/// [RenderObjectElement.update] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.update]. ¿D˚¿E	  ¿E#¿E)  ¿D÷¿D◊¿E=Å¿FÄ«/// A render object previously associated with this widget has been removed
/// from the tree. The given [RenderObject] will be of the same type as
/// returned by this object's [createRenderObject]. ¿F4#¿FL  ¿F¿F ¿F`Ç%¿G/Äø/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have no children.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿GeÄ≈ ¿H¿HÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿H	¿H$     ¿H.U¿HR   ¿H.¿H/ ¿HáÉÔ¿JyÅ‚/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single child slot.
///
/// The render object assigned to this widget should make use of
/// [RenderObjectWithChildMixin] to implement a single-child model. The mixin
/// exposes a [RenderObjectWithChildMixin.child] property that allows retrieving
/// the render object belonging to the [child] widget.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿J∂Äÿ ¿KU¿KrÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿Ku	¿K|  ¿KÄ
¿KÜ   ¿Kíz¿L`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  ¿Lc¿L<   ¿L¿L ¿Lxåí¿PªÑ3/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single list of children. (This superclass only provides the
/// storage for that child list, it doesn't actually provide the updating
/// logic.)
///
/// Subclasses must use a [RenderObject] that mixes in
/// [ContainerRenderObjectMixin], which provides the necessary functionality to
/// visit the children of the container render object (the render object
/// belonging to the [children] widgets). Typically, subclasses will use a
/// [RenderBox] that mixes in both [ContainerRenderObjectMixin] and
/// [RenderBoxContainerDefaultsMixin].
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject].
///
/// See also:
///
///  * [Stack], which uses [MultiChildRenderObjectWidget].
///  * [RenderStack], for an example implementation of the associated render
///    object.
///  * [SlottedMultiChildRenderObjectWidget], which configures a
///    [RenderObject] that instead of having a single list of children organizes
///    its children in named slots. ¿P˜} ¿Q&¿QB&/// Initializes fields for subclasses.¿QE	¿QL  ¿QP ¿QV  ¿Q`¿Qn¿Qo¿Qf¿Qm¿Qg¿Qxá*¿XöÜ¶/// The widgets below this widget in the tree.
///
/// If this list is going to be mutated, it is usually wise to put a [Key] on
/// each of the child widgets, so that the framework can match old
/// configurations to new configurations and maintain the underlying render
/// objects.
///
/// Also, a [Widget] in Flutter is immutable, so directly modifying the
/// [children] such as `someMultiChildRenderObjectWidget.children.add(...)` or
/// as the example code below will result in incorrect behaviors. Whenever the
/// children list is modified, a new list object should be provided.
///
/// ```dart
/// // This code is incorrect.
/// class SomeWidgetState extends State<SomeWidget> {
///   final List<Widget> _children = <Widget>[];
///
///   void someHandler() {
///     setState(() {
///       _children.add(const ChildWidget());
///     });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     // Reusing `List<Widget> _children` here is problematic.
///     return Row(children: _children);
///   }
/// }
/// ```
///
/// The following code corrects the problem mentioned above.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   final List<Widget> _children = <Widget>[];
///
///   void someHandler() {
///     setState(() {
///       // The key here allows Flutter to reuse the underlying render
///       // objects even if the children list is recreated.
///       _children.add(ChildWidget(key: UniqueKey()));
///     });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     // Always create a new list of children as a Widget is immutable.
///     return Row(children: _children.toList());
///   }
/// }
/// ```  ¿Xßa¿X—   ¿Xß¿X® ¿Ybá•¿Yh   ¿Y~¿YÉ ¿Yç¿Yñ1¿Y© ¿Yµ¿Yº¿Yƒ¿YΩ¿Y≈¿Y∆ ¿YÃÇ¿Y—  ¿Y⁄¿Y„   ¿[ÌÅ¿[Ú    ¿]ÅY¿]  ¿]&¿]/   ¿^`Å¿^e  ¿^i¿^r   ¿_pÄÊ¿_u  ¿_|¿_Ö   ¿`ZÄ´¿`_  ¿`m¿`v    ¿bˇ¿ Zw¿uúíç/// A handle to the location of a widget in the widget tree.
///
/// This class presents a set of methods that can be used from
/// [StatelessWidget.build] methods and from methods on [State] objects.
///
/// [BuildContext] objects are passed to [WidgetBuilder] functions (such as
/// [StatelessWidget.build]), and are available from the [State.context] member.
/// Some static functions (e.g. [showDialog], [Theme.of], and so forth) also
/// take build contexts so that they can act on behalf of the calling widget, or
/// obtain data specifically for the given context.
///
/// Each widget has its own [BuildContext], which becomes the parent of the
/// widget returned by the [StatelessWidget.build] or [State.build] function.
/// (And similarly, the parent of any children for [RenderObjectWidget]s.)
///
/// In particular, this means that within a build method, the build context of
/// the widget of the build method is not the same as the build context of the
/// widgets returned by that build method. This can lead to some tricky cases.
/// For example, [Theme.of(context)] looks for the nearest enclosing [Theme] of
/// the given build context. If a build method for a widget Q includes a [Theme]
/// within its returned widget tree, and attempts to use [Theme.of] passing its
/// own context, the build method for Q will not find that [Theme] object. It
/// will instead find whatever [Theme] was an ancestor to the widget Q. If the
/// build context for a subpart of the returned tree is needed, a [Builder]
/// widget can be used: the build context passed to the [Builder.builder]
/// callback will be that of the [Builder] itself.
///
/// For example, in the following snippet, the [ScaffoldState.showBottomSheet]
/// method is called on the [Scaffold] widget that the build method itself
/// creates. If a [Builder] had not been used, and instead the `context`
/// argument of the build method itself had been used, no [Scaffold] would have
/// been found, and the [Scaffold.of] function would have returned null.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   // here, Scaffold.of(context) returns null
///   return Scaffold(
///     appBar: AppBar(title: const Text('Demo')),
///     body: Builder(
///       builder: (BuildContext context) {
///         return TextButton(
///           child: const Text('BUTTON'),
///           onPressed: () {
///             Scaffold.of(context).showBottomSheet<void>(
///               (BuildContext context) {
///                 return Container(
///                   alignment: Alignment.center,
///                   height: 200,
///                   color: Colors.amber,
///                   child: Center(
///                     child: Column(
///                       mainAxisSize: MainAxisSize.min,
///                       children: <Widget>[
///                         const Text('BottomSheet'),
///                         ElevatedButton(
///                           child: const Text('Close BottomSheet'),
///                           onPressed: () {
///                             Navigator.pop(context);
///                           },
///                         )
///                       ],
///                     ),
///                   ),
///                 );
///               },
///             );
///           },
///         );
///       },
///     )
///   );
/// }
/// ```
///
/// The [BuildContext] for a particular widget can change location over time as
/// the widget is moved around the tree. Because of this, values returned from
/// the methods on this class should not be cached beyond the execution of a
/// single synchronous function.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=rIaaH87z1-g}
///
/// Avoid storing instances of [BuildContext]s because they may become invalid
/// if the widget they are associated with is unmounted from the widget tree.
/// {@template flutter.widgets.BuildContext.asynchronous_gap}
/// If a [BuildContext] is used across an asynchronous gap (i.e. after performing
/// an asynchronous operation), consider checking [mounted] to determine whether
/// the context is still valid before interacting with it:
///
/// ```dart
///   @override
///   Widget build(BuildContext context) {
///     return OutlinedButton(
///       onPressed: () async {
///         await Future<void>.delayed(const Duration(seconds: 1));
///         if (context.mounted) {
///           Navigator.of(context).pop();
///         }
///       },
///       child: const Text('Delayed pop'),
///     );
///   }
/// ```
/// {@endtemplate}
///
/// [BuildContext] objects are actually [Element] objects. The [BuildContext]
/// interface is used to discourage direct manipulation of [Element] objects.   ¿u≠`¿vK/// The current configuration of the [Element] that is this [BuildContext].   ¿vÄò¿v£}/// The [BuildOwner] for this context. The [BuildOwner] is in charge of
/// managing the rendering pipeline for this context.   ¿v≠Å…¿xnÅ£/// Whether the [Widget] this context is associated with is currently
/// mounted in the widget tree.
///
/// Accessing the properties of the [BuildContext] or calling any methods on
/// it is only valid while mounted is true. If mounted is false, assertions
/// will trigger.
///
/// Once unmounted, a given [BuildContext] will never become mounted again.
///
/// {@macro flutter.widgets.BuildContext.asynchronous_gap}   ¿xzÇ…¿{3Çì/// Whether the [widget] is currently updating the widget or render tree.
///
/// For [StatefulWidget]s and [StatelessWidget]s this flag is true while
/// their respective build methods are executing.
/// [RenderObjectWidget]s set this to true while creating or configuring their
/// associated [RenderObject]s.
/// Other [Widget] types may set this to true for conceptually similar phases
/// of their lifecycle.
///
/// When this is true, it is safe for [widget] to establish a dependency to an
/// [InheritedWidget] by calling [dependOnInheritedElement] or
/// [dependOnInheritedWidgetOfExactType].
///
/// Accessing this flag in release mode is not valid.   ¿ÄúÑ+¿Ñ¬Éı/// The size of the [RenderBox] returned by [findRenderObject].
///
/// This getter will only return a valid result after the layout phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from paint callbacks or interaction event
/// handlers (e.g. gesture callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// This getter will only return a valid result if [findRenderObject] actually
/// returns a [RenderBox]. If [findRenderObject] returns a render object that
/// is not a subtype of [RenderBox] (e.g., [RenderView]), this getter will
/// throw an exception in debug mode and will return null in release mode.
///
/// Calling this getter is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿{GÖQ¿ÄÖÑˇ/// The current [RenderObject] for the widget. If the widget is a
/// [RenderObjectWidget], this is the render object that the widget created
/// for itself. Otherwise, it is the render object of the first descendant
/// [RenderObjectWidget].
///
/// This method will only return a valid result after the build phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from interaction event handlers (e.g.
/// gesture callbacks) or layout or paint callbacks. It is also not valid to
/// call if [State.mounted] returns false.
///
/// If the render object is a [RenderBox], which is the common case, then the
/// size of the render object can be obtained from the [size] getter. This is
/// only valid after the layout phase, and should therefore only be examined
/// from paint callbacks or interaction event handlers (e.g. gesture
/// callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// Calling this method is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿ÑÀÇ_¿Ü‚Å/// Registers this build context with [ancestor] such that when
/// [ancestor]'s widget changes this build context is rebuilt.
///
/// Returns `ancestor.widget`.
///
/// This method is rarely called directly. Most applications should use
/// [dependOnInheritedWidgetOfExactType], which calls this method after finding
/// the appropriate [InheritedElement] ancestor.
///
/// All of the qualifications about when [dependOnInheritedWidgetOfExactType] can
/// be called apply to this method as well. ¿Ü˚¿á  ¿á¿á!   ¿á.ä4¿ëâÑ/// Returns the nearest widget of the given type `T` and creates a dependency
/// on it, or null if no appropriate widget is found.
///
/// The widget found will be a concrete [InheritedWidget] subclass, and
/// calling [dependOnInheritedWidgetOfExactType] registers this build context
/// with the returned widget. When that widget changes (or a new widget of
/// that type is introduced, or the widget goes away), this build context is
/// rebuilt so that it can obtain new values from that widget.
///
/// {@template flutter.widgets.BuildContext.dependOnInheritedWidgetOfExactType}
/// This is typically called implicitly from `of()` static methods, e.g.
/// [Theme.of].
///
/// This method should not be called from widget constructors or from
/// [State.initState] methods, because those methods would not get called
/// again if the inherited value were to change. To ensure that the widget
/// correctly updates itself when the inherited value changes, only call this
/// (directly or indirectly) from build methods, layout and paint callbacks,
/// or from [State.didChangeDependencies] (which is called immediately after
/// [State.initState]).
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, as long as
/// that value is not cached and/or reused later.
///
/// Calling this method is O(1) with a small constant factor, but will lead to
/// the widget being rebuilt more often.
///
/// Once a widget registers a dependency on a particular type by calling this
/// method, it will be rebuilt, and [State.didChangeDependencies] will be
/// called, whenever changes occur relating to that widget until the next time
/// the widget or one of its ancestors is moved (for example, because an
/// ancestor is added or removed).
///
/// The [aspect] parameter is only used when `T` is an
/// [InheritedWidget] subclasses that supports partial updates, like
/// [InheritedModel]. It specifies what "aspect" of the inherited
/// widget this context depends on.
/// {@endtemplate}¿ë3¿ë3¿ëP¿ëY   ¿ëfÑÑ¿ïØÑ/// Returns the nearest widget of the given [InheritedWidget] subclass `T` or
/// null if an appropriate ancestor is not found.
///
/// This method does not introduce a dependency the way that the more typical
/// [dependOnInheritedWidgetOfExactType] does, so this context will not be
/// rebuilt if the [InheritedWidget] changes. This function is meant for those
/// uncommon use cases where a dependency is undesirable.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, as long as
/// that value is not cached and/or reused later.
///
/// Calling this method is O(1) with a small constant factor.¿ïÕ¿ïÕ  ¿ïÓÑ¿ôºÉó/// Obtains the element corresponding to the nearest widget of the given type `T`,
/// which must be the type of a concrete [InheritedWidget] subclass.
///
/// Returns null if no such element is found.
///
/// {@template flutter.widgets.BuildContext.getElementForInheritedWidgetOfExactType}
/// Calling this method is O(1) with a small constant factor.
///
/// This method does not establish a relationship with the target in the way
/// that [dependOnInheritedWidgetOfExactType] does.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor by calling
/// [dependOnInheritedWidgetOfExactType] in [State.didChangeDependencies]. It is
/// safe to use this method from [State.deactivate], which is called whenever
/// the widget is removed from the tree.
/// {@endtemplate}¿ô‰¿ô‰  ¿öÜi¿†<Öˇ/// Returns the nearest ancestor widget of the given type `T`, which must be the
/// type of a concrete [Widget] subclass.
///
/// {@template flutter.widgets.BuildContext.findAncestorWidgetOfExactType}
/// In general, [dependOnInheritedWidgetOfExactType] is more useful, since
/// inherited widgets will trigger consumers to rebuild when they change. This
/// method is appropriate when used in interaction event handlers (e.g.
/// gesture callbacks) or for performing one-off tasks such as asserting that
/// you have or don't have a widget of a specific type as an ancestor. The
/// return value of a Widget's build method should not depend on the value
/// returned by this method, because the build context will not rebuild if the
/// return value of this method changes. This could lead to a situation where
/// data used in the build method changes, but the widget is not rebuilt.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorWidgetOfExactType] in [State.didChangeDependencies].
///
/// Returns null if a widget of the requested type does not appear in the
/// ancestors of this context.
/// {@endtemplate}¿†Z¿†Z  ¿†rÜı¿ß<ÜÑ/// Returns the [State] object of the nearest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findAncestorStateOfType}
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful for changing the state of an ancestor widget in
/// a one-off manner, for example, to cause an ancestor scrolling list to
/// scroll this build context's widget into view, or to move the focus in
/// response to user interaction.
///
/// In general, though, consider using a callback that triggers a stateful
/// change in the ancestor rather than using the imperative style implied by
/// this method. This will usually lead to more maintainable and reusable code
/// since it decouples widgets from each other.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorStateOfType] in [State.didChangeDependencies].
/// {@endtemplate}
///
/// {@tool snippet}
///
/// ```dart
/// ScrollableState? scrollable = context.findAncestorStateOfType<ScrollableState>();
/// ```
/// {@end-tool}¿ßT¿ßT  ¿ßkÇQ¿©çÇ/// Returns the [State] object of the furthest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findRootAncestorStateOfType}
/// Functions the same way as [findAncestorStateOfType] but keeps visiting subsequent
/// ancestors until there are none of the type instance of `T` remaining.
/// Then returns the last one found.
///
/// This operation is O(N) as well though N is the entire widget tree rather than
/// a subtree.
/// {@endtemplate}¿©©¿©©  ¿©¿Ög¿ÆÓÖ /// Returns the [RenderObject] object of the nearest ancestor [RenderObjectWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findAncestorRenderObjectOfType}
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful only in esoteric cases where a widget needs
/// to cause an ancestor to change its layout or paint behavior. For example,
/// it is used by [Material] so that [InkWell] widgets can trigger the ink
/// splash on the [Material]'s actual render object.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorRenderObjectOfType] in [State.didChangeDependencies].
/// {@endtemplate}¿Ø¿Ø  ¿Ø+É€¿≤ÕÉz/// Walks the ancestor chain, starting with the parent of this build context's
/// widget, invoking the argument for each ancestor.
///
/// {@template flutter.widgets.BuildContext.visitAncestorElements}
/// The callback is given a reference to the ancestor widget's corresponding
/// [Element] object. The walk stops when it reaches the root widget or when
/// the callback returns false. The callback must not return null.
///
/// This is useful for inspecting the widget tree.
///
/// Calling this method is relatively expensive (O(N) in the depth of the tree).
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the element tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [visitAncestorElements] in [State.didChangeDependencies].
/// {@endtemplate} ¿≤„!¿≤˛   ¿≥
Ñv¿∑UÑ/// Walks the children of this widget.
///
/// {@template flutter.widgets.BuildContext.visitChildElements}
/// This is useful for applying changes to children after they are built
/// without waiting for the next frame, especially if the children are known,
/// and especially if there is exactly one child (as is always the case for
/// [StatefulWidget]s or [StatelessWidget]s).
///
/// Calling this method is very cheap for build contexts that correspond to
/// [StatefulWidget]s or [StatelessWidget]s (O(1), since there's only one
/// child).
///
/// Calling this method is potentially expensive for build contexts that
/// correspond to [RenderObjectWidget]s (O(N) in the number of children).
///
/// Calling this method recursively is extremely expensive (O(N) in the number
/// of descendants), and should be avoided if possible. Generally it is
/// significantly cheaper to use an [InheritedWidget] and have the descendants
/// pull data down, than it is to use [visitChildElements] recursively to push
/// data down to them.
/// {@endtemplate} ¿∑h¿∑x   ¿∑ÑÅ.¿∏ÇÄÓ/// Start bubbling this notification at the given build context.
///
/// The notification will be delivered to any [NotificationListener] widgets
/// with the appropriate type parameters that are ancestors of the given
/// [BuildContext]. ¿∏ó¿∏•   ¿∏∂Åè¿πÂÅ/// Returns a description of the [Element] associated with the current build context.
///
/// The `name` is typically something like "The element being rebuilt was".
///
/// See also:
///
///  * [Element.describeElements], which can be used to describe a list of elements. ¿πı¿π˝  ¿∫?¿∫  ¿∫ ¿∫4¿∫5¿∫IÅ¿ªÄ£/// Returns a description of the [Widget] associated with the current build context.
///
/// The `name` is typically something like "The widget being rebuilt was". ¿ª¿ª  ¿ª ?¿ª6  ¿ª=¿ªQ¿ªR¿ªfÅ¿ºEÄ¿/// Adds a description of a specific type of widget missing from the current
/// build context's ancestry tree.
///
/// You can find an example of using this method in [debugCheckHasMaterial]. ¿º_"¿ºn   ¿ºâÄÎ¿ΩPÄÆ/// Adds a description of the ownership chain from a specific [Element]
/// to the error report.
///
/// The ownership chain is useful for debugging the source of an element. ¿Ωg¿Ωo    ¿Ωx¿ sÎ¿¡ûÑ/// Manager class for the widgets framework.
///
/// This class tracks which widgets need rebuilding, and handles other tasks
/// that apply to widget trees as a whole, such as managing the inactive element
/// list for the tree and triggering the "reassemble" command when necessary
/// during hot reload when debugging.
///
/// The main build owner is typically owned by the [WidgetsBinding], and is
/// driven from the operating system along with the rest of the
/// build/layout/paint pipeline.
///
/// Additional build owners can be built to manage off-screen widget trees.
///
/// To assign a build owner to a tree, use the
/// [RootElementMixin.assignOwner] method on the root element of the
/// widget tree.
///
/// {@tool dartpad}
/// This example shows how to build an off-screen widget tree used to measure
/// the layout size of the rendered tree. For some use cases, the simpler
/// [Offstage] widget may be a better alternative to this approach.
///
/// ** See code in examples/api/lib/widgets/framework/build_owner.0.dart **
/// {@end-tool} ¿¡≠Ç ¿√-¿√7Åq/// Creates an object that manages widgets.
///
/// If the `focusManager` argument is not specified or is null, this will
/// construct a new [FocusManager] and register its global input handlers
/// via [FocusManager.registerGlobalHandlers], which will modify static
/// state. Callers wishing to avoid altering this state can explicitly pass
/// a focus manager here.¿√:¿√@  ¿√Q¿√`  ¿√Ñ¿√w¿√ì¿√Ü¿√ñ¿√ø¿√ó¿√£¿√§¿√•¿√ß¿√Ω¿√æ¿√≈v¿ƒ+S/// Called on each build pass when the first buildable element is marked
/// dirty. ¿ƒ@?¿ƒX ¿ƒl¿ƒ}¿ƒ~¿ƒÑ0¿ƒò ¿ƒ≤¿ƒ≥¿ƒ©¿ƒ±¿ƒ™¿ƒ∏)¿ƒΩ ¿ƒ‹¿ƒÊÅ\¿∆&Å+/// Whether [_dirtyElements] need to be sorted again as a result of more
/// elements becoming dirty during the build.
///
/// This is necessary to preserve the sort order defined by [Element._sort].
///
/// This field is set to null when [buildScope] is not actively rebuilding
/// the widget tree. ¿«"ÇU¿…kÇ#/// The object in charge of the focus tree.
///
/// Rarely used directly. Instead, consider using [FocusScope.of] to obtain
/// the [FocusScopeNode] for a given [BuildContext].
///
/// See [FocusManager] for more details.
///
/// This field will default to a [FocusManager] that has registered its
/// global input handlers via [FocusManager.registerGlobalHandlers]. Callers
/// wishing to avoid registering those handlers (and modifying the associated
/// static state) can explicitly pass a focus manager to the [BuildOwner.new]
/// constructor. ¿“æ¿“¬ ¿“Ÿ¿”¨¿”± ¿”¬¿”À!¿”‘  ¿˜\¿˜:  ¿˘ÖI¿˘£ ¿˘Ã¿˘Õ¿˘∏¿˘À¿˘π¿˘ƒ¿˙ea¿˙á ¿˙e¿˙f¿˙´¿˙¿¿˙†¿˙≠¿˙¥¿˙º¿˙µ¿˙Ω¿˙æ¿˙¬¿¸@Äë¿¸{ ¿¸@¿¸A¿¸§¿¸À¿¸ô¿¸»¿¸…¿¸¶¿¸«¿¸ß¿¸∞¿¸≥¿¸∆¿¸¥¿¸Ω¿¸Õ¿∆GÄ◊¿∆·Ää/// Whether [buildScope] is actively rebuilding the widget tree.
///
/// [scheduleBuildFor] should only be called when this value is true.   ¿“ﬁ7¿“Á    ¿”Äê¿”â`/// Whether this widget tree is in the build phase.
///
/// Only valid when asserts are enabled.   ¿¸÷Äº¿˝fÄÉ/// The number of [GlobalKey] instances that are currently associated with
/// [Element]s that have been built by this build owner.   ¿…|â>¿ ÄÅ/// Adds an element to the dirty elements list so that it will be rebuilt
/// when [WidgetsBinding.drawFrame] calls [buildScope]. ¿ ¿ !   ¿”ÒÇ8¿‘ﬂÄﬁ/// Establishes a scope in which calls to [State.setState] are forbidden, and
/// calls the given `callback`.
///
/// This mechanism is used to ensure that, for instance, [State.dispose] does
/// not call [State.setState]. ¿‘È¿‘˜   ¿÷-†Î¿€`ÑŒ/// Establishes a scope for updating the widget tree, and calls the given
/// `callback`, if any. Then, builds all the elements that were marked as
/// dirty using [scheduleBuildFor], in depth order.
///
/// This mechanism prevents build methods from transitively requiring other
/// build methods to run, potentially causing infinite loops.
///
/// The dirty list is processed after `callback` returns, building all the
/// elements that were marked as dirty using [scheduleBuildFor], in depth
/// order. If elements are marked as dirty while this method is running, they
/// must be deeper than the `context` node, and deeper than any
/// previously-built node in this pass.
///
/// To flush the current dirty list without performing any other work, this
/// function can be called with no callback. This is what the framework does
/// each frame, in [WidgetsBinding.drawFrame].
///
/// Only one [buildScope] can be active at a time.
///
/// A [buildScope] implies a [lockState] scope as well.
///
/// To print a console message every time this method is called, set
/// [debugPrintBuildScope] to true. This is useful when debugging problems
/// involving widgets not getting marked dirty, or getting marked dirty too
/// often. ¿€k¿€t  ¿€~¿€ç  ¿€.¿€/¿€5¿€W¿€6¿˜}Å~¿˜Ç  ¿˜≈¿˜Œ  ¿˜”¿˜ﬁ   ¿¯ˇÄÇ¿˘  ¿˘¿˘%   ¿˝ñÄµ¿˝õ  ¿˝ø¿˝»  ¿˝œ¿˝ÿ   ¿˛OÅÖ¿˛T  ¿˛g¿˛r  ¿˛v¿˛   ¿ˇÿÅØ¿ˇ›  ¿ˇÚ¿ˇ˝  ¿ ¿ 
   ¿ãÅ ¿ê  ¿™¿≥  ¿∫¿√  ¿…¿‘   ¿èç4¿î    ¿«Ü˛¿Ã    ¿…óÍ¿éÅ~/// Complete the element build pass by unmounting any elements that are no
/// longer active.
///
/// This is called by [WidgetsBinding.drawFrame].
///
/// In debug mode, this also runs some sanity checks, for example checking for
/// duplicate global keys.
///
/// After the current call stack unwinds, a microtask that notifies listeners
/// about changes to global keys will run.  ¿\¿]¿c¿Ö¿d¿.∑Ç™¿0ÅP/// Cause the entire subtree rooted at the given [Element] to be entirely
/// rebuilt. This is used by development tools when the application code has
/// changed and is being hot-reloaded, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development. ¿0$¿0-    ¿4ÅG¿4  ¿4'- ¿4'¿48 ¿49¿4?  ¿4F¿4L   ¿4X¿4p  ¿4{¿4é   ¿4ôÄ∑¿4û  ¿4≥¿4¡    ¿6¿:l¿B—åµ/// An instantiation of a [Widget] at a particular location in the tree.
///
/// Widgets describe how to configure a subtree but the same widget can be used
/// to configure multiple subtrees simultaneously because widgets are immutable.
/// An [Element] represents the use of a widget to configure a specific location
/// in the tree. Over time, the widget associated with a given element can
/// change, for example, if the parent widget rebuilds and creates a new widget
/// for this location.
///
/// Elements form a tree. Most elements have a unique child, but some widgets
/// (e.g., subclasses of [RenderObjectElement]) can have multiple children.
///
/// Elements have the following lifecycle:
///
///  * The framework creates an element by calling [Widget.createElement] on the
///    widget that will be used as the element's initial configuration.
///  * The framework calls [mount] to add the newly created element to the tree
///    at a given slot in a given parent. The [mount] method is responsible for
///    inflating any child widgets and calling [attachRenderObject] as
///    necessary to attach any associated render objects to the render tree.
///  * At this point, the element is considered "active" and might appear on
///    screen.
///  * At some point, the parent might decide to change the widget used to
///    configure this element, for example because the parent rebuilt with new
///    state. When this happens, the framework will call [update] with the new
///    widget. The new widget will always have the same [runtimeType] and key as
///    old widget. If the parent wishes to change the [runtimeType] or key of
///    the widget at this location in the tree, it can do so by unmounting this
///    element and inflating the new widget at this location.
///  * At some point, an ancestor might decide to remove this element (or an
///    intermediate ancestor) from the tree, which the ancestor does by calling
///    [deactivateChild] on itself. Deactivating the intermediate ancestor will
///    remove that element's render object from the render tree and add this
///    element to the [owner]'s list of inactive elements, causing the framework
///    to call [deactivate] on this element.
///  * At this point, the element is considered "inactive" and will not appear
///    on screen. An element can remain in the inactive state only until
///    the end of the current animation frame. At the end of the animation
///    frame, any elements that are still inactive will be unmounted.
///  * If the element gets reincorporated into the tree (e.g., because it or one
///    of its ancestors has a global key that is reused), the framework will
///    remove the element from the [owner]'s list of inactive elements, call
///    [activate] on the element, and reattach the element's render object to
///    the render tree. (At this point, the element is again considered "active"
///    and might appear on screen.)
///  * If the element does not get reincorporated into the tree by the end of
///    the current animation frame, the framework will call [unmount] on the
///    element.
///  * At this point, the element is considered "defunct" and will not be
///    incorporated into the tree in the future. ¿CÅï ¿C°¿C®Ää/// Creates an element that uses the given widget as its configuration.
///
/// Typically called by an override of [Widget.createElement].¿C©¿C±  ¿C∆¿Cæ¿C»¿D©¿D≤  ¿DΩ$¿D–  ¿JÕ¿J’  ¿Lf¿Lo  ¿R∫¿R¬  ¿V|¿Và  ¿lT=¿lf ¿lx¿lâ¿lä¿ÊÒo¿Á ¿ÊÒ¿ÊÚ¿ÁE¿ÁZ¿Á:¿ÁG¿ÁN¿ÁV¿ÁO¿ÁW¿ÁX¿Á\¿#z=¿#•  ¿#ª$¿#“  ¿#„(¿#Ë ¿$¿Hˇ¿I ¿I¿I∞¿Iµ ¿Iƒ¿J	¿J ¿J ¿IèÅ;¿JºÅ/// Information set by parent to define where this child fits in its parent's
/// child list.
///
/// A child widget's slot is determined when the parent's [updateChild] method
/// is called to inflate the child widget. See [RenderObjectElement] for more
/// details on slots.   ¿JﬂÅÑ¿KÄÄî/// An integer that is guaranteed to be greater than the parent's, if any.
/// The element at the root of the tree must have a depth greater than 0.   ¿P•Ç¿R§Å◊/// The configuration for this element.
///
/// Avoid overriding this field on [Element] subtypes to provide a more
/// specific widget type (i.e. [StatelessElement] and [StatelessWidget]).
/// Instead, cast at any call sites where the more specific type is required.
/// This avoids significant cast overhead on the getter which is accessed
/// throughout the framework internals during the build phase - and for which
/// the more specific type information is not used.  ¿Rç¿Ré¿RŒ0¿R„   ¿RŒ¿Rœ¿SÅÜ¿S’Ä¡/// Returns true if the Element is defunct.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿TåÅÄ¿U^Ä¿/// Returns true if the Element is active.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿Vi¿Vi:/// The object that manages the lifecycle of this element.  ¿VM¿VN¿]5Éù¿_xÇ/// The render object at (or below) this location in the tree.
///
/// If this object is a [RenderObjectElement], the render object is the one at
/// this location in the tree. Otherwise, this getter will walk down the tree
/// until it finds a [RenderObjectElement].
///
/// Some locations in the tree are not backed by a render object. In those
/// cases, this getter returns null. This can happen, if the element is
/// located outside of a [View] since only the element subtree rooted in a
/// view has a render tree associated with it.   ¿`÷Éy¿cÄÇy/// Returns the child of this [Element] that will insert a [RenderObject] into
/// an ancestor of this Element to construct the render tree.
///
/// Returns null if this Element doesn't have any children who need to attach
/// a [RenderObject] to an ancestor of this [Element]. A [RenderObjectElement]
/// will therefore return null because its children insert their
/// [RenderObject]s into the [RenderObjectElement] itself and not into an
/// ancestor of the [RenderObjectElement].
///
/// Furthermore, this may return null for [Element]s that hoist their own
/// independent render tree and do not extend the ancestor render tree.  ¿cf¿cg¿©óÕ¿ø   ¿©¿™¿G‡Å¿HÏÄ¯/// Returns true if the element has been marked as needing rebuilding.
///
/// The flag is true when the element is first created and after
/// [markNeedsBuild] has been called. The flag is reset to false in the
/// [performRebuild] implementation.   =¿DÊÑ•¿I`É‚/// Compare two widgets for equality.
///
/// When a widget is rebuilt with another that compares equal according
/// to `operator ==`, it is assumed that the update is redundant and the
/// work to update that branch of the tree is skipped.
///
/// It is generally discouraged to override `operator ==` on any widget that
/// has children, since a correct implementation would have to defer to the
/// children's equality operator also, and that is an O(N¬≤) operation: each
/// child would need to itself walk all its children, each step of the tree.
///
/// It is sometimes reasonable for a leaf widget (one with no children) to
/// implement this method, if rebuilding the widget is known to be much more
/// expensive than checking the widgets' parameters for equality and if the
/// widget is expected to often be rebuilt with identical parameters.
///
/// In general, however, it is more efficient to cache the widgets used
/// in a build method if it is known that they will not change. ¿Ic¿Ik  ¿HÏ¿HÌ¿H˙¿H˚¿LzÇ9¿LÏb/// Returns result < 0 when [a] < [b], result == 0 when [a] == [b], result > 0
/// when [a] > [b]. ¿LÚ	¿L˚  ¿L˝	¿M   ¿PÄû¿P  ¿P$¿P-   ¿VìÖ¿¿[ÂÑ¯/// {@template flutter.widgets.Element.reassemble}
/// Called whenever the application is reassembled during debugging, for
/// example during hot reload.
///
/// This method should rerun any initialization logic that depends on global
/// state, for example, image loading from asset bundles (since the asset
/// bundle may have changed).
///
/// This function will only be called during development. In release builds,
/// the `ext.flutter.reassemble` hook is not available, and so this code will
/// never execute.
///
/// Implementers should not rely on any ordering for hot reload source update,
/// reassemble, and build methods after a hot reload has been initiated. It is
/// possible that a [Timer] (e.g. an [Animation]) or a debugging session
/// attached to the isolate could trigger a build with reloaded code _before_
/// reassemble is called. Code that expects preconditions to be set by
/// reassemble after a hot reload must be resilient to being called out of
/// order, e.g. by fizzling instead of throwing. That said, once reassemble is
/// called, build will be called after it at least once.
/// {@endtemplate}
///
/// See also:
///
///  * [State.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿[¬¿[√¿[”¿[‘¿\WÄ⁄¿\\  ¿\l¿\u   ¿dSÉh¿du  ¿dè"¿dû  ¿dS¿dT¿gøÅv¿h-T/// Returns a list of [Element]s from the current build context to the error report. ¿h>¿hF  ¿hK¿h^   ¿i9Äƒ¿iU  ¿ie¿im  ¿is?¿iâ  ¿i9¿i:¿iê¿i§¿i•¿jÄ√¿j  ¿j,¿j4  ¿j:?¿jP  ¿j¿j¿jW¿jk¿jl¿j»Å)¿j‰  ¿j˚¿k  ¿j»¿j…¿lñÇX¿n≈Ç/// Calls the argument for each child. Must be overridden by subclasses that
/// support having children.
///
/// There is no guaranteed order in which the children will be visited, though
/// it should be consistent over time.
///
/// Calling this during build is dangerous: the child list might still be
/// being updated at that point, so the children might not be constructed yet,
/// or might be old children that are going to be replaced. This method should
/// only be called if it is provable that the children are available. ¿n”¿n„   ¿nÚÉ¡¿rgÉG/// Calls the argument for each child considered onstage.
///
/// Classes like [Offstage] and [Overlay] override this method to hide their
/// children.
///
/// Being onstage affects the element's discoverability during testing when
/// you use Flutter's [Finder] objects. For example, when you instruct the
/// test framework to tap on a widget, by default the finder will look for
/// onstage elements and ignore the offstage ones.
///
/// The default implementation defers to [visitChildren] and therefore treats
/// the element as onstage.
///
/// See also:
///
///  * [Offstage] widget that hides its children.
///  * [Finder] that skips offstage widgets by default.
///  * [RenderObject.visitChildrenForSemantics], in contrast to this method,
///    designed specifically for excluding parts of the UI from the semantics
///    tree. ¿rÅ¿rë   ¿r∑ÇŒ¿s6/// Wrapper around [visitChildren] for [BuildContext]. ¿s¿s$  ¿r¿rÒ¿uâòÇ¿~∂à¶/// Update the given child with the given new configuration.
///
/// This method is the core of the widgets system. It is called each time we
/// are to add, update, or remove a child based on an updated configuration.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// If the `child` is null, and the `newWidget` is not null, then we have a new
/// child for which we need to create an [Element], configured with `newWidget`.
///
/// If the `newWidget` is null, and the `child` is not null, then we need to
/// remove it because it no longer has a configuration.
///
/// If neither are null, then we need to update the `child`'s configuration to
/// be the new configuration given by `newWidget`. If `newWidget` can be given
/// to the existing child (as determined by [Widget.canUpdate]), then it is so
/// given. Otherwise, the old child needs to be disposed and a new child
/// created for the new configuration.
///
/// If both are null, then we don't have a child and won't have a child, so we
/// do nothing.
///
/// The [updateChild] method returns the new child, if it had to create one,
/// or the child that was passed in, if it just had to update the child, or
/// null, if it removed the child and did not replace it.
///
/// The following table summarizes the above:
///
/// |                     | **newWidget == null**  | **newWidget != null**   |
/// | :-----------------: | :--------------------- | :---------------------- |
/// |  **child == null**  |  Returns null.         |  Returns new [Element]. |
/// |  **child != null**  |  Old child is removed, returns null. | Old child updated if possible, returns child or new [Element]. |
///
/// The `newSlot` argument is used only if `newWidget` is not null. If `child`
/// is null (or if the old child cannot be updated), then the `newSlot` is
/// given to the new [Element] that is created for the child, via
/// [inflateWidget]. If `child` is not null (and the old child _can_ be
/// updated), then the `newSlot` is given to [updateSlotForChild] to update
/// its slot, in case it has moved around since it was last built.
///
/// See the [RenderObjectElement] documentation for more information on slots. ¿~¬¿~Ã  ¿~“¿~€  ¿~Â¿~Ó  ¿~Ç¿~É¿~è¿~ê¿~ñ¿~©¿~ó¿é®÷¿öãë/// Updates the children of this element to use new widgets.
///
/// Attempts to update the given old children list using the given new
/// widgets, removing obsolete elements and introducing new ones as necessary,
/// and then returns the new child list.
///
/// During this function the `oldChildren` list must not be modified. If the
/// caller wishes to remove elements from `oldChildren` reentrantly while
/// this function is on the stack, the caller can supply a `forgottenChildren`
/// argument, which can be modified while this function is on the stack.
/// Whenever this function reads from `oldChildren`, this function first
/// checks whether the child is in `forgottenChildren`. If it is, the function
/// acts as if the child was not in `oldChildren`.
///
/// This function is a convenience wrapper around [updateChild], which updates
/// each individual child. If `slots` is non-null, the value for the `newSlot`
/// argument of [updateChild] is retrieved from that list using the index that
/// the currently processed `child` corresponds to in the `newWidgets` list
/// (`newWidgets` and `slots` must have the same length). If `slots` is null,
/// an [IndexedSlot<Element>] is used as the value for the `newSlot` argument.
/// In that case, [IndexedSlot.index] is set to the index that the currently
/// processed `child` corresponds to in the `newWidgets` list and
/// [IndexedSlot.value] is set to the [Element] of the previous widget in that
/// list (or null if it is the first child).
///
/// When the [slot] value of an [Element] changes, its
/// associated [renderObject] needs to move to a new position in the child
/// list of its parents. If that [RenderObject] organizes its children in a
/// linked list (as is done by the [ContainerRenderObjectMixin]) this can
/// be implemented by re-inserting the child [RenderObject] into the
/// list after the [RenderObject] associated with the [Element] provided as
/// [IndexedSlot.value] in the [slot] object.
///
/// Using the previous sibling as a [slot] is not enough, though, because
/// child [RenderObject]s are only moved around when the [slot] of their
/// associated [RenderObjectElement]s is updated. When the order of child
/// [Element]s is changed, some elements in the list may move to a new index
/// but still have the same previous sibling. For example, when
/// `[e1, e2, e3, e4]` is changed to `[e1, e3, e4, e2]` the element e4
/// continues to have e3 as a previous sibling even though its index in the list
/// has changed and its [RenderObject] needs to move to come before e2's
/// [RenderObject]. In order to trigger this move, a new [slot] value needs to
/// be assigned to its [Element] whenever its index in its
/// parent's child list changes. Using an [IndexedSlot<Element>] achieves
/// exactly that and also ensures that the underlying parent [RenderObject]
/// knows where a child needs to move to in a linked list by providing its new
/// previous sibling. ¿ö)¿ö8  ¿öD¿öR  ¿ö_¿ön  ¿öÄ¿öê  ¿ôˇ¿ö ¿∂ÈÜ‚¿∫ÉÉa/// Add this element to the tree in the given slot of the given parent.
///
/// The framework calls this function when a newly created element is added to
/// the tree for the first time. Use this method to initialize state that
/// depends on having a parent. State that is independent of the parent can
/// more easily be initialized in the constructor.
///
/// This method transitions the element from the "initial" lifecycle state to
/// the "active" lifecycle state.
///
/// Subclasses that override this method are likely to want to also override
/// [update], [visitChildren], [RenderObjectElement.insertRenderObjectChild],
/// [RenderObjectElement.moveRenderObjectChild], and
/// [RenderObjectElement.removeRenderObjectChild].
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.mount(parent, newSlot)`. ¿∫â¿∫ì  ¿∫ö¿∫£  ¿∫m¿∫n¿ΩœÄí¿Ω‘  ¿Ωı¿Ω˛   ¿æeÑŸ¿ø÷ÅL/// Change the widget used to configure this element.
///
/// The framework calls this function when the parent wishes to use a
/// different widget to configure this element. The new widget is guaranteed
/// to have the same [runtimeType] as the old widget.
///
/// This function is called only during the "active" lifecycle state. ¿ø›¿øÔ  ¿ø¿¿ø¡¿√BÇ¶¿ƒnÅ/// Change the slot that the given child occupies in its parent.
///
/// Called by [MultiChildRenderObjectElement], and other [RenderObjectElement]
/// subclasses that have multiple children, when child moves from one position
/// to another in this element's child list. ¿ƒÅ¿ƒä  ¿ƒê¿ƒô  ¿ƒ\¿ƒ]¿≈ÏÅv¿∆îÄÄ/// Called by [updateSlotForChild] when the framework needs to change the slot
/// that this [Element] occupies in its ancestor. ¿∆ü¿∆®  ¿∆q¿∆r¿∆~¿∆¿«fÄ¯¿«k  ¿«x¿«}   ¿»bÅﬁ¿…∆ÅN/// Remove [renderObject] from the render tree.
///
/// The default implementation of this function calls
/// [detachRenderObject] recursively on each child. The
/// [RenderObjectElement.detachRenderObject] override does the actual work of
/// removing [renderObject] from the render tree.
///
/// This is called by [deactivateChild].   ¿ DÇT¿ÀÎÅë/// Add [renderObject] to the render tree at the location specified by `newSlot`.
///
/// The default implementation of this function calls
/// [attachRenderObject] recursively on each child. The
/// [RenderObjectElement.attachRenderObject] override does the actual work of
/// adding [renderObject] to the render tree.
///
/// The `newSlot` argument specifies the new value for this element's [slot]. ¿À˛¿Ã   ¿Ãúà`¿Ã•  ¿Ãº¿Ã«  ¿ÃÀ¿Ã”   ¿’ ä£¿ÿhÉ/// Create an element for the given widget and add it as a child of this
/// element in the given slot.
///
/// This method is typically called by [updateChild] but can be called
/// directly by subclasses that need finer-grained control over creating
/// elements.
///
/// If the given widget has a global key and an element already exists that
/// has a widget with that global key, this function will reuse that element
/// (potentially grafting it from another location in the tree or reactivating
/// it from the list of inactive elements) rather than creating a new element.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// The element returned by this function will already have been mounted and
/// will be in the "active" lifecycle state. ¿ÿv¿ÿ~  ¿ÿà¿ÿë  ¿ÿ5¿ÿ6¿ÿB¿ÿC¿ÿI¿ÿ\¿ÿJ¿ﬂßÅ6¿ﬂ¨  ¿ﬂ¡¿ﬂ    ¿‡·Ñ⁄¿‰ÇÙ/// Move the given element to the list of inactive elements and detach its
/// render object from the render tree.
///
/// This method stops the given element from being a child of this element by
/// detaching its render object from the render tree and moving the element to
/// the list of inactive elements.
///
/// This method (indirectly) calls [deactivate] on the child.
///
/// The caller is responsible for removing the child from its child model.
/// Typically [deactivateChild] is called by the element itself while it is
/// updating its child model; however, during [GlobalKey] reparenting, the new
/// parent proactively calls the old parent's [deactivateChild], first using
/// [forgetChild] to cause the old parent to update its child model. ¿‰¿‰  ¿„Ú¿„Û¿ÁeÑˇ¿È˛Ç[/// Remove the given child from the element's child list, in preparation for
/// the child being reused elsewhere in the element tree.
///
/// This updates the child model such that, e.g., [visitChildren] does not
/// walk that child anymore.
///
/// The element will still have a valid parent when this is called, and the
/// child's [Element.slot] value will be valid in the context of that parent.
/// After this is called, [deactivateChild] is called to sever the link to
/// this object.
///
/// The [update] is responsible for updating or creating the new child that
/// will replace this [child]. ¿Í
¿Í  ¿È€¿È‹¿ÈË¿ÈÈ¿ÏhÅ÷¿Ïm  ¿ÏÅ¿Ïä  ¿Ïë¿Ïö   ¿ÓBÅ¿ÓN  ¿Óc¿Ól   ¿ÔJÖ	¿ÒπÇB/// Transition from the "inactive" to the "active" lifecycle state.
///
/// The framework calls this method when a previously deactivated element has
/// been reincorporated into the tree. The framework does not call this method
/// the first time an element becomes active (i.e., from the "initial"
/// lifecycle state). Instead, the framework calls [mount] in that situation.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.  ¿Ò£¿Ò§¿ÙWÜy¿˜pÇ‰/// Transition from the "active" to the "inactive" lifecycle state.
///
/// The framework calls this method when a previously active element is moved
/// to the list of inactive elements. While in the inactive state, the element
/// will not appear on screen. The element can remain in the inactive state
/// only until the end of the current animation frame. At the end of the
/// animation frame, if the element has not be reactivated, the framework will
/// unmount the element.
///
/// This is (indirectly) called by [deactivateChild].
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.  ¿˜Z¿˜[¿˙‘Ä¯¿˚yÄà/// Called, in debug mode, after children have been deactivated (see [deactivate]).
///
/// This method is not called in release builds.  ¿˚c¿˚d¿˚–ÜÄ¿ˇyÉn/// Transition from the "inactive" to the "defunct" lifecycle state.
///
/// Called when the framework determines that an inactive element will never
/// be reactivated. At the end of each animation frame, the framework calls
/// [unmount] on any remaining inactive elements, preventing inactive elements
/// from remaining inactive for longer than a single animation frame.
///
/// After this function is called, the element will not be incorporated into
/// the tree again.
///
/// Any resources this element holds should be released at this point. For
/// example, [RenderObjectElement.unmount] calls [RenderObject.dispose] and
/// nulls out its reference to the render object.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.unmount()`.  ¿ˇc¿ˇd¿TÜ4¿RÖ∆/// Whether the child in the provided `slot` (or one of its descendants) must
/// insert a [RenderObject] into its ancestor [RenderObjectElement] by calling
/// [RenderObjectElement.insertRenderObjectChild] on it.
///
/// This method is used to define non-rendering zones in the element tree (see
/// [WidgetsBinding] for an explanation of rendering and non-rendering zones):
///
/// Most branches of the [Element] tree are expected to eventually insert a
/// [RenderObject] into their [RenderObjectElement] ancestor to construct the
/// render tree. However, there is a notable exception: an [Element] may
/// expect that the occupant of a certain child slot creates a new independent
/// render tree and therefore is not allowed to insert a render object into
/// the existing render tree. Those elements must return false from this
/// method for the slot in question to signal to the child in that slot that
/// it must not call [RenderObjectElement.insertRenderObjectChild] on its
/// ancestor.
///
/// As an example, the element backing the [ViewAnchor] returns false from
/// this method for the [ViewAnchor.view] slot to enforce that it is occupied
/// by e.g. a [View] widget, which will ultimately bootstrap a separate
/// render tree for that view. Another example is the [ViewCollection] widget,
/// which returns false for all its slots for the same reason.
///
/// Overriding this method is not common, as elements behaving in the way
/// described above are rare. ¿r¿{   ¿åÉ¿¶   ¿å¿ç¿$ÇÎ¿$    ¿&ˇÄË¿'kW/// Returns `true` if [dependOnInheritedElement] was previously called with [ancestor]. ¿'à¿'ö  ¿'Y¿'Z¿'ÎÅ¿(  ¿( ¿(2  ¿(=¿(F  ¿'Î¿'Ï¿)Å°¿) ¿)=¿)=¿)Y¿)b  ¿)¿)¿*∞Äñ¿*ø ¿*›¿*› ¿*∞¿*±¿+JÅ¿+h ¿+ê¿+ê ¿+J¿+K¿,gÇ ¿.Åâ/// Called in [Element.mount] and [Element.activate] to register this element in
/// the notification tree.
///
/// This method is only exposed so that [NotifiableElementMixin] can be implemented.
/// Subclasses of [Element] that wish to respond to notifications should mix that
/// in instead.
///
/// See also:
///   * [NotificationListener], a widget that allows listening to notifications.  ¿.¿.¿.kÄé¿.p    ¿.˝Å/¿/ ¿/*¿/* ¿.˝¿.˛¿00Åæ¿0? ¿0W¿0W ¿00¿01¿1ÚÅ≥¿2 ¿2¿2 ¿1Ú¿1Û¿3©Å~¿3∏ ¿3◊¿3◊ ¿3©¿3™¿5+Å¿5<  ¿5R!¿5m  ¿5+¿5,¿65Ç›¿87Å€/// Called when a dependency of this element changes.
///
/// The [dependOnInheritedWidgetOfExactType] registers this element as depending on
/// inherited information of the given type. When the information of that type
/// changes at this location in the tree (e.g., because the [InheritedElement]
/// updated to a new [InheritedWidget] and
/// [InheritedWidget.updateShouldNotify] returned true), the framework calls
/// this function to notify this element of the change.  ¿8!¿8"¿9É%¿9  ¿9=¿9E   ¿<?Å ¿<»{/// Returns a description of what caused this element to be created.
///
/// Useful for debugging the source of an element. ¿<›	¿<‚   ¿>Å¥¿>ÔÄÀ/// Returns the parent chain from this element back to the root of the tree.
///
/// Useful for debug display of a tree of Elements with only nodes in the path
/// from the root to this Element expanded.   ¿?≈ÄÅ¿?÷  ¿?Î¿?˘  ¿?≈¿?∆¿@JÄõ¿@ë1/// A short, textual description of this element.  ¿@~¿@¿@ÈÄÕ¿A  ¿A¿A"  ¿A'¿A>  ¿@È¿@Í¿A∫Ö/¿AÀ  ¿Aﬂ&¿A¸  ¿A∫¿Aª¿FÌÄÔ¿G   ¿FÌ¿FÓ¿J*ä5¿KóÅY/// Marks the element as dirty and adds it to the global list of widgets to
/// rebuild in the next frame.
///
/// Since it is inefficient to build an element twice in one frame,
/// applications and widgets should be structured so as to only mark
/// widgets dirty during event handlers before the frame begins, not during
/// the build itself.   ¿Tcõ
¿kï∑/// Cause the widget to update itself. In debug builds, also verify various
/// invariants.
///
/// Called by the [BuildOwner] when [BuildOwner.scheduleBuildFor] has been
/// called to mark this element dirty, by [mount] when the element is first
/// built, and by [update] when the widget has changed.
///
/// The method will only rebuild if [dirty] is true. To rebuild regardless
/// of the [dirty] flag, set `force` to true. Forcing a rebuild is convenient
/// from [update], during which [dirty] is false.
///
/// ## When rebuilds happen
///
/// ### Terminology
///
/// [Widget]s represent the configuration of [Element]s. Each [Element] has a
/// widget, specified in [Element.widget]. The term "widget" is often used
/// when strictly speaking "element" would be more correct.
///
/// While an [Element] has a current [Widget], over time, that widget may be
/// replaced by others. For example, the element backing a [ColoredBox] may
/// first have as its widget a [ColoredBox] whose [ColoredBox.color] is blue,
/// then later be given a new [ColoredBox] whose color is green.
///
/// At any particular time, multiple [Element]s in the same tree may have the
/// same [Widget]. For example, the same [ColoredBox] with the green color may
/// be used in multiple places in the widget tree at the same time, each being
/// backed by a different [Element].
///
/// ### Marking an element dirty
///
/// An [Element] can be marked dirty between frames. This can happen for various
/// reasons, including the following:
///
/// * The [State] of a [StatefulWidget] can cause its [Element] to be marked
///   dirty by calling the [State.setState] method.
///
/// * When an [InheritedWidget] changes, descendants that have previously
///   subscribed to it will be marked dirty.
///
/// * During a hot reload, every element is marked dirty (using [Element.reassemble]).
///
/// ### Rebuilding
///
/// Dirty elements are rebuilt during the next frame. Precisely how this is
/// done depends on the kind of element. A [StatelessElement] rebuilds by
/// using its widget's [StatelessWidget.build] method. A [StatefulElement]
/// rebuilds by using its widget's state's [State.build] method. A
/// [RenderObjectElement] rebuilds by updating its [RenderObject].
///
/// In many cases, the end result of rebuilding is a single child widget
/// or (for [MultiChildRenderObjectElement]s) a list of children widgets.
///
/// These child widgets are used to update the [widget] property of the
/// element's child (or children) elements. The new [Widget] is considered to
/// correspond to an existing [Element] if it has the same [Type] and [Key].
/// (In the case of [MultiChildRenderObjectElement]s, some effort is put into
/// tracking widgets even when they change order; see
/// [RenderObjectElement.updateChildren].)
///
/// If there was no corresponding previous child, this results in a new
/// [Element] being created (using [Widget.createElement]); that element is
/// then itself built, recursively.
///
/// If there was a child previously but the build did not provide a
/// corresponding child to update it, then the old child is discarded (or, in
/// cases involving [GlobalKey] reparenting, reused elsewhere in the element
/// tree).
///
/// The most common case, however, is that there was a corresponding previous
/// child. This is handled by asking the child [Element] to update itself
/// using the new child [Widget]. In the case of [StatefulElement]s, this
/// is what triggers [State.didUpdateWidget].
///
/// ### Not rebuilding
///
/// Before an [Element] is told to update itself with a new [Widget], the old
/// and new objects are compared using `operator ==`.
///
/// In general, this is equivalent to doing a comparison using [identical] to
/// see if the two objects are in fact the exact same instance. If they are,
/// and if the element is not already marked dirty for other reasons, then the
/// element skips updating itself as it can determine with certainty that
/// there would be no value in updating itself or its descendants.
///
/// It is strongly advised to avoid overriding `operator ==` on [Widget]
/// objects. While doing so seems like it could improve performance, in
/// practice, for non-leaf widgets, it results in O(N¬≤) behavior. This is
/// because by necessity the comparison would have to include comparing child
/// widgets, and if those child widgets also implement `operator ==`, it
/// ultimately results in a complete walk of the widget tree... which is then
/// repeated at each level of the tree. In practice, just rebuilding is
/// cheaper. (Additionally, if _any_ subclass of [Widget] used in an
/// application implements `operator ==`, then the compiler cannot inline the
/// comparison anywhere, because it has to treat the call as virtual just in
/// case the instance happens to be one that has an overridden operator.)
///
/// Instead, the best way to avoid unnecessary rebuilds is to cache the
/// widgets that are returned from [State.build], so that each frame the same
/// widgets are used until such time as they change. Several mechanisms exist
/// to encourage this: `const` widgets, for example, are a form of automatic
/// caching (if a widget is constructed using the `const` keyword, the same
/// instance is returned each time it is constructed with the same arguments).
///
/// Another example is the [AnimatedBuilder.child] property, which allows the
/// non-animating parts of a subtree to remain static even as the
/// [AnimatedBuilder.builder] callback recreates the other components. ¿k¿k"  ¿j¿jÒ¿j˜¿k
¿j¯¿k)¿oqÅ¿pLÄ≠/// Cause the widget to update itself.
///
/// Called by [rebuild] after the appropriate checks have been made.
///
/// The base implementation only clears the [dirty] flag.  ¿p)¿p*¿p6¿p7 ¿pzÇa¿pÄ  ¿p¬Äç ¿p¬¿p‡ ¿pÁ
¿pÓ  ¿p˜¿q  ¿q¿q)  ¿q3¿q9  ¿qC¿qS¿q^   ¿qkÅn¿qå  ¿qñ)¿q∏  ¿qk¿ql ¿uìE¿xÂÉ‹/// A widget that renders an exception's message.
///
/// This widget is used when a build method fails, to help with determining
/// where the problem lies. Exceptions are also logged to the console, which you
/// can read using `flutter logs`. The console will also include additional
/// information such as the stack trace for the exception.
///
/// It is possible to override this widget.
///
/// {@tool dartpad}
/// This example shows how to override the standard error widget builder in release
/// mode, but use the standard one in debug mode.
///
/// The error occurs when you click the "Error Prone" button.
///
/// ** See code in examples/api/lib/widgets/framework/error_widget.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [FlutterError.onError], which can be set to a method that exits the
///    application if that is preferable to showing an error message.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter. ¿yÇl ¿zŸ¿z‰Å≤/// Creates a widget that displays the given exception.
///
/// The message will be the stringification of the given exception, unless
/// computing that value itself throws an exception, in which case it will
/// be the string "Error".
///
/// If this object is inspected from an IDE or the devtools, and the original
/// exception is a [FlutterError] object, the original exception itself will
/// be shown in the inspection output.¿zÂ¿zÌ  ¿{¿z˝¿{¿{¿{¿{¿{2¿{$¿{N¿{Z¿{>¿{4¿{A¿{P¿{\¿{h¿{m¿{~¿{q¿{n¿{s¿{|¿{}¿{ÑÅ=¿|M¿|N¿|YÄµ/// Creates a widget that displays the given error message.
///
/// An explicit [FlutterError] can be provided to be reported to inspection
/// tools. It need not match the message.¿|\¿|b  ¿|o¿|~  ¿|k¿|ö¿|å¿|ú¿|©¿|Æ¿|ø¿|≤¿|Ø¿|¥¿|Ω¿|æ¿|≈Ü?¿Ç‡Ö∆/// The configurable factory for [ErrorWidget].
///
/// When an error occurs while building a widget, the broken widget is
/// replaced by the widget returned by this function. By default, an
/// [ErrorWidget] is returned.
///
/// The system is typically in an unstable state when this function is called.
/// An exception has just been thrown in the middle of build (and possibly
/// layout), so surrounding widgets and render objects may be in a rather
/// fragile state. The framework itself (especially the [BuildOwner]) may also
/// be confused, and additional exceptions are quite likely to be thrown.
///
/// Because of this, it is highly recommended that the widget returned from
/// this function perform the least amount of work possible. A
/// [LeafRenderObjectWidget] is the best choice, especially one that
/// corresponds to a [RenderBox] that can handle the most absurd of incoming
/// constraints. The default constructor maps to a [RenderErrorBox].
///
/// The default behavior is to show the exception's message in debug mode,
/// and to show nothing but a gray background in release builds.
///
/// See also:
///
///  * [FlutterError.onError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to this callback being
///    invoked, and which can also be configured to control how errors are
///    reported.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter.¿ÇÍ¿Ü22¿Ü]/// The message to display. ¿Üh!¿Ü|   ¿É	Åì¿É  ¿É2¿ÉG   ¿Ñ†Åé¿ÑÆ  ¿Ñπ¿Ñ¬   ¿ÜéZ¿Ü§  ¿Ü∑¿Ü≈  ¿Üé¿Üè¿ÜÏÅY¿Ü˝  ¿á&¿á.  ¿ÜÏ¿ÜÌ ¿íqåú¿ìpÄÔ/// An [Element] that composes other [Element]s.
///
/// Rather than creating a [RenderObject] directly, a [ComponentElement] creates
/// [RenderObject]s indirectly by creating other [Element]s.
///
/// Contrast with [RenderObjectElement]. ¿ìïi ¿ìﬂ¿ìÔG/// Creates an element that uses the given widget as its configuration.¿ì¿ì˜   ¿î¿î  ¿î¿î ¿î.¿î79¿îL   ¿î7¿î8¿ît>¿îç   ¿ît¿îu¿î∂Ä‰¿î«  ¿îÕ¿î◊  ¿îﬁ¿îÁ  ¿î∂¿î∑¿ïûÄ†¿ï£    ¿ñBÜ˛¿ó„ÅV/// Calls the [StatelessWidget.build] method of the [StatelessWidget] object
/// (for stateless widgets) or the [State.build] method of the [State] object
/// (for stateful widgets) and then updates the widget tree.
///
/// Called automatically during [mount] to generate the first build, and by
/// [rebuild] when the element needs updating.  ¿ó•¿ó¶¿ó±¿ó≤¿ó∏¿ó⁄¿óπ¿ùDÄÃ¿ûÄ©/// Subclasses should override this function to actually call the appropriate
/// `build` function (e.g., [StatelessWidget.build] or [State.build]) for
/// their widget.  ¿ùÙ¿ùı¿ût¿û%  ¿û3¿ûC  ¿û¿û¿ûå¿ûù  ¿û©¿û≤  ¿ûå¿ûç ¿üÅ“¿üZD/// An [Element] that uses a [StatelessWidget] as its configuration. ¿üày ¿ü“¿ü‚G/// Creates an element that uses the given widget as its configuration.¿ü„¿ü˙     ¿†F¿†   ¿†¿†¿†OÄê¿†`  ¿†g¿†x  ¿†O¿†P ¿†„£≤¿°-C/// An [Element] that uses a [StatefulWidget] as its configuration. ¿°ZÑf ¿°§¿°≥G/// Creates an element that uses the given widget as its configuration.¿°¥¿°ƒ  ¿°⁄¿°”¿°‹¿°‚¿°„¿°Ó¿°Ô¿°˙¿°ˇ¿¢¿¢ ¿ß2¿ßI  ¿øıÇX¿¬/Ç"/// This controls whether we should call [State.didChangeDependencies] from
/// the start of [build], to avoid calls when the [State] will not get built.
/// This can happen when the widget has dropped out of the tree, but depends
/// on an [InheritedWidget] that is still in the tree.
///
/// It is set initially to false, since [_firstBuild] makes the initial call
/// on the [state]. When it is true, [build] will call
/// `state.didChangeDependencies` and then sets it to false. Subsequent calls
/// to [didChangeDependencies] set it to true.¿¬H¿•¯Å7¿ßÅ/// The [State] instance associated with this location in the tree.
///
/// There is a one-to-one relationship between [State] objects and the
/// [StatefulElement] objects that hold them. The [State] objects are created
/// by [StatefulElement] in [mount].   ¿•ƒ0¿•◊   ¿•ƒ¿•≈¿ßTS¿ße   ¿ßT¿ßU¿ß´ÉÁ¿ßº   ¿ß´¿ß¨¿´ñÄ∂¿´ß   ¿´ñ¿´ó¿¨PÉÑ¿¨a  ¿¨h¿¨x  ¿¨P¿¨Q¿ØÿÅô¿ØÈ   ¿Øÿ¿ØŸ¿±uS¿±Ü   ¿±u¿±v¿±ÃÇŸ¿±›   ¿±Ã¿±Õ¿¥©ãH¿¥≈  ¿¥ﬁ¿¥Á  ¿¥Ú¿¥˚  ¿¥©¿¥™¿¬Rt¿¬c   ¿¬R¿¬S¿¬ Ä„¿¬Ê  ¿¬˙¿√  ¿√¿√  ¿¬ ¿¬À¿√±Ä‚¿√¬  ¿√÷&¿√Û  ¿√±¿√≤ ¿ƒóÑù¿ƒÁ@/// An [Element] that uses a [ProxyWidget] as its configuration. ¿≈P ¿≈:¿≈F&/// Initializes fields for subclasses.¿≈G¿≈Z     ¿≈e<¿≈x   ¿≈e¿≈f¿≈•Ä˛¿≈∂  ¿≈Ω¿≈   ¿≈•¿≈¶¿∆ßÅW¿«≤ÄÓ/// Called during build when the [widget] has changed.
///
/// By default, calls [notifyClients]. Subclasses may override this method to
/// avoid calling [notifyClients] unnecessarily (e.g. if the old and new
/// widgets are equivalent). ¿«∫¿«—  ¿«†¿«°¿»Å0¿…Ä‰/// Notify other objects that the widget associated with this element has
/// changed.
///
/// Called during [update] (via [updated]) after changing the widget
/// associated with this element but before rebuilding this element. ¿…¿…(  ¿»Ò¿»Ú ¿…6åL¿…ÇE/// An [Element] that uses a [ParentDataWidget] as its configuration.¿…î¿…î¿…√~ ¿ ¿ G/// Creates an element that uses the given widget as its configuration.¿  ¿ :    ¿ EÅ¥¿ÀÄ≥/// Returns the [Type] of [ParentData] that this element has been configured
/// for.
///
/// This is only available in debug mode. It will throw in profile and
/// release modes.   ¿À˝Å8¿Ã  ¿Ã¿Ã(   ¿Õ9áÀ¿‘4Üµ/// Calls [ParentDataWidget.applyParentData] on the given widget, passing it
/// the [RenderObject] whose parent data this element is ultimately
/// responsible for.
///
/// This allows a render object's [RenderObject.parentData] to be modified
/// without triggering a build. This is generally ill-advised, but makes sense
/// in situations such as the following:
///
///  * Build and layout are currently under way, but the [ParentData] in question
///    does not affect layout, and the value to be applied could not be
///    determined before build and layout (e.g. it depends on the layout of a
///    descendant).
///
///  * Paint is currently under way, but the [ParentData] in question does not
///    affect layout or paint, and the value to be applied could not be
///    determined before paint (e.g. it depends on the compositing phase).
///
/// In either case, the next build is expected to cause this element to be
/// configured with the given new widget (or a widget with equivalent data).
///
/// Only [ParentDataWidget]s that return true for
/// [ParentDataWidget.debugCanApplyOutOfTurn] can be applied this way.
///
/// The new widget must have the same child as the current widget.
///
/// An example of when this is used is the [AutomaticKeepAlive] widget. If it
/// receives a notification during the build of one of its descendants saying
/// that its child must be kept alive, it will apply a [KeepAlive] widget out
/// of turn. This is safe, because by definition the child is already alive,
/// and therefore this will not change the behavior of the parent this frame.
/// It is more efficient than requesting an additional frame just for the
/// purpose of updating the [KeepAlive] widget. ¿‘I¿‘^   ¿’x¿’  ¿’'¿’<  ¿’¿’	 ¿’Ñö¶¿’–E/// An [Element] that uses an [InheritedWidget] as its configuration. ¿’˙y ¿÷D¿÷TG/// Creates an element that uses the given widget as its configuration.¿÷U¿÷l   ¿÷wE¿÷ì ¿÷°¿÷®¿÷π¿÷©¿÷≤¿÷∏¿÷∫¿÷ª ¿÷¡ÅR¿÷“   ¿÷¡¿÷¬¿ÿÄó¿ÿ(   ¿ÿ¿ÿ¿ÿ≤Ñ∞¿›Ñ/// Returns the dependencies value recorded for [dependent]
/// with [setDependencies].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. This value is null by default and by default
/// dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in
/// [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [setDependencies], which sets dependencies value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿›'¿›0  ¿›¿›¿›fÑ ¿·’Ñ0/// Sets the value returned by [getDependencies] value for [dependent].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. The [updateDependencies] method sets this value to
/// null by default so that dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    [getDependencies] value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿·Â¿·Ó  ¿·¯¿‚  ¿·√¿·ƒ¿‚4Ñä¿Ê]ÉÍ/// Called by [dependOnInheritedWidgetOfExactType] when a new [dependent] is added.
///
/// Each dependent element can be mapped to a single object value with
/// [setDependencies]. This method can lookup the existing dependencies with
/// [getDependencies].
///
/// By default this method sets the inherited dependencies for [dependent]
/// to null. This only serves to record an unconditional dependency on
/// [dependent].
///
/// Subclasses can manage their own dependencies values so that they
/// can selectively rebuild dependents in [notifyDependent].
///
/// See also:
///
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿Êp¿Êy  ¿ÊÉ¿Êå  ¿ÊK¿ÊL¿Ê¬ÉF¿ÈîÇü/// Called by [notifyClients] for each dependent.
///
/// Calls `dependent.didChangeDependencies()` by default.
///
/// Subclasses can override this method to selectively call
/// [didChangeDependencies] based on the value of [getDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿È§#¿Èø  ¿È…¿È“  ¿ÈÇ¿ÈÉ¿ÍÅÆ¿Î'Ä˝/// Calls [Element.didChangeDependencies] of all dependent elements, if
/// [InheritedWidget.updateShouldNotify] returns true.
///
/// Called by [update], immediately prior to [build].
///
/// Calls [notifyClients] to actually trigger the notifications. ¿Î/¿Î@  ¿Î¿Î¿ÎæÑj¿Ì‰Å˛/// Notifies all dependent elements that this inherited widget has changed, by
/// calling [Element.didChangeDependencies].
///
/// This method must only be called during the build phase. Usually this
/// method is called automatically when an inherited widget is rebuilt, e.g.
/// as a result of calling [State.setState] above the inherited widget.
///
/// See also:
///
///  * [InheritedNotifier], a subclass of [InheritedWidget] that also calls
///    this method when its [Listenable] sends a notification. ¿ÌÚ¿Ó  ¿Ì”¿Ì‘ ¿,¿ Y¬¿É°G/// An [Element] that uses a [RenderObjectWidget] as its configuration.
///
/// [RenderObjectElement] objects have an associated [RenderObject] widget in
/// the render tree, which handles concrete operations like laying out,
/// painting, and hit testing.
///
/// Contrast with [ComponentElement].
///
/// For details on the lifecycle of an element, see the discussion at [Element].
///
/// ## Writing a RenderObjectElement subclass
///
/// There are three common child models used by most [RenderObject]s:
///
/// * Leaf render objects, with no children: The [LeafRenderObjectElement] class
///   handles this case.
///
/// * A single child: The [SingleChildRenderObjectElement] class handles this
///   case.
///
/// * A linked list of children: The [MultiChildRenderObjectElement] class
///   handles this case.
///
/// Sometimes, however, a render object's child model is more complicated. Maybe
/// it has a two-dimensional array of children. Maybe it constructs children on
/// demand. Maybe it features multiple lists. In such situations, the
/// corresponding [Element] for the [Widget] that configures that [RenderObject]
/// will be a new subclass of [RenderObjectElement].
///
/// Such a subclass is responsible for managing children, specifically the
/// [Element] children of this object, and the [RenderObject] children of its
/// corresponding [RenderObject].
///
/// ### Specializing the getters
///
/// [RenderObjectElement] objects spend much of their time acting as
/// intermediaries between their [widget] and their [renderObject]. It is
/// generally recommended against specializing the [widget] getter and
/// instead casting at the various call sites to avoid adding overhead
/// outside of this particular implementation.
///
/// ```dart
/// class FooElement extends RenderObjectElement {
///   FooElement(super.widget);
///
///   // Specializing the renderObject getter is fine because
///   // it is not performance sensitive.
///   @override
///   RenderFoo get renderObject => super.renderObject as RenderFoo;
///
///   void _foo() {
///     // For the widget getter, though, we prefer to cast locally
///     // since that results in better overall performance where the
///     // casting isn't needed:
///     final Foo foo = widget as Foo;
///     // ...
///   }
///
///   // ...
/// }
/// ```
///
/// ### Slots
///
/// Each child [Element] corresponds to a [RenderObject] which should be
/// attached to this element's render object as a child.
///
/// However, the immediate children of the element may not be the ones that
/// eventually produce the actual [RenderObject] that they correspond to. For
/// example, a [StatelessElement] (the element of a [StatelessWidget])
/// corresponds to whatever [RenderObject] its child (the element returned by
/// its [StatelessWidget.build] method) corresponds to.
///
/// Each child is therefore assigned a _[slot]_ token. This is an identifier whose
/// meaning is private to this [RenderObjectElement] node. When the descendant
/// that finally produces the [RenderObject] is ready to attach it to this
/// node's render object, it passes that slot token back to this node, and that
/// allows this node to cheaply identify where to put the child render object
/// relative to the others in the parent render object.
///
/// A child's [slot] is determined when the parent calls [updateChild] to
/// inflate the child (see the next section). It can be updated by calling
/// [updateSlotForChild].
///
/// ### Updating children
///
/// Early in the lifecycle of an element, the framework calls the [mount]
/// method. This method should call [updateChild] for each child, passing in
/// the widget for that child, and the slot for that child, thus obtaining a
/// list of child [Element]s.
///
/// Subsequently, the framework will call the [update] method. In this method,
/// the [RenderObjectElement] should call [updateChild] for each child, passing
/// in the [Element] that was obtained during [mount] or the last time [update]
/// was run (whichever happened most recently), the new [Widget], and the slot.
/// This provides the object with a new list of [Element] objects.
///
/// Where possible, the [update] method should attempt to map the elements from
/// the last pass to the widgets in the new pass. For example, if one of the
/// elements from the last pass was configured with a particular [Key], and one
/// of the widgets in this new pass has that same key, they should be paired up,
/// and the old element should be updated with the widget (and the slot
/// corresponding to the new widget's new position, also). The [updateChildren]
/// method may be useful in this regard.
///
/// [updateChild] should be called for children in their logical order. The
/// order can matter; for example, if two of the children use [PageStorage]'s
/// `writeState` feature in their build method (and neither has a [Widget.key]),
/// then the state written by the first will be overwritten by the second.
///
/// #### Dynamically determining the children during the build phase
///
/// The child widgets need not necessarily come from this element's widget
/// verbatim. They could be generated dynamically from a callback, or generated
/// in other more creative ways.
///
/// #### Dynamically determining the children during layout
///
/// If the widgets are to be generated at layout time, then generating them in
/// the [mount] and [update] methods won't work: layout of this element's render
/// object hasn't started yet at that point. Instead, the [update] method can
/// mark the render object as needing layout (see
/// [RenderObject.markNeedsLayout]), and then the render object's
/// [RenderObject.performLayout] method can call back to the element to have it
/// generate the widgets and call [updateChild] accordingly.
///
/// For a render object to call an element during layout, it must use
/// [RenderObject.invokeLayoutCallback]. For an element to call [updateChild]
/// outside of its [update] method, it must use [BuildOwner.buildScope].
///
/// The framework provides many more checks in normal operation than it does
/// when doing a build during layout. For this reason, creating widgets with
/// layout-time build semantics should be done with great care.
///
/// #### Handling errors when building
///
/// If an element calls a builder function to obtain widgets for its children,
/// it may find that the build throws an exception. Such exceptions should be
/// caught and reported using [FlutterError.reportError]. If a child is needed
/// but a builder has failed in this way, an instance of [ErrorWidget] can be
/// used instead.
///
/// ### Detaching children
///
/// It is possible, when using [GlobalKey]s, for a child to be proactively
/// removed by another element before this element has been updated.
/// (Specifically, this happens when the subtree rooted at a widget with a
/// particular [GlobalKey] is being moved from this element to an element
/// processed earlier in the build phase.) When this happens, this element's
/// [forgetChild] method will be called with a reference to the affected child
/// element.
///
/// The [forgetChild] method of a [RenderObjectElement] subclass must remove the
/// child element from its child list, so that when it next [update]s its
/// children, the removed child is not considered.
///
/// For performance reasons, if there are many elements, it may be quicker to
/// track which elements were forgotten by storing them in a [Set], rather than
/// proactively mutating the local record of the child list and the identities
/// of all the slots. For example, see the implementation of
/// [MultiChildRenderObjectElement].
///
/// ### Maintaining the render object tree
///
/// Once a descendant produces a render object, it will call
/// [insertRenderObjectChild]. If the descendant's slot changes identity, it
/// will call [moveRenderObjectChild]. If a descendant goes away, it will call
/// [removeRenderObjectChild].
///
/// These three methods should update the render tree accordingly, attaching,
/// moving, and detaching the given child render object from this element's own
/// render object respectively.
///
/// ### Walking the children
///
/// If a [RenderObjectElement] object has any children [Element]s, it must
/// expose them in its implementation of the [visitChildren] method. This method
/// is used by many of the framework's internal mechanisms, and so should be
/// fast. It is also used by the test framework and [debugDumpApp]. ¿´ ¿ı¿G/// Creates an element that uses the given widget as its configuration.¿	¿#   ¿8¿F  ¿ò¿ù ¿∞¿ˆ1¿  ¿.Å¿Ày/// The underlying [RenderObject] for this element.
///
/// If this element has been [unmount]ed, this getter will throw.  ¿Æ¿Ø¿X<¿q   ¿X¿Y¿π9¿Œ   ¿π¿∫¿,É[¿A    ¿ããŸ¿ê  ¿≥*¿ÿ  ¿„¿Ó  ¿¿  ¿) ¿5   ¿#hâ ¿#å    ¿,åÇ;¿,ù  ¿,£¿,≠  ¿,¥¿,Ω  ¿,å¿,ç¿.ÀÅ¿.‹  ¿.„&¿/  ¿.À¿.Ã¿/‚Äç¿/Á    ¿0sÄú¿0Ñ   ¿0s¿0t¿1ÅU¿16   ¿1¿1¿1¿1-¿1¿2lÄÂ¿2}   ¿2l¿2m¿3UÇ/¿3f   ¿3U¿3V¿5àÑ‰¿5ç  ¿5ü-¿5Ω   ¿:pÅV¿:Å  ¿:å¿:ï  ¿:p¿:q¿; Ö¿;€  ¿;Ó¿;˜  ¿; ¿;À¿@·ÄÔ¿@Ú   ¿@·¿@‚¿A‘Ç3¿CπÅ¬/// Insert the given child into [renderObject] at the given slot.
///
/// {@template flutter.widgets.RenderObjectElement.insertRenderObjectChild}
/// The semantics of `slot` are determined by this element. For example, if
/// this element has a single child, the slot should always be null. If this
/// element has a list of children, the previous sibling element wrapped in an
/// [IndexedSlot] is a convenient value for the slot.
/// {@endtemplate} ¿C—¿CÈ  ¿CÔ¿D  ¿Cß¿C®¿DÉﬂ¿GÄÉF/// Move the given child from the given old slot to the given new slot.
///
/// The given child is guaranteed to have [renderObject] as its parent.
///
/// {@macro flutter.widgets.RenderObjectElement.insertRenderObjectChild}
///
/// This method is only ever called if [updateChild] can end up being called
/// with an existing [Element] child and a `slot` that differs from the slot
/// that element was previously given. [MultiChildRenderObjectElement] does this,
/// for example. [SingleChildRenderObjectElement] does not (since the `slot` is
/// always null). An [Element] that has a specific set of slots with each child
/// always having the same slot (and where children in different slots are never
/// compared against each other for the purposes of updating one slot with the
/// element from another slot) would never call this. ¿Gñ¿GÆ  ¿G¥¿G«  ¿Gœ¿G‚  ¿Gn¿Go¿GÓÅ¿H≥Ä™/// Remove the given child from [renderObject].
///
/// The given child is guaranteed to have been inserted at the given `slot`
/// and have [renderObject] as its parent. ¿HÀ¿H„  ¿HÈ¿H¸  ¿H°¿H¢¿IÄÁ¿I  ¿I*&¿IG  ¿I¿I ¿IÇZ¿K:Ä—/// Deprecated. Unused in the framework and will be removed in a future version
/// of Flutter.
///
/// Classes that extend this class can extend [RenderObjectElement] and mixin
/// [RootElementMixin] instead. ¿KàÄ¿ ¿L"¿L9&/// Initializes fields for subclasses.¿L:¿LA  ¿K±¿K≤¿Kº¿L¿K¬¿KÁ   ¿J¬¿J√¿JÕ¿K)¿J—¿JÙ¿PmÉ.¿PøK/// An [Element] that uses a [LeafRenderObjectWidget] as its configuration. ¿P˜Äá ¿QA¿QXG/// Creates an element that uses the given widget as its configuration.¿QY#¿Qw     ¿QÇb¿Qì  ¿Qü¿Q®  ¿QÇ¿QÉ¿QËc¿Q˘  ¿R¿R  ¿R%¿R.  ¿QË¿QÈ¿ROu¿R`  ¿Rv¿RÑ  ¿Rä¿Rì  ¿Rõ¿R§  ¿RO¿RP¿R»c¿RŸ  ¿RÒ¿Rˇ  ¿S¿S  ¿R»¿R…¿S/j¿SQ   ¿S/¿S0 ¿Sùà%¿TÓÅJ/// An [Element] that uses a [SingleChildRenderObjectWidget] as its configuration.
///
/// The child is optional.
///
/// This element subclass can be used for [RenderObjectWidget]s whose
/// [RenderObject]s use the [RenderObjectWithChildMixin] mixin. Such widgets are
/// expected to inherit from [SingleChildRenderObjectWidget]. ¿U-Äï ¿Uw¿UïG/// Creates an element that uses the given widget as its configuration.¿Uñ*¿Uª   ¿U∆¿Uœ   ¿U⁄t¿UÎ  ¿U˘¿V	  ¿U⁄¿U€¿VR¿Vc  ¿Vo¿Vx  ¿VR¿VS¿V’Äπ¿VÊ  ¿VÏ¿Vˆ  ¿V˝¿W  ¿V’¿V÷¿WíÄ›¿W£  ¿W™'¿W…  ¿Wí¿Wì¿XsÅn¿XÑ  ¿Xú¿X™  ¿X∞¿Xπ  ¿Xs¿Xt¿YÂu¿Yˆ  ¿Z¿Z  ¿Z ¿Z)  ¿Z1¿Z:  ¿YÂ¿YÊ¿Z^Åb¿Zo  ¿Zá¿Zï  ¿Zõ¿Z§  ¿Z^¿Z_ ¿[ƒï¿^MÇÇ/// An [Element] that uses a [MultiChildRenderObjectWidget] as its configuration.
///
/// This element subclass can be used for [RenderObjectWidget]s whose
/// [RenderObject]s use the [ContainerRenderObjectMixin] mixin with a parent data
/// type that implements [ContainerParentDataMixin<RenderObject>]. Such widgets
/// are expected to inherit from [MultiChildRenderObjectWidget].
///
/// See also:
///
/// * [IndexedSlot], which is used as [Element.slot]s for the children of a
///   [MultiChildRenderObjectElement].
/// * [RenderObjectElement.updateChildren], which discusses why [IndexedSlot]
///   is used for the slots of the children. ¿^ãÄ⁄ ¿^’¿^ÚG/// Creates an element that uses the given widget as its configuration.¿^Û)¿_  ¿_$¿_*¿_c¿_+¿_,¿_J¿_b¿_K¿_S¿_Y¿_Z¿aÄ¿aì  ¿b:¿b' ¿b<¿bC¿bK¿bD¿bL¿bM¿_iÄÊ¿_    ¿_i¿_j¿`SÅ)¿a(Äî/// The current list of children of this element.
///
/// This list is filtered to hide elements that have been forgotten (using
/// [forgetChild]).  ¿`¿`Ò¿`˝¿`˛	¿bSÅ¿bd  ¿b|¿bä  ¿bê¿bß  ¿bS¿bT¿c÷Åñ¿cÁ  ¿c˝¿d  ¿d¿d(  ¿d0¿dG  ¿c÷¿c◊¿epÅF¿eÅ  ¿eô¿eß  ¿e≠¿e∂  ¿ep¿eq¿f∫Ä¿¿fÀ  ¿fŸ¿fÈ  ¿f∫¿fª¿g~Ä ¿gè  ¿gõ¿g§  ¿g~¿g¿hLÉ?¿hQ  ¿hv¿h   ¿kèÄ·¿k£  ¿k±¿kπ  ¿k√¿kÃ  ¿kè¿kê¿ltÇz¿lÖ  ¿lã¿lï  ¿lú¿l•  ¿lt¿lu¿nÚÅÊ¿o  ¿o
&¿o(  ¿nÚ¿nÛ ¿p‹àÖ¿r≥Å«/// A [RenderObjectElement] used to manage the root of a render tree.
///
/// Unlike any other render object element this element does not attempt to
/// attach its [renderObject] to the closest ancestor [RenderObjectElement].
/// Instead, subclasses must override [attachRenderObject] and
/// [detachRenderObject] to attach/detach the [renderObject] to whatever
/// instance manages the render tree (e.g. by assigning it to
/// [PipelineOwner.rootNode]). ¿rÈn ¿s3¿sHG/// Creates an element that uses the given widget as its configuration.¿sI¿sP     ¿s[Äû¿s}  ¿sê¿sô  ¿s[¿s\¿sg¿sh¿s˝N¿t   ¿s˝¿s˛¿t	¿t
¿tOÄè¿t`  ¿tk¿tt  ¿tO¿tP¿t‚Ñ}¿tÁ     ¿ycÅ±¿z Ä∂/// A wrapper class for the [Element] that is the creator of a [RenderObject].
///
/// Setting a [DebugCreator] as [RenderObject.debugCreator] will lead to better
/// error messages. ¿z1X ¿zn¿zz:/// Create a [DebugCreator] instance with input [Element].¿z{¿zÅ   ¿zç>¿zƒ&/// The creator of the [RenderObject].  ¿z–B¿z„   ¿z–¿z— ¿|¡Ñ›¿$ÇQ/// A value for [Element.slot] used for children of
/// [MultiChildRenderObjectElement]s.
///
/// A slot for a [MultiChildRenderObjectElement] consists of an [index]
/// identifying where the child occupying this slot is located in the
/// [MultiChildRenderObjectElement]'s child list and an arbitrary [value] that
/// can further define where the child occupying this slot fits in its
/// parent's child list.
///
/// See also:
///
///  * [RenderObjectElement.updateChildren], which discusses why this class is
///    used as slot values for the children of a [MultiChildRenderObjectElement].¿0¿0¿Hu ¿ô¿§H/// Creates an [IndexedSlot] with the provided [index] and slot [value].¿•
¿´  ¿±
¿∑   ¿¡t¿Ä0b/// Information to define where the child occupying this slot fits in its
/// parent's child list. ¿Ä:H¿Ä}6/// The index of this slot in the parent's child list. ¿Åb:¿Åv   ¿Åb¿Åc¿ÄáÄ◊¿Ä°  ¿Ä§¿Ä¨  ¿Äá¿Äà¿¿¿Å†Å8¿Çi/// Used as a placeholder in [List<Element>] objects when the actual
/// elements are not yet determined. ¿Ç1, ¿Ç1¿Ç=  ¿ÇB¿ÇG¿Ç[¿ÇH¿ÇN¿ÇY¿ÇZ¿Ça-¿Çu ¿ÇÄ¿Çå¿Çç¿ÇìC¿Ç®   ¿Çì¿Çî  ¿Ç⁄ÄÅ¿Ç‡  ¿Çˇ ¿É¿É     ¿ÉB¿É+   ¿É¿É  ¿ ÑÇS¿ Ñ\E/// Tracks the lifecycle of [State] objects when asserts are enabled.  ¿ Ñpb¿ ÑÀV/// The [State] object has been created. [State.initState] is called at this
/// time. ¿ Ñ◊Ä¨¿ ÖxÄú/// The [State.initState] method has been called but the [State] object is
/// not yet ready to build. [State.didChangeDependencies] is called at this time. ¿ Öàc¿ ÖÊY/// The [State] object is ready to build and [State.dispose] has not yet been
/// called. ¿ Öq¿ ÜZe/// The [State.dispose] method has been called and the [State] object is
/// no longer able to build.    ¿YF¿Y   ¿Y5¿Y5  ¿Y@¿Y@  ¿YJ¿YJ  ¿YV¿YV        ¿5TÄ∂¿5Y  ¿5t¿5|   ¿{Å©¿{*  ¿{>¿{O  ¿{Y¿{a  ¿{m¿{z  ¿{Ñ*¿{õ    ¿ Üff¿ Üü0/// The signature of [State.setState] functions.  ¿ Üª¿ Ü…   ¿a	Å¿aÂÄ”/// Signature for the callback to [BuildContext.visitChildElements].
///
/// The argument is the child being visited.
///
/// It is safe to call `element.visitChildElements` reentrantly within
/// this callback.  ¿b¿b   ¿bÄÊ¿b¬Ä¢/// Signature for the callback to [BuildContext.visitAncestorElements].
///
/// The argument is the ancestor being visited.
///
/// Return false to stop the walk.  ¿bÏ¿bı   ¿r›Ç#¿tæÅÿ/// Signature for the constructor that is called when an error occurs while
/// building a widget.
///
/// The argument provides information regarding the cause of the error.
///
/// See also:
///
///  * [ErrorWidget.builder], which can be set to override the default
///    [ErrorWidget] builder.
///  * [FlutterError.reportError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to [ErrorWidget.builder]
///    being called.  ¿t„¿t¯   ¿àIÅ÷¿âÈÅó/// Signature for a function that creates a widget, e.g. [StatelessWidget.build]
/// or [State.build].
///
/// Used by [Builder.builder], [OverlayEntry.builder], etc.
///
/// See also:
///
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿ä	¿ä   ¿ä!ÅÚ¿ãÀÅ°/// Signature for a function that creates a widget for a given index, e.g., in a
/// list.
///
/// Used by [ListView.builder] and other APIs that use lazily-generated widgets.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [NullableIndexedWidgetBuilder], which is similar but may return null.  ¿ãÚ¿å   ¿å	¿å   ¿åÑ¿è·É√/// Signature for a function that creates a widget for a given index, e.g., in a
/// list, but may return null.
///
/// Used by [SliverChildBuilderDelegate.builder] and other APIs that
/// use lazily-generated widgets where the child count is not known
/// ahead of time.
///
/// Unlike most builders, this callback can return null, indicating the index
/// is out of range. Whether and when this is valid depends on the semantics
/// of the builder. For example, [SliverChildBuilderDelegate.builder] returns
/// null when the index is out of range, where the range is defined by the
/// [SliverChildBuilderDelegate.childCount]; so in that case the `index`
/// parameter's value may determine whether returning null is valid or not.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [IndexedWidgetBuilder], which is similar but not nullable.  ¿ê¿ê  ¿ê'	¿ê,   ¿ê4Ç;¿í&ÅÈ/// A builder that builds a widget given a child.
///
/// The child should typically be part of the returned widget tree.
///
/// Used by [AnimatedBuilder.builder], [ListenableBuilder.builder],
/// [WidgetsApp.builder], and [MaterialApp.builder].
///
/// See also:
///
/// * [WidgetBuilder], which is similar but only takes a [BuildContext].
/// * [IndexedWidgetBuilder], which is similar but also takes an index.
/// * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿íJ¿íX  ¿í`¿íi   ¿1eÇ§¿20Äƒ/// Mixin this class to allow receiving [Notification] objects dispatched by
/// child elements.
///
/// See also:
///   * [NotificationListener], for a widget that allows consuming notifications.    ¿2VÅ1¿3]Ä˜/// Called when a notification of the appropriate type arrives at this
/// location in the tree.
///
/// Return true to cancel the notification bubbling. Return false to
/// allow the notification to continue to be dispatched to further ancestors. ¿3l¿3z   ¿3ã|¿3ú   ¿3ã¿3å ¿LLÑ¿MÄ∞/// Mixin for the element at the root of the tree.
///
/// Only root elements may have their owner set explicitly. All other
/// elements inherit their owner from their parent.    ¿M#Çy¿OeÅ◊/// Set the owner of the element. The owner will be propagated to all the
/// descendants of this element.
///
/// The owner manages the dirty elements list.
///
/// The [WidgetsBinding] introduces the primary owner,
/// [WidgetsBinding.buildOwner], and assigns it to the widget tree in the call
/// to [runApp]. The binding is responsible for driving the build pipeline by
/// calling the build owner's [BuildOwner.buildScope] method. See
/// [WidgetsBinding.drawFrame]. ¿Oq¿O}   ¿O†Ä…¿O±  ¿O∑¿O¡  ¿O»¿O—  ¿O†¿O° äê*ä° äÆä∏äπ¿ ÜŒD¿ Ü€ ¿ ÜÙ  õä <ÄÜÄ§Ä•Ä∫Ä‘Ä’ÄˇÅ(Å)Å@ÅUÅrÅëÅ∂Å÷Å◊ÇÇÇÇ.ÇBÇOÇ[ÇpÇÙÉXÉ®ÉÔÑ^Ñ_ÑwÑïÑªÑÙÖIÖîÖÎÜÜÅÜ∂ááçàEàià~àŒàıàˆâEâêâ„ääää)äXä]ädäwäçäèäêäºäΩä≈ä∆ããã]ãwã{ãâãçã∏å	åå9åÑå£å§åËåˇç çç/ç[çoçuçìçΩç¡ç¬çŒééé$é:é^éãéëé‰éËéÍéÎèèèoèºêêêUê§êÛëDëRëVë¢ëÒí=íeíiíπíÓíÚì>ìzì~ìéìíì·î î$îqî¿ï	ïYï©ïºï¿ññXñ\ñjñnñøñÃñﬁó&ówóàóéóﬁóò@òAòmòsò¡ò‘ôôôfôgô©ôØö ööNöOöêöñöÊö˝õ5õ6õáõçõÿú)úbúzú®úŒùù6ùNùdùlùrùÉùáùâùäù≥ù∑ûû,û>ûçû¿û∆û˙üPüåüçü™ü´ü∑üÕ††=†r†x†®†¨†Æ†Ø†˚†ˇ°M°g°k°≠°±¢¢D¢ï¢·¢ˆ¢˙££1£R£X£`£d£Æ£˚§§§f§∏§Û§Ù•8•N•O•[•~•™•æ•ƒ•Î¶¶¶¶&¶U¶V¶b¶x¶∫ß ß}ßößœßÙ®=®C®x®|®~®®±®µ©©P©ï©ô©Ë™3™m™ª™€™ﬂ´0´Ä´À¨¨-¨1¨¨ ≠≠i≠∑ÆÆÆÆ$Æ(ÆtÆûÆÍØØ]ØêØõØŒØˆ∞∞∞X∞^∞•∞ˆ±H±ò±Î±˜±˝≤M≤û≤Ï≥7≥à≥©≥Ø¥ ¥¥¥-¥3¥f¥x¥y¥≥¥πµµ^µ´µ˚∂∂∂)∂D∂E∂x∂Ñ∂ü∂⁄∑∑∑∑∑^∑â∑“∑÷∑◊∑„∑Ò∏%∏&∏2∏@∏f∏g∏∑∏Á∏Ìπ>πçπ“πÿ∫)∫w∫à∫∆ª ª+ª/ª0ªzªœº#º|º∞º⁄ΩΩΩΩΩΩLΩPΩ†ΩÔæ9æÅæ“æ÷øøøiø±¿ @¿ @L¿ @ö¿ @ø¿ @√¿ @Â¿ @È¿ A8¿ AÑ¿ A‘¿ B¿ B¿ BY¿ B™¿ BÙ¿ C¿ C¿ CZ¿ C}¿ CÅ¿ C“¿ D"¿ Dq¿ D¬¿ E¿ E]¿ Eî¿ Eò¿ EÈ¿ F'¿ F+¿ F{¿ FÀ¿ G¿ G3¿ G7¿ GÇ¿ GÃ¿ H¿ Hm¿ Hª¿ I¿ I[¿ Iq¿ Iº¿ J¿ JX¿ J©¿ Jˆ¿ KB¿ Kì¿ K–¿ K„¿ KÁ¿ L8¿ Lo¿ Ls¿ L∂¿ L∫¿ LŒ¿ L“¿ M%¿ M)¿ Mz¿ Mï¿ Mô¿ M•¿ M”¿ M˘¿ M˝¿ N¿ N8¿ Nr¿ Nz¿ NÄ¿ Nà¿ Nò¿ Nú¿ N∞¿ N¥¿ O¿ O¿ O¿ O+¿ OT¿ Og¿ Oz¿ O®¿ Oº¿ O∆¿ O ¿ O„¿ O˛¿ P¿ P¿ P=¿ Pt¿ P|¿ PÇ¿ Pä¿ Pö¿ Pû¿ PÁ¿ Q6¿ QY¿ Q]¿ Qk¿ Qo¿ Qª¿ QÂ¿ R1¿ RW¿ Rá¿ RØ¿ R◊¿ Rÿ¿ S)¿ S/¿ Sl¿ Sx¿ S∂¿ S∑¿ T¿ T¿ TY¿ T©¿ TÙ¿ UG¿ Uo¿ Uu¿ U¿¿ V¿ V^¿ Vß¿ V„¿ VÈ¿ W9¿ Wá¿ W¨¿ W≤¿ X ¿ XI¿ Xñ¿ Xﬂ¿ Y*¿ Ym¿ Ys¿ Y∞¿ Y∂¿ Z¿ Z¿ ZL¿ Zá¿ Zç¿ Z’¿ Zı¿ Z˚¿ [¿ [¿ [j¿ [w¿ [ù¿ [ü¿ [†¿ [≈¿ […¿ \¿ \d¿ \Ø¿ \ˆ¿ \˙¿ ]I¿ ]ò¿ ]‚¿ ^*¿ ^{¿ ^¿ ^À¿ _¿ _b¿ _∞¿ _Û¿ `
¿ `¿ `Q¿ `U¿ `•¿ `Í¿ a8¿ aâ¿ aΩ¿ a¡¿ a˛¿ bG¿ bñ¿ b‡¿ c1¿ cÅ¿ cß¿ c´¿ cı¿ dC¿ dç¿ dÿ¿ e$¿ es¿ e¡¿ f¿ f`¿ f±¿ fˇ¿ gO¿ gõ¿ gü¿ g¡¿ g≈¿ h ¿ h¿ hU¿ h•¿ hÙ¿ iD¿ iî¿ i‡¿ j1¿ jM¿ jQ¿ jõ¿ jÊ¿ k7¿ kÄ¿ k—¿ kÏ¿ k¿ l7¿ lY¿ l]¿ l™¿ lÒ¿ mA¿ mo¿ ms¿ mƒ¿ n¿ nY¿ n®¿ n€¿ nﬂ¿ o*¿ ot¿ o∆¿ p¿ pf¿ pª¿ p„¿ pÁ¿ q3¿ qS¿ qW¿ qß¿ q¯¿ rG¿ rî¿ r‡¿ s-¿ sx¿ s∆¿ sÎ¿ sÔ¿ t:¿ tÜ¿ t ¿ u¿ uG¿ uK¿ uì¿ uó¿ uË¿ v¿ v#¿ vf¿ vj¿ v¨¿ v’¿ vŸ¿ vÌ¿ vÒ¿ w;¿ w?¿ wá¿ w“¿ x¿ x"¿ x.¿ x\¿ xÉ¿ xá¿ xó¿ x‘¿ x⁄¿ xﬁ¿ y¿ y%¿ yP¿ yä¿ yí¿ yò¿ y†¿ y∞¿ yƒ¿ y»¿ z¿ z_¿ z¿ zÉ¿ zè¿ z∑¿ z ¿ z›¿ {¿ {¿ {)¿ {-¿ {F¿ {a¿ {e¿ {u¿ {¶¿ {¨¿ {∞¿ {€¿ {ı¿ {˘¿ |¿ |5¿ |=¿ |A¿ |Q¿ ||¿ |ñ¿ |µ¿ |ˆ¿ }¿ } ¿ }(¿ }.¿ }6¿ }F¿ }J¿ }ì¿ }‚¿ ~¿ ~	¿ ~¿ ~¿ ~`¿ ~≠¿ ~‡¿ ,¿ R¿ Å¿ ©¿ –¿ —¿ Ä!¿ Ä'¿ Äd¿ Äp¿ Ä¨¿ Ä≠¿ Ä˛¿ Å¿ ÅK¿ ÅÄ¿ ÅÜ¿ Åî¿ Å§¿ Å·¿ ÅÎ¿ ÅÒ¿ Ç>¿ Çç¿ Çﬁ¿ É-¿ É}¿ É»¿ Éﬂ¿ ÉÏ¿ É˜¿ Ñ¿ Ñ¿ Ñ¿ ÑW¿ Ñn¿ ÑΩ¿ Ñ…¿ Ñ‘¿ Ñ’¿ Ö"¿ Öv¿ ÖÖ¿ ÖÜ¿ Ö÷¿ Ö‰¿ ÖÌ¿ ÖÓ¿ Ü9¿ ÜX¿ Üc¿ Üe¿ Üf¿ Üó¿ ÜÕ¿ ÜŒ¿ á¿ á¿ áN¿ áR¿ á°¿ áÌ¿ à8¿ à¿ àÉ¿ à√¿ â¿ â^¿ â≠¿ â˜¿ ä>¿ äé¿ äﬁ¿ ã(¿ ã,¿ ã^¿ ãb¿ ãõ¿ ã¿¿ å¿ å\¿ å™¿ å˜¿ ç¿ çb¿ ç¨¿ ç˙¿ éC¿ éR¿ é£¿ éÔ¿ èB¿ èê¿ è·¿ ê1¿ êv¿ ê≈¿ ë¿ ëX¿ ë°¿ ë±¿ ë˛¿ íG¿ íî¿ íÂ¿ ì6¿ ìÜ¿ ì”¿ î ¿ îm¿ îñ¿ î‰¿ ï-¿ ïs¿ ïΩ¿ ñ
¿ ñY¿ ñ™¿ ñ˜¿ óD¿ ó}¿ ó ¿ ò¿ òc¿ ò∞¿ ô¿ ôJ¿ ôî¿ ô£¿ ôÙ¿ öD¿ öí¿ ö›¿ õ¿ õN¿ õõ¿ õÎ¿ ú0¿ ú4¿ úB¿ úF¿ úó¿ ú”¿ ù ¿ ùS¿ ùü¿ ù≈¿ ù˝¿ û¿ ûT¿ ûu¿ û{¿ û»¿ ü¿ üa¿ ü™¿ ü˚¿ †J¿ †]¿ †y¿ †á¿ †à¿ †»¿ †Œ¿ °¿ °j¿ °¨¿ °≠¿ °¯¿ ¢$¿ ¢^¿ ¢_¿ ¢ò¿ ¢û¿ ¢È¿ £2¿ £Å¿ £“¿ £È¿ £Ô¿ §8¿ §b¿ §¿ §è¿ §≠¿ §…¿ •A¿ •À¿ •÷¿ •ﬁ¿ •Ò¿ •˚¿ ¶¿ ¶¿ ¶2¿ ¶3¿ ¶m¿ ¶s¿ ¶Ω¿ ß¿ ßO¿ ß†¿ ßø¿ ß≈¿ ®¿ ®/¿ ®0¿ ®i¿ ®o¿ ®æ¿ ®–¿ ®÷¿ ©¿ ©p¿ ©∑¿ ©Ω¿ ©Ô¿ ™8¿ ™Ä¿ ™Õ¿ ´¿ ´9¿ ´?¿ ´q¿ ´Ω¿ ¨¿ ¨!¿ ¨U¿ ¨[¿ ¨p¿ ¨v¿ ¨À¿ ≠¿ ≠l¿ ≠Å¿ ≠á¿ ≠÷¿ ≠ˇ¿ Æ¿ Æ¿ Æ2¿ Æo¿ Æõ¿ Æ”¿ Æ¸¿ Ø¿ Ø/¿ Ø8¿ Ø>¿ ØB¿ ØC¿ Ø{¿ ØÅ¿ Ø—¿ ∞¿ ∞b¿ ∞¨¿ ∞€¿ ∞·¿ ±1¿ ±M¿ ±S¿ ±£¿ ±Î¿ ±Ò¿ ≤ ¿ ≤&¿ ≤u¿ ≤≠¿ ≤≥¿ ≥¿ ≥¿ ≥.¿ ≥;¿ ≥m¿ ≥n¿ ≥†¿ ≥¶¿ ≥¿ ¥9¿ ¥à¿ ¥é¿ ¥û¿ ¥§¿ ¥¬¿ ¥Ô¿ µ#¿ µ0¿ µA¿ µY¿ µZ¿ µ©¿ µØ¿ µ˙¿ ∂2¿ ∂8¿ ∂F¿ ∂s¿ ∂}¿ ∂É¿ ∂–¿ ∑¿ ∑T¿ ∑Z¿ ∑™¿ ∑˘¿ ∏J¿ ∏X¿ ∏^¿ ∏™¿ ∏˜¿ π4¿ π:¿ πá¿ π’¿ ∫%¿ ∫u¿ ∫ß¿ ∫≠¿ ∫ª¿ ∫Í¿ ª ¿ ª¿ ª"¿ ªà¿ ª∑¿ ª˛¿ º¿ º¿ º¿ ºb¿ º≥¿ º˛¿ Ω¿ Ω"¿ Ωn¿ Ω´¿ Ω±¿ Ωø¿ Ω÷¿ æ¿ æ¿ æ!¿ æG¿ æQ¿ æW¿ æ•¿ æÒ¿ ø@¿ øé¿ øﬁ¿ øÙ¿ ø˙¿ ¿¿ ¿¿ ¿l¿ ¿£¿ ¿—¿ ¿◊¿ ¡'¿ ¡x¿ ¡»¿ ¬¿ ¬	¿ ¬J¿ ¬P¿ ¬ù¿ ¬Ï¿ √=¿ √è¿ √¬¿ √»¿ ƒ¿ ƒg¿ ƒm¿ ƒë¿ ƒó¿ ƒÁ¿ ≈6¿ ≈á¿ ≈◊¿ ∆'¿ ∆I¿ ∆O¿ ∆ü¿ ∆¿ «>¿ «u¿ «{¿ «Ã¿ »¿ »1¿ »7¿ »G¿ »M¿ »ô¿ »’¿ »‚¿ …¿ …¿ …R¿ …ä¿ …Œ¿ …Í¿  G¿  †¿  ˜¿ À8¿ ÀE¿ ÀZ¿ ÀÉ¿ À⁄¿ Ã/¿ ÃÑ¿ Ãô¿ Ã¶¿ Ãª¿ Õ¿ Õd¿ Õ≥¿ Œ¿ Œ¿ Œ¿ Œ$¿ Œm¿ Œ•¿ ŒË¿ Œ˝¿ œV¿ œ∞¿ –¿ –:¿ –G¿ –S¿ –[¿ –n¿ –x¿ –§¿ –¥¿ –“¿ —
¿ —U¿ —q¿ —»¿ “	¿ “¿ “+¿ “Ö¿ “·¿ ”¿ ”+¿ ”7¿ ”?¿ ”è¿ ”±¿ ”ƒ¿ ”Œ¿ ”Ó¿ ”Ú¿ ”Û¿ ‘+¿ ‘1¿ ‘¿ ‘À¿ ’¿ ’l¿ ’∂¿ ÷¿ ÷U¿ ÷§¿ ÷Ù¿ ◊B¿ ◊í¿ ◊¿¿ ◊∆¿ ÿ¿ ÿ`¿ ÿ°¿ ÿß¿ ÿÙ¿ Ÿ¿ Ÿ$¿ Ÿ4¿ Ÿ:¿ Ÿä¿ ŸÆ¿ Ÿª¿ ŸÃ¿ Ÿ‰¿ ŸÂ¿ ⁄1¿ ⁄Q¿ ⁄W¿ ⁄•¿ ⁄¿ €'¿ €-¿ €|¿ €…¿ ‹¿ ‹c¿ ‹≥¿ › ¿ ›H¿ ›î¿ ›‰¿ ﬁ,¿ ﬁ}¿ ﬁÉ¿ ﬁ—¿ ﬂ¿ ﬂ4¿ ﬂ:¿ ﬂâ¿ ﬂ±¿ ﬂ∑¿ ﬂ«¿ ﬂÕ¿ ‡¿ ‡]¿ ‡j¿ ‡{¿ ‡ë¿ ‡í¿ ‡÷¿ ‡‹¿ ·&¿ ·t¿ ·√¿ ‚¿ ‚^¿ ‚d¿ ‚≥¿ ‚Ï¿ ‚Ú¿ „!¿ „'¿ „t¿ „õ¿ „°¿ „ø¿ „≈¿ ‰¿ ‰_¿ ‰®¿ ‰ˆ¿ Â(¿ Â.¿ Ây¿ Â¥¿ Â∫¿ Ê¿ ÊF¿ ÊL¿ Êö¿ Ê…¿ Êœ¿ Êﬂ¿ ÊÂ¿ Á ¿ Á-¿ Á>¿ ÁQ¿ Áå¿ Áú¿ Á“¿ ÁÂ¿ ÁÔ¿ Ë¿ Ëb¿ Ëh¿ Ël¿ Ëm¿ Ë∏¿ Ëæ¿ È¿ È¿ È"¿ ÈF¿ Èp¿ Èü¿ È‰¿ Í,¿ Í}¿ Í§¿ Í™¿ Í˘¿ Î*¿ Î0¿ Î{¿ Î»¿ Ï¿ Ïb¿ Ïû¿ Ï§¿ ÏÙ¿ ÌC¿ Ìé¿ Ìî¿ Ì‚¿ Ó+¿ Óz¿ Ó»¿ Ô¿ Ôc¿ Ô¢¿ Ô®¿ Ô√¿ Ô…¿ ¿ ¿ g¿ µ¿ Ò¿ Ò¿ Ò ¿ Òk¿ Òº¿ Ú¿ Ú\¿ Ú®¿ Ú‚¿ ÚË¿ Û9¿ ÛÉ¿ Û”¿ ÛŸ¿ Ù)¿ Ùw¿ Ùπ¿ ı¿ ıY¿ ır¿ ıx¿ ıÜ¿ ı∞¿ ıﬂ¿ ˆ¿ ˆ¿ ˆ4¿ ˆ:¿ ˆL¿ ˆÜ¿ ˆ¶¿ ˆ€¿ ˆË¿ ˆÚ¿ ˆ˙¿ ˜¿ ˜
¿ ˜[¿ ˜¶¿ ˜ˆ¿ ¯C¿ ¯ê¿ ¯›¿ ¯¿ ¯ˆ¿ ˘C¿ ˘ì¿ ˘Æ¿ ˘¥¿ ˘¬¿ ˘¿ ˙/¿ ˙5¿ ˙P¿ ˙_¿ ˙g¿ ˙m¿ ˙°¿ ˙∞¿ ˙¬¿ ˙Ô¿ ˚¿ ˚M¿ ˚Z¿ ˚d¿ ˚l¿ ˚v¿ ˚|¿ ˚Õ¿ ¸¿ ¸j¿ ¸∑¿ ¸ÿ¿ ¸ﬁ¿ ¸Ó¿ ¸Ù¿ ˝L¿ ˝Y¿ ˝¿ ˝Ä¿ ˝ø¿ ˝≈¿ ˛¿ ˛P¿ ˛Ö¿ ˛ã¿ ˛Ÿ¿ ˇ(¿ ˇ.¿ ˇx¿ ˇƒ¿ ¿ [¿ Ç¿ è¿ †¿ √¿ ƒ¿ –¿¿@¿P¿”¿Ê¿¿D¿™¿Æ¿∞¿±¿ ¿¿¿\¿t¿x¿Ü¿ä¿÷¿¸¿5¿~¿´¿˜¿!¿n¿°¿Ÿ¿¿?¿x¿y¿©¿Ø¿„¿5¿à¿—¿Ê¿¸¿˛¿ˇ¿L¿g¿k¿ß¿ı¿	5¿	9¿	â¿	ª¿	ø¿	”¿	◊¿
&¿
k¿
o¿
{¿
º¿
”¿
Ê¿¿ ¿*¿.¿E¿I¿Y¿ë¿Ì¿¿6¿ä¿¥¿æ¿∆¿ ¿⁄¿¿¿#¿3¿7¿E¿I¿Ü¿Õ¿¿W¿Ñ¿“¿¿H¿î¿Â¿-¿l¿m¿y¿ø¿¿¿¿¿"¿h¿∏¿‰¿Í¿6¿d¿°¿ª¿ÿ¿¿¿¿T¿ç¿ì¿·¿¿<¿B¿[¿a¿∞¿€¿'¿i¿o¿}¿è¿Ã¿÷¿‹¿,¿y¿ ¿ˆ¿˜¿E¿~¿Ñ¿“¿˜¿˝¿N¿í¿Ï¿Ì¿1¿V¿Å¿¶¿≠¿«¿‰¿Â¿Y¿w¿ï¿Ø¿ˇ¿	¿¿.¿§¿Ø¿¿¿'¿ù¿¶¿À¿ﬁ¿L¿W¿y¿ì¿¿¿¿"¿#¿u¿{¿¿¿˛¿N¿ù¿¬¿»¿ ¿ b¿ ≥¿!¿!S¿!Y¿!•¿!ﬁ¿"+¿"I¿"V¿"â¿"ä¿"◊¿"Ô¿"ı¿#A¿#å¿#í¿#¢¿#®¿#¯¿$¿$¿$>¿$@¿$A¿$í¿$ñ¿$Ÿ¿$›¿%.¿%z¿%~¿%Õ¿&	¿&¿&P¿&T¿&h¿&l¿&∑¿&ª¿&«¿&ı¿'¿' ¿'=¿'[¿'e¿'i¿'Ç¿'Ü¿'æ¿(¿(¿(¿(D¿(x¿(π¿(—¿(Ÿ¿(›¿(Ì¿)=¿)C¿)K¿)[¿)_¿)í¿)ñ¿)Ê¿*¿*W¿*†¿*§¿*ı¿+D¿+í¿+◊¿+€¿,*¿,z¿,©¿,≠¿,˚¿-L¿-ú¿-Ê¿.+¿.v¿.ë¿.ï¿.¬¿.∆¿/¿/f¿/w¿/{¿/è¿/ì¿/„¿0¿0¿0)¿0T¿0¿0†¿0§¿0¥¿0ﬂ¿0¯¿1¿14¿1P¿1Ö¿1¢¿1¬¿2¿2"¿23¿2B¿2O¿2Z¿2b¿2h¿2p¿2Ä¿2Ñ¿2ò¿2ú¿2Ê¿36¿3i¿3m¿3y¿3§¿3®¿3ÿ¿3˛¿4¿4¿4=¿4V¿4q¿4í¿4´¿4«¿5¿5¿5'¿52¿5:¿5@¿5H¿5ó¿5õ¿5©¿5≠¿5¯¿6!¿6m¿6ü¿6÷¿7¿7h¿7}¿7Õ¿7ˆ¿8+¿8|¿8ƒ¿9¿9¿9¿9M¿9N¿9ü¿9•¿9ˆ¿:G¿:ñ¿:ﬂ¿:Ú¿:¯¿;H¿;ò¿;‰¿;Ú¿;ˇ¿<?¿<A¿<B¿<í¿<‹¿<Ì¿<Ò¿=<¿=`¿=d¿=§¿=Ú¿>A¿>ã¿>µ¿>π¿?¿?9¿?ä¿?“¿?˝¿?˛¿@L¿@X¿@c¿@ä¿@ã¿@À¿A¿A8¿A>¿Aè¿A—¿B¿BK¿By¿BÜ¿Bë¿B ¿BÀ¿C¿Cg¿Cå¿Cí¿C‡¿D*¿Du¿D•¿D‘¿D·¿E:¿E;¿Eâ¿E”¿F	¿F¿F]¿F_¿F`¿F¥¿Fœ¿F”¿G ¿Gc¿G¥¿G¸¿H+¿H,¿H8¿HÑ¿HÜ¿Há¿H€¿H˛¿I¿IC¿Ië¿I‚¿J¿J¿Jj¿J¥¿K¿KM¿Kè¿Kê¿K¿¿K∆¿K˜¿L¿L¿L¿Lu¿Lw¿Lx¿LÃ¿M¿Mb¿Mn¿Mr¿M©¿M˘¿NB¿Nç¿N—¿N¯¿N¸¿OI¿OM¿O[¿O_¿Oö¿OÁ¿Oˆ¿P7¿Pà¿P¨¿Pı¿Q¿Qu¿Qv¿Qß¿Q≠¿Q˝¿RB¿Rê¿Rü¿R•¿RÔ¿S@¿Së¿Sÿ¿Sﬁ¿SÏ¿T¿TE¿Tx¿T~¿Tõ¿T≥¿T„¿TÒ¿T˚¿U¿U¿U@¿UÉ¿UÆ¿U∏¿U¿¿U ¿U–¿V¿V¿V#¿V[¿Vé¿Vî¿V±¿V…¿W¿WR¿Wå¿Wö¿W§¿W™¿Wº¿WÈ¿X5¿Xi¿Xs¿X{¿XÖ¿X§¿X•¿X±¿Y	¿Y¿Y¿Y¿Y¿Y¿Y3¿Y>¿YH¿YT¿Y_¿Ya¿Yb¿Y|¿Yî¿Y…¿Y ¿YÌ¿Z0¿Z@¿Zr¿Z°¿ZÎ¿Zı¿Z˝¿[¿[¿[F¿[n¿[Ö¿[ç¿[§¿[Ê¿[Í¿[Î¿\¿\¿\b¿\y¿\É¿\Æ¿\æ¿\ﬂ¿\ˆ¿\¸¿] ¿]¿]9¿]z¿]î¿]◊¿^
¿^¿^<¿^O¿^Y¿^]¿^^¿^|¿^í¿^º¿^·¿_ ¿_G¿_M¿_i¿_m¿_n¿_è¿_•¿_Œ¿_Û¿`¿`S¿`W¿`X¿`Ä¿`ñ¿`¶¿`“¿`Â¿`Ô¿a¿a¿a¿a	¿aN¿aR¿a¿aÉ¿a ¿a›¿b¿b¿b_¿bc¿bì¿bó¿b∫¿b˛¿bˇ¿c<¿c@¿c¿c»¿cÃ¿d¿di¿d∂¿e¿e;¿e?¿eã¿eŸ¿f$¿f(¿fw¿f∆¿g¿ge¿g∂¿h¿hT¿h£¿hÔ¿i9¿il¿ip¿iø¿j
¿jS¿j£¿jÏ¿j¿j¸¿k
¿k3¿kd¿k{¿kÆ¿k≈¿kÒ¿l¿l;¿lY¿lï¿l¿¿lÊ¿m¿m<¿mg¿må¿m≥¿mÌ¿n¿nR¿n~¿nƒ¿nÚ¿o*¿oK¿oi¿oÜ¿o°¿o∫¿o—¿oÊ¿o˘¿p
¿p¿p&¿p0¿p9¿p?¿pG¿pK¿põ¿pÍ¿q7¿qX¿q\¿qü¿q£¿qÚ¿r@¿r~¿r–¿s!¿s\¿s`¿sl¿s|¿sß¿s∆¿sÊ¿t*¿tM¿tx¿tÜ¿tì¿tø¿t ¿t“¿t⁄¿tÌ¿tÒ¿u?¿uç¿u´¿u˘¿v¿v¿vY¿vë¿v™¿v´¿vÛ¿w¿w¿wj¿w∏¿wÃ¿w“¿x ¿x&¿xc¿xw¿xx¿xƒ¿x ¿y¿yI¿yö¿yº¿z¿z&¿z,¿z}¿zæ¿zÍ¿z¿{(¿{D¿{E¿{â¿{◊¿|$¿|@¿|F¿|ë¿|›¿}"¿}q¿}û¿}§¿}Ù¿~D¿~ì¿~⁄¿~Ï¿~Ú¿>¿`¿f¿≥¿ˇ¿ÄO¿Äu¿Äô¿Äö¿Ä‹¿Ä‚¿Å.¿Åz¿Å√¿ÅÏ¿ÅÚ¿Ç>¿Ç`¿Çf¿Ç∑¿É¿ÉT¿É°¿Éß¿ÉÙ¿Ñ@¿Ñê¿Ñ∂¿Ñ»¿Ñ…¿Ö¿ÖL¿ÖR¿Ös¿Öy¿Ö√¿Ü¿ÜH¿ÜN¿Ü¢¿Ü–¿á+¿á,¿á|¿á¥¿á∫¿à¿àT¿à°¿à¿â1¿â7¿ââ¿â‘¿âÊ¿âÏ¿ä4¿äÄ¿äÕ¿ã¿ãl¿ãª¿ã’¿ã€¿å+¿åz¿åÀ¿ç¿çL¿çR¿ç†¿çÌ¿é!¿é'¿éx¿é£¿é©¿é˘¿èE¿èñ¿è·¿ê¿ê¿êE¿êå¿ê–¿êˆ¿ë¿ëc¿ëd¿ë¥¿ëË¿ëÓ¿í>¿íã¿í‹¿ì¿ì¿ìn¿ìΩ¿î¿î[¿îè¿îï¿î„¿ï0¿ïd¿ïj¿ï™¿ïÎ¿ïÏ¿ñA¿ñà¿ñé¿ñæ¿ñƒ¿ó¿ó[¿óa¿ó∞¿óÊ¿óÏ¿ò<¿òã¿ò≈¿ô¿ôh¿ôì¿ô®¿ö¿ö¿öV¿öÇ¿öà¿ö’¿õ"¿õs¿õΩ¿ú¿úZ¿úß¿ú¯¿ùH¿ùî¿ùö¿ùÊ¿û1¿ûj¿ûp¿û¬¿ü¿ü\¿üØ¿üµ¿†¿†"¿†7¿†o¿†p¿†¡¿†Ú¿†¯¿°?¿°ê¿°·¿¢5¿¢à¿¢‘¿£ ¿£D¿£J¿£ó¿£Ê¿§7¿§i¿§o¿§ª¿•¿•?¿•E¿•ó¿•„¿¶1¿¶~¿¶ì¿¶ô¿¶Ø¿¶µ¿¶√¿ß¿ß%¿ß7¿ßh¿ßi¿ßª¿ßÏ¿ßÚ¿®=¿®ï¿®·¿©¿©¿©b¿©s¿©à¿©Ω¿©æ¿™¿™K¿™Q¿™ü¿™¿´A¿´ï¿´‰¿¨4¿¨Å¿¨∏¿¨æ¿≠
¿≠U¿≠é¿≠î¿≠Ê¿Æ2¿ÆÄ¿Æ‘¿ÆÈ¿Ø(¿Ø)¿Øz¿Ø±¿Ø∑¿Ø¸¿∞K¿∞ö¿∞ﬂ¿∞Â¿±¿± ¿±s¿±y¿±À¿≤¿≤f¿≤±¿≤∆¿≥¿≥¿≥1¿≥7¿≥y¿≥ƒ¿¥¿¥b¿¥í¿¥ò¿¥Ê¿µ2¿µ@¿µF¿µë¿µ›¿µ„¿∂4¿∂~¿∂œ¿∑ ¿∑9¿∑N¿∑Å¿∑Ç¿∑≈¿∑À¿∏¿∏e¿∏{¿∏≥¿∏¥¿π¿π¿π`¿πf¿πv¿π|¿π”¿∫F¿∫G¿∫û¿∫§¿∫Ò¿ªc¿ªd¿ª≥¿ªÿ¿ªﬁ¿º-¿ºÜ¿ºá¿º—¿ºÏ¿ºÚ¿Ω>¿Ωu¿Ωw¿Ωx¿Ω•¿Ω©¿Ωˆ¿æG¿æî¿æ∫¿ææ¿ø
¿øJ¿øk¿øo¿øª¿øø¿øÓ¿¿3¿¿D¿¿H¿¿\¿¿™¿¿Ù¿¡8¿¡<¿¡à¿¡ò¿¡´¿¡Ÿ¿¡ﬂ¿¬+¿¬w¿¬¡¿√¿√+¿√q¿√¬¿√√¿ƒ¿ƒ¿ƒ=¿ƒ>¿ƒÅ¿ƒÇ¿ƒ∂¿ƒ„¿ƒ‰¿≈/¿≈_¿≈e¿≈¥¿≈∫¿∆¿∆¿∆D¿∆E¿∆à¿∆é¿∆÷¿«¿« ¿«N¿«T¿«¢¿«Ÿ¿«ﬂ¿»
¿»¿»Z¿»©¿»˘¿…I¿…\¿…y¿…z¿…∆¿  ¿ +¿ N¿ ^¿ å¿À¿À¿À9¿Àq¿À–¿Ã&¿ÃB¿Ã•¿Ã–¿Ã›¿ÃÚ¿ÕP¿Õú¿ÕÓ¿Õ˚¿Œ¿Œ¿Œ"¿Œ,¿ŒL¿Œ^¿Œé¿œC¿œM¿œr¿œ¨¿œˇ¿–¿–p¿–Ω¿–Ã¿–⁄¿–‰¿–˘¿—¿—0¿—>¿—D¿—â¿—¥¿—œ¿—’¿—ˆ¿“¿“'¿“U¿“í¿“ö¿“≠¿“∑¿“ª¿“º¿“‹¿”¿”¿”M¿”S¿”~¿”™¿”…¿”Ó¿”Ô¿‘?¿‘a¿‘g¿‘∑¿‘ÿ¿’¿’)¿’9¿’Z¿’m¿’w¿’Å¿’ì¿’£¿’µ¿’ÿ¿’Ì¿’˘¿’ˇ¿÷&¿÷*¿÷+¿÷w¿÷√¿÷˘¿÷ˇ¿◊M¿◊ç¿◊ì¿◊‡¿ÿ,¿ÿ|¿ÿæ¿ÿË¿ÿÓ¿Ÿ<¿Ÿã¿Ÿº¿Ÿ¬¿Ÿ˜¿Ÿ˝¿⁄7¿⁄=¿⁄Ñ¿⁄—¿€¿€,¿€Y¿€ö¿€–¿€ﬁ¿€‰¿‹¿‹(¿‹8¿‹Z¿‹π¿‹¡¿‹‚¿‹ˇ¿›¿›¿›5¿›h¿›z¿›¨¿›·¿ﬁ¿ﬁE¿ﬁx¿ﬁ°¿ﬁÆ¿ﬁ∏¿ﬁÕ¿ﬁŸ¿ﬁ˙¿ﬂ¿ﬂ5¿ﬂ>¿ﬂD¿ﬂN¿ﬂy¿ﬂó¿ﬂ∫¿ﬂÂ¿ﬂ˘¿‡8¿‡f¿‡}¿‡ã¿‡π¿‡«¿‡›¿‡Ò¿·¿·@¿·Å¿·Ø¿·»¿·ÿ¿·‚¿·Í¿‚¿‚@¿‚n¿‚É¿‚¶¿‚›¿„¿„¿„Å¿„Ω¿‰¿‰2¿‰ó¿‰Ò¿Â¿Â¿ÂÇ¿ÂÈ¿ÊN¿Ê¢¿Ê≥¿Êﬂ¿Á¿Á+¿Áf¿Áw¿Á£¿Ë¿Ë3¿Ën¿Ë¿Ëè¿Ëõ¿Ë≤¿Ë¿¿È$¿ÈE¿È|¿Èí¿È÷¿Í7¿ÍE¿Í^¿Ín¿Íì¿Í¿¿ÍÔ¿Í¸¿Î¿Î¿Î1¿ÎN¿Îj¿Î´¿Î∫¿ÎÕ¿Ï¿ÏG¿Ïá¿Ï∏¿Ì)¿Ì<¿Ó¿Ó'¿Ó4¿Ó>¿Ó_¿Óá¿Óë¿Ó•¿Ó¯¿Ô&¿ÔV¿ÔÑ¿Ô≈¿(¿Å¿‰¿ÒG¿Òß¿Ú¿Ú>¿ÚV¿Úb¿Úl¿Út¿ÚÜ¿Û¿Û=¿ÛÅ¿ÛÓ¿Ùh¿Ùv¿ÙÄ¿Ùï¿Ù°¿Ù±¿ÙÁ¿ı¿ı3¿ı;¿ıY¿ıÖ¿ı∞¿ıÀ¿ıÒ¿ı˘¿ˆ¿ˆ)¿ˆI¿ˆl¿ˆê¿ˆΩ¿ˆ«¿ˆ‹¿ˆË¿ˆÓ¿˜¿˜¿˜¿˜z¿˜{¿˜‰¿¯O¿¯Ø¿¯Â¿¯¯¿¯¸¿¯˝¿˘,¿˘~¿˘Ç¿˘É¿˘–¿˘—¿˙)¿˙c¿˙q¿˙»¿˙…¿˚¿˚:¿˚ä¿˚ß¿˚¨¿¸¿¸>¿¸L¿¸”¿¸‘¿˝!¿˝\¿˝ì¿˝î¿˝‡¿˝¿˛+¿˛>¿˛H¿˛L¿˛M¿˛â¿˛ô¿˛ ¿ˇ¿ˇT¿ˇÖ¿ˇç¿ˇ†¿ˇ™¿ˇ—¿ˇ’¿ˇ÷¿ ¿ $¿ {¿ ∏¿¿¿ ¿*¿X¿~¿Ñ¿à¿â¿⁄¿Í¿1¿k¿~¿à¿å¿ç¿π¿…¿¿u¿±¿¿0¿:¿v¿¬¿¿#¿J¿^¿j¿∂¿¿C¿r¿ø¿¿T¿â¿≥¿Ÿ¿¿Q¿ú¿æ¿	"¿	A¿	`¿	√¿	÷¿	Ë¿	˝¿
=¿
à¿
™¿¿]¿}¿‡¿Û¿¿¿`¿Æ¿¸¿"¿L¿á¿¥¿‡¿Ú¿¿¿<¿w¿§¿–¿‚¿Ù¿¿¿.¿U¿a¿m¿w¿£¿∂¿¿¿ƒ¿≈¿Ô¿ˇ¿/¿Ç¿∆¿Ù¿6¿m¿£¿Ê¿>¿_¿ë¿õ¿£¿ ¿Í¿1¿Ö¿º¿ˆ¿E¿ï¿‰¿5¿n¿‰¿Ó¿j¿ù¿•¿∏¿¬¿∆¿«¿¿)¿/¿c¿i¿∫¿◊¿›¿-¿Z¿á¿ü¿∏¿Í¿¿˙¿M¿_¿m¿õ¿«¿¿{¿π¿+¿u¿›¿Ì¿˚¿¿l¿ ¿¿I¿b¿ç¿ü¿Ø¿Ë¿'¿I¿o¿à¿Û¿¿¿é¿‡¿ L¿ ã¿ €¿ Ù¿!'¿!9¿!I¿!Ü¿!Õ¿!Ô¿"¿"6¿"≠¿"ø¿"—¿"˝¿#>¿#z¿#ø¿$¿$^¿$¶¿$Ï¿%>¿%ã¿%ﬁ¿&)¿&ï¿&”¿'#¿'u¿'ú¿'æ¿(2¿(•¿) ¿)2¿)ß¿*-¿*•¿+¿+à¿+¡¿+ı¿,Z¿,m¿,¿,ç¿,ô¿,≠¿- ¿-
¿-¿-+¿-D¿-í¿-›¿-˝¿.Q¿.a¿.|¿.¢¿.™¿.∞¿.¥¿.µ¿/¿/P¿/°¿/¿¿/∆¿0¿04¿0M¿0ê¿0ñ¿0†¿0ƒ¿0Ê¿0ˇ¿1¿1*¿1P¿1X¿1^¿1b¿1d¿1e¿1≤¿1∆¿1 ¿1ÿ¿2*¿2T¿2ù¿2π¿2ø¿3¿3V¿3à¿3â¿3ï¿3∑¿4¿4¿4
¿4¿4%¿4U¿4V¿4y¿4ñ¿4ó¿4–¿5	¿5¿5¿5M¿5Q¿5S¿5T¿5Ö¿5´¿5⁄¿6	¿6¿6¿6U¿6Y¿6©¿6˙¿7K¿7ñ¿7Ê¿7˝¿8¿8O¿8õ¿8ü¿8 ¿8Œ¿9¿9g¿9∑¿:¿:N¿:õ¿:Ë¿:˜¿;B¿;ë¿;‡¿<1¿<¿<œ¿=¿=Z¿=™¿=˙¿>G¿>ò¿>≈¿?¿?]¿?®¿?Ó¿@?¿@å¿@Ÿ¿A'¿Ax¿Aú¿AÍ¿B7¿BG¿Bë¿B¬¿C¿CX¿C^¿Cü¿C∏¿C—¿C˝¿D5¿D^¿D}¿Dì¿Dú¿D¢¿D¶¿Dß¿Dª¿D„¿D‰¿E¿E¿E\¿Eß¿E‡¿EÊ¿F5¿FÉ¿F—¿G ¿G&¿Gs¿G¬¿H¿HX¿H^¿H®¿HÍ¿H¯¿I¿IP¿Iå¿Iç¿I›¿IÔ¿Iı¿JF¿Jñ¿JÆ¿JÀ¿J‹¿J›¿K*¿Kv¿Kà¿Kò¿K“¿L(¿L0¿LC¿LM¿L`¿Ld¿Lw¿Lx¿L…¿Lﬂ¿M
¿M2¿Mi¿M~¿Më¿Mó¿MÊ¿N¿N*¿NI¿Ni¿No¿N¢¿N∞¿N¥¿Nµ¿O ¿OU¿O™¿P¿P7¿Pc¿Pê¿Pû¿P¢¿P£¿PÕ¿P”¿Q¿Qi¿Qπ¿R¿RU¿Rã¿Ró¿R∏¿RÀ¿RÃ¿Rÿ¿Rˇ¿S ¿S.¿S4¿Sz¿S ¿SÊ¿T¿T¿TR¿Te¿To¿TÖ¿Tâ¿Tä¿T∑¿TΩ¿U¿US¿Un¿Uâ¿Uô¿U◊¿UÍ¿UÙ¿V	¿V¿V¿VK¿VW¿Vz¿Vê¿Vë¿V∆¿W¿W2¿W8¿Wá¿W”¿WÛ¿W˘¿XH¿Xò¿X≠¿X≥¿Y¿YU¿Y†¿Y¿Z9¿ZÜ¿Z◊¿[¿['¿[-¿[=¿[C¿[_¿[å¿[¿¿[—¿[ﬁ¿[Ù¿\
¿\.¿\H¿\P¿\T¿\U¿\~¿\õ¿\π¿\ÿ¿\Ì¿\ı¿]¿]¿].¿]2¿]3¿]t¿]z¿]À¿^¿^I¿^O¿^ú¿^Ê¿_3¿_d¿_á¿_§¿_¬¿`¿`¿`F¿`k¿`z¿`∞¿`∏¿`æ¿`œ¿`”¿`‘¿a%¿ae¿ak¿aª¿b¿bO¿bõ¿b»¿bŒ¿c¿cd¿cq¿cù¿c∞¿c‘¿d¿d3¿d;¿dL¿dP¿dQ¿d]¿d∑¿d˙¿e+¿eY¿ew¿eä¿eí¿eì¿e≈¿f¿f'¿fX¿f`¿fa¿fÅ¿f⁄¿fÁ¿g¿gL¿gê¿gö¿g†¿g∏¿gº¿gΩ¿h¿hi¿hÜ¿hò¿i¿i+¿i2¿i6¿i7¿iC¿i∑¿i˙¿i˛¿iˇ¿j¿j~¿j¡¿j≈¿j∆¿j“¿k
¿kU¿k†¿k≥¿kÓ¿kÚ¿kÛ¿l<¿lR¿lì¿lî¿l„¿m¿m¿mY¿mÇ¿mà¿m‘¿n%¿nv¿næ¿nÔ¿n¿o,¿o2¿oÅ¿oë¿oó¿oÂ¿p2¿p¿p¥¿p∫¿q
¿q(¿q.¿q>¿qD¿qx¿q≤¿r¿rQ¿r`¿r¥¿rµ¿rÓ¿r˙¿s.¿s>¿sv¿sã¿sì¿s…¿t¿t&¿tw¿t«¿u¿uG¿uR¿u\¿uf¿uÇ¿uÜ¿uá¿u∆¿uÃ¿v¿vj¿vp¿v¿¿v∆¿w¿wk¿wq¿w¿¿w˙¿x ¿xQ¿x¢¿xÛ¿y>¿yg¿ym¿yæ¿y–¿y÷¿z%¿zs¿zØ¿zµ¿zÂ¿zÎ¿{<¿{ç¿{ﬁ¿|d¿|j¿|ª¿}¿}L¿}ñ¿}‰¿~)¿~/¿~Ä¿~ç¿~´¿~¯¿¿0¿P¿X¿k¿q¿r¿é¿ß¿Ã¿Ä¿Äm¿Ä¿¿Å¿Åe¿Ån¿Å¡¿Ç¿Çr¿Çà¿Çë¿Ç‡¿É,¿É}¿É∆¿Éÿ¿Ñ"¿Ñn¿Ñ≠¿Ñ¬¿ÑŒ¿Ö
¿ÖS¿Öû¿Ö–¿Öı¿Ü#¿Ü-¿ÜG¿Üö¿Üø¿ÜÌ¿Ü˜¿áV¿áw¿áÆ¿áƒ¿à¿àd¿àr¿àã¿àõ¿à¿¿àË¿â¿â$¿â.¿âO¿âp¿âò¿â¢¿âÕ¿â·¿ä¿ä/¿ä=¿äW¿äf¿äÜ¿ä≠¿ä˜¿ãG¿ãz¿ã∞¿ã∏¿ã≈¿å¿å[¿åå¿å¿¿å∆¿å«¿å◊¿åÚ¿ç#¿ç+¿çQ¿ço¿çé¿çÕ¿ç’¿çË¿çÚ¿çÛ¿é¿é¿é¿éL¿éR¿éõ¿éÏ¿è¿è¿èl¿è∏¿ê	¿êT¿êü¿ê¿ë%¿ë+¿ë|¿ëÕ¿í¿íl¿íº¿ì¿ì\¿ì†¿ìÒ¿î ¿î&¿î_¿î¨¿î˙¿ïF¿ïç¿ï€¿ñ¿ñ¿ñ]¿ñ®¿ñÙ¿óC¿óÖ¿óŒ¿ò!¿òl¿òΩ¿ò˙¿ôF¿ôî¿ôÂ¿ô˝¿ö
¿öö¿ö⁄¿ö€¿õ¿õp¿õv¿õw¿õ∏¿õ”¿õÙ¿ú5¿ú;¿ú<¿ú~¿úÕ¿ù¿ù^¿ù_¿ùé¿ùÆ¿ù–¿û¿û:¿û}¿ûƒ¿û≈¿ü¿üf¿üÄ¿üŒ¿†¿†g¿†à¿†Ã¿†Ù¿°8¿°k¿°¶¿°“¿¢¿¢^¿¢§¿¢∑¿¢∏¿¢‘¿¢¿£#¿£W¿£X¿£æ¿£ø¿£€¿£‹¿£ˇ¿§\¿§µ¿§¿•H¿•ó¿•¶¿•Æ¿¶¿¶\¿¶ä¿¶™¿¶≈¿¶‡¿¶Ê¿¶Á¿ß¿ßh¿ßƒ¿®¿®Z¿®©¿®∏¿®¿¿®ﬁ¿®¸¿©¿©¿©;¿©Å¿©™¿©≈¿©¿™$¿™¿™Ÿ¿™˘¿´&¿´e¿´x¿´ü¿´´¿´µ¿´“¿´⁄¿´‡¿´·¿¨¿¨9¿¨R¿¨ç¿¨™¿¨“¿¨Ì¿≠¿≠<¿≠|¿≠ü¿≠Ï¿Æ¿Æ-¿Æs¿Æí¿Æ†¿Æ¨¿Æ∂¿Ææ¿Ø¿Øx¿Øº¿∞,¿∞Z¿∞z¿∞ï¿∞õ¿∞ú¿∞¡¿∞ˆ¿±+¿±Ç¿±±¿±·¿±‚¿≤¿≤e¿≤°¿≤›¿≥!¿≥\¿≥ò¿¥¿¥F¿¥¢¿¥–¿¥¿µ¿µ&¿µ,¿µ-¿µr¿µ≠¿µÌ¿∂?¿∂d¿∂n¿∂v¿∂|¿∂ ¿∂‚¿∂Ê¿∂Á¿∑1¿∑7¿∑à¿∑‘¿∏"¿∏W¿∏]¿∏≠¿∏—¿∏◊¿π&¿πv¿π≠¿π‚¿πË¿∫7¿∫k¿∫|¿∫≠¿∫Á¿ª¿ªV¿ªp¿ªÜ¿ªõ¿ªÀ¿º¿º¿ºh¿ºØ¿º„¿Ω ¿Ω¿Ω!¿ΩB¿Ω^¿Ωä¿Ωê¿Ω™¿Ω»¿ΩÃ¿ΩÕ¿æ¿æ!¿æ^¿æb¿æc¿æõ¿æ°¿æÈ¿ø8¿øp¿øv¿øæ¿øœ¿ø˚¿¿4¿¿n¿¿z¿¿¨¿¿À¿¿˚¿¡¿¡S¿¡§¿¡ı¿¬@¿¬i¿¬y¿¬–¿√¿√¿√"¿√;¿√?¿√@¿√É¿√â¿√⁄¿ƒ+¿ƒZ¿ƒg¿ƒ£¿ƒ‹¿ƒˇ¿≈!¿≈D¿≈ä¿≈™¿≈≈¿≈Õ¿≈”¿≈Â¿≈È¿≈Í¿∆;¿∆o¿∆|¿∆ç¿∆≤¿∆Î¿«¿«J¿«_¿«c¿«d¿«ã¿«∫¿«‹¿«˙¿» ¿»K¿»U¿»[¿»_¿»`¿»í¿»ò¿»–¿…
¿…Z¿…é¿…î¿…ø¿…›¿ ¿ #¿ +¿ =¿ A¿ B¿ ñ¿ ú¿ ‘¿À¿À^¿Àé¿Àî¿À‰¿Ã¿Ã+¿ÃO¿Ãx¿ÃÄ¿Ãï¿Ãô¿Ãö¿Ãﬂ¿Õ4¿Õà¿Õ÷¿Œ'¿Œt¿Œ ¿Œ¸¿œ¿œ*¿œ0¿œh¿œ{¿œÅ¿œë¿œ√¿–;¿–C¿–V¿–`¿–ç¿–ß¿–π¿–◊¿—¿—r¿—¬¿“¿“v¿”¿”É¿”ë¿”õ¿”ı¿‘¿‘¿‘!¿‘6¿‘B¿‘e¿‘å¿‘í¿‘∑¿‘Â¿‘˘¿‘˝¿‘˛¿’I¿’j¿’p¿’π¿÷¿÷¿÷¿÷h¿÷∑¿◊¿◊Y¿◊_¿◊Ø¿◊µ¿ÿ¿ÿ3¿ÿ@¿ÿ^¿ÿõ¿ÿˆ¿Ÿ¿ŸF¿ŸX¿Ÿò¿Ÿ¿Ÿ˙¿⁄¿⁄¿⁄<¿⁄`¿⁄ã¿⁄î¿⁄ö¿⁄õ¿⁄•¿⁄À¿⁄È¿€3¿€S¿€¿€ï¿€¡¿€⁄¿€Í¿€˙¿‹3¿‹K¿‹Ø¿‹¡¿‹Í¿›¿›G¿›U¿›j¿›v¿›…¿›ı¿ﬁ¿ﬁ¿ﬁ'¿ﬁa¿ﬁs¿ﬁõ¿ﬁ∞¿ﬁº¿ﬁ·¿ﬂ%¿ﬂ&¿ﬂ=¿ﬂM¿ﬂl¿ﬂí¿ﬂö¿ﬂ†¿ﬂ§¿ﬂ•¿ﬂ’¿ﬂ˚¿‡¿‡&¿‡K¿‡i¿‡q¿‡Ω¿‡–¿‡⁄¿‡ﬁ¿‡ﬂ¿·,¿·V¿·\¿·¨¿·˝¿‚"¿‚(¿‚h¿‚n¿‚ª¿„	¿„Z¿„©¿„¿„˝¿‰%¿‰H¿‰b¿‰Ç¿‰◊¿‰Á¿Â¿ÂF¿Ââ¿Âì¿Âõ¿ÂÆ¿Â∏¿Âº¿ÂΩ¿Ê¿ÊX¿Ê]¿Êµ¿ÊÔ¿Ê˝¿Áb¿Ác¿Á≤¿ÁÓ¿ÁÙ¿ËA¿Ë`¿Ëf¿Ë¥¿È¿ÈQ¿Èd¿Èj¿È∏¿ÈŸ¿ÈÊ¿È˜¿Í¿Íg¿Í±¿Íˇ¿ÎJ¿Îô¿Î«¿Î◊¿Ï¿Ï<¿ÏD¿ÏW¿Ïa¿Ïe¿Ïf¿Ï§¿Ïﬂ¿Ïı¿Ì¿Ì7¿Ìz¿ÌÇ¿Ìï¿Ìü¿Ì¡¿Ì·¿Ó¿Ó;¿Ó?¿Ó@¿Óv¿Óπ¿Ó—¿Ô¿ÔC¿ÔG¿ÔH¿Ôé¿Ôî¿Ô‰¿5¿~¿Œ¿‘¿Ò$¿Ò*¿Òy¿Ò°¿Ò≤¿Ò∆¿Ú¿Ú¿Úí¿Ú¬¿Û¿ÛV¿Ûr¿Ûõ¿Ûµ¿Û”¿ÛÂ¿Ù
¿Ù¿Ù+¿ÙJ¿ÙP¿ÙT¿ÙU¿Ùõ¿Ù°¿ÙÒ¿ıB¿ıê¿ı€¿ˆ,¿ˆG¿ˆM¿ˆÖ¿ˆã¿ˆ€¿ˆ·¿˜.¿˜X¿˜i¿˜¿˜∏¿¯¿¯W¿¯ô¿¯∆¿¯Œ¿˘¿˘m¿˘Ω¿˙¿˙Z¿˙v¿˙|¿˙õ¿˙Õ¿˙—¿˙“¿˚(¿˚.¿˚a¿˚r¿˚é¿˚…¿˚Õ¿˚Œ¿¸¿¸¿¸j¿¸∏¿˝	¿˝Q¿˝W¿˝¶¿˝º¿˝¬¿˛¿˛]¿˛ë¿˛ó¿˛Á¿˛Ì¿ˇ:¿ˇa¿ˇr¿ˇÖ¿ˇ¿¿ !¿ <¿ h¿ Ø¿ µ¿ ˝¿ ¿<¿j¿p¿∫¿Ó¿¿¿M¿Q¿R¿¢¿Û¿.¿4¿Ö¿÷¿‹¿*¿z¿≈¿¿d¿Ø¿˛¿J¿Z¿`¿≠¿˝¿G¿ò¿Ÿ¿ﬂ¿+¿K¿â¿ä¿ñ¿ª¿À¿	¿	<¿	Ñ¿	†¿	¿
,¿
t¿
ƒ¿
Í¿
˜¿X¿d¿l¿¿â¿¢¿¶¿ß¿≥¿∆¿÷¿¿_¿é¿∆¿¿"¿s¿Ø¿ˆ¿¿V¿b¿j¿ç¿≈¿˛¿¿l¿º¿¿Z¿û¿´¿ƒ¿Ÿ¿)¿{¿œ¿!¿B¿O¿h¿ª¿«¿œ¿‚¿Ï¿'¿7¿Y¿ë¿’¿Í¿=¿í¿Ê¿9¿o¿|¿œ¿€¿„¿¿E¿Ö¿ö¿›¿-¿z¿¿¿¿-¿:¿ç¿⁄¿Ê¿Ó¿¿N¿ß¿º¿¿d¿µ¿Ê¿Û¿F¿ì¿ü¿ß¿—¿Î¿#¿Ö¿ö¿Ï¿?¿é¿‡¿*¿7¿ä¿Í¿ˆ¿˛¿ ¿X¿ø¿‘¿ .¿ ã¿ Â¿!<¿!b¿!o¿!¬¿""¿"7¿"ë¿"Ÿ¿"Ê¿"Ú¿"˙¿#¿#¿#<¿#\¿#b¿#s¿#w¿#x¿#π¿#·¿$¿$¿$C¿$S¿$å¿$ƒ¿%¿%1¿%Ç¿%ô¿%¶¿%ª¿&
¿&j¿&©¿&∂¿&¬¿& ¿&›¿&Á¿&¯¿&¸¿&˝¿'W¿'d¿'¶¿'Ë¿'È¿'ı¿(Q¿(Ñ¿(¶¿(’¿)¿)¿)	¿)¿)l¿)•¿*¿*$¿*j¿*p¿*ò¿*©¿*≠¿*Æ¿*∫¿*¸¿+C¿+G¿+H¿+T¿+Ø¿+Ë¿,K¿,`¿,d¿,e¿,∏¿,’¿,€¿-2¿-Ü¿-ò¿-û¿-Æ¿.¿.¿.0¿.d¿.h¿.i¿.á¿.¿¿.ˆ¿.˙¿.˚¿/¿/@¿/y¿/ö¿/›¿0 ¿0¿0)¿0-¿0.¿0:¿0|¿0µ¿0÷¿0ı¿15¿1D¿1L¿1o¿1u¿1¡¿1Î¿1Ô¿1¿1¸¿2B¿2{¿2ú¿2√¿2‚¿3"¿3G¿3O¿3r¿3x¿3¢¿3¶¿3ß¿3≥¿3Û¿4,¿4M¿4l¿4∑¿4‚¿4Í¿5¿5¿5$¿5(¿5)¿55¿5w¿5∞¿5—¿6¿6(¿6.¿62¿63¿6k¿6q¿6«¿7¿7i¿7ñ¿7Â¿8¿80¿8Q¿8±¿8˘¿9¿9¿9¿9R¿9b¿9ó¿9œ¿9Á¿:-¿:P¿:]¿:µ¿: ¿;¿;5¿;Z¿;|¿;ï¿;È¿;ˆ¿<¿<
¿<¿<'¿<8¿<<¿<=¿<Ñ¿<ä¿<ø¿<Í¿=¿=/¿=b¿=â¿=§¿=™¿=¬¿=›¿=„¿>¿>
¿>¿>Z¿>`¿>±¿>ﬂ¿?¿?<¿?Y¿?t¿?ã¿?¶¿?¨¿?æ¿?¬¿?√¿?œ¿@¿@C¿@G¿@H¿@|¿@à¿@Ê¿@Á¿@Û¿AH¿As¿AÖ¿Aò¿A¨¿A≥¿A∑¿A∏¿Aƒ¿B	¿B4¿B|¿B¥¿C¿C¿Ce¿CÏ¿D¿Dd¿Dõ¿D∆¿E¿EG¿EÑ¿E”¿FD¿FW¿F‡¿FÊ¿FÍ¿FÎ¿F˜¿G)¿Gi¿Gç¿Gº¿Gƒ¿GŸ¿G›¿Gﬁ¿H'¿H-¿Hp¿H∫¿H·¿H˝¿I¿I¿Ib¿IÆ¿IÀ¿IÃ¿J¿J'¿J(¿Jv¿Jó¿Jù¿J„¿K*¿Kx¿Kê¿K™¿K‰¿L¿L)¿L/¿LJ¿LÉ¿Lì¿L∂¿LÔ¿M¿MZ¿Mq¿M{¿M¿¿N¿N+¿Nó¿NÔ¿OF¿Oú¿OÒ¿PD¿Ps¿PÄ¿P‡¿PÎ¿Q"¿Q¡¿QÀ¿Q˛¿R+¿Rc¿R¡¿R›¿S3¿Sc¿Sp¿S–¿S‹¿S‰¿S˜¿T¿T¿T ¿T&¿T9¿T\¿T`¿Ta¿TØ¿T¡¿T«¿U¿Ub¿Uú¿U¢¿UÔ¿V?¿Vs¿Vy¿Vó¿Vù¿V≥¿Vπ¿W	¿WV¿Wî¿Wö¿WÈ¿X7¿Xá¿X ¿X–¿Y ¿Yq¿Y¬¿YÈ¿YÔ¿Z¿Z¿Zk¿Zì¿Zô¿ZË¿[¿[$¿[p¿[ü¿[•¿[˛¿\¿\¿\¿\m¿\π¿]¿]K¿]ê¿]ñ¿]·¿^-¿^3¿^}¿^Õ¿_¿_l¿_§¿_—¿_◊¿`!¿`o¿`ï¿`õ¿`·¿a1¿aÄ¿aç¿aì¿a„¿b/¿b{¿b´¿b±¿b ¿b–¿c ¿cX¿c^¿cÆ¿c˝¿dN¿dö¿dﬂ¿dÂ¿e0¿ez¿e∆¿f¿fa¿f±¿f˚¿gB¿gí¿g·¿h-¿h3¿h}¿hÕ¿i¿il¿i∫¿j¿j¿ja¿j•¿jÓ¿k¿k3¿km¿kª¿k…¿kœ¿kﬂ¿l¿lH¿lh¿lê¿l≤¿l√¿lÌ¿l˜¿lˇ¿m¿m¿mU¿m{¿m¢¿m≤¿mÙ¿n"¿n5¿n?¿nI¿na¿nq¿nÉ¿n±¿nÍ¿o.¿oC¿oO¿oU¿oj¿on¿oo¿oò¿oû¿oÂ¿oÎ¿p'¿p4¿pE¿p_¿ps¿pw¿py¿pz¿p¿¿p„¿pÛ¿q¿q/¿qJ¿qP¿qQ¿qh¿qi¿qu¿q√¿r¿r2¿rU¿rû¿r§¿r≈¿r÷¿r⁄¿r‹¿r›¿s)¿s@¿sD¿så¿sê¿sû¿s¢¿sÈ¿t¿tR¿t°¿t∂¿u¿u¿u4¿u8¿uÑ¿u’¿v!¿v\¿v`¿vå¿vê¿v§¿v¯¿w*¿w.¿wl¿wp¿wΩ¿wÕ¿w—¿wﬂ¿w„¿x.¿xt¿x√¿xﬂ¿y¿yL¿yR¿yü¿yÏ¿z	¿z¿z_¿zÆ¿z◊¿z˜¿{¿{b¿{Å¿{Ç¿{¿¿{∆¿|¿|@¿|Ü¿|£¿|¬¿|√¿|ı¿|˚¿}D¿}ã¿}¨¿}≤¿~¿~P¿~ú¿~Ì¿9¿?¿ç¿Œ¿Ä¿Äd¿Ä´¿Ä±¿Ä˛¿ÅA¿ÅG¿ÅW¿Å]¿Å¶¿Åı¿ÇB¿ÇU¿Ç¶¿Çƒ¿É¿É¿ÉQ¿Éj¿Éz¿É·¿ÉÙ¿É˛¿Ñ.¿Ñô¿Ñù¿Ñû¿ÑŒ¿Ñÿ¿Ñ˚¿Ö¿Ök¿Ö√¿Ü¿Ü¿Ü+¿Ü/¿Ü0¿ÜN¿Üf¿Üã¿Üå¿Üò¿ÜÈ¿ÜÍ¿Üˆ¿á;¿áf¿áá¿á–¿á›¿à<¿àB¿àF¿àH¿àI¿àö¿à∞¿à¥¿à¿àÙ¿â¿â¿âO¿âî¿â·¿ä ¿ä!¿är¿ä|¿äÄ¿ä—¿ä’¿ä„¿äÁ¿ã1¿ãv¿ã√¿å¿å¿åf¿åÖ¿åâ¿åŒ¿ç¿ç%¿ç)¿çw¿çƒ¿é¿é]¿é¶¿éÚ¿éˆ¿è¿è¿èR¿èó¿èŸ¿ê3¿ê4¿êf¿êj¿êÆ¿ê≤¿êˆ¿ë+¿ë/¿ë=¿ëA¿ëä¿ë“¿í¿íp¿íq¿í¢¿í¶¿í˜¿ì4¿ì8¿ìa¿ìì¿ì›¿ìˇ¿î ¿î¿î¿î5¿îA¿îq¿îr¿î~¿î≥¿î¥¿î¿¿îÒ¿ï¿ï/¿ïh¿ï{¿ïó¿ïõ¿ïú¿ï≥¿ñ¿ñ;¿ñ?¿ñ@¿ñè¿ñﬂ¿ó¿ó$¿ór¿ó£¿óØ¿ó‹¿óˆ¿ò	¿ò¿ò%¿òF¿ò[¿òg¿ò~¿òê¿ò≤¿ò«¿ò”¿ô¿ô¿ô:¿ô]¿ôw¿ô•¿ô≤¿ô√¿ô¸¿ö¿öS¿ö`¿ök¿öt¿öÑ¿ö“¿õ¿õV¿õ\¿õf¿õó¿õµ¿õŒ¿õÒ¿ú¿ú9¿úF¿úW¿úê¿ú¨¿úÁ¿úÙ¿úˇ¿ù¿ù7¿ù=¿ùA¿ùB¿ùí¿ùﬁ¿ùÚ¿ùˇ¿û¿û¿û¿ûM¿ûg¿û¿ûÖ¿ûâ¿ûä¿ûñ¿û∫¿û◊¿ûÍ¿ü¿ü¿ü¿ü¿üT¿üÜ¿ü–¿†¿†¿†¿†L¿†M¿†Y¿†Ñ¿†°¿†¬¿†‹¿†‡¿†‚¿†„¿°'¿°X¿°¢¿°À¿°Ú¿¢
¿¢¿¢J¿¢Ç¿¢Ó¿£
¿£]¿£§¿£˘¿§¿§¿§¿§-¿§7¿§[¿§v¿§Ç¿§ü¿§Ó¿•=¿•W¿•^¿•z¿•Ω¿•¡¿•¬¿•Œ¿•ı¿•ˆ¿¶<¿¶B¿¶ã¿¶€¿ß¿ß0¿ßQ¿ßR¿ß^¿ßt¿ßå¿ß§¿ß®¿ß©¿ßµ¿ßÃ¿®¿®]¿®m¿®†¿®ÿ¿©'¿©ä¿©ü¿©ˆ¿™A¿™N¿™Z¿™b¿™u¿™¿™è¿™œ¿™‚¿™Ï¿´¿´¿´Y¿´l¿´v¿´è¿´ì¿´î¿´†¿´∫¿´‹¿¨¿¨'¿¨-¿¨I¿¨M¿¨N¿¨Z¿¨Ñ¿¨°¿¨¬¿¨˜¿≠%¿≠Ç¿≠í¿≠≈¿≠˝¿ÆR¿Æº¿Æ—¿Ø.¿Øy¿ØÜ¿Øí¿Øö¿Ø≠¿Ø∑¿Ø—¿Ø’¿Ø÷¿Ø‚¿Øˆ¿∞¿∞"¿∞s¿∞¡¿∞¯¿±X¿±n¿±r¿±s¿±¿±ï¿±≠¿±≈¿±…¿± ¿±÷¿±È¿±˛¿≤¿≤#¿≤f¿≤{¿≤É¿≤π¿≥¿≥'¿≥å¿≥◊¿≥‚¿≥Ï¿≥ˆ¿¥¿¥[¿¥è¿¥¢¿¥¶¿¥ß¿¥≥¿µ¿µ¿µQ¿µî¿µÃ¿∂u¿∂ë¿∂Ú¿∑K¿∑ù¿∑Ú¿∏¿∏ ¿∏5¿∏•¿π¿πq¿π~¿πä¿πí¿π’¿∫¿∫ö¿∫∂¿ª¿ªc¿ª≤¿ªÓ¿ºI¿ºV¿ºk¿º¡¿Ω¿ΩV¿ΩØ¿Ωƒ¿Ω—¿ΩÊ¿æ ¿æ{¿æ ¿ø¿øW¿ød¿øp¿øx¿øã¿øï¿øÓ¿øÚ¿øÛ¿¿A¿¿ë¿¿‡¿¡¿¡¿¡n¿¡ß¿¡˜¿¬(¿¬O¿¬P¿¬\¿¬}¿¬†¿¬√¿¬«¿¬»¿¬‘¿√)¿√T¿√f¿√y¿√ç¿√£¿√™¿√Æ¿√Ø¿√ª¿ƒ ¿ƒ+¿ƒê¿ƒî¿ƒñ¿ƒó¿ƒÿ¿≈¿≈8¿≈b¿≈c¿≈o¿≈¢¿≈£¿≈Ø¿≈÷¿∆¿∆0¿∆M¿∆n¿∆Ü¿∆†¿∆§¿∆•¿∆ﬁ¿∆‰¿«4¿«¿«û¿«´¿«›¿«˚¿«ˇ¿» ¿»L¿»[¿»a¿»®¿»Ô¿»¸¿…3¿…5¿…6¿…|¿…¡¿ ¿ B¿ C¿ í¿ ù¿ £¿ Ï¿À¿À"¿À2¿ÀB¿ÀR¿Àe¿Ào¿Àá¿Àõ¿À°¿Àˆ¿À˙¿À˚¿Ã1¿Ãb¿Ãå¿Ãµ¿Ãƒ¿Ã˘¿Õ¿Õ¿Õ2¿Õ6¿Õ7¿ÕÜ¿ÕÃ¿Õ„¿ÕÈ¿Œ6¿Œá¿Œ≤¿Œ∏¿œ¿œV¿œ¶¿œº¿œ¬¿–¿–]¿–™¿–∞¿–˝¿—L¿—R¿—Ü¿—œ¿—’¿“¿“ ¿“p¿“¿¿”¿”_¿”Ø¿”˚¿‘-¿‘j¿‘ö¿‘‡¿’¿’¿’¿’¿’H¿’}¿’Å¿’É¿’Ñ¿’ ¿’¯¿÷B¿÷t¿÷u¿÷æ¿÷ø¿÷À¿÷È¿◊"¿◊h¿◊»¿ÿ¿ÿ¿ÿ¿ÿ!¿ÿ=¿ÿM¿ÿp¿ÿÉ¿ÿç¿ÿ´¿ÿØ¿ÿ∞¿ÿÓ¿Ÿ¿Ÿ¿ŸR¿Ÿâ¿Ÿ–¿⁄¿⁄¿⁄O¿⁄à¿⁄°¿⁄ß¿⁄¯¿⁄˛¿€¿€¿€]¿€ô¿€„¿€ı¿‹>¿‹ä¿‹⁄¿› ¿›¿›<¿›_¿›c¿›d¿›Æ¿›¥¿›Ù¿ﬁ+¿ﬁx¿ﬁ∆¿ﬁÃ¿ﬂ¿ﬂ[¿ﬂa¿ﬂ≤¿ﬂ∏¿ﬂ»¿ﬂŒ¿‡¿‡S¿‡ü¿‡±¿‡˙¿·K¿·õ¿·¡¿·Œ¿‚	¿‚-¿‚1¿‚2¿‚à¿‚é¿‚◊¿„&¿„?¿„E¿„í¿„€¿„Ó¿„Ù¿‰;¿‰z¿‰Ä¿‰ê¿‰ñ¿‰‚¿‰Ù¿Â>¿Âá¿Â”¿Ê#¿ÊI¿ÊV¿Êï¿Êª¿Êø¿Ê¿¿ÊÙ¿Ê˙¿Á6¿Á<¿Áz¿Á¡¿Á«¿Á◊¿Á›¿Ë&¿Ëb¿ËÆ¿Ë¿¿È
¿ÈZ¿ÈÄ¿Èç¿Èﬁ¿Í¿Í	¿Í
¿ÍT¿Íç¿Íì¿ÍÀ¿Í—¿Î¿Î ¿ÎL¿Îë¿Î±¿Î∑¿Îª¿Îº¿Ï¿Ï<¿ÏB¿Ïç¿Ï‹¿Ì&¿Ì,¿Ì<¿ÌB¿Ìê¿Ì—¿Ì›¿Ó¿ÓO¿Óá¿Óô¿ÓÀ¿Ó˙¿Ô1¿ÔX¿Ôb¿ÔÉ¿Ôè¿Ôª¿ÔÚ¿¿%¿)¿+¿,¿t¿x¿∆¿Ò¿Ò-¿Ò1¿ÒW¿Ò[¿Ò¨¿Ò∞¿Òﬁ¿Ò‚¿Ú(¿Ú,¿Ú}¿Úñ¿Úö¿ÚË¿ÚÙ¿Ú¯¿ÛC¿Û\¿Û`¿Û±¿Ù¿ÙG¿Ùò¿ÙÕ¿Ù—¿ı¿ıj¿ıå¿ıê¿ı±¿ıµ¿ı˙¿ˆD¿ˆã¿ˆ“¿˜¿˜¿˜¿˜D¿˜d¿˜h¿˜¶¿˜–¿˜‡¿¯%¿¯)¿¯=¿¯Å¿¯«¿¯Ë¿˘¿˘¿˘&¿˘*¿˘7¿˘=¿˘E¿˘I¿˘W¿˘[¿˘§¿˘›¿˘·¿˙-¿˙{¿˙¬¿˚¿˚H¿˚L¿˚ü¿˚Ó¿¸9¿¸â¿¸◊¿˝¿˝¿˝]¿˝®¿˝¬¿˝∆¿˝‡¿˝‰¿˛.¿˛{¿˛»¿˛Ê¿˛Í¿ˇ9¿ˇâ¿ˇŸ¿ )¿ l¿ p¿ ¿¿¿]¿Æ¿ˆ¿F¿o¿s¿ø¿¿^¿©¿≠¿Ú¿ˆ¿A¿ë¿≤¿∂¿Ú¿ˆ¿E¿ñ¿‰¿¿X¿®¿Â¿È¿/¿}¿∆¿ ¿¿d¿§¿®¿œ¿”¿	"¿	p¿	ø¿
¿
¿
#¿
>¿
B¿
ç¿
“¿¿g¿¥¿¿¿¿e¿Ø¿‚¿Ê¿4¿Ñ¿”¿¿5¿9¿d¿h¿•¿Ú¿A¿`¿d¿≤¿¿"¿&¿C¿G¿í¿„¿0¿t¿©¿Û¿+¿,¿b¿h¿¨¿∏¿⁄¿¿2¿6¿U¿V¿b¿ï¿ñ¿∑¿√¿Û¿Ù¿)¿*¿f¿á¿ ¿¿h¿û¿Ï¿¿¿S¿n¿x¿ç¿ô¿Ω¿√¿”¿¿2¿:¿M¿W¿Ñ¿à¿â¿Ø¿ﬂ¿¿%¿K¿Q¿a¿ú¿«¿/¿Å¿∞¿¿(¿w¿ƒ¿Ù¿.¿n¿å¿⁄¿˝¿¿Ö¿–¿‡¿ ¿I¿ò¿¥¿¿6¿G¿e¿´¿¸¿-¿<¿S¿û¿Ó¿ =¿ p¿ ¿ ñ¿ ﬁ¿!-¿!r¿!ú¿!´¿!…¿"¿"U¿"d¿"r¿"ú¿"∏¿"Ù¿#¿#%¿#2¿#<¿#D¿#W¿#a¿#e¿#f¿#∞¿#—¿$+¿$^¿$ì¿$ ¿$À¿%¿%3¿%~¿%Ã¿%Ò¿&:¿&u¿&¬¿'¿'X¿'¶¿'ø¿( ¿(H¿(è¿(—¿)¿)@¿)A¿)Ñ¿)ª¿)ı¿*o¿*¨¿*∏¿*œ¿*Â¿+¿+¿+.¿+4¿+D¿+t¿+â¿+ë¿+æ¿+„¿+Û¿,¿,-¿,L¿,U¿,h¿,r¿,Ö¿,â¿,ä¿,ñ¿,«¿,È¿,˘¿-¿-+¿-5¿-Ç¿-Æ¿-æ¿-ﬁ¿-Ò¿-˚¿.¿.2¿.E¿.O¿.l¿.ç¿.ƒ¿.»¿.…¿.’¿/¿/*¿/K¿/[¿/Ç¿/ï¿/ü¿/€¿/ﬂ¿/‡¿0	¿0¿0O¿0b¿0l¿0p¿0q¿0}¿0–¿1¿1¿1¿1/¿1J¿1Z¿1y¿1å¿1ñ¿1·¿1Ò¿2¿2$¿2.¿2e¿2i¿2j¿2v¿2å¿2§¿2∞¿2Œ¿3¿3G¿3N¿3R¿3S¿3_¿3r¿3~¿3¢¿3Ù¿4¿4¿4Y¿4n¿4z¿4ò¿4‚¿5¿5¿5I¿5g¿5Å¿5Ö¿5Ü¿5–¿5Ò¿6¿6¿6U¿6x¿6≤¿6Ú¿79¿7l¿7…¿8¿8"¿80¿8:¿8^¿8Æ¿8˛¿9N¿9ï¿9Ì¿9ı¿:¿:¿:-¿:c¿:i¿:m¿:n¿:z¿:ü¿:¡¿:·¿; ¿;¿;m¿;√¿;«¿;»¿;‘¿<¿<3¿<H¿<è¿<ü¿<—¿=)¿=D¿=\¿=≈¿=“¿=Ó¿>V¿>c¿>x¿>◊¿?(¿?5¿??¿?L¿?T¿?g¿?q¿?√¿@)¿@Å¿@‘¿@⁄¿@ﬁ¿@ﬂ¿@Î¿A	¿A9¿Aä¿Aµ¿Aª¿AÕ¿A—¿A“¿B¿B¿Bj¿B∏¿C¿CX¿Cê¿C•¿C≤¿D¿D	¿DS¿DY¿D£¿D©¿DÙ¿D˙¿EI¿Eò¿EÏ¿F>¿Fê¿F„¿G4¿Gl¿Gy¿GÎ¿GÏ¿H¿H$¿Hr¿Hü¿H¨¿I¿I¿I¿IT¿I¿IÈ¿IÌ¿IÔ¿I¿J@¿JP¿JT¿J¢¿J¬¿Jœ¿JÚ¿K)¿K+¿KÜ¿KØ¿Kæ¿K„¿L¿L ¿LI¿LK¿LL¿L¿LÉ¿L…¿L˝¿M!¿Mm¿Mê¿Mñ¿M«¿MÕ¿N¿NW¿Nß¿NÎ¿O¿O^¿OÖ¿Oô¿Où¿Oû¿O™¿O€¿P¿P'¿PD¿Pf¿Pj¿Pl¿Pm¿Pπ¿Pı¿Q?¿Q¿QÄ¿Qå¿Q∞¿Q√¿Q·¿QÂ¿QÊ¿QÚ¿R5¿RH¿RL¿RM¿RY¿RÆ¿R¡¿R≈¿R∆¿R“¿S¿S(¿S,¿S-¿S9¿Sk¿Sñ¿Sö¿Sú¿Sù¿S¿SÙ¿T¿T¿TY¿T™¿TË¿U+¿Uu¿U√¿Uƒ¿U◊¿Uÿ¿U‰¿V¿V-¿VE¿VK¿VO¿VP¿V\¿VÄ¿Vù¿V∞¿VŒ¿V“¿V”¿Vﬂ¿W¿W2¿Wã¿Wè¿Wê¿Wú¿W’¿WÚ¿X¿Xl¿Xp¿Xq¿X}¿X¿¿YA¿Y[¿Yè¿YØ¿Yﬁ¿Y‚¿Y„¿YÔ¿ZD¿ZW¿Z[¿Z\¿Zh¿Z´¿[,¿[F¿[o¿[é¿[Ω¿[¡¿[√¿[ƒ¿\¿\¿\`¿\≤¿]¿]C¿]G¿]U¿]Y¿]•¿]Ã¿^¿^G¿^â¿^”¿_¿_f¿_g¿_s¿_Ÿ¿`L¿`P¿`Q¿`Ö¿`ã¿`ÿ¿`Ó¿`˚¿a¿a}¿a~¿aû¿aÓ¿b¿bP¿bQ¿b]¿bÆ¿c+¿c_¿c†¿cœ¿c”¿c‘¿c‡¿dQ¿dŒ¿d¯¿e:¿ei¿em¿en¿ez¿eΩ¿f:¿fd¿fÑ¿f≥¿f∑¿f∏¿fƒ¿fÛ¿g ¿gQ¿gi¿gq¿gw¿g{¿g|¿gà¿g¨¿g”¿h¿h'¿hE¿hI¿hJ¿hä¿hö¿h≈¿hÁ¿i¿iG¿i¡¿i⁄¿j1¿jo¿jÄ¿jÎ¿k*¿k:¿kG¿kR¿kZ¿km¿kw¿kà¿kå¿kç¿kô¿k÷¿l¿lX¿lm¿lq¿lr¿l~¿lØ¿l—¿m?¿mΩ¿mŸ¿n¿nç¿n´¿nÀ¿n—¿nÎ¿nÔ¿n¿n¸¿o4¿oQ¿oø¿o‡¿p<¿pµ¿p’¿pŸ¿p€¿p‹¿q"¿q&¿qr¿qø¿q˛¿rG¿rÖ¿r§¿rÁ¿s1¿sX¿sY¿se¿sv¿s£¿s∏¿sˆ¿s˙¿s˚¿t¿t¿t6¿tH¿tL¿tM¿tY¿t~¿tù¿t€¿tﬂ¿t‡¿u¿u1¿uD¿uJ¿uÄ¿u§¿uø¿u◊¿vR¿v_¿v{¿v„¿v¿w¿we¿w¡¿x ¿x¿x"¿x}¿x⁄¿y$¿y1¿y<¿yE¿yK¿y\¿y`¿yb¿yc¿y≤¿y∂¿z¿z¿z/¿zl¿zä¿zã¿z¥¿zÕ¿zŒ¿z⁄¿{¿{¿{¿{<¿{W¿{k¿{Ç¿{∞¿{µ¿{¿|
¿|¿|<¿|R¿|Ç¿|á¿|¨¿|æ¿|¿¿|¡¿|ı¿}¿}¿}g¿}≠¿}¸¿~C¿~\¿~`¿~n¿~r¿~¡¿¿¿F¿ë¿æ¿ø¿Ä¿Ä&¿Ä7¿Ä8¿Äq¿ÄÑ¿ÄÖ¿Äë¿Ä¥¿Ä‡¿ÄÙ¿Ä˙¿Å¿Å:¿Å[¿Å_¿Å`¿Ål¿Åù¿Åü¿Å†¿ÅÂ¿Ç
¿Ç/¿Ç^¿Ç_¿Çê¿Çë¿Çù¿Ç◊¿ÇŸ¿Ç⁄¿Ç˝¿É¿É¿É!¿ÉZ¿É\    /
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycle_flutterWidgetsLibraryStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementRootElementMixinLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementRenderTreeRootElementDebugCreator_reportExceptionIndexedSlot_NullElement_NullWidget )∞