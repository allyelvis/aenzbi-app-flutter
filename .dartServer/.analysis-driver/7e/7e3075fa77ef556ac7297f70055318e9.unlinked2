ÄÃ_startstart_extentextent==hashCodetoStringlerpborderAnimationbordergapAnimationgaptextDirection	fillColorhoverColorTweenhoverAnimationblendedColorpaintshouldRepaint
hoverColor
isHoveringcreateState_kHoverDuration_controller_hoverColorController_borderAnimation_border_hoverAnimation_hoverColorTween	initStatedisposedidUpdateWidgetbuildchild	animation
translateX	textAlign
helperTexthelperStylehelperMaxLineserror	errorText
errorStyleerrorMaxLinesempty_helper_error	_hasError_handleChange_buildHelper_buildErrorneverautoalways_xcenter
_stringifyiconinputlabelhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounter	containercontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgressfloatingLabelAlignment	borderGapalignLabelWithHintisDensevisualDensityboxToBaselineinputBaselineoutlineBaselinesubtextBaselinecontainerHeightsubtextHeight
subtextGapchildren
decoration_decoration_textDirectiontextBaseline_textBaseline_defaultTextAlignVerticaltextAlignVertical_textAlignVertical	isFocused
_isFocusedexpands_expands	material3
_material3_isOutlineAlignedvisitChildrenForSemanticssizedByParent	_minWidth	_maxWidth
_minHeight_boxSize_boxParentData_layoutLineBox_layout_interpolateThreecomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_lineHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline_labelTransformcomputeDryLayout$_childSemanticsConfigurationDelegatedescribeSemanticsConfigurationperformLayout_paintLabelhitTestSelfhitTestChildrenapplyPaintTransformslotschildForSlotcreateRenderObjectupdateRenderObjectlabelIsFloatingtextstylesemanticsSortKeysemanticsTag	baseStyleisEmpty_labelShouldWithdrawcontainerOfdebugFillProperties_floatingLabelController_floatingLabelAnimation_shakingLabelController
_borderGap_kPrefixSemanticsSortOrder_kInputSemanticsSortOrder_kSuffixSemanticsSortOrder_kPrefixSemanticsTag_kSuffixSemanticsTagdidChangeDependencies_effectiveDecoration_floatingLabelEnabled_getDefaultM2BorderColor_getFillColor_getHoverColor_getIconColor_getPrefixIconColor_getSuffixIconColor_hasInlineLabel_shouldShowLabel_getInlineLabelStyle_getInlineHintStyle_getFloatingLabelStyle_getHelperStyle_getErrorStylematerialState_getDefaultBorder	iconColor	labelText
labelStylefloatingLabelStylehintText	hintStylehintTextDirectionhintMaxLineshintFadeDurationfloatingLabelBehaviorprefixIconConstraints
prefixTextprefixStyleprefixIconColor
suffixTextsuffixStylesuffixIconColorsuffixIconConstraintscounterTextcounterStylefilled
focusColorerrorBorderfocusedBorderfocusedErrorBorderdisabledBorderenabledBorderenabledsemanticCounterTextconstraintscopyWithapplyDefaultsoutlineBorderactiveIndicatorBordermergecontext_colors
_textTheme_kTransitionDuration_kTransitionCurve_kFinalLabelScale_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3Å•
lerpDoubleDurationmillisecondsCurveCurvesfastOutSlowIndoubleChangeNotifiernotifyListenersoverrideboolObject	identicalruntimeTypestartextentinthashStringdescribeIdentityTweenInputBorderShapeBorderlerpbeginendCustomPainter
Listenablerepaint	AnimationTextDirectionColor
ColorTween
alphaBlendevaluatevoidCanvasSizeRectOffsetzeroalphadrawPathgetOuterPathtextDirectionPaintcolorstylePaintingStylefillpaintgapStart	gapExtentgapPercentagevalueborderAnimationhoverAnimationgapAnimationbordergapStatefulWidgetStateTickerProviderStateMixinAnimationController	initStatedurationwidget
isHoveringvsyncCurvedAnimationparentcurvereverseCurveflippedlinearColorstransparent
hoverColordisposedidUpdateWidgetforwardreverseWidgetBuildContextCustomPaintforegroundPaintermergeDirectionalityof	fillColorhoverColorTweenAnimatedWidget
listenable	Transform	transformMatrix4translationValueschild	TextAlign	TextStyleSingleTickerProviderStateMixinSizedBoxshrink	errorTexterror
helperTextaddListenersetState	Semantics	containerFadeTransitionopacityanimateTexthelperStyle	textAlignoverflowTextOverflowellipsismaxLineshelperMaxLinesFractionalTranslationtranslationview
errorStyleerrorMaxLinesisDismissedisCompletedStackchildrenfloatingLabelBehaviorlabel	labelTextfloatingLabelAlignment	immutableltrrtl_hashCode_xtoStringAsFixedEdgeInsetsGeometryVisualDensitycontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgress	borderGapalignLabelWithHintisDensevisualDensityiconinputhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounterMap	RenderBox!SlottedContainerRenderObjectMixinTextBaselineTextAlignVerticalchildForSlotIterablemarkNeedsLayoutcentertopymarkNeedsSemanticsUpdate	isOutlineRenderObjectVisitorgetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightsizeBoxParentData
parentData
EdgeInsetsBoxConstraintslayoutparentUsesSizegetDistanceToBaseline
alphabeticFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionmaxWidthinfinityloosencopyWithwidthmax
horizontalconstraintsleftrightminWidthheightbaseSizeAdjustmentdeflateonlydybottomkMinInteractiveDimension	maxHeightminverticalboxToBaselinecontainerHeightinputBaselineoutlineBaselinesubtextBaselinesubtextHeightListboxreduceoffsetcomputeDistanceToActualBaselinedebugCannotComputeDryLayoutreason"ChildSemanticsConfigurationsResultSemanticsConfiguration)ChildSemanticsConfigurationsResultBuilderchildConfigtagsChildrenWith_kPrefixSemanticsTagadd_kSuffixSemanticsTagmarkAsMergeUpmarkAsSiblingMergeGroupbuildchildConfigurationsDelegatetightFordxoffsetToPrefixIcon	constrainconstrainWidthconstrainHeightPaintingContext
paintChild
borderSideidentity	translatescalelayerpushTransformneedsCompositingoldLayerTransformLayerBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformedRenderObjectmultiplyapplyPaintTransform#SlottedMultiChildRenderObjectWidgetvalues
decorationtextBaselinetextAlignVertical	isFocusedexpands	material3ThemeuseMaterial3StatelessWidgetSemanticsSortKeySemanticsTagDefaultTextStyleAnimatedOpacitysortKeytagForChildren	TextFieldEditableTextMaterial
DecorationDecoratedBox	ThemeDatainputDecorationTheme	textThememinLinesDropdownButtonInkWellenabledfilledcounterTextfindAncestorRenderObjectOfTypeDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueOrdinalSortKeyalwaysnever_labelShouldWithdrawdidChangeDependenciesapplyDefaultscontextisEmptydisabledColorcolorSchemeprimary	hintColor	onSurfacewithOpacityMaterialStateProperty	resolveAs	iconColorprefixIconColorsuffixIconColor
labelStyletitleMedium	baseStyle	hintStylefloatingLabelStyleSetMaterialStatedisabledfocusedhoveredUnderlineInputBorder
BorderSidenoneactiveIndicatorBorderoutlineBorderhintTexthintFadeDurationhintTextDirectionhintMaxLineserrorBorderdisabledBorderfocusedErrorBorderfocusedBorderenabledBorder	animationAnimatedDefaultTextStyle
prefixText
suffixTextlabelIsFloatingtextprefixStylesemanticsSortKeysemanticsTagsuffixStyleMouseRegioncursorSystemMouseCursorsbasicPaddingpadding	IconThemedataIconThemeDataCenterwidthFactorheightFactorConstrainedBoxprefixIconConstraintseffectiveConstraints	minHeightIconButtonThemeIconButtonThemeData
IconButton	styleFromforegroundColoriconSizesuffixIconConstraints
liveRegioncounterStylesemanticsLabelsemanticCounterTextresolvefontSize
MediaQuerytextScalerOftextScaleFactorfromLTRBIcon	ImageIconMaterialStateColorrichMaterialStateTextStyleColorSchemeTextFormField	validatorauto	collapsedAlign
focusColorOutlineInputBorder!MaterialStateUnderlineInputBorderMaterialStateOutlineInputBorderhashAlljoinDiagnosticableIntPropertyColorPropertyresolveWithstatescontains	bodySmall
brightness
Brightnessdarklightwhite70black45	TextThemesurfaceVariantMaterialStateBorderSideonErrorContaineronSurfaceVariantoutline	bodyLargeChangeNotifierTweenCustomPainterStatefulWidgetStateTickerProviderStateMixinAnimatedWidgetSingleTickerProviderStateMixin	RenderBox!SlottedContainerRenderObjectMixin#SlottedMultiChildRenderObjectWidgetStatelessWidgetDiagnosticableInputDecorationThemeÎ˙@≈q¬·¯ÿ¶ˇ€Jmù/    Ä¶  Ä∏mathÄª	dart:mathÄ“Ä·
lerpDouble Ä¬  dart:ui  ÄÂ  package:flutter/foundation.dart  Å  package:flutter/rendering.dart  Å8  package:flutter/widgets.dart  Å`  color_scheme.dart  Å|  colors.dart  Åí  constants.dart  Å´  icon_button.dart  Å∆  icon_button_theme.dart  ÅÁ  input_border.dart  Ç  material.dart  Ç  material_state.dart  Ç9  text_theme.dart  ÇS  
theme.dart  Çh  theme_data.dart    	dart:core¿TU ¿…Èí∂ <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑJÑMÑèÑ◊Ñ˝ÖGÖHÖåÖ´Ö⁄ÖÏÜÜ(ÜCÜYÜrÜxÜ|Ü}ÜïÜµÜ“ÜÓááá$á(á)á5áñáπá€áÓáÙà à4à:à^à~à°à•à¶à≤ââEâFâRâÅâÉâÑâµâÍäää&äwäyäzäÀä˝ãã6ãYãsãìã™ãÀãËå
å-åMåNåyåõå√å‡çççBçlçmç—ç“çﬁééMé}éÆé‘éÎè7èGèlèîèùè£è§èªè…è€èˆêê<ê`êgêkêlêxêØêËëëRëyëöë–ë‘ë’ë·íííí_í™íÛììCì^ìxìèìØìÃìÍîîîî+îHîpîâî£îºîΩî…ïïïïjï∞ï±ïŸññ6ñXñÇñ¶ñßñ≥ñ»ñﬂóó1ó]ópówóûóƒó◊óﬁòò!òAòpòwòòò¥òŒò’ò¸ô!ô=ôDôöôûôüô´ôæôŸô˛öööö$öYöö¨öœöõõõ'õ=õRõXõçõÂõÎú ú?úhúwú†ú®úÆú≤ú≥úøúÊú˛ù,ù\ùxùéùØùªùÊùˇû*ûCûvûõû∆ûÔû¯ûˇüüüüBügüéü†ü ü⁄üˇ† †††^†_†y†ú†¬†◊†ı°°5°B°m°s°w°x°Ñ°´°¡¢¢¢¢"¢$¢%¢g¢¶¢ÿ£££/£D£Z£s£É£ó£¨£ƒ£ £À£È§§%§B§Y§t§ì§Ø§∞§º§ˆ§¯§˘•S•õ•‘¶¶¶.¶A¶S¶T¶û¶ü¶´¶¿¶◊¶˛ß$ß7ß>ßSßqßêßºß‹ß‚®®®®®2®M®b®f®g®Ä®í®¿®»®Ã®Õ®Ÿ©©$©%©P©É©∏©‡™™B™C™ê™È´]´^´Æ´‰¨¨#¨M¨o¨é¨ù¨º¨ƒ¨ ¨Œ¨œ¨È≠≠&≠=≠Z≠•≠∫≠ÿ≠˝Æ$ÆOÆzÆÖÆéÆïÆôÆöÆ≥ÆÒØØØ;ØYØØ•Ø“Ø∞∞?∞^∞Ñ∞≠∞⁄±±±±'±.±2±3±?±f±â±û±≈±Ó±˝≤≤+≤3≤9≤:≤]≤s≤ä≤±≤¿≤◊≤Ì≤ı≤˚≤¸≥$≥@≥F≥G≥~≥õ≥°≥¢≥∑≥À≥Á¥¥P¥l¥y¥í¥ù¥¶¥¨¥≠¥“¥Êµµµ6µXµsµÄµãµîµöµõµ≠µ±µ≥µ¥µÍµÓµ¸∂ ∂N∂ç∂ÿ∂Ò∑∑W∑`∑¶∑Æ∑„∑Ì∑Ô∑∏7∏M∏Q∏_∏c∏≥∏ÚπAπPπ[πzπ«π»∫∫∫∫d∫j∫µ∫ªªªUªõªÈªÍªˆººº&ºIºkº~ºÑº∞ºƒº ºıΩΩΩΩ@ΩUΩÇΩàΩúΩ Ω–ææææ"æIæKæLæÜæùæ•æÆæ∑æøæ…æ”æ·æÔæ˛ø	øøøøTø_øsøâø´ø øÒ¿ @¿ @D¿ @^¿ @{¿ @°¿ @º¿ @›¿ @Ï¿ @¸¿ A¿ A¿ A,¿ A=¿ AR¿ Ag¿ A}¿ Aè¿ A£¿ A©¿ A™¿ A’¿ AÔ¿ B¿ B9¿ Bp¿ Bå¿ BØ¿ B–¿ BÁ¿ C¿ C"¿ C9¿ CP¿ Cf¿ C~¿ Cñ¿ C≤¿ CŒ¿ CÎ¿ D¿ D¿ D ¿ D,¿ DO¿ Dq¿ DÑ¿ Dä¿ D∂¿ D ¿ D–¿ D¿ E"¿ EN¿ Eä¿ E ¿ F¿ F.¿ FV¿ Fê¿ F¥¿ F‰¿ G¿ G"¿ GB¿ G`¿ GÇ¿ G§¿ GŒ¿ G¯¿ H$¿ HH¿ Hq¿ Hu¿ Hv¿ HÇ¿ H•¿ Hπ¿ H“¿ HÌ¿ I	¿ I¿ I$¿ I<¿ II¿ I\¿ If¿ Iq¿ I|¿ IÜ¿ Ií¿ Iû¿ IÆ¿ Iæ¿ Iœ¿ I‹¿ IÎ¿ I¿ IÚ¿ IÛ¿ J?¿ Já¿ Jø¿ Jﬂ¿ K¿ K"¿ Kd¿ K¶¿ K…¿ KÏ¿ L¿ L¿ L¿ LC¿ La¿ LÅ¿ Lπ¿ LŸ¿ L˜¿ L˘¿ L˙¿ M@¿ MØ¿ M≈¿ MÍ¿ N¿ N<¿ NY¿ Nt¿ Në¿ Nª¿ N‹¿ O¿ O(¿ OW¿ Ov¿ Oë¿ O∞¿ O±¿ OŸ¿ O⁄¿ P¿ PV¿ Pï¿ P“¿ Q¿ QT¿ Qù¿ QÊ¿ R1¿ Rt¿ Rª¿ Rº¿ RÔ¿ R˚¿ S ¿ S8¿ SP¿ S_¿ Sx¿ Sà¿ S¶¿ Sª¿ SŸ¿ SÓ¿ T¿ T¿ T3¿ TD¿ T]¿ Tm¿ TÖ¿ Tî¿ T≥¿ T…¿ T‰¿ Tˆ¿ U¿ U'¿ U.¿ U2¿ U3¿ U`¿ U{¿ U°¿ U¡¿ Uœ¿ U’¿ UÓ¿ V¿ V	¿ V
¿ V?¿ V_¿ Vä¿ V≠¿ Vª¿ V¡¿ V›¿ VÙ¿ V¯¿ V˘¿ W+¿ WI¿ Wr¿ Wî¿ W¢¿ W®¿ W√¿ W⁄¿ Wﬁ¿ Wﬂ¿ X&¿ XG¿ Xf¿ Xƒ¿ XÌ¿ Y!¿ YH¿ YV¿ Y\¿ Y°¿ YÌ¿ Z¿ Z¿ Z#¿ ZC¿ ZZ¿ Z^¿ Z_¿ ZÉ¿ Zñ¿ Z¥¿ Z”¿ Z·¿ ZÁ¿ Zˇ¿ [¿ [#¿ [$¿ [D¿ []¿ [y¿ [ñ¿ [§¿ [™¿ [¿¿ [◊¿ [€¿ [‹¿ \ ¿ \¿ \9¿ \X¿ \f¿ \l¿ \Ñ¿ \õ¿ \ü¿ \†¿ \Ô¿ \¸¿ ]¿ ]^¿ ]b¿ ]c¿ ]o¿ ]Ø¿ ]«¿ ]›¿ ]„¿ ]˝¿ ^¿ ^¿ ^9¿ ^U¿ ^[¿ ^\¿ ^u¿ ^å¿ ^í¿ ^™¿ ^¡¿ ^Ÿ¿ ^˚¿ _¿ _¿ _!¿ _"¿ _;¿ _R¿ _X¿ _v¿ _í¿ _ò¿ _≤¿ _ ¿ _–¿ _Ì¿ `¿ `¿ `-¿ `J¿ `P¿ `k¿ `Ñ¿ `ä¿ `é¿ `è¿ `õ¿ `æ¿ `ø¿ `˙¿ a;¿ a?¿ a@¿ a{¿ aº¿ a¿¿ a¡¿ a¸¿ b=¿ bA¿ bB¿ bê¿ bë¿ bÎ¿ bÏ¿ c8¿ c9¿ cx¿ cæ¿ c’¿ cÁ¿ cÌ¿ d ¿ dr¿ d√¿ e¿ e_¿ e∞¿ e…¿ f¿ f¿ f+¿ fF¿ f[¿ fc¿ fô¿ f¯¿ g¿ g\¿ gã¿ gñ¿ g†¿ g™¿ gø¿ g√¿ gƒ¿ h¿ h_¿ h£¿ hÈ¿ hı¿ i)¿ iw¿ iö¿ iÁ¿ j6¿ jÑ¿ jÕ¿ jÚ¿ j˘¿ j˙¿ k:¿ kÑ¿ k ¿ kÀ¿ l ¿ l@¿ lâ¿ l…¿ l–¿ m"¿ mt¿ m¡¿ n¿ n"¿ nj¿ n≤¿ n≥¿ n€¿ nÊ¿ o¿ o"¿ oô¿ oæ¿ oﬂ¿ p ¿ p%¿ pû¿ p•¿ pÔ¿ qa¿ qö¿ q¡¿ r¿ r$¿ rL¿ rW¿ rv¿ rì¿ r±¿ r÷¿ r¿ s¿ s¿ sC¿ sP¿ sö¿ s°¿ sÀ¿ s◊¿ t"¿ t)¿ ts¿ tt¿ tΩ¿ tÊ¿ u¿ u*¿ uM¿ u•¿ uÆ¿ uµ¿ u∂¿ v¿ v1¿ v^¿ vh¿ vê¿ v…¿ w¿ w¿ wH¿ wR¿ wÄ¿ wΩ¿ wÊ¿ x¿ x(¿ xW¿ xÅ¿ xñ¿ xØ¿ x∂¿ y¿ y/¿ y<¿ yj¿ yÆ¿ y˚¿ z¿ z,¿ zJ¿ zS¿ zZ¿ z[¿ zù¿ z”¿ {¿ {Y¿ {å¿ {©¿ {≈¿ {Ã¿ {Õ¿ |¿ |-¿ |g¿ |°¿ |»¿ |Ê¿ }¿ }¿ }\¿ }ä¿ }∑¿ }‰¿ }Î¿ ~7¿ ~]¿ ~î¿ ~ø¿ ~»¿ ¿ ¿ ¿ I¿ ã¿ Õ¿ Ä¿ ÄG¿ Ä\¿ Äl¿ Äá¿ Äù¿ Ä±¿ Ä«¿ ÄÂ¿ Äˇ¿ Å¿ Åe¿ Åq¿ Åì¿ ÅÒ¿ Ç¿ Ç7¿ Çä¿ Çã¿ Ç◊¿ É¿ ÉQ¿ ÉÑ¿ Éë¿ Éí¿ É·¿ Ñ2¿ Ñ{¿ Ñ»¿ Ö¿ ÖN¿ Öú¿ ÖÌ¿ Ü<¿ Üg¿ Ü«¿ Ü»¿ á¿ áM¿ á_¿ á}¿ áò¿ á∂¿ á÷¿ àD¿ àî¿ à›¿ â5¿ âÇ¿ âÉ¿ â‘¿ â€¿ ä¿ äb¿ äõ¿ äŸ¿ ä‡¿ ã)¿ ãv¿ ãµ¿ ãÙ¿ å¿ åL¿ åÑ¿ å”¿ ç	¿ ç#¿ ç@¿ ç]¿ çv¿ ç}¿ ç~¿ çƒ¿ çÎ¿ é¿ é6¿ éZ¿ éu¿ éî¿ é‘¿ è¿ è¿ è7¿ èU¿ èô¿ è»¿ èŒ¿ è˚¿ ê¿ ê6¿ ê=¿ êh¿ êÑ¿ êü¿ ê¶¿ êß¿ êÀ¿ êÔ¿ ë¿ ë;¿ ëc¿ ëã¿ ëØ¿ ë∂¿ ë∫¿ ëª¿ í	¿ íZ¿ í©¿ íÛ¿ ìC¿ ìî¿ ì¢¿ î¿ î1¿ îÅ¿ î∆¿ î„¿ î˙¿ ï¿ ïS¿ ïd¿ ïî¿ ïø¿ ï≈¿ ï∆¿ ïﬂ¿ ïÙ¿ ï˙¿ ñK¿ ñW¿ ñÅ¿ ñ©¿ ñ≠¿ ñÆ¿ ñ∫¿ ñÌ¿ ó¿ ó,¿ óR¿ ót¿ ó∏¿ ó⁄¿ ò ¿ ò¿ ò"¿ ò#¿ ò/¿ òb¿ òÖ¿ ò°¿ ò«¿ òÈ¿ ô-¿ ôO¿ ôu¿ ôì¿ ôó¿ ôò¿ ô’¿ ôÓ¿ ö¿ ö1¿ öC¿ öK¿ öÑ¿ öä¿ öù¿ öÍ¿ õ¿ õV¿ õZ¿ õ[¿ õg¿ õö¿ õ—¿ ú¿ ú¿ ú:¿ ú;¿ ú~¿ ú ¿ úÀ¿ ù¿ ùZ¿ ù[¿ ùô¿ ùö¿ ù◊¿ û¿ û¿ ûm¿ û∆¿ ü¿ ü,¿ üO¿ üU¿ üV¿ üë¿ ü—¿ ü“¿ †¿ †M¿ †N¿ †À¿ °'¿ °ç¿ °é¿ °‹¿ ¢¿ ¢O¿ ¢f¿ ¢Ñ¿ ¢û¿ £¿ £`¿ £l¿ £é¿ £ÿ¿ £‹¿ £›¿ £È¿ §¿ §I¿ §M¿ §N¿ §Z¿ §ú¿ •¿ •	¿ •
¿ •4¿ •P¿ •Q¿ •]¿ •ì¿ •ª¿ ¶¿ ¶$¿ ¶:¿ ¶>¿ ¶?¿ ¶∂¿ ß!¿ ßU¿ ßâ¿ ßŒ¿ ®#¿ ®\¿ ®á¿ ®„¿ ©¿ ©G¿ ©V¿ ©Ç¿ ©ä¿ ©ê¿ ©¥¿ ©Ì¿ ©Û¿ ™¿ ™P¿ ™V¿ ™r¿ ™v¿ ™w¿ ™É¿ ™ ¿ ´¿ ´¿ ´¿ ´*¿ ´C¿ ´|¿ ´ò¿ ´Ÿ¿ ´⁄¿ ¨¿ ¨`¿ ¨a¿ ¨í¿ ¨Ø¿ ¨˙¿ ≠"¿ ≠V¿ ≠_¿ ≠£¿ ≠π¿ ≠ÿ¿ ≠¯¿ Æ¿ Æ+¿ ÆO¿ ÆX¿ Æë¿ Æó¿ Æò¿ Æ∞¿ Æ„¿ Ø3¿ ØP¿ ØV¿ ØW¿ Øq¿ Ø¶¿ Ø˚¿ ∞¿ ∞¿ ∞¿ ∞L¿ ∞ä¿ ∞ã¿ ∞∞¿ ±¿ ±¿ ±¿ ±1¿ ±P¿ ±p¿ ±ü¿ ±ø¿ ±“¿ ±€¿ ±˘¿ ±ˇ¿ ≤ ¿ ≤¿ ≤=¿ ≤r¿ ≤ç¿ ≤Ø¿ ≤ÿ¿ ≥&¿ ≥0¿ ≥M¿ ≥|¿ ≥ª¿ ≥Œ¿ ¥¿ ¥¿ ¥!¿ ¥?¿ ¥á¿ ¥ë¿ ¥Æ¿ ¥Î¿ ¥ı¿ µ¿ µL¿ µV¿ µx¿ µû¿ µœ¿ µŸ¿ µ˜¿ ∂&¿ ∂0¿ ∂?¿ ∂G¿ ∂g¿ ∂õ¿ ∂∑¿ ∂Ÿ¿ ∑¿ ∑6¿ ∑@¿ ∑]¿ ∑å¿ ∑∑¿ ∑ ¿ ∑Û¿ ∑ˇ¿ ∏	¿ ∏'¿ ∏Z¿ ∏d¿ ∏Å¿ ∏™¿ ∏¥¿ ∏–¿ ∏¯¿ π¿ π$¿ πK¿ πï¿ πü¿ πΩ¿ ∫¿ ∫¿ ∫¿ ∫"¿ ∫(¿ ∫)¿ ∫[¿ ∫Ä¿ ∫©¿ ∫™¿ ∫…¿ ∫È¿ ª¿ ªp¿ ª|¿ ªù¿ ª…¿ ª’¿ ªı¿ º¿ ºa¿ ºm¿ ºé¿ º—¿ º›¿ ºÂ¿ ºÎ¿ ºÏ¿ Ω¿ ΩC¿ ΩÖ¿ Ωœ¿ æ¿ æY¿ æò¿ æ∑¿ æ◊¿ ø¿ øH¿ øú¿ ø®¿ ¿¿ ¿O¿ ¿h¿ ¿i¿ ¿â¿ ¿⁄¿ ¡+¿ ¡¿ ¡™¿ ¡¿ ¬G¿ ¬S¿ ¬π¿ ¬˘¿ √¿ √¿ √e¿ √r¿ √õ¿ √ƒ¿ √ ¿ √À¿ ƒ¿ ƒT¿ ƒõ¿ ƒü¿ ƒ†¿ ƒ›¿ ≈¿ ≈	¿ ≈
¿ ≈¿ ≈M¿ ≈r¿ ≈ç¿ ≈◊¿ ≈ﬂ¿ ≈Â¿ ≈˝¿ ≈˛¿ ∆¿ ∆W¿ ∆ê¿ ∆«¿ «	¿ «S¿ «ì¿ «Ÿ¿ »¿ »]¿ »Ö¿ »≈¿ …¿ …P¿ …’¿  ¿  c¿  °¿  º¿  ÷¿  ı¿ À/¿ Ào¿ Àè¿ ÀË¿ ÃG¿ ÃS¿ Ãâ¿ Ã¨¿ ÃÃ¿ Õ%¿ ÕÖ¿ Õë¿ Õô¿ ÕÓ¿ Œ)¿ Œr¿ Œù¿ Œ ¿ Œ‚¿ œ¿ œ!¿ œ1¿ œK¿ œ`¿ œå¿ œï¿ œ¢¿ œ∂¿ œº¿ œΩ¿ œ–¿ œÂ¿ œ˙¿ –¿ –,¿ –?¿ –S¿ –m¿ –É¿ –á¿ –à¿ –î¿ –¡¿ –¬¿ –Œ¿ —¿ —L¿ —ï¿ —œ¿ “¿ “¿ “7¿ “x¿ “¨¿ “Î¿ “ˆ¿ “ˇ¿ ”¿ ”'¿ ”/¿ ”5¿ ”G¿ ”K¿ ”L¿ ”X¿ ”ú¿ ”—¿ ‘¿ ‘!¿ ‘F¿ ‘}¿ ‘É¿ ‘¥¿ ‘∏¿ ‘∫¿ ‘ª¿ ’¿ ’+¿ ’P¿ ’n¿ ’è¿ ’Ø¿ ’Ã¿ ’Á¿ ’Ì¿ ’Ó¿ ÷¿ ÷3¿ ÷V¿ ÷Ñ¿ ÷ú¿ ÷≤¿ ÷≥¿ ÷ø¿ ◊ ¿ ◊¿ ◊¿ ◊<¿ ◊P¿ ◊q¿ ◊ë¿ ◊≥¿ ◊‘¿ ◊ˆ¿ ÿ¿ ÿ8¿ ÿX¿ ÿ{¿ ÿù¿ ÿ¿¿ ÿ‚¿ Ÿ	¿ Ÿ/¿ ŸV¿ Ÿ|¿ Ÿ§¿ ŸÀ¿ ŸÔ¿ ⁄¿ ⁄8¿ ⁄]¿ ⁄c¿ ⁄g¿ ⁄h¿ ⁄t¿ ⁄≥¿ ⁄—¿ ⁄Ô¿ €¿ €5¿ €a¿ €}¿ €ï¿ €∆¿ €Õ¿ €—¿ €“¿ €ﬁ¿ ‹0¿ ‹A¿ ‹`¿ ‹y¿ ‹ñ¿ ‹√¿ ‹Ê¿ ›¿ ›¿ ›¿ ›¿ ›>¿ ›S¿ ›v¿ ›Ö¿ ›ï¿ ›•¿ ›¿¿ ›‡¿ ›Ê¿ ›Á¿ ﬁ¿ ﬁ¿ ﬁ5¿ ﬁL¿ ﬁx¿ ﬁõ¿ ﬁú¿ ﬁ®¿ ﬁœ¿ ﬁÚ¿ ﬂ¿ ﬂ$¿ ﬂL¿ ﬂn¿ ﬂú¿ ﬂ∂¿ ﬂ€¿ ‡¿ ‡P¿ ‡[¿ ‡d¿ ‡k¿ ‡o¿ ‡q¿ ‡r¿ ‡Æ¿ ‡≤¿ ‡˛¿ ·M¿ ·ó¿ ·„¿ ·Á¿ ‚.¿ ‚2¿ ‚Å¿ ‚≥¿ ‚∑¿ „¿ „S¿ „o¿ „s¿ „Å¿ „Ö¿ „Õ¿ ‰¿ ‰R¿ ‰o¿ ‰ù¿ ‰ﬂ¿ ‰¯¿ ‰˛¿ ÂO¿ Â^¿ Âw¿ ÂÜ¿ Â§¿ Â∏¿ ÂÃ¿ ÂË¿ Ê¿ Ê!¿ Ê;¿ ÊU¿ Êe¿ Êk¿ Êl¿ Ê®¿ ÊÆ¿ Ê˝¿ Á1¿ ÁU¿ ÁV¿ Á¢¿ Áﬁ¿ Á‰¿ Ë,¿ Ë^¿ Ëd¿ ËØ¿ Ë€¿ Ë˘¿ Ë˙¿ È?¿ È]¿ È^¿ È¢¿ È”¿ ÈŸ¿ Í&¿ Íw¿ Í≈¿ Î¿ Îe¿ Î∞¿ Î˛¿ Ï¿ Ï2¿ Ï`¿ Ïa¿ Ïä¿ Ïê¿ Ï‡¿ ÏÓ¿ ÏÙ¿ Ì¿ Ì¿ Ì#¿ Ì)¿ Ìu¿ Ì∆¿ Ì÷¿ ÌÓ¿ ÌÔ¿ Ó7¿ Ó=¿ Ó|¿ Ó≈¿ Ó˚¿ Ô¿ Ô¿ Ô3¿ Ô4¿ Ô¿ ÔÖ¿ Ô‘¿ $¿ 0¿ 6¿ Ç¿ —¿ Ò¿ Ò¿ Ò-¿ ÒC¿ ÒD¿ Òl¿ Òr¿ Ò¬¿ ÒŒ¿ Ò‘¿ ÒÌ¿ Ú¿ Ú¿ Ú4¿ Ú:¿ Ú}¿ Úî¿ Úï¿ Ú·¿ Û¿ Û¿ ÛJ¿ Ûú¿ Ûù¿ Û©¿ ÛÍ¿ ÛÎ¿ Ù5¿ ÙÉ¿ Ùœ¿ ı¿ ı9¿ ı?¿ ı|¿ ı¥¿ ˆ¿ ˆ5¿ ˆ9¿ ˆ:¿ ˆF¿ ˆã¿ ˆ∂¿ ˜
¿ ˜j¿ ˜±¿ ¯	¿ ¯L¿ ¯P¿ ¯R¿ ¯S¿ ¯¨¿ ¯Á¿ ˘¿ ˘Y¿ ˘ë¿ ˘ﬂ¿ ˙,¿ ˙z¿ ˙⁄¿ ˚:¿ ˚;¿ ˚G¿ ˚\¿ ˚s¿ ˚t¿ ˚Ê¿ ¸<¿ ¸f¿ ¸g¿ ¸õ¿ ¸¡¿ ¸‘¿ ˝¿ ˝¿ ˝G¿ ˝v¿ ˝û¿ ˝æ¿ ˝Ì¿ ˝Ù¿ ˝ı¿ ˛(¿ ˛N¿ ˛a¿ ˛h¿ ˛l¿ ˛m¿ ˛y¿ ˛ö¿ ˛Ω¿ ˛ﬁ¿ ˛‚¿ ˛„¿ ˛Ô¿ ˇ¿ ˇ*¿ ˇQ¿ ˇk¿ ˇÄ¿ ˇÑ¿ ˇÖ¿ ˇû¿ ˇ∞¿ ˇÎ¿ ˇÛ¿ ˇ˜¿ ˇ¯¿ !¿ ß¿ ®¿ ÿ¿¿T¿ñ¿º¿ﬂ¿+¿/¿0¿<¿i¿â¿∏¿€¿·¿‚¿Y¿Z¿µ¿’¿N¿z¿â¿µ¿Ω¿√¿ƒ¿¯¿3¿4¿ñ¿¥¿ ¿ﬂ¿Â¿È¿Í¿"¿O¿ß¿∆¿Î¿Ò¿¿0¿6¿K¿w¿}¿õ¿Ω¿√¿¿+¿¶¿Ò¿˜¿	¿	¿	¿	a¿	∞¿	—¿	◊¿	ˇ¿
S¿
Y¿
©¿
≠¿
Æ¿
‹¿<¿]¿c¿ ¿Œ¿œ¿¿l¿Œ¿¿ ¿!¿s¿…¿1¿Ö¿â¿ä¿‹¿2¿ö¿Ó¿Ú¿Û¿/¿x¿…¿⁄¿˜¿¿e¿≤¿∂¿∑¿˜¿@¿A¿ã¿»¿¿à¿â¿Ï¿P¿Q¿}¿ú¿∑¿À¿Á¿Î¿Ï¿5¿r¿»¿0¿1¿ì¿ˆ¿˜¿#¿B¿]¿r¿v¿w¿–¿?¿|¿’¿€¿B¿C¿Æ¿¿¿G¿f¿Å¿†¿µ¿π¿∫¿¿]¿≥¿∑¿∏¿	¿Y¿~¿Ç¿É¿¨¿»¿ˇ¿+¿X¿Ç¿â¿ç¿é¿è¿Â¿G¿n¿o¿≤¿«¿Õ¿Œ¿˛¿¿¿¿<¿\¿|¿‚¿Ì¿¸¿ ¿ z¿ Ö¿ ç¿ ì¿ ù¿ ª¿ €¿!¿!$¿!y¿!¥¿!ﬁ¿!¿"¿" ¿")¿"/¿"3¿"4¿"@¿"g¿"ö¿"ƒ¿#5¿#6¿#Ç¿#¬¿#√¿$¿$?¿$É¿$Ω¿%
¿%*¿%=¿%O¿%i¿%û¿%›¿%˚¿&&¿&/¿&6¿&7¿&P¿&o¿&æ¿&⁄¿'/¿'<¿'ä¿'ê¿'«¿'»¿'˜¿(¿($¿(Q¿(Ü¿(≥¿(—¿(ÿ¿(Ÿ¿)>¿)m¿)ã¿)≥¿)’¿*¿*-¿*V¿*z¿*ß¿*·¿*˚¿+&¿+I¿+v¿+ò¿+•¿+∞¿+π¿+¿¿+¡¿,¿,o¿,p¿,í¿,ﬂ¿,Ì¿-|¿-}¿-¢¿-∂¿-Ó¿.¿.{¿.‘¿/¿/&¿/0¿/>¿/?¿/d¿/x¿/∞¿/◊¿0=¿0ñ¿0ƒ¿0Ë¿0Ú¿1 ¿1¿15¿1N¿1z¿1ê¿1ô¿1ü¿1†¿1‡¿2¿2¿2X¿2k¿2ï¿2≠¿2Ì¿3¿30¿3i¿3á¿3ñ¿3ª¿3»¿3”¿3‹¿3›¿4#¿41¿4K¿4f¿4Ç¿4Æ¿4œ¿5¿5H¿5n¿5§¿5€¿5Ó¿5ˇ¿6#¿6F¿6á¿6ß¿6∏¿6ﬁ¿7	¿76¿7É¿7©¿7æ¿7—¿7Û¿8#¿86¿8G¿8V¿8c¿8n¿8w¿8x¿8æ¿8Ã¿8Ê¿9¿9¿9I¿9j¿9ß¿9„¿:	¿:?¿:v¿:â¿:ö¿:¿¿:Â¿;(¿;J¿;]¿;Ö¿;≤¿;·¿<0¿<X¿<o¿<Ñ¿<®¿<⁄¿<Ô¿=¿=¿="¿=/¿=:¿=;¿=h¿=Ñ¿=≠¿=Ê¿>¿>6¿>]¿>î¿>√¿> ¿>À¿>‡¿?¿?*¿?{¿?ñ¿?Ø¿?Œ¿?„¿@¿@å¿@∑¿@Ò¿@¸¿A¿A¿A¿A[¿AÉ¿A«¿B+¿B,¿BQ¿Bw¿Bñ¿Bœ¿B¿C4¿CX¿C´¿D¿DG¿Dè¿DÀ¿E¿E¿Eh¿Eµ¿E¯¿F@¿Fz¿F∏¿F¿¿FÕ¿FÓ¿G4¿Gp¿GÆ¿G¥¿Gµ¿G‚¿H¿H)¿HÑ¿H∂¿H˙¿I8¿IP¿Io¿I≥¿Iÿ¿J¿J¿J2¿JH¿J\¿Jt¿Jå¿J¨¿JÃ¿JÓ¿K¿K%¿K.¿KR¿Kt¿Kß¿K√¿K‚¿KÈ¿KÍ¿LX¿Lw¿Lî¿L∂¿L–¿LŸ¿Lﬂ¿Lı¿L˘¿L˚¿L¸¿MB¿MY¿M]¿M¨¿MÒ¿N>¿NB¿NV¿N¶¿NÚ¿O?¿Oê¿O÷¿O⁄¿P6¿P:¿Pí¿P¢¿P¶¿P∫¿Q ¿QL¿Qê¿Qî¿Q˙¿Q˛¿RV¿Rf¿Rj¿R~¿RÕ¿S¿S^¿Sb¿Sƒ¿S»¿T ¿T0¿T4¿TH¿Të¿T‚¿U¿U¿Uá¿Uã¿U„¿UÛ¿U˜¿V¿Va¿Vµ¿V◊¿V€¿WB¿WR¿WV¿Wj¿W¿¿X¿XU¿XY¿X¿¿X–¿X‘¿X‚¿XÊ¿Y$¿Y>¿Yâ¿YÆ¿Y˙¿Z¿Z#¿Z;¿ZÉ¿Z∞¿Z∂¿[¿[R¿[°¿[¿¿[∆¿\¿\
¿\S¿\m¿\|¿\ê¿\†¿\¥¿\…¿\Ê¿\˚¿]¿]*¿]=¿]Q¿]m¿]Ñ¿]ü¿]Ø¿]√¿]ÿ¿]¿^¿^1¿^G¿^Y¿^r¿^á¿^ß¿^∏¿^Õ¿^„¿^˝¿_¿_#¿_8¿_N¿_h¿_à¿_ö¿_∞¿_«¿_ÿ¿_Ï¿`¿`¿`,¿`D¿`a¿`z¿`í¿`£¿`º¿`⁄¿`˜¿a¿a{¿aÌ¿b_¿bÕ¿bŒ¿c¿c ¿cj¿cp¿cü¿c√¿cﬂ¿cˇ¿d ¿d4¿dP¿di¿d}¿dí¿dß¿dÀ¿d‰¿d¯¿e¿e&¿e?¿eY¿e{¿eï¿e∞¿eŒ¿eÍ¿f
¿f¿f8¿fR¿fo¿fá¿f∞¿fÀ¿fÂ¿f˚¿g¿g0¿gO¿gt¿gä¿g§¿gæ¿gŸ¿g¯¿h¿h4¿hO¿hk¿hÜ¿h£¿h≈¿h„¿i ¿i#¿iF¿ia¿ib¿iØ¿i¿¿i∆¿j¿j\¿jo¿ju¿j≠¿j≥¿jˇ¿kC¿kÅ¿kß¿k≠¿kÃ¿k‚¿k„¿l¿l¿lK¿lç¿lπ¿l”¿l‘¿m
¿m¿mI¿mñ¿m„¿n0¿nÉ¿n”¿nÍ¿nˇ¿o¿o^¿o∞¿o∂¿oÃ¿p¿pm¿ps¿p”¿pÂ¿pÎ¿q'¿q>¿q?¿qs¿qy¿qØ¿qµ¿r¿r>¿rY¿rZ¿rò¿rË¿s¿s¿sP¿só¿s√¿s…¿t¿tc¿ti¿t∂¿t·¿tÁ¿u&¿ul¿u≠¿u≥¿u…¿v¿v=¿vC¿vñ¿v‚¿vı¿v˚¿wg¿wy¿wé¿w≠¿wÆ¿wÙ¿x=¿xy¿x¿xÃ¿xˆ¿x¸¿yL¿yì¿yø¿y≈¿yÓ¿yÙ¿z3¿zy¿z∫¿z¿¿z÷¿{#¿{J¿{P¿{ì¿{‰¿|
¿|¿|Ö¿|ó¿|¨¿|”¿|‘¿}$¿}I¿}O¿}ù¿}Ë¿~¿~7¿~8¿~e¿~k¿~¥¿~˚¿'¿G¿H¿á¿ç¿◊¿Ä¿Ä¿ÄT¿Äã¿Äë¿Ä°¿Äß¿ÄÈ¿Å¿Å¿ÅF¿ÅL¿Åù¿ÅÍ¿Ç7¿ÇR¿Çl¿Çm¿Çò¿Çû¿ÇÂ¿É,¿ÉX¿É^¿Éß¿ÉÙ¿Ñ.¿Ñ4¿ÑÅ¿Ñ¨¿Ñ ¿ÑÀ¿Ñ˙¿Ö ¿ÖI¿Öt¿Öû¿Öü¿Ö‹¿Ö‚¿Ü!¿Ü'¿Üi¿Üæ¿á¿á¿á¿áe¿ák¿áØ¿á˙¿à¿à¿às¿ày¿à“¿àÿ¿â¿â+¿â,¿âu¿â{¿â…¿â⁄¿â‡¿ä*¿ä`¿äf¿ä≥¿äπ¿äı¿ã¿ã¿ãO¿ãã¿ãë¿ãﬁ¿å	¿å¿åP¿åò¿åÁ¿ç0¿ç>¿çS¿çr¿çs¿ç±¿ç∑¿é ¿é5¿é;¿é}¿é≥¿éπ¿é…¿éœ¿è¿è/¿è0¿èy¿è±¿è∑¿ê	¿êW¿êÉ¿êâ¿ê⁄¿ë ¿ë¿ëX¿ë}¿ëí¿ëò¿ë‚¿ëË¿ë¯¿ë˛¿íK¿íi¿íü¿í†¿íÍ¿ì*¿ì0¿ì¿ì…¿î¿î(¿î.¿î¿îó¿î¨¿î≤¿î˝¿ï¿ï¿ï¿ïj¿ï{¿ï≥¿ï¥¿ñ¿ñ¿ñ#¿ñ<¿ñS¿ñT¿ñå¿ñí¿ñÿ¿ñﬁ¿ó+¿ó;¿óA¿óå¿óí¿ó‚¿ò/¿òÄ¿ò—¿ô¿ôk¿ôq¿ôº¿ôˇ¿öH¿öt¿öu¿ö∑¿öΩ¿õ¿õ¿õ`¿õ{¿õ|¿õ∆¿ú¿ú¿úk¿ú∑¿ú ¿ú–¿ù¿ùh¿ù∑¿û¿ûR¿ûe¿ûk¿ûy¿ûî¿û‘¿ü¿ü¿ü ¿ü&¿ül¿ür¿üŒ¿ü‰¿üÍ¿† ¿†Y¿†â¿†è¿†ı¿°¿°¿°¿°#¿°l¿°µ¿°Í¿¢-¿¢z¿¢´¿¢«¿¢»¿¢Û¿¢˘¿£I¿£O¿£û¿£Í¿§8¿§D¿§J¿§`¿§Æ¿§˝¿•¿•B¿•o¿•u¿•¿¿•Ã¿•“¿¶D¿¶V¿¶Ö¿¶Ü¿¶√¿¶…¿ß¿ßc¿ßÆ¿ßæ¿ßƒ¿®¿®¿®R¿®X¿®h¿®n¿®™¿®¬¿®√¿©¿©¿©\¿©ü¿©•¿©Ù¿™2¿™8¿™Ü¿™å¿™ú¿™¢¿™‚¿™˛¿™ˇ¿´,¿´2¿´{¿´¬¿´Ó¿´Ù¿¨ ¿¨&¿¨6¿¨<¿¨}¿¨ù¿¨û¿¨≈¿¨À¿¨È¿¨Ô¿≠8¿≠z¿≠¶¿≠∆¿≠«¿Æ¿Æ]¿Æc¿Æ¥¿Ø ¿Ø¿Ø¿Øg¿Ø±¿∞ ¿∞K¿∞ö¿∞±¿∞∑¿∞≈¿∞‡¿±¿±W¿±_¿±i¿±o¿±ª¿±ˇ¿≤=¿≤c¿≤i¿≤≈¿≤€¿≤·¿≤˜¿≥P¿≥Ä¿≥Ü¿≥Ï¿≥˛¿¥¿¥¿¥¿¥c¿¥¨¿¥·¿µ#¿µp¿µ°¿µΩ¿µæ¿µ˙¿∂ ¿∂P¿∂°¿∂Ì¿∂Û¿∑1¿∑7¿∑Ç¿∑à¿∑ò¿∑û¿∑Ÿ¿∑Ò¿∑Ú¿∏3¿∏9¿∏ä¿∏Õ¿∏”¿π"¿π`¿πf¿πµ¿πª¿πÀ¿π—¿∫¿∫,¿∫-¿∫Z¿∫`¿∫Æ¿∫˜¿ª¿ª"¿ªN¿ªT¿ªd¿ªj¿ª™¿ª ¿ªÀ¿ªı¿ª˚¿º¿º¿ºh¿º™¿º÷¿ºˆ¿º˜¿Ω"¿Ω(¿Ωx¿Ω~¿ΩÕ¿æ¿æg¿æs¿æy¿æ∆¿æ“¿æÿ¿æÓ¿ø<¿øã¿øë¿ø–¿ø˝¿¿¿¿N¿¿Z¿¿`¿¿“¿¿‰¿¡¿¡¿¡V¿¡\¿¡©¿¡µ¿¡ª¿¬
¿¬¿¬]¿¬ä¿¬ß¿¬®¿¬ˆ¿√?¿√N¿√g¿√h¿√ñ¿√ú¿√Ê¿ƒ-¿ƒY¿ƒ_¿ƒç¿ƒÆ¿ƒØ¿ƒÙ¿ƒ˙¿≈K¿≈l¿≈r¿≈√¿≈…¿∆¿∆c¿∆≥¿« ¿«¿«¿«D¿«Z¿«[¿«ö¿«†¿«Ò¿»¿»¿»Q¿»y¿»¿»≈¿»ﬂ¿»‡¿…0¿…6¿…p¿…ô¿…ü¿…Ì¿ 5¿ y¿ ≥¿ π¿ ˇ¿À¿À¿Àf¿Àé¿Àî¿À‡¿Ã¿Ã¿Ã]¿Ãê¿Ãñ¿ÃŸ¿Ãﬂ¿Õ%¿Õ@¿ÕA¿Õì¿ÕÆ¿Õ¥¿Õƒ¿Õ ¿Œ¿Œ5¿Œë¿Œ‰¿œ9¿œy¿œ¡¿–¿–>¿–ä¿–º¿—¿—C¿—ê¿—¬¿“¿“?¿“a¿“b¿“±¿“…¿“œ¿“ﬂ¿“Â¿”8¿”P¿”¨¿”ˇ¿‘T¿‘î¿‘‹¿’¿’Y¿’§¿’⁄¿÷+¿÷a¿÷Æ¿÷‡¿◊+¿◊]¿◊Å¿◊Ç¿◊Õ¿◊Â¿◊Î¿◊˚¿ÿ¿ÿT¿ÿl¿ÿ»¿Ÿ¿Ÿp¿Ÿ∞¿Ÿ¯¿⁄;¿⁄u¿⁄¿¿⁄ˆ¿€B¿€t¿€¡¿€Û¿‹>¿‹p¿‹ô¿‹ö¿‹Á¿‹ˇ¿›¿›¿›¿›s¿›œ¿ﬁ"¿ﬁw¿ﬁ∑¿ﬁˇ¿ﬂB¿ﬂ|¿ﬂ«¿ﬂ˝¿‡I¿‡{¿‡Ã¿·¿·M¿·¿·§¿·•¿·Ò¿‚	¿‚¿‚¿‚%¿‚}¿‚Ÿ¿„,¿„Å¿„¡¿‰	¿‰L¿‰Ü¿‰—¿Â¿ÂS¿ÂÖ¿Â÷¿Ê¿ÊY¿Êã¿ÊØ¿Ê∞¿Ê˘¿Êˇ¿Á:¿Áé¿Á‚¿ÁË¿Ë<¿Ëç¿Ëﬂ¿È-¿Èu¿È{¿È«¿Í¿ÍK¿Íê¿Íµ¿Íª¿Î¿Î%¿Î+¿Îw¿Î…¿Ï¿ÏW¿Ïï¿Ïœ¿Ï’¿Ì¿Ìg¿Ìm¿Ì}¿ÌÉ¿ÌΩ¿Ó¿Ó7¿Ó¿Ó¬¿Óﬂ¿Ó‡¿Ô.¿Ôq¿Ôw¿Ôü¿Ôµ¿Ô∂¿Ô‰¿ÔÍ¿¿¿R¿w¿x¿√¿Ò¿Ò\¿Òb¿Ò{¿Òù¿Òû¿Ò‡¿ÒÊ¿Ú4¿ÚÄ¿Ú«¿Û¿Û¿Û%¿Ûh¿Ûß¿ÛÎ¿Ù¿Ù;¿Ù<¿Ùâ¿Ù¢¿Ùø¿Ù—¿ÙÁ¿Ù˙¿ı¿ı,¿ıO¿ıg¿ıÉ¿ıú¿ı≤¿ıÃ¿ıÚ¿ˆ¿ˆ)¿ˆ<¿ˆS¿ˆn¿ˆÜ¿ˆ∏¿ˆÏ¿˜¿˜¿˜>¿˜V¿˜j¿˜Ç¿˜≠¿˜…¿˜Â¿˜˝¿¯¿¯)¿¯E¿¯a¿¯å¿¯°¿¯∫¿¯◊¿¯È¿¯ˇ¿˘¿˘-¿˘K¿˘k¿˘ê¿˘±¿˘—¿˘Í¿˘˝¿˙¿˙<¿˙]¿˙d¿˙Ä¿˙ü¿˙Õ¿˙Ô¿˚¿˚N¿˚ó¿˚»¿˚¸¿¸:¿¸e¿¸ì¿¸Ÿ¿˝¿˝S¿˝u¿˝£¿˝‘¿˛¿˛`¿˛µ¿˛È¿ˇ¿ˇN¿ˇ¿ˇ§¿ˇ’¿ 	¿ I¿ õ¿ Ã¿ Ò¿"¿V¿ñ¿Ë¿¿D¿{¿†¿Œ¿ˇ¿0¿d¿û¿Á¿$¿^¿É¿´¿˜¿@¿t¿{¿¿Ä¿Ã¿¿¿a¿ë¿œ¿‰¿¿`¿ï¿‘¿¿G¿y¿¥¿	¿	]¿	Ü¿	ƒ¿	˘¿
(¿
]¿
û¿
”¿¿L¿r¿°¿”¿¿:¿u¿ø¿˝¿8¿^¿®¿›¿‰¿Ë¿È¿ı¿¿:¿M¿S¿¿ì¿ô¿Ω¿€¿¿#¿K¿u¿Ø¿Ÿ¿¿7¿]¿Ö¿Ω¿Î¿!¿A¿i¿ì¿√¿¿E¿i¿õ¿«¿Ò¿%¿G¿q¿ù¿›¿¿;¿]¿á¿≥¿Û¿¿C¿q¿ì¿ª¿Â¿¿;¿k¿•¿◊¿¿)¿M¿â¿√¿¿Ù¿ı¿¿¿B¿N¿_¿l¿}¿ó¿©¿ª¿Œ¿‰¿Ù¿¿¿2¿J¿W¿h¿z¿è¿¨¿ ¿Ÿ¿Ô¿¿¿!¿3¿E¿W¿n¿|¿é¿°¿æ¿–¿Á¿ı¿¿¿7¿F¿Y¿m¿Ä¿ï¿Ø¿≈¿⁄¿Ë¿˜¿¿,¿?¿F¿i¿m¿n¿z¿ê¿ø¿Ê¿¿F¿~¿—¿¿S¿à¿…¿¿B¿z¿µ¿˘¿ S¿ ∞¿ ·¿!&¿!c¿!ú¿!‰¿"¿"J¿"Ü¿"‡¿#¿#a¿#é¿#«¿$¿$]¿$ç¿$…¿%¿%3¿%i¿%¢¿%€¿&¿&Y¿&™¿&Ô¿'1¿'^¿'Ñ¿'ÿ¿()¿(e¿(l¿(•¿(©¿(´¿(¨¿(Â¿(È¿)9¿)Ä¿)Ã¿)‹¿)‡¿**¿*a¿*l¿*ù¿*›¿+¿+/¿+D¿+a¿+w¿+ê¿+§¿+ø¿+‘¿+Ï¿,)¿,i¿,É¿,ú¿,∫¿,Œ¿,‰¿,˛¿-¿-.¿-E¿-^¿-r¿-í¿-™¿-ø¿-‘¿-Í¿.¿.¿.8¿.P¿.a¿.Ü¿.ú¿.¢¿.£¿.ﬁ¿.˝¿.˛¿/A¿/h¿/i¿/¢¿/®¿/Ò¿08¿0d¿0Ñ¿0Ö¿0‘¿0⁄¿1)¿1i¿1o¿1±¿1Ë¿1Ó¿1˛¿2¿2V¿2s¿2t¿2Ø¿2µ¿2¸¿3C¿3o¿3u¿3≤¿4¿4R¿4`¿4f¿4≥¿4ﬁ¿4¸¿4˝¿5S¿5w¿5x¿5≥¿5“¿5”¿6!¿6'¿6x¿6µ¿6ª¿6˝¿73¿79¿7I¿7O¿7£¿7ø¿7¿¿8¿8¿8<¿8q¿8r¿8π¿8ø¿8Ò¿9(¿9)¿9w¿9ì¿9ô¿9≤¿9»¿9…¿:¿:¿:G¿:ç¿:“¿;¿;W¿;|¿;Ç¿;œ¿<¿<*¿<V¿<W¿<ô¿<ü¿<Â¿=&¿=@¿=A¿=x¿=~¿=¡¿>¿>/¿>5¿>k¿>Ö¿>Ü¿>√¿>…¿?¿?Y¿?Ö¿?ã¿?∑¿?◊¿?ÿ¿@¿@¿@d¿@¶¿@“¿@ÿ¿A¿A.¿A/¿Al¿Ar¿Aª¿A˝¿B)¿B/¿B[¿B{¿B|¿Bπ¿Bø¿C¿CJ¿Cv¿C|¿C≤¿C“¿C”¿D¿D¿Da¿D®¿D‘¿D⁄¿E¿E)¿E*¿Eo¿Eu¿EÆ¿EÃ¿E“¿F¿FY¿FÉ¿Fâ¿F≤¿F«¿F»¿G¿G¿G\¿Gb¿G®¿GÈ¿H¿H-¿H.¿Hx¿Hõ¿Hú¿HË¿I¿I¿Id¿Iñ¿Iú¿Iﬂ¿IÂ¿J+¿Jl¿Jñ¿J±¿J≤¿J˙¿K5¿K;¿K~¿KÑ¿K ¿L¿L5¿L;¿Lã¿L¶¿Lß¿L˘¿M¿M¿M*¿M0¿MÉ¿Mõ¿M˜¿NJ¿Nü¿Nﬂ¿O'¿Oj¿O§¿O¿P"¿Ps¿P©¿Pˆ¿Q(¿Qs¿Q•¿Q«¿Q»¿R¿R/¿R5¿RE¿RK¿Rû¿R∂¿S¿Se¿S∫¿S˙¿TB¿TÖ¿Tø¿U
¿U@¿Uë¿U«¿V¿VF¿Vë¿V√¿VÁ¿VË¿W3¿WK¿WQ¿Wa¿Wg¿W∫¿W“¿X.¿XÅ¿X÷¿Y¿Y^¿Y°¿Y€¿Z&¿Z\¿Z®¿Z⁄¿['¿[Y¿[§¿[÷¿[ˇ¿\ ¿\M¿\e¿\k¿\{¿\Å¿\Ÿ¿]5¿]à¿]›¿^¿^e¿^®¿^‚¿_-¿_c¿_Ø¿_·¿`2¿`h¿`≥¿`Â¿a
¿a¿aW¿ao¿au¿aÖ¿aã¿a„¿b?¿bí¿bÁ¿c'¿co¿c≤¿cÏ¿d7¿dm¿dπ¿dÎ¿e<¿er¿eø¿eÒ¿f¿f¿f_¿fe¿f†¿fÙ¿gH¿gN¿gö¿gﬁ¿h¿hc¿hà¿hé¿h€¿h¯¿h˛¿iJ¿iú¿iÁ¿j*¿jh¿j¢¿j®¿jÔ¿k:¿k@¿kP¿kV¿kê¿k÷¿l
¿lR¿lï¿l≤¿l≥¿l˛¿mN¿mó¿m∏¿mπ¿m˚¿n¿nO¿nõ¿n‚¿o-¿o:¿o@¿oÖ¿o∞¿o∂¿o∆¿oÃ¿p¿p4¿pY¿pZ¿p™¿pº¿pﬁ¿p˘¿q¿q8¿qQ¿qk¿qã¿q¶¿qæ¿q¿r$¿r7¿r_¿rv¿rå¿r®¿rƒ¿r‡¿r¸¿s¿s+¿sA¿sh¿sá¿sû¿sµ¿s”¿sÛ¿t¿t9¿tY¿tr¿tê¿t±¿t∏¿tŸ¿u
¿uS¿uá¿uƒ¿uÚ¿v5¿vf¿v†¿vÚ¿wG¿wo¿w¨¿w»¿w¸¿x0¿xp¿x§¿x‰¿y¿y@¿yn¿y¿¿y˙¿z+¿z\¿zê¿z ¿{¿{P¿{ä¿{Ø¿{¯¿|,¿|3¿|7¿|8¿|á¿|◊¿|˚¿}¿}Y¿}≤¿}∏¿~¿~\¿~ß¿~œ¿~‚¿~Ë¿~˝¿>¿ó¿€¿Ä(¿Äf¿Äπ¿Ä˙¿ÅD¿Åë¿Åœ¿Ç¿Çc¿Çß¿Ç˜¿É>¿É|¿Éﬁ¿Ñ(¿Ñi¿Ñ™¿ÑÓ¿Ö8¿Öë¿Öﬁ¿Ü(¿Ü]¿Ü°¿Ü®¿Ü¨¿Ü≠¿Üπ¿Ü‹¿ÜÏ¿á¿á¿á)¿á8¿áH¿á[¿áv¿áí¿áü¿á≥¿áƒ¿á”¿á‰¿á˘¿à
¿à¿à1¿à=¿àN¿à_¿à|¿àë¿à£¿àµ¿à»¿à›¿à˜¿â¿â"¿â0¿âJ¿â]¿âu¿â|¿âÅ¿âÇ¿âé¿â±¿â”¿âÊ¿âÏ¿ä¿ä,¿ä2¿ä[¿äÖ¿äø¿äÎ¿ã¿ãE¿ã{¿ã•¿ã’¿ã˘¿å+¿åW¿å¿å´¿åﬂ¿ç¿ç?¿çm¿ç≠¿çÔ¿é¿é9¿éy¿é©¿é”¿é˝¿è)¿èY¿èì¿è≈¿èı¿ê¿êQ¿ê}¿ê∞¿ê¥¿êµ¿ê¡¿ë¿ë1¿ëw¿ëÏ¿íy¿íÒ¿ì_¿ì—¿îW¿îÃ¿ï7¿ïŸ¿ñ¿ñÊ¿óp¿ó„¿òQ¿ò—¿ôI¿ô…¿öA¿öº¿õ ¿õÅ¿ú¿úó¿ú˚¿ù_¿ùŸ¿û^¿ûÌ¿üp¿ü¿†[¿†„¿°`¿°d¿°f¿°g¿°¶¿°÷¿°Á¿°Ë¿¢¿¢¿¢¿¢r¿¢•¿¢Â¿¢Î¿£%¿£+¿£,¿£8¿£ò¿£À¿§¿§¿§K¿§Q¿§R¿§^¿§∆¿§˘¿•9¿•?¿•o¿•≥¿•π¿•Î¿¶1¿¶7¿¶q¿¶w¿¶x¿¶Ñ¿¶Â¿ß¿ßJ¿ßõ¿ß°¿ß¢¿ßÚ¿ß¯¿ß˘¿®¿®e¿®ó¿® ¿©¿©!¿©y¿©¿©Ä¿©å¿©„¿™¿™4¿™S¿™Å¿™ü¿™…¿™Ë¿´¿´¿´!¿´>¿´[¿´á¿´√¿¨ ¿¨¿¨¿¨¿¨¿¨p¿¨Œ¿¨¸¿≠¿≠4¿≠h¿≠n¿≠ö¿≠∂¿≠’¿≠Ú¿Æ¿Æ¿Æ¿Æ¿Æ*¿Æá¿ÆÂ¿Ø¿Ø¿ØK¿Ø¿ØÖ¿Ø±¿ØÕ¿ØÏ¿∞	¿∞(¿∞.¿∞4¿∞5¿∞A¿∞û¿∞¸¿±*¿±0¿±b¿±ñ¿±ú¿±»¿±‰¿≤¿≤ ¿≤?¿≤E¿≤K¿≤M¿≤N¿≤É¿≤Ñ¿≤«¿≥¿≥3¿≥f¿≥g¿≥¶¿≥—¿≥‡¿≥·¿≥ˇ¿¥ ¿¥B¿¥É¿¥Ñ¿¥ê¿¥Ô¿µ"¿µb¿µh¿µ¢¿µ®¿µ©¿µµ¿∂¿∂?¿∂q¿∂w¿∂ö¿∂†¿∂°¿∂≠¿∑¿∑M¿∑í¿∑ò¿∑»¿∑¸¿∏8¿∏@¿∏t¿∏±¿∏π¿∏Ë¿∏Ó¿π ¿πS¿πY¿πã¿π»¿πŒ¿∫¿∫¿∫¿∫¿∫Ä¿∫≥¿∫¯¿∫˛¿ª.¿ªb¿ªû¿ª¶¿ª⁄¿º¿º¿ºN¿ºT¿ºÜ¿ºπ¿ºø¿ºÒ¿Ω.¿Ω4¿Ωc¿Ωi¿Ωj¿Ωv¿Ω™¿Ω´¿Ω∑¿æ¿æ9¿æ?¿æ@¿æL¿æ©¿æ‹¿ø¿ø¿øD¿ø`¿øf¿øã¿øë¿øí¿øû¿ø˛¿¿I¿¿|¿¿…¿¿œ¿¿ˇ¿¡3¿¡w¿¡¿¡≥¿¡Ï¿¡Ù¿¬+¿¬1¿¬c¿¬•¿¬´¿¬›¿√¿√¿√\¿√b¿√c¿√o¿√◊¿ƒ"¿ƒU¿ƒ¢¿ƒ®¿ƒÿ¿≈¿≈P¿≈X¿≈å¿≈≈¿≈Õ¿∆¿∆
¿∆<¿∆~¿∆Ñ¿∆∂¿∆Ô¿∆ı¿«5¿«;¿«<¿«H¿«©¿«Ù¿»'¿»t¿»z¿»∫¿»¿¿»¡¿»Õ¿…-¿…x¿…≠¿…≥¿…µ¿…∂¿…È    Ä•Äº Ä¡ Ä“Ä·Ä‰  Å  Å7  Å_  Å{  Åë  Å™  Å≈  ÅÊ  Ç  Ç  Ç8  ÇR  Çg    Ö´É◊Ö±   Ö‹Ö‰  ÜÜÜ ÜêÖÓÖ˙    ÜnÜ  ÜÜ    ÜóÜ¢    Ü∑pÜª  Ü¬Ü    à®Äúâ   à®à©á+Åyá¶  á©á±  á+á,âH8â[   âHâI âµÄ√âª  âÏ, âÏâ˝ âˇä  ä	ä     äZä4  ä9äA  ää äÀáFä—  äˇÅM äˇã 	ãã.  ã:ãI  ã]ãl  ãwãÜ  ãóã¶  ãÆãΩ  ãœãﬁ  ãÏã˚  åå  å4å9åJåAå:åCåP'åh  å{åì  åù$åµ  å≈å€  å‚!åˆ  çç  ç  ç1  çD&ç\  çoaçy    ç‘ÇñçÂ  çÎçÛ  ç˙	é   ç‘ç’ênÅeê  êçê¢  ênêoë◊8ëÍ   ë◊ëÿ ìÅ˘ì  ìEÄ» ìKì[ ìbìq  ì|ìã  ììì¢  ì≥ì¬  ì–ìﬂ  ìÓì˝   îî#  î-îC  îJ$îb  îrî~  îãîó  î•î∞   îøKî·   îøî¿ ïâˆï   ïlBïÇ ïîïúï≠ï©ïùï´ï≥$ïÃ  ï€.ïÙ  ñ'ñ$  ñ8ñO  ñZ&ñq  ñÑ ñî   ñ©ÇÙñ∫   ñ©ñ™ô°uô≤   ô°ô¢öÇóö+  ö;öM  ööúµÇMú»  úŒú‹  úµú∂ ügÇºüm  üên üñüù ü§$ü¿  üŒ
ü‘  ü·üÊü¸üÒüÁüÛ††  †C†0    †aÅ†l    °zÄß°ç  °ì°°  °z°{ ¢ÿÇ¢ﬁ  £Ä√ ££ ££%  £3£9  £H£N  £^£d  £w
£}  £á£ç  £õ£°  £∞£∂   £Õ£ﬁ  £Î£˘  §§  §'§2  §D§R  §[§i  §v§á  §ï§†   §≤C§–   §≤§≥ §˘êπ§ˇ   •÷-•Í •Ú•˙•˚¶¶¶$¶!  ¶0¶8  ¶C¶K  ¶VG¶_    ¶°Åp¶≤   ¶°¶¢®P®&   ®®®ib®n    ®œÉ˛®‡  ®®˛  ®œ®–¨—Å«¨ÿ    ÆúÇïÆ£    ±5Ñ{±H  ±N±\  ±5±6 ∑ÜZπaÅ_/// Defines **where** the floating label should be displayed within an
/// [InputDecorator].
///
/// See also:
///
///  * [InputDecoration.floatingLabelAlignment] which defines the alignment for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelBehavior] which defines **how** the floating label should
///    behave. π|Jπòπôπö πõπ°  π¶π¨πƒπ∏π∞π≠π≥π¥πæπªπ¡∫∫  ∫Å9ª-Ä‰/// Align the floating label on the leading edge of the [InputDecorator].
///
/// For left-to-right text ([TextDirection.ltr]), this is the left edge.
///
/// For right-to-left text ([TextDirection.rtl]), this is the right edge.ª5ªKªLªMªRªNªOªWÄêª¡C/// Aligns the floating label to the center of an [InputDecorator].ª ª‡ª·ª‚ªÊª„ªÏ,º    ªÏªÌºÄ˚º6  º9ºA  ººΩÄ˘Ω)  Ω4Ω<   æ0æ+   ææπPπQøTäùøe  øuÇ3 ø{øÜ øçøú  øØøæ  øŒ!ø›  øı#¿ @  ¿ @$¿ @-  ¿ @H¿ @W  ¿ @b¿ @q  ¿ @ ¿ @é  ¿ @•¿ @¥  ¿ @¿¿ @œ  ¿ @·	¿ @Á  ¿ @
¿ @ˆ  ¿ A 
¿ A  ¿ A	¿ A  ¿ A¿ A%  ¿ A0¿ A6  ¿ AA¿ AG  ¿ AV¿ A\  ¿ Ak¿ Aq  ¿ AÅ¿ Aá  ¿ Aì¿ Aô   ¿ A¨'¿ A≈  ¿ A◊¿ A‚  ¿ AÒ ¿ A˛  ¿ B"¿ B"  ¿ B;3¿ BX  ¿ Br¿ BÑ  ¿ Bé¿ B§  ¿ B±¿ Bº  ¿ B“¿ Bﬁ  ¿ BÈ!¿ B˝  ¿ C¿ C  ¿ C$¿ C2  ¿ C;¿ CI  ¿ CR¿ C`  ¿ Ch¿ Cv  ¿ CÄ¿ Cé  ¿ Cò¿ C¶  ¿ C¥¿ C¬  ¿ C–¿ Cﬁ  ¿ CÌ¿ C˚  ¿ D¿ D  ¿ HxÅw¿ Hå   ¿ Hx¿ Hy¿ D"ÑR¿ D<  ¿ D?¿ DG  ¿ D"¿ D#øTøU¿ JøÇ9¿ J≈  ¿ J·Å1 ¿ JÁ¿ J˛ ¿ K¿ K  ¿ K&¿ K5  ¿ Kh¿ Kw  ¿ K™¿ Kπ  ¿ KÕ¿ K‹  ¿ K¿ Kˇ   ¿ L+¿ L4  ¿ LE¿ LR  ¿ Lc¿ Lp  ¿ LÉ¿ Lê  ¿ Lª¿ L»  ¿ L€¿ LË     ¿ M@¿ áy¿ MF  ¿ M±Å˛ ¿ M±¿ M¬ ¿ M…¿ Mﬂ  ¿ MÓ$¿ N  ¿ N"¿ N/  ¿ N@¿ NO  ¿ N]¿ Nl  ¿ Nx¿ Ná  ¿ Nï$¿ N©  ¿ NŒ¿ N¬¿ N–¿ NÚ¿ N„¿ NÙ¿ O¿ O
¿ O¿ OB¿ O/¿ OD¿ Oi¿ O^¿ Ok¿ OÜ¿ O}¿ Oà¿ O£¿ Oò¿ O•	¿ O≥$¿ O« ¿ O‘¿ Ub¿ Un  ¿ VA¿ VO  ¿ W-¿ W:  ¿ X∆%¿ XŸ  ¿ ZÖ¿ Zä  ¿ [F¿ [K ¿ [V¿ \¿ \ ¿ \¿ •6¿ •?  ¿ O‹:¿ OÎ    ¿ P<¿ P(    ¿ PX<¿ Pg    ¿ Pó:¿ P¶    ¿ P‘>¿ P„    ¿ Q>¿ Q$    ¿ QVF¿ Qe    ¿ QüF¿ QÆ    ¿ QËH¿ Q˜    ¿ R3@¿ RB    ¿ RvD¿ RÖ    ¿ RÒÇ@¿ S   ¿ RÒ¿ RÚ¿ U5*¿ UE    ¿ U}Äã¿ UÅ  ¿ Uå¿ Uô   ¿ V2¿ V    ¿ VaÄñ¿ Ve  ¿ Vs¿ VÇ   ¿ V˚/¿ W    ¿ WKÄí¿ WO  ¿ W\¿ Wj   ¿ W·ÄÑ¿ W˜    ¿ Xh[¿ X~    ¿ XÔÅn¿ XÛ  ¿ Y¿ Y   ¿ Za!¿ Zj    ¿ ZòÄä¿ Zú  ¿ Z¶
¿ Z¨   ¿ [&¿ [/    ¿ [_{¿ [c  ¿ [k
¿ [q   ¿ [ﬁ!¿ [Á    ¿ \ÄÅ¿ \!  ¿ \+
¿ \1   ¿ \˛c¿ ]    ¿ `ë,¿ `¶   ¿ `ë¿ `í¿ bÓI¿ b˝    ¿ ]eÉ(¿ ]v  ¿ ]ê¿ ]•  ¿ ]e¿ ]f¿ `¡}¿ `œ  ¿ `Ÿ¿ `Â  ¿ `È¿ `Ò   ¿ aB}¿ aP  ¿ aZ¿ af  ¿ aj¿ ar   ¿ a√}¿ a—  ¿ a‹¿ aË  ¿ aÏ¿ aÙ   ¿ bDK¿ bP  ¿ bY¿ be   ¿ bìW¿ b®  ¿ b∑¿ b¬   ¿ czÑH¿ cÅ  ¿ cê¿ cú  ¿ c†¿ c∞   ¿ h•©¿ hΩ  ¿ h≈ ¿ h’   ¿ ì§É¿ ì´  ¿ ìΩ¿ ì≈  ¿ ìÀ¿ ì”  ¿ ì⁄
¿ ì‚  ¿ ìÊ#¿ ì˘   ¿ ñ∞Åq¿ ñ√  ¿ ñ‹¿ ñ‰  ¿ ñ∞¿ ñ±¿ ò%Åq¿ ò8  ¿ òQ¿ òY  ¿ ò%¿ ò&¿ ôöÅø¿ ô°  ¿ ô≠¿ ôµ  ¿ ôª¿ ôÕ   ¿ õ]à~¿ õp  ¿ õä¿ õí  ¿ õ]¿ õ^¿ £ﬂm¿ £Ú  ¿ §¿ §  ¿ £ﬂ¿ £‡¿ §PÄ∏¿ §c  ¿ §É¿ §ë  ¿ §P¿ §Q¿ •SÄÍ¿ •d  ¿ •u¿ •Ö  ¿ •S¿ •T¿ ¶AÑ4¿ ¶d  ¿ ¶â)¿ ¶ß   ¿ ™yÄ£¿ ™ä  ¿ ™©¿ ™¡  ¿ ™y¿ ™z¿ ´ ô~¿ ´1   ¿ ´ ¿ ´!¿ ƒ¢f¿ ƒß  ¿ ƒ≥¿ ƒƒ  ¿ ƒÃ¿ ƒ‘   ¿ ≈ãz¿ ≈  ¿ ≈#¿ ≈4  ¿ ≈<¿ ≈D  ¿ ≈¿ ≈¿ –ä6¿ –õ  ¿ –ß¿ –Ø  ¿ –ä¿ –ã¿ –ƒÇÜ¿ –’  ¿ –Â¿ –˜  ¿ — ¿ —  ¿ –ƒ¿ –≈¿ ”NÅi¿ ”_  ¿ ”s¿ ”Å  ¿ ”á¿ ”ê  ¿ ”N¿ ”O ¿ ‘ªàV¿ ‘¡  ¿ ’Ä‘ ¿ ’¿ ’( ¿ ’/¿ ’>  ¿ ’T¿ ’c  ¿ ’r¿ ’Å  ¿ ’ì¿ ’¢  ¿ ’≥¿ ’¬  ¿ ’–¿ ’ﬂ   ¿ ’¿ ÷  ¿ ÷!¿ ÷$  ¿ ÷5¿ ÷H  ¿ ÷X*¿ ÷q  ¿ ÷Ü¿ ÷ë  ¿ ÷û¿ ÷©  ¿ ÷µJ¿ ÷ﬂ   ¿ ÷µ¿ ÷∂¿ ◊Éc¿ ◊  ¿ ◊$¿ ◊5  ¿ ◊¿ ◊¿ ⁄jÅf¿ ⁄à  ¿ ⁄õ¿ ⁄©  ¿ ⁄j¿ ⁄k¿ €‘Å;¿ €Â  ¿ €¯¿ ‹  ¿ ‹¿ ‹!  ¿ €‘¿ €’ ¿ ›É]¿ ›  ¿ ›@Ä• ¿ ›F¿ ›P ¿ ›W¿ ›f  ¿ ›z	¿ ›Ä  ¿ ›â
¿ ›è  ¿ ›ô
¿ ›ü  ¿ ›©¿ ›Ø  ¿ ›ƒ¿ ›”   ¿ ›È¿ ›Ù  ¿ ﬁ¿ ﬁ  ¿ ﬁ¿ ﬁ.  ¿ ﬁ7¿ ﬁE  ¿ ﬁN(¿ ﬁf  ¿ ﬁz¿ ﬁç   ¿ ﬁûÅ–¿ ﬁ±  ¿ ﬁ∑¿ ﬁ≈  ¿ ﬁû¿ ﬁü ¿ ‡róﬂ¿ ‰uÉ¸/// Defines the appearance of a Material Design text field.
///
/// [InputDecorator] displays the visual elements of a Material Design text
/// field around its input [child]. The visual elements themselves are defined
/// by an [InputDecoration] object and their layout and appearance depend
/// on the `baseStyle`, `textAlign`, `isFocused`, and `isEmpty` parameters.
///
/// [TextField] uses this widget to decorate its [EditableText] child.
///
/// [InputDecorator] can be used to create widgets that look and behave like a
/// [TextField] but support other kinds of input.
///
/// Requires one of its ancestors to be a [Material] widget. The [child] widget,
/// as well as the decorative widgets specified in [decoration], must have
/// non-negative baselines.
///
/// See also:
///
///  * [TextField], which uses an [InputDecorator] to display a border,
///    labels, and icons, around its [EditableText] child.
///  * [Decoration] and [DecoratedBox], for drawing arbitrary decorations
///    around other widgets. ¿ ‰üÅÀ ¿ Âf¿ ÂtÄ∂/// Creates a widget that displays a border, labels, and icons,
/// for a [TextField].
///
/// The [isFocused], [isHovering], [expands], and [isEmpty] arguments must not
/// be null.
¿ Â{	¿ ÂÇ  ¿ Âä¿ Âô  ¿ Â®¿ ÂÆ  ¿ Âº¿ Â¬  ¿ Â–¿ Â÷  ¿ ÂÏ¿ ÂÚ  ¿ Ê¿ Ê  ¿ Ê%¿ Ê+  ¿ Ê?¿ ÊE  ¿ ÊY
¿ Ê_  ¿ Â˝¿ Ê¿ Ê4¿ ÊN	¿ ÊnÄÂ¿ ÁIÄº/// The text and styles to use when decorating the child.
///
/// Null [InputDecoration] properties are initialized with the corresponding
/// values from [ThemeData.inputDecorationTheme]. ¿ ÁXÅü¿ ËÓÅt/// The style on which to base the label, hint, counter, and error styles
/// if the [decoration] does not provide explicit styles.
///
/// If null, [baseStyle] defaults to the `titleMedium` style from the
/// current [Theme], see [ThemeData.textTheme].
///
/// The [TextStyle.textBaseline] of the [baseStyle] is used to determine
/// the baseline used for text alignment. ¿ Ë¸_¿ ÈRB/// How the text in the decoration should be aligned horizontally. ¿ È`Ç˛¿ ÏMÇª/// {@template flutter.material.InputDecorator.textAlignVertical}
/// How the text should be aligned vertically.
///
/// Determines the alignment of the baseline within the available space of
/// the input (typically a TextField). For example, TextAlignVertical.top will
/// place the baseline such that the text, and any attached decoration like
/// prefix and suffix, is as close to the top of the input as possible without
/// overflowing. The heights of the prefix and suffix are similarly included
/// for other alignment values. If the height is greater than the height
/// available, then the prefix and suffix will be allowed to overflow first
/// before the text scrolls.
/// {@endtemplate} ¿ ÏcÅâ¿ Ì„Å\/// Whether the input field has focus.
///
/// Determines the position of the label text and the color and weight of the
/// border.
///
/// Defaults to false.
///
/// See also:
///
///  * [InputDecoration.hoverColor], which is also blended into the focus
///    color and fill color when the [isHovering] is true to produce the final
///    color. ¿ ÌÒÅ@¿ Ô'Å/// Whether the input field is being hovered over by a mouse pointer.
///
/// Determines the container fill color, which is a blend of
/// [InputDecoration.hoverColor] with [InputDecoration.fillColor] when
/// true, and [InputDecoration.fillColor] when not.
///
/// Defaults to false. ¿ Ô6Ç¿ Ò:Å‚/// If true, the height of the input field will be as large as possible.
///
/// If wrapped in a widget that constrains its child's height, like Expanded
/// or SizedBox, the input field will only be affected if [expands] is set to
/// true.
///
/// See [TextField.minLines] and [TextField.maxLines] for related ways to
/// affect the height of an input. When [expands] is true, both must be null
/// in order to avoid ambiguity in determining the height.
///
/// Defaults to false. ¿ ÒFÄª¿ Ò˙Äú/// Whether the input field is empty.
///
/// Determines the position of the label text and whether to display the hint
/// text.
///
/// Defaults to false. ¿ ÚÄå¿ Úçr/// The widget below this widget in the tree.
///
/// Typically an [EditableText], [DropdownButton], or [InkWell]. ¿ ÚóÅ¿ ÛUÄ¨/// Whether the label needs to get out of the way of the input, either by
/// floating or disappearing.
///
/// Will withdraw when not empty, or when focused while enabled.   ¿ ÛüJ¿ Û¡   ¿ Ûü¿ Û†¿ ÛÌÇK¿ ıêÅÇ/// The RenderBox that defines this decorator's "container". That's the
/// area which is filled if [InputDecoration.filled] is true. It's the area
/// adjacent to [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// [TextField] renders ink splashes within the container. ¿ ıú¿ ı™   ¿ ˆ<Ç¿ ˆM  ¿ ˆa&¿ ˆ~  ¿ ˆ<¿ ˆ= ¿ ¯S¿ Tß¿ ¯Y   
¿ ¯Æ7¿ ¯Õ  ¿ ¯È4¿ ˘  ¿ ˘!6¿ ˘@  ¿ ˘[4¿ ˘q ¿ ˘~¿ ˘ç¿ ˘é¿ ˘ìJ¿ ˘Ø ¿ ˘Ã¿ ˘⁄¿ ˘‹¿ ˘€¿ ˘·I¿ ˘˝ ¿ ˙¿ ˙'¿ ˙)¿ ˙(¿ ˙.J¿ ˙J ¿ ˙g¿ ˙u¿ ˙w¿ ˙v¿ ˙|\¿ ˙ñ ¿ ˙≠¿ ˙π¿ ˙◊¿ ˙∫¿ ˙‹\¿ ˙ˆ ¿ ˚¿ ˚¿ ˚7¿ ˚¿ ˇ˙%¿   
¿ #ÄÉ¿ 7    ¿ ™-¿ π    ¿ ⁄'¿ „    ¿O¿    ¿V?¿_    ¿ò#¿°    ¿æp¿«    ¿‹ÄŸ¿Â    ¿˘F¿    ¿ÖÅ¿ú    ¿ ˚=É.¿ ˚N   ¿ ˚=¿ ˚>¿ ˛or¿ ˛Ä   ¿ ˛o¿ ˛p¿ ˛ÂÄû¿ ˛ˆ   ¿ ˛Â¿ ˛Ê¿ ˇáo¿ ˇå    ¿2É∂¿C  ¿S¿c  ¿2¿3¿ÏÉ'¿Ú  ¿¿   ¿	Åï¿	  ¿	+¿	6  ¿	@¿	V   ¿
∞Å¿
∂  ¿
≈¿
–   ¿—ÅN¿◊  ¿Â¿  ¿˙¿   ¿#Åe¿)  ¿=¿H  ¿R¿h   ¿åÅe¿í  ¿¶¿±  ¿ª¿—   ¿ Ç ¿‘  ¿È¿Ù  ¿˛¿   ¿tÇ¿~  ¿í¿ù  ¿ß¿Ω   ¿yÉ?¿É  ¿ö¿•  ¿Ø¿≈   ¿ºÄ˙¿∆  ¿÷¿·  ¿Î¿   ¿∫Ä«¿ƒ  ¿”¿ﬁ  ¿Ë¿˛   ¿ëÑ°¿ù  ¿Ø¿∫  ¿ƒ¿⁄   ¿"6™¬¿"I  ¿"O¿"]  ¿"6¿"7 ¿L¸¿ €Æ¿Z)ç/// The border, labels, icons, and styles used to decorate a Material
/// Design text field.
///
/// The [TextField] and [InputDecorator] classes use [InputDecoration] objects
/// to describe their decoration. (In fact, this class is merely the
/// configuration of an [InputDecorator], which does all the heavy lifting.)
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` using an `InputDecorator`. The
/// TextField displays a "send message" icon to the left of the input area,
/// which is surrounded by a border an all sides. It displays the `hintText`
/// inside the input area to help the user understand what input is required. It
/// displays the `helperText` and `counterText` below the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a "collapsed" `TextField` using an
/// `InputDecorator`. The collapsed `TextField` surrounds the hint text and
/// input area with a border, but does not add padding around them.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to create a `TextField` with hint text, a red border
/// on all sides, and an error message. To display a red border and error
/// message, provide `errorText` to the [InputDecoration] constructor.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.2.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a round border and
/// additional text before and after the input area. It displays "Prefix" before
/// the input area, and "Suffix" after the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.3.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState`. The color defaults to gray, be blue while focused
/// and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState` through the use of `ThemeData`. The color defaults
/// to gray, be blue while focused and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.1.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a text input widget that uses an
///    [InputDecoration].
///  * [InputDecorator], which is a widget that draws an [InputDecoration]
///    around an input child widget.
///  * [Decoration] and [DecoratedBox], for drawing borders and backgrounds
///    around a child widget. ¿Z=àè ¿\[¿\jÇ/// Creates a bundle of the border, labels, icons, and styles used to
/// decorate a Material Design text field.
///
/// Unless specified by [ThemeData.inputDecorationTheme], [InputDecorator]
/// defaults [isDense] to false and [filled] to false. The default border is
/// an instance of [UnderlineInputBorder]. If [border] is [InputBorder.none]
/// then no border is drawn.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// Similarly, only one of [suffix] and [suffixText] can be specified.4¿\q	¿\w  ¿\Ä¿\Ü  ¿\î
¿\ö  ¿\§¿\™  ¿\∏¿\æ  ¿\Õ¿\”  ¿\Í¿\  ¿\ˇ¿]  ¿]¿]  ¿].¿]4  ¿]A¿]G  ¿]U¿][  ¿]q¿]w  ¿]à¿]é  ¿]£
¿]©  ¿]≥¿]π  ¿]«¿]Õ  ¿]‹¿]‚  ¿]Ù¿]˙  ¿^¿^  ¿^5¿^;  ¿^K¿^Q  ¿^]¿^c  ¿^v¿^|  ¿^ã¿^ë  ¿^´¿^±  ¿^º¿^¬  ¿^—¿^◊  ¿^Á¿^Ì  ¿_¿_  ¿_¿_  ¿_'¿_-  ¿_<¿_B  ¿_R¿_X  ¿_l¿_r  ¿_å¿_í  ¿_û¿_§  ¿_¥¿_∫  ¿_À¿_—  ¿_‹¿_‚  ¿_¿_ˆ  ¿`¿`  ¿`¿`   ¿`0¿`6  ¿`H¿`N  ¿`e¿`k  ¿`~¿`Ñ  ¿`ñ¿`ú  ¿`ß¿`≠  ¿`¿¿`∆  ¿`ﬁ¿`‰  ¿`˚¿a  =¿`∂¿a¿a¿a@¿ax¿a¿a¿a?¿a+¿a#¿a¿a&¿a8¿a.¿a;¿aB¿aÇ¿aà¿a∞¿aÍ¿aâ¿aä¿aØ¿aö¿aí¿aã¿aï¿a®¿aù¿a´¿a≤¿aÙ¿a˙¿b"¿b\¿a˚¿a¸¿b!¿b¿b¿a˝¿b¿b¿b¿b¿b$¿bf¿bl¿bí¿b ¿bm¿bn¿bë¿b}¿bu¿bo¿bx¿bä¿bÄ¿bç¿bî¿b–Üê¿c∂¿c∑¿c¿Ä∆/// Defines an [InputDecorator] that is the same size as the input field.
///
/// This type of input decoration does not include a border by default.
///
/// Sets the [isCollapsed] property to true.¿c«¿c÷  ¿c„¿cÈ  ¿d¿d	  ¿d$¿d*  ¿d8¿d>  ¿dT¿dZ  ¿dm¿ds  ¿dÅ¿dá  ¿dñ¿dú  ¿d´¿d±  ¿dœ¿d’  ÄÇ¿db¿dπ¿dƒ¿d≈¿dﬁ¿d¿dÎ¿dÚ¿e	¿dˇ¿e¿e¿e¿e ¿e7¿e-¿e9¿eQ¿eF¿eS¿es¿e`¿eu¿eç¿eÇ¿eè¿e®¿eú¿e™¿e∆¿e∑¿e»¿e‚¿e’¿e‰¿f¿eÒ¿f¿f¿f¿f¿f0¿f&¿f2¿fJ¿f?¿fL¿fg¿fY¿fi¿f~¿fv¿fÄ¿fù¿fé¿fü¿f©¿f™¿f√¿f∑¿f≈¿f›¿f“¿fﬂ¿fÛ¿fÏ¿fı¿g¿g¿g¿g(¿g¿g*¿gG¿g7¿gI¿gl¿gV¿gn¿gÇ¿g{¿gÑ¿gú¿gë¿gû¿g∂¿g´¿g∏¿g—¿g≈¿g”¿g¿g‡¿gÚ¿h¿gˇ¿h¿h,¿h$¿h.¿hG¿h;¿hI¿hc¿hV¿he¿h~¿hr¿hÄ¿hõ¿hç¿hù¿hΩ¿h™¿hø¿h€¿hÃ¿h›¿h¯¿hÍ¿h˙¿i¿i¿i¿i=¿i*¿i?¿iY¿iM¿i[4¿idÇ|¿k‹ÇK/// An icon to show before the input field and outside of the decoration's
/// container.
///
/// The size and color of the icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The trailing edge of the icon is padded by 16dps.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// See [Icon], [ImageIcon]. ¿kÂÄÏ¿l»ÄÀ/// The color of the [icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿l÷Ñf¿q7Ñ&/// Optional widget that describes the input field.
///
/// {@template flutter.material.inputDecoration.label}
/// When the input field is empty and unfocused, the label is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the input field). When the input field receives
/// focus (or if the field is non-empty), depending on [floatingLabelAlignment],
/// the label moves above, either vertically adjacent to, or to the center of
/// the input field.
/// {@endtemplate}
///
/// This can be used, for example, to add multiple [TextStyle]'s to a label that would
/// otherwise be specified using [labelText], which only takes one [TextStyle].
///
/// {@tool dartpad}
/// This example shows a `TextField` with a [Text.rich] widget as the [label].
/// The widget contains multiple [Text] widgets with different [TextStyle]'s.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label.0.dart **
/// {@end-tool}
///
/// Only one of [label] and [labelText] can be specified. ¿qAÅ¿rNÄÚ/// Optional text that describes the input field.
///
/// {@macro flutter.material.inputDecoration.label}
///
/// If a more elaborate label is required, consider using [label] instead.
/// Only one of [label] and [labelText] can be specified. ¿r\ÖO¿w°Ñ˘/// {@template flutter.material.inputDecoration.labelStyle}
/// The style to use for [InputDecoration.labelText] when the label is on top
/// of the input field.
///
/// If [labelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// When the [InputDecoration.labelText] is above (i.e., vertically adjacent to)
/// the input field, the text uses the [floatingLabelStyle] instead.
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [labelStyle] is specified with a [MaterialStateProperty]
/// which resolves to a text style whose color depends on the decorator's
/// error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿w∞Ö!¿|øÑ≈/// {@template flutter.material.inputDecoration.floatingLabelStyle}
/// The style to use for [InputDecoration.labelText] when the label is
/// above (i.e., vertically adjacent to) the input field.
///
/// When the [InputDecoration.labelText] is on top of the input field, the
/// text uses the [labelStyle] instead.
///
/// If [floatingLabelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to [labelStyle].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [floatingLabelStyle] is specified with a
/// [MaterialStateProperty] which resolves to a text style whose color depends
/// on the decorator's error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.floating_label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿|÷Å_¿~+Å:/// Text that provides context about the [InputDecorator.child]'s value, such
/// as how the value will be used.
///
/// If non-null, the text is displayed below the [InputDecorator.child], in
/// the same location as [errorText]. If a non-null [errorText] value is
/// specified then the helper text is not shown. ¿~:Å¿:Ä‰/// The style to use for the [helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿JÅ∫¿ÄˆÅä/// The maximum number of lines the [helperText] can occupy.
///
/// Defaults to null, which means that the [helperText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [errorText]. ¿Å	Åa¿ÇbÅ>/// Text that suggests what sort of input the field accepts.
///
/// Displayed on top of the [InputDecorator.child] (i.e., at the same location
/// on the screen where text may be entered in the [InputDecorator.child])
/// when the input [isEmpty] and either (a) [labelText] is null or (b) the
/// input has the focus. ¿ÇoÇY¿ÑøÇ&/// The style to use for the [hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [labelText] when the [labelText] is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the [InputDecorator.child]).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿ÑÕÄœ¿ÖãÄ†/// The direction to use for the [hintText].
///
/// If null, defaults to a value derived from [Directionality] for the
/// input field and the current context. ¿Ö°Å{¿áÅU/// The maximum number of lines the [hintText] can occupy.
///
/// Defaults to the value of [TextField.maxLines] attribute.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the hint text. [TextOverflow.ellipsis] is
/// used to handle the overflow when it is limited to single line. ¿á!Ä˚¿àÄ“/// The duration of the [hintText] fade in and fade out animations.
///
/// If null, defaults to [InputDecorationTheme.hintFadeDuration].
/// If [InputDecorationTheme.hintFadeDuration] is null defaults to 20ms. ¿à!Å¿â$ÄÍ/// Optional widget that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is not shown.
///
/// Only one of [error] and [errorText] can be specified. ¿â.Å‡¿ãÅ≤/// Text that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is
/// not shown.
///
/// In a [TextFormField], this is overridden by the value returned from
/// [TextFormField.validator], if that is not null.
///
/// If a more elaborate error is required, consider using [error] instead.
///
/// Only one of [error] and [errorText] can be specified. ¿ãÇ]¿çfÇ)/// {@template flutter.material.inputDecoration.errorStyle}
/// The style to use for the [InputDecoration.errorText].
///
/// If null, defaults of a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// By default the color of style will be used by the label of
/// [InputDecoration] if [InputDecoration.errorText] is not null. See
/// [InputDecoration.labelStyle] or [InputDecoration.floatingLabelStyle] for
/// an example of how to replicate this behavior when specifying those
/// styles.
/// {@endtemplate} ¿çuÅ∏¿è Åâ/// The maximum number of lines the [errorText] can occupy.
///
/// Defaults to null, which means that the [errorText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [helperText]. ¿è2Ék¿íàÉ/// {@template flutter.material.inputDecoration.floatingLabelBehavior}
/// Defines **how** the floating label should behave.
///
/// When [FloatingLabelBehavior.auto] the label will float to the top only when
/// the field is focused or has some text content, otherwise it will appear
/// in the field in place of the content.
///
/// When [FloatingLabelBehavior.always] the label will always float at the top
/// of the field above the content.
///
/// When [FloatingLabelBehavior.never] the label will always appear in an empty
/// field in place of the content.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelBehavior] will be used.
///
/// See also:
///
///  * [floatingLabelAlignment] which defines **where** the floating label
///    should be displayed. ¿í¢É¿ïõÇ∂/// {@template flutter.material.inputDecoration.floatingLabelAlignment}
/// Defines **where** the floating label should be displayed.
///
/// [FloatingLabelAlignment.start] aligns the floating label to the leftmost
/// (when [TextDirection.ltr]) or rightmost (when [TextDirection.rtl]),
/// possible position, which is vertically adjacent to the label, on top of
/// the field.
///
/// [FloatingLabelAlignment.center] aligns the floating label to the center on
/// top of the field.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelAlignment] will be used.
///
/// See also:
///
///  * [floatingLabelBehavior] which defines **how** the floating label should
///    behave. ¿ï∂Äõ¿ñJ/// Whether the [InputDecorator.child] is part of a dense form (i.e., uses less vertical
/// space).
///
/// Defaults to false. ¿ñVÑ¿ödÉÕ/// The padding for the input decoration's container.
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border].
///
/// If [isCollapsed] is true then [contentPadding] is [EdgeInsets.zero].
///
/// If `isOutline` property of [border] is false and if [filled] is true then
/// [contentPadding] is `EdgeInsets.fromLTRB(12, 8, 12, 8)` when [isDense]
/// is true and `EdgeInsets.fromLTRB(12, 12, 12, 12)` when [isDense] is false.
/// If `isOutline` property of [border] is false and if [filled] is false then
/// [contentPadding] is `EdgeInsets.fromLTRB(0, 8, 0, 8)` when [isDense] is
/// true and `EdgeInsets.fromLTRB(0, 12, 0, 12)` when [isDense] is false.
///
/// If `isOutline` property of [border] is true then [contentPadding] is
/// `EdgeInsets.fromLTRB(12, 20, 12, 12)` when [isDense] is true
/// and `EdgeInsets.fromLTRB(12, 24, 12, 16)` when [isDense] is false. ¿öwÅ¿õnÄ‡/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [labelText], [errorText], an [icon].
///
/// To create a collapsed input decoration, use [InputDecoration.collapsed]. ¿õ~áG¿¢ªÜ‹/// An icon that appears before the [prefix] or [prefixText] and before
/// the editable part of the text field, within the decoration's container.
///
/// The size and color of the prefix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The prefix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the left edge of the input and leading edge of the prefix
/// icon. The following snippet shows how to pad the leading edge of the
/// prefix icon:
///
/// ```dart
/// prefixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(start: 12.0),
///   child: _myIcon, // _myIcon is a 48px-wide widget.
/// )
/// ```
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// The prefix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the prefix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [prefix] and [prefixText], which are other ways to show content
///    before the text field (but after the icon).
///  * [suffixIcon], which is the same but on the trailing edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿¢ Éπ¿¶nÉc/// The constraints for the prefix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [prefixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [prefixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon_constraints.0.dart **
/// {@end-tool} ¿¶àÇ8¿®∫Ç/// Optional widget to place on the line before the input.
///
/// This can be used, for example, to add some padding to text that would
/// otherwise be specified using [prefixText], or to add a custom widget in
/// front of the input. The widget's baseline is lined up with the input
/// baseline.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefix] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffix], the equivalent but on the trailing edge. ¿®≈Ç7¿™ÚÇ/// Optional text prefix to place on the line before the input.
///
/// Uses the [prefixStyle]. Uses [hintStyle] if [prefixStyle] isn't specified.
/// The prefix text is not returned as part of the user's input.
///
/// If a more elaborate prefix is required, consider using [prefix] instead.
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefixText] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffixText], the equivalent but on the trailing edge. ¿´Åö¿¨êÅg/// The style to use for the [prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [suffixStyle], the equivalent but on the trailing edge. ¿¨†Å$¿≠µÄ˘/// Optional color of the prefixIcon
///
/// Defaults to [iconColor]
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿≠…áÚ¿µ±áÅ/// An icon that appears after the editable part of the text field and
/// after the [suffix] or [suffixText], within the decoration's container.
///
/// The size and color of the suffix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The suffix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the right edge of the input and trailing edge of the
/// prefix icon. The following snippet shows how to pad the trailing edge of
/// the suffix icon:
///
/// ```dart
/// suffixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(end: 12.0),
///   child: _myIcon, // myIcon is a 48px-wide widget.
/// )
/// ```
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// The suffix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the suffix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [suffix] and [suffixText], which are other ways to show content
///    after the text field (but before the icon).
///  * [prefixIcon], which is the same but on the leading edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿µ¿Ç/¿∑ÈÇ /// Optional widget to place on the line after the input.
///
/// This can be used, for example, to add some padding to the text that would
/// otherwise be specified using [suffixText], or to add a custom widget after
/// the input. The widget's baseline is lined up with the input baseline.
///
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffix] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefix], the equivalent but on the leading edge. ¿∑ÙÇ6¿∫ Ç/// Optional text suffix to place on the line after the input.
///
/// Uses the [suffixStyle]. Uses [hintStyle] if [suffixStyle] isn't specified.
/// The suffix text is not returned as part of the user's input.
///
/// If a more elaborate suffix is required, consider using [suffix] instead.
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffixText] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefixText], the equivalent but on the leading edge. ¿∫/Åô¿ªΩÅf/// The style to use for the [suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective text
/// style can depend on the [MaterialState.focused] state, i.e. if the
/// [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [prefixStyle], the equivalent but on the leading edge. ¿ªÕÅ'¿ºÂÄ¸/// Optional color of the [suffixIcon].
///
/// Defaults to [iconColor]
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿º˘Ñ¿¿¸Éº/// The constraints for the suffix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [suffixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// If null, a [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [suffixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon_constraints.0.dart **
/// {@end-tool} ¿¡Åè¿¬öÅc/// Optional text to place below the line as a character count.
///
/// Rendered using [counterStyle]. Uses [helperStyle] if [counterStyle] is
/// null.
///
/// The semantic label can be replaced by providing a [semanticCounterText].
///
/// If null or an empty string and [counter] isn't specified, then nothing
/// will appear in the counter's location. ¿¬™Äª¿√^Äü/// Optional custom counter widget to go in the place otherwise occupied by
/// [counterText]. If this property is non null, then [counterText] is
/// ignored. ¿√jÅB¿ƒ†Å/// The style to use for the [counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿ƒ±Çß¿«RÇx/// If true the decoration's container is filled with [fillColor].
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// Typically this field set to true if [border] is an [UnderlineInputBorder].
///
/// {@template flutter.material.input_decorator.container_description}
/// The decoration's container is the area which is filled if [filled] is true
/// and bordered per the [border]. It's the area adjacent to [icon] and above
/// the widgets that contain [helperText], [errorText], and [counterText].
/// {@endtemplate}
///
/// This property is false by default. ¿«]ÅÄ¿»‘ÅW/// The base fill color of the decoration's container color.
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// By default the [fillColor] is based on the current
/// [InputDecorationTheme.fillColor].
///
/// {@macro flutter.material.input_decorator.container_description} ¿»‚Ç6¿ÀÇ/// The fill color of the decoration's container when it has the input focus.
///
/// By default the [focusColor] is based on the current
/// [InputDecorationTheme.focusColor].
///
/// This [focusColor] is ignored by [TextField] and [TextFormField] because
/// they don't respond to focus changes by changing their decorator's
/// container color, they respond by changing their border to the
/// [focusedBorder], which you can change the color of.
///
/// {@macro flutter.material.input_decorator.container_description} ¿ÀÇ!¿Õ4ÅÒ/// The color of the highlight for the decoration shown if the container
/// is being hovered over by a mouse.
///
/// If [filled] is true, the [hoverColor] is blended with [fillColor] and
/// fills the decoration's container.
///
/// If [filled] is false, and [InputDecorator.isFocused] is false, the color
/// is blended over the [enabledBorder]'s color.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// {@macro flutter.material.input_decorator.container_description} ¿ÕCÖ¿“TÑ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿“dÖ¿◊rÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿◊ÑÖ¿‹ÖÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿‹úÖ¿·îÑ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿·ßÖ¿Ê†Ñª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿Ê≤à+¿Ó◊á…/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// If [border] derives from [InputBorder] the border's [InputBorder.borderSide],
/// i.e. the border's color and width, will be overridden to reflect the input
/// decorator's state. Only the border's shape is used. If custom  [BorderSide]
/// values are desired for a given state, all four borders ‚Äì [errorBorder],
/// [focusedBorder], [enabledBorder], [disabledBorder] ‚Äì must be set.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿Ó‚Ä—¿Ô¨Ä∂/// If false [helperText],[errorText], and [counterText] are not displayed,
/// and the opacity of the remaining visual elements is reduced.
///
/// This property is true by default. ¿Ô∏ÄΩ¿bÄë/// A semantic label for the [counterText].
///
/// Defaults to null.
///
/// If provided, this replaces the semantic label of the [counterText]. ¿zÅ!¿ÒâÄ¯/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField].
///
/// Defaults to false. ¿Ò†Çô¿Ù.Ç_/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the ambient [ThemeData.inputDecorationTheme]'s
/// [InputDecorationTheme.constraints] will be used. If that
/// is null then the decorator will fill the available width with
/// a default height based on text size. ¿˜Ñu¿   ¿˜¿¯¿Ù>ë@¿Ù¥a/// Creates a copy of this input decoration with the given fields replaced
/// by the new values. 4¿Ù√¿ÙÃ  ¿Ù’¿Ù›  ¿ÙÎ¿ÙÙ  ¿Ù˛¿ı  ¿ı¿ı!  ¿ı0¿ı<  ¿ıS¿ı\  ¿ık¿ıw  ¿ıá¿ıç  ¿ı†¿ı©  ¿ı∂¿ı¬  ¿ı– ¿ı‡  ¿ıˆ¿ˆ  ¿ˆ¿ˆ  ¿ˆ-¿ˆ6  ¿ˆ@¿ˆI  ¿ˆW¿ˆc  ¿ˆr¿ˆx  ¿ˆä,¿ˆ¢  ¿ˆº.¿ˆ’  ¿ˆ¿ˆ˜  ¿˜¿˜  ¿˜"¿˜/  ¿˜B¿˜K  ¿˜Z¿˜c  ¿˜n¿˜w  ¿˜Ü%¿˜ó  ¿˜±¿˜Ω  ¿˜Õ¿˜’  ¿˜È¿˜Ú  ¿¯¿¯
  ¿¯¿¯  ¿¯-¿¯9  ¿¯I¿¯Q  ¿¯e%¿¯v  ¿¯ê¿¯ô  ¿¯•¿¯Æ  ¿¯æ¿¯   ¿¯€¿¯‚  ¿¯Ì¿¯ı  ¿˘¿˘  ¿˘¿˘"  ¿˘1¿˘?  ¿˘O¿˘]  ¿˘o¿˘}  ¿˘î¿˘¢  ¿˘µ¿˘√  ¿˘’¿˘„  ¿˘Ó¿˘ı  ¿˙¿˙
  ¿˙"¿˙)  ¿˙@¿˙Q   ¿Çàe¿£Å/// Used by widgets like [TextField] and [InputDecorator] to create a new
/// [InputDecoration] with default values taken from the [theme].
///
/// Only null valued properties from this [InputDecoration] are replaced
/// by the corresponding values from [theme]. ¿±¿«   ¿Îä¿  ¿¿  ¿Î¿Ï¿på8¿É   ¿p¿q¿Z¿Z¿(¨¿ xπ¿*rÅ¥/// Defines the default appearance of [InputDecorator]s.
///
/// This class is used to define the value of [ThemeData.inputDecorationTheme].
/// The [InputDecorator], [TextField], and [TextFormField] widgets use
/// the current input decoration theme to initialize null [InputDecoration]
/// properties.
///
/// The [InputDecoration.applyDefaults] method is used to combine a input
/// decoration theme with an [InputDecoration] object. ¿*üÑ ¿+¿+,n/// Creates a value for [ThemeData.inputDecorationTheme] that
/// defines default values for [InputDecorator].!¿+3¿+9  ¿+H¿+N  ¿+e¿+k  ¿+{¿+Å  ¿+î¿+ö  ¿+®¿+Æ  ¿+√¿+…  ¿+ÿ¿+ﬁ  ¿+7¿+ˆ  ¿,-:¿,3  ¿,m¿,s  ¿,á¿,ç  ¿,†¿,¶  ¿,æ¿,ƒ  ¿,“¿,ÿ  ¿,Ë¿,Ó  ¿-¿-  ¿-¿-  ¿-2¿-8  ¿-I¿-O  ¿-b¿-h  ¿-v¿-|  ¿-ñ¿-ú  ¿-Æ¿-¥  ¿-√¿-…  ¿-ÿ¿-ﬁ  ¿-Ó¿-Ù  ¿.¿.  ¿.#¿.)  ¿.<¿.B  ¿.T¿.Z  ¿.e¿.k  ¿.ä¿.ê  
¿,¿,"¿,#¿,K¿,a¿,b¿,|¿,≥¿-W¿.!¿.•V¿.Ò8/// {@macro flutter.material.inputDecoration.labelStyle} ¿/ f¿/T@/// {@macro flutter.material.inputDecoration.floatingLabelStyle} ¿/kÅ¿0wÄ/// The style to use for [InputDecoration.helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿0áÅÍ¿2cÅ∫/// The maximum number of lines the [InputDecoration.helperText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.helperText] will
/// be limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [InputDecoration.errorText]. ¿2vÇÑ¿4ÒÇO/// The style to use for the [InputDecoration.hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [InputDecoration.labelText] when the
/// [InputDecoration.labelText] is displayed on top of the input field (i.e.,
/// at the same location on the screen where text may be entered in the input
/// field).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿4ˇv¿5eS/// The duration of the [InputDecoration.hintText] fade in and fade out animations. ¿5zV¿5∆8/// {@macro flutter.material.inputDecoration.errorStyle} ¿5’ÅË¿7∞Åπ/// The maximum number of lines the [InputDecoration.errorText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.errorText] will be
/// limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [InputDecoration.helperText]. ¿7¬Ä≠¿8Zu/// {@macro flutter.material.inputDecoration.floatingLabelBehavior}
///
/// Defaults to [FloatingLabelBehavior.auto]. ¿8tÄ≤¿9x/// {@macro flutter.material.inputDecoration.floatingLabelAlignment}
///
/// Defaults to [FloatingLabelAlignment.start]. ¿9+Äõ¿9øÄÄ/// Whether the input decorator's child is part of a dense form (i.e., uses
/// less vertical space).
///
/// Defaults to false. ¿9ÀÇâ¿<FÇH/// The padding for the input decoration's container.
///
/// The decoration's container is the area which is filled if
/// [InputDecoration.filled] is true and bordered per the [border].
/// It's the area adjacent to [InputDecoration.icon] and above the
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border]. If [isCollapsed] is true then [contentPadding] is
/// [EdgeInsets.zero]. ¿<YÄÂ¿=3Ä∆/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [InputDecoration.labelText],
/// [InputDecoration.errorText], or an [InputDecoration.icon]. ¿=CÅ@¿>zÅ/// The Color to use for the [InputDecoration.icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿>àÅM¿? Å"/// The style to use for the [InputDecoration.prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿?⁄ÅR¿AÅ'/// The Color to use for the [InputDecoration.prefixIcon].
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿A1ÅH¿BnÅ/// The style to use for the [InputDecoration.suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿B~ÅR¿C¡Å'/// The Color to use for the [InputDecoration.suffixIcon].
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿C’ÅR¿EÅ&/// The style to use for the [InputDecoration.counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿E,Åô¿FøÅs/// If true the decoration's container is filled with [fillColor].
///
/// Typically this field set to true if [border] is an
/// [UnderlineInputBorder].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// This property is false by default. ¿F Åa¿H"Å</// The color to fill the decoration's container with, if [filled] is true.
///
/// By default the fillColor is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿H0i¿HåG/// The borderSide of the OutlineInputBorder with `color` and `weight`. ¿Hûs¿H¸I/// The borderSide of the UnderlineInputBorder with `color` and `weight`. ¿IÅô¿J•Åq/// The color to blend with the decoration's [fillColor] with, if [filled] is
/// true and the container has the input focus.
///
/// By default the [focusColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿J¥Å¿LöÅƒ/// The color to blend with the decoration's [fillColor] with, if the
/// decoration is being hovered over by a mouse pointer.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// The container will be filled when hovered over even if [filled] is false. ¿L©Ö¿Q∫Ñ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿Q Ö¿VÿÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿VÍÖ¿[ÎÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿\Ö¿`˙Ñ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿aÖ¿fÑª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿fÜò¿l™Ü>/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿lµÅ¿m§Ä›/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField]. ¿mªÇú¿pLÇ\/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the decorator will fill the available width with
/// a default height based on text size.
///
/// See also:
///
///  * [InputDecoration.constraints], which can override this setting for a
///    given decorator. ¿ÜØÇ—¿Ü√   ¿ÜØ¿Ü∞¿p\ã⁄¿p”]/// Creates a copy of this object but with the given fields replaced with the
/// new values. !¿p‚¿pÓ  ¿p˝¿q	  ¿q ¿q,  ¿q<¿qB  ¿qU¿qa  ¿qo¿qz  ¿qè¿qõ  ¿q™¿q∞  ¿q¬,¿q⁄  ¿qÙ.¿r  ¿r(¿r/  ¿r;"¿rP  ¿rc¿rj  ¿rz¿rÇ  ¿rê¿rú  ¿r¨¿r¥  ¿r»¿r‘  ¿r‰¿rÏ  ¿s ¿s  ¿s¿s$  ¿s/¿s7  ¿sE!¿sR  ¿sl¿sy  ¿sã¿sì  ¿s¢¿s™  ¿sπ¿s«  ¿s◊¿sÂ  ¿s˜¿t  ¿t¿t*  ¿t=¿tK  ¿t]¿tk  ¿tv¿t}  ¿tî¿t•   ¿|:äq¿~sÇ/// Returns a copy of this InputDecorationTheme where the non-null fields in
/// the given InputDecorationTheme override the corresponding nullable fields
/// in this InputDecorationTheme.
///
/// The non-nullable fields of InputDecorationTheme, such as [floatingLabelBehavior],
/// [isDense], [isCollapsed], [filled], and [alignLabelWithHint] cannot be overridden.
///
/// In other words, the fields of the provided [InputDecorationTheme] are used to
/// fill in the unspecified and nullable fields of this InputDecorationTheme. ¿~y*¿~ê   ¿âÑá/¿âû  ¿â°¿â©  ¿âÑ¿âÖ¿ê∑ê¨¿ê»  ¿ê‹&¿ê˘  ¿ê∑¿ê∏¿*a¿*b¿°gêÂ¿°m  ¿°®> ¿°Æ¿°« ¿°»¿°Œ  ¿°ﬁ¿°„¿°‰¿°Í¿°˝  	¿¢	Å!¿¢$   ¿¢	¿¢
¿£.Å"¿£I   ¿£.¿£/¿§TÇ"¿§o   ¿§T¿§U¿¶zÅ}¿¶ï   ¿¶z¿¶{¿ß˚ÅÉ¿®   ¿ß˚¿ß¸¿©ÇÇâ¿©ô   ¿©Ç¿©É¿¨Ç¿¨&   ¿¨¿¨¿Æ Ç¿Æ7   ¿Æ ¿Æ!¿∞7Ç¿∞N   ¿∞7¿∞8  ¿≥gñM¿≥m  ¿≥©6 ¿≥©¿≥¬ ¿≥√¿≥…  ¿≥◊¿≥‹¿≥›¿≥„¿≥ˆ  ¿¥>¿¥ ¿¥#¿¥(¿¥)¿¥+¿¥3¿¥,¿¥4¿¥5¿¥D=¿¥Y ¿¥f¿¥k¿¥l¿¥n¿¥v¿¥o¿¥w¿¥x¿¥ÜÅ!¿¥°   ¿¥Ü¿¥á¿µ´ÄÙ¿µ¬   ¿µ´¿µ¨¿∂£Éj¿∂ø   ¿∂£¿∂§¿∫ÉW¿∫-   ¿∫¿∫¿Ωl=¿ΩÉ   ¿Ωl¿Ωm¿Ω≠Äë¿Ωƒ   ¿Ω≠¿ΩÆ¿æBÅN¿æY   ¿æB¿æC¿øîÉÕ¿øØ   ¿øî¿øï¿√eÉ’¿√Ä   ¿√e¿√f¿«>ÅÅ¿«Y   ¿«>¿«?¿»√ÄÔ¿»ﬁ   ¿»√¿»ƒ   µ¥Ç:∂ˆÅ</// Defines **how** the floating label should behave.
///
/// See also:
///
///  * [InputDecoration.floatingLabelBehavior] which defines the behavior for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelAlignment] which defines **where** the floating label
///    should displayed.  ∑N∑YF/// The label will always be positioned within the content, or hidden. ∑bJ∑®C/// The label will float when the input is focused, or has content. ∑∞;∑Â2/// The label will always float above the content.    æÜÄëæã   æüæü  æßæß  æ∞æ∞  æπæπ  æ¡æ¡  æÀæÀ  æ’
æ’  æ„
æ„  æÒæÒ  ø ø   ø	ø            ÉoAÉ~ ÉïÉùÉØÉ™ÉûÉ¨É≤4Éæ É“ÉÿÉŸÉË%Éı Ñ	Ñ˝HÖ Ö+Ö3ÖDÖ@Ö4ÖB  í∂ <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑJÑMÑèÑ◊Ñ˝ÖGÖHÖåÖ´Ö⁄ÖÏÜÜ(ÜCÜYÜrÜxÜ|Ü}ÜïÜµÜ“ÜÓááá$á(á)á5áñáπá€áÓáÙà à4à:à^à~à°à•à¶à≤ââEâFâRâÅâÉâÑâµâÍäää&äwäyäzäÀä˝ãã6ãYãsãìã™ãÀãËå
å-åMåNåyåõå√å‡çççBçlçmç—ç“çﬁééMé}éÆé‘éÎè7èGèlèîèùè£è§èªè…è€èˆêê<ê`êgêkêlêxêØêËëëRëyëöë–ë‘ë’ë·íííí_í™íÛììCì^ìxìèìØìÃìÍîîîî+îHîpîâî£îºîΩî…ïïïïjï∞ï±ïŸññ6ñXñÇñ¶ñßñ≥ñ»ñﬂóó1ó]ópówóûóƒó◊óﬁòò!òAòpòwòòò¥òŒò’ò¸ô!ô=ôDôöôûôüô´ôæôŸô˛öööö$öYöö¨öœöõõõ'õ=õRõXõçõÂõÎú ú?úhúwú†ú®úÆú≤ú≥úøúÊú˛ù,ù\ùxùéùØùªùÊùˇû*ûCûvûõû∆ûÔû¯ûˇüüüüBügüéü†ü ü⁄üˇ† †††^†_†y†ú†¬†◊†ı°°5°B°m°s°w°x°Ñ°´°¡¢¢¢¢"¢$¢%¢g¢¶¢ÿ£££/£D£Z£s£É£ó£¨£ƒ£ £À£È§§%§B§Y§t§ì§Ø§∞§º§ˆ§¯§˘•S•õ•‘¶¶¶.¶A¶S¶T¶û¶ü¶´¶¿¶◊¶˛ß$ß7ß>ßSßqßêßºß‹ß‚®®®®®2®M®b®f®g®Ä®í®¿®»®Ã®Õ®Ÿ©©$©%©P©É©∏©‡™™B™C™ê™È´]´^´Æ´‰¨¨#¨M¨o¨é¨ù¨º¨ƒ¨ ¨Œ¨œ¨È≠≠&≠=≠Z≠•≠∫≠ÿ≠˝Æ$ÆOÆzÆÖÆéÆïÆôÆöÆ≥ÆÒØØØ;ØYØØ•Ø“Ø∞∞?∞^∞Ñ∞≠∞⁄±±±±'±.±2±3±?±f±â±û±≈±Ó±˝≤≤+≤3≤9≤:≤]≤s≤ä≤±≤¿≤◊≤Ì≤ı≤˚≤¸≥$≥@≥F≥G≥~≥õ≥°≥¢≥∑≥À≥Á¥¥P¥l¥y¥í¥ù¥¶¥¨¥≠¥“¥Êµµµ6µXµsµÄµãµîµöµõµ≠µ±µ≥µ¥µÍµÓµ¸∂ ∂N∂ç∂ÿ∂Ò∑∑W∑`∑¶∑Æ∑„∑Ì∑Ô∑∏7∏M∏Q∏_∏c∏≥∏ÚπAπPπ[πzπ«π»∫∫∫∫d∫j∫µ∫ªªªUªõªÈªÍªˆººº&ºIºkº~ºÑº∞ºƒº ºıΩΩΩΩ@ΩUΩÇΩàΩúΩ Ω–ææææ"æIæKæLæÜæùæ•æÆæ∑æøæ…æ”æ·æÔæ˛ø	øøøøTø_øsøâø´ø øÒ¿ @¿ @D¿ @^¿ @{¿ @°¿ @º¿ @›¿ @Ï¿ @¸¿ A¿ A¿ A,¿ A=¿ AR¿ Ag¿ A}¿ Aè¿ A£¿ A©¿ A™¿ A’¿ AÔ¿ B¿ B9¿ Bp¿ Bå¿ BØ¿ B–¿ BÁ¿ C¿ C"¿ C9¿ CP¿ Cf¿ C~¿ Cñ¿ C≤¿ CŒ¿ CÎ¿ D¿ D¿ D ¿ D,¿ DO¿ Dq¿ DÑ¿ Dä¿ D∂¿ D ¿ D–¿ D¿ E"¿ EN¿ Eä¿ E ¿ F¿ F.¿ FV¿ Fê¿ F¥¿ F‰¿ G¿ G"¿ GB¿ G`¿ GÇ¿ G§¿ GŒ¿ G¯¿ H$¿ HH¿ Hq¿ Hu¿ Hv¿ HÇ¿ H•¿ Hπ¿ H“¿ HÌ¿ I	¿ I¿ I$¿ I<¿ II¿ I\¿ If¿ Iq¿ I|¿ IÜ¿ Ií¿ Iû¿ IÆ¿ Iæ¿ Iœ¿ I‹¿ IÎ¿ I¿ IÚ¿ IÛ¿ J?¿ Já¿ Jø¿ Jﬂ¿ K¿ K"¿ Kd¿ K¶¿ K…¿ KÏ¿ L¿ L¿ L¿ LC¿ La¿ LÅ¿ Lπ¿ LŸ¿ L˜¿ L˘¿ L˙¿ M@¿ MØ¿ M≈¿ MÍ¿ N¿ N<¿ NY¿ Nt¿ Në¿ Nª¿ N‹¿ O¿ O(¿ OW¿ Ov¿ Oë¿ O∞¿ O±¿ OŸ¿ O⁄¿ P¿ PV¿ Pï¿ P“¿ Q¿ QT¿ Qù¿ QÊ¿ R1¿ Rt¿ Rª¿ Rº¿ RÔ¿ R˚¿ S ¿ S8¿ SP¿ S_¿ Sx¿ Sà¿ S¶¿ Sª¿ SŸ¿ SÓ¿ T¿ T¿ T3¿ TD¿ T]¿ Tm¿ TÖ¿ Tî¿ T≥¿ T…¿ T‰¿ Tˆ¿ U¿ U'¿ U.¿ U2¿ U3¿ U`¿ U{¿ U°¿ U¡¿ Uœ¿ U’¿ UÓ¿ V¿ V	¿ V
¿ V?¿ V_¿ Vä¿ V≠¿ Vª¿ V¡¿ V›¿ VÙ¿ V¯¿ V˘¿ W+¿ WI¿ Wr¿ Wî¿ W¢¿ W®¿ W√¿ W⁄¿ Wﬁ¿ Wﬂ¿ X&¿ XG¿ Xf¿ Xƒ¿ XÌ¿ Y!¿ YH¿ YV¿ Y\¿ Y°¿ YÌ¿ Z¿ Z¿ Z#¿ ZC¿ ZZ¿ Z^¿ Z_¿ ZÉ¿ Zñ¿ Z¥¿ Z”¿ Z·¿ ZÁ¿ Zˇ¿ [¿ [#¿ [$¿ [D¿ []¿ [y¿ [ñ¿ [§¿ [™¿ [¿¿ [◊¿ [€¿ [‹¿ \ ¿ \¿ \9¿ \X¿ \f¿ \l¿ \Ñ¿ \õ¿ \ü¿ \†¿ \Ô¿ \¸¿ ]¿ ]^¿ ]b¿ ]c¿ ]o¿ ]Ø¿ ]«¿ ]›¿ ]„¿ ]˝¿ ^¿ ^¿ ^9¿ ^U¿ ^[¿ ^\¿ ^u¿ ^å¿ ^í¿ ^™¿ ^¡¿ ^Ÿ¿ ^˚¿ _¿ _¿ _!¿ _"¿ _;¿ _R¿ _X¿ _v¿ _í¿ _ò¿ _≤¿ _ ¿ _–¿ _Ì¿ `¿ `¿ `-¿ `J¿ `P¿ `k¿ `Ñ¿ `ä¿ `é¿ `è¿ `õ¿ `æ¿ `ø¿ `˙¿ a;¿ a?¿ a@¿ a{¿ aº¿ a¿¿ a¡¿ a¸¿ b=¿ bA¿ bB¿ bê¿ bë¿ bÎ¿ bÏ¿ c8¿ c9¿ cx¿ cæ¿ c’¿ cÁ¿ cÌ¿ d ¿ dr¿ d√¿ e¿ e_¿ e∞¿ e…¿ f¿ f¿ f+¿ fF¿ f[¿ fc¿ fô¿ f¯¿ g¿ g\¿ gã¿ gñ¿ g†¿ g™¿ gø¿ g√¿ gƒ¿ h¿ h_¿ h£¿ hÈ¿ hı¿ i)¿ iw¿ iö¿ iÁ¿ j6¿ jÑ¿ jÕ¿ jÚ¿ j˘¿ j˙¿ k:¿ kÑ¿ k ¿ kÀ¿ l ¿ l@¿ lâ¿ l…¿ l–¿ m"¿ mt¿ m¡¿ n¿ n"¿ nj¿ n≤¿ n≥¿ n€¿ nÊ¿ o¿ o"¿ oô¿ oæ¿ oﬂ¿ p ¿ p%¿ pû¿ p•¿ pÔ¿ qa¿ qö¿ q¡¿ r¿ r$¿ rL¿ rW¿ rv¿ rì¿ r±¿ r÷¿ r¿ s¿ s¿ sC¿ sP¿ sö¿ s°¿ sÀ¿ s◊¿ t"¿ t)¿ ts¿ tt¿ tΩ¿ tÊ¿ u¿ u*¿ uM¿ u•¿ uÆ¿ uµ¿ u∂¿ v¿ v1¿ v^¿ vh¿ vê¿ v…¿ w¿ w¿ wH¿ wR¿ wÄ¿ wΩ¿ wÊ¿ x¿ x(¿ xW¿ xÅ¿ xñ¿ xØ¿ x∂¿ y¿ y/¿ y<¿ yj¿ yÆ¿ y˚¿ z¿ z,¿ zJ¿ zS¿ zZ¿ z[¿ zù¿ z”¿ {¿ {Y¿ {å¿ {©¿ {≈¿ {Ã¿ {Õ¿ |¿ |-¿ |g¿ |°¿ |»¿ |Ê¿ }¿ }¿ }\¿ }ä¿ }∑¿ }‰¿ }Î¿ ~7¿ ~]¿ ~î¿ ~ø¿ ~»¿ ¿ ¿ ¿ I¿ ã¿ Õ¿ Ä¿ ÄG¿ Ä\¿ Äl¿ Äá¿ Äù¿ Ä±¿ Ä«¿ ÄÂ¿ Äˇ¿ Å¿ Åe¿ Åq¿ Åì¿ ÅÒ¿ Ç¿ Ç7¿ Çä¿ Çã¿ Ç◊¿ É¿ ÉQ¿ ÉÑ¿ Éë¿ Éí¿ É·¿ Ñ2¿ Ñ{¿ Ñ»¿ Ö¿ ÖN¿ Öú¿ ÖÌ¿ Ü<¿ Üg¿ Ü«¿ Ü»¿ á¿ áM¿ á_¿ á}¿ áò¿ á∂¿ á÷¿ àD¿ àî¿ à›¿ â5¿ âÇ¿ âÉ¿ â‘¿ â€¿ ä¿ äb¿ äõ¿ äŸ¿ ä‡¿ ã)¿ ãv¿ ãµ¿ ãÙ¿ å¿ åL¿ åÑ¿ å”¿ ç	¿ ç#¿ ç@¿ ç]¿ çv¿ ç}¿ ç~¿ çƒ¿ çÎ¿ é¿ é6¿ éZ¿ éu¿ éî¿ é‘¿ è¿ è¿ è7¿ èU¿ èô¿ è»¿ èŒ¿ è˚¿ ê¿ ê6¿ ê=¿ êh¿ êÑ¿ êü¿ ê¶¿ êß¿ êÀ¿ êÔ¿ ë¿ ë;¿ ëc¿ ëã¿ ëØ¿ ë∂¿ ë∫¿ ëª¿ í	¿ íZ¿ í©¿ íÛ¿ ìC¿ ìî¿ ì¢¿ î¿ î1¿ îÅ¿ î∆¿ î„¿ î˙¿ ï¿ ïS¿ ïd¿ ïî¿ ïø¿ ï≈¿ ï∆¿ ïﬂ¿ ïÙ¿ ï˙¿ ñK¿ ñW¿ ñÅ¿ ñ©¿ ñ≠¿ ñÆ¿ ñ∫¿ ñÌ¿ ó¿ ó,¿ óR¿ ót¿ ó∏¿ ó⁄¿ ò ¿ ò¿ ò"¿ ò#¿ ò/¿ òb¿ òÖ¿ ò°¿ ò«¿ òÈ¿ ô-¿ ôO¿ ôu¿ ôì¿ ôó¿ ôò¿ ô’¿ ôÓ¿ ö¿ ö1¿ öC¿ öK¿ öÑ¿ öä¿ öù¿ öÍ¿ õ¿ õV¿ õZ¿ õ[¿ õg¿ õö¿ õ—¿ ú¿ ú¿ ú:¿ ú;¿ ú~¿ ú ¿ úÀ¿ ù¿ ùZ¿ ù[¿ ùô¿ ùö¿ ù◊¿ û¿ û¿ ûm¿ û∆¿ ü¿ ü,¿ üO¿ üU¿ üV¿ üë¿ ü—¿ ü“¿ †¿ †M¿ †N¿ †À¿ °'¿ °ç¿ °é¿ °‹¿ ¢¿ ¢O¿ ¢f¿ ¢Ñ¿ ¢û¿ £¿ £`¿ £l¿ £é¿ £ÿ¿ £‹¿ £›¿ £È¿ §¿ §I¿ §M¿ §N¿ §Z¿ §ú¿ •¿ •	¿ •
¿ •4¿ •P¿ •Q¿ •]¿ •ì¿ •ª¿ ¶¿ ¶$¿ ¶:¿ ¶>¿ ¶?¿ ¶∂¿ ß!¿ ßU¿ ßâ¿ ßŒ¿ ®#¿ ®\¿ ®á¿ ®„¿ ©¿ ©G¿ ©V¿ ©Ç¿ ©ä¿ ©ê¿ ©¥¿ ©Ì¿ ©Û¿ ™¿ ™P¿ ™V¿ ™r¿ ™v¿ ™w¿ ™É¿ ™ ¿ ´¿ ´¿ ´¿ ´*¿ ´C¿ ´|¿ ´ò¿ ´Ÿ¿ ´⁄¿ ¨¿ ¨`¿ ¨a¿ ¨í¿ ¨Ø¿ ¨˙¿ ≠"¿ ≠V¿ ≠_¿ ≠£¿ ≠π¿ ≠ÿ¿ ≠¯¿ Æ¿ Æ+¿ ÆO¿ ÆX¿ Æë¿ Æó¿ Æò¿ Æ∞¿ Æ„¿ Ø3¿ ØP¿ ØV¿ ØW¿ Øq¿ Ø¶¿ Ø˚¿ ∞¿ ∞¿ ∞¿ ∞L¿ ∞ä¿ ∞ã¿ ∞∞¿ ±¿ ±¿ ±¿ ±1¿ ±P¿ ±p¿ ±ü¿ ±ø¿ ±“¿ ±€¿ ±˘¿ ±ˇ¿ ≤ ¿ ≤¿ ≤=¿ ≤r¿ ≤ç¿ ≤Ø¿ ≤ÿ¿ ≥&¿ ≥0¿ ≥M¿ ≥|¿ ≥ª¿ ≥Œ¿ ¥¿ ¥¿ ¥!¿ ¥?¿ ¥á¿ ¥ë¿ ¥Æ¿ ¥Î¿ ¥ı¿ µ¿ µL¿ µV¿ µx¿ µû¿ µœ¿ µŸ¿ µ˜¿ ∂&¿ ∂0¿ ∂?¿ ∂G¿ ∂g¿ ∂õ¿ ∂∑¿ ∂Ÿ¿ ∑¿ ∑6¿ ∑@¿ ∑]¿ ∑å¿ ∑∑¿ ∑ ¿ ∑Û¿ ∑ˇ¿ ∏	¿ ∏'¿ ∏Z¿ ∏d¿ ∏Å¿ ∏™¿ ∏¥¿ ∏–¿ ∏¯¿ π¿ π$¿ πK¿ πï¿ πü¿ πΩ¿ ∫¿ ∫¿ ∫¿ ∫"¿ ∫(¿ ∫)¿ ∫[¿ ∫Ä¿ ∫©¿ ∫™¿ ∫…¿ ∫È¿ ª¿ ªp¿ ª|¿ ªù¿ ª…¿ ª’¿ ªı¿ º¿ ºa¿ ºm¿ ºé¿ º—¿ º›¿ ºÂ¿ ºÎ¿ ºÏ¿ Ω¿ ΩC¿ ΩÖ¿ Ωœ¿ æ¿ æY¿ æò¿ æ∑¿ æ◊¿ ø¿ øH¿ øú¿ ø®¿ ¿¿ ¿O¿ ¿h¿ ¿i¿ ¿â¿ ¿⁄¿ ¡+¿ ¡¿ ¡™¿ ¡¿ ¬G¿ ¬S¿ ¬π¿ ¬˘¿ √¿ √¿ √e¿ √r¿ √õ¿ √ƒ¿ √ ¿ √À¿ ƒ¿ ƒT¿ ƒõ¿ ƒü¿ ƒ†¿ ƒ›¿ ≈¿ ≈	¿ ≈
¿ ≈¿ ≈M¿ ≈r¿ ≈ç¿ ≈◊¿ ≈ﬂ¿ ≈Â¿ ≈˝¿ ≈˛¿ ∆¿ ∆W¿ ∆ê¿ ∆«¿ «	¿ «S¿ «ì¿ «Ÿ¿ »¿ »]¿ »Ö¿ »≈¿ …¿ …P¿ …’¿  ¿  c¿  °¿  º¿  ÷¿  ı¿ À/¿ Ào¿ Àè¿ ÀË¿ ÃG¿ ÃS¿ Ãâ¿ Ã¨¿ ÃÃ¿ Õ%¿ ÕÖ¿ Õë¿ Õô¿ ÕÓ¿ Œ)¿ Œr¿ Œù¿ Œ ¿ Œ‚¿ œ¿ œ!¿ œ1¿ œK¿ œ`¿ œå¿ œï¿ œ¢¿ œ∂¿ œº¿ œΩ¿ œ–¿ œÂ¿ œ˙¿ –¿ –,¿ –?¿ –S¿ –m¿ –É¿ –á¿ –à¿ –î¿ –¡¿ –¬¿ –Œ¿ —¿ —L¿ —ï¿ —œ¿ “¿ “¿ “7¿ “x¿ “¨¿ “Î¿ “ˆ¿ “ˇ¿ ”¿ ”'¿ ”/¿ ”5¿ ”G¿ ”K¿ ”L¿ ”X¿ ”ú¿ ”—¿ ‘¿ ‘!¿ ‘F¿ ‘}¿ ‘É¿ ‘¥¿ ‘∏¿ ‘∫¿ ‘ª¿ ’¿ ’+¿ ’P¿ ’n¿ ’è¿ ’Ø¿ ’Ã¿ ’Á¿ ’Ì¿ ’Ó¿ ÷¿ ÷3¿ ÷V¿ ÷Ñ¿ ÷ú¿ ÷≤¿ ÷≥¿ ÷ø¿ ◊ ¿ ◊¿ ◊¿ ◊<¿ ◊P¿ ◊q¿ ◊ë¿ ◊≥¿ ◊‘¿ ◊ˆ¿ ÿ¿ ÿ8¿ ÿX¿ ÿ{¿ ÿù¿ ÿ¿¿ ÿ‚¿ Ÿ	¿ Ÿ/¿ ŸV¿ Ÿ|¿ Ÿ§¿ ŸÀ¿ ŸÔ¿ ⁄¿ ⁄8¿ ⁄]¿ ⁄c¿ ⁄g¿ ⁄h¿ ⁄t¿ ⁄≥¿ ⁄—¿ ⁄Ô¿ €¿ €5¿ €a¿ €}¿ €ï¿ €∆¿ €Õ¿ €—¿ €“¿ €ﬁ¿ ‹0¿ ‹A¿ ‹`¿ ‹y¿ ‹ñ¿ ‹√¿ ‹Ê¿ ›¿ ›¿ ›¿ ›¿ ›>¿ ›S¿ ›v¿ ›Ö¿ ›ï¿ ›•¿ ›¿¿ ›‡¿ ›Ê¿ ›Á¿ ﬁ¿ ﬁ¿ ﬁ5¿ ﬁL¿ ﬁx¿ ﬁõ¿ ﬁú¿ ﬁ®¿ ﬁœ¿ ﬁÚ¿ ﬂ¿ ﬂ$¿ ﬂL¿ ﬂn¿ ﬂú¿ ﬂ∂¿ ﬂ€¿ ‡¿ ‡P¿ ‡[¿ ‡d¿ ‡k¿ ‡o¿ ‡q¿ ‡r¿ ‡Æ¿ ‡≤¿ ‡˛¿ ·M¿ ·ó¿ ·„¿ ·Á¿ ‚.¿ ‚2¿ ‚Å¿ ‚≥¿ ‚∑¿ „¿ „S¿ „o¿ „s¿ „Å¿ „Ö¿ „Õ¿ ‰¿ ‰R¿ ‰o¿ ‰ù¿ ‰ﬂ¿ ‰¯¿ ‰˛¿ ÂO¿ Â^¿ Âw¿ ÂÜ¿ Â§¿ Â∏¿ ÂÃ¿ ÂË¿ Ê¿ Ê!¿ Ê;¿ ÊU¿ Êe¿ Êk¿ Êl¿ Ê®¿ ÊÆ¿ Ê˝¿ Á1¿ ÁU¿ ÁV¿ Á¢¿ Áﬁ¿ Á‰¿ Ë,¿ Ë^¿ Ëd¿ ËØ¿ Ë€¿ Ë˘¿ Ë˙¿ È?¿ È]¿ È^¿ È¢¿ È”¿ ÈŸ¿ Í&¿ Íw¿ Í≈¿ Î¿ Îe¿ Î∞¿ Î˛¿ Ï¿ Ï2¿ Ï`¿ Ïa¿ Ïä¿ Ïê¿ Ï‡¿ ÏÓ¿ ÏÙ¿ Ì¿ Ì¿ Ì#¿ Ì)¿ Ìu¿ Ì∆¿ Ì÷¿ ÌÓ¿ ÌÔ¿ Ó7¿ Ó=¿ Ó|¿ Ó≈¿ Ó˚¿ Ô¿ Ô¿ Ô3¿ Ô4¿ Ô¿ ÔÖ¿ Ô‘¿ $¿ 0¿ 6¿ Ç¿ —¿ Ò¿ Ò¿ Ò-¿ ÒC¿ ÒD¿ Òl¿ Òr¿ Ò¬¿ ÒŒ¿ Ò‘¿ ÒÌ¿ Ú¿ Ú¿ Ú4¿ Ú:¿ Ú}¿ Úî¿ Úï¿ Ú·¿ Û¿ Û¿ ÛJ¿ Ûú¿ Ûù¿ Û©¿ ÛÍ¿ ÛÎ¿ Ù5¿ ÙÉ¿ Ùœ¿ ı¿ ı9¿ ı?¿ ı|¿ ı¥¿ ˆ¿ ˆ5¿ ˆ9¿ ˆ:¿ ˆF¿ ˆã¿ ˆ∂¿ ˜
¿ ˜j¿ ˜±¿ ¯	¿ ¯L¿ ¯P¿ ¯R¿ ¯S¿ ¯¨¿ ¯Á¿ ˘¿ ˘Y¿ ˘ë¿ ˘ﬂ¿ ˙,¿ ˙z¿ ˙⁄¿ ˚:¿ ˚;¿ ˚G¿ ˚\¿ ˚s¿ ˚t¿ ˚Ê¿ ¸<¿ ¸f¿ ¸g¿ ¸õ¿ ¸¡¿ ¸‘¿ ˝¿ ˝¿ ˝G¿ ˝v¿ ˝û¿ ˝æ¿ ˝Ì¿ ˝Ù¿ ˝ı¿ ˛(¿ ˛N¿ ˛a¿ ˛h¿ ˛l¿ ˛m¿ ˛y¿ ˛ö¿ ˛Ω¿ ˛ﬁ¿ ˛‚¿ ˛„¿ ˛Ô¿ ˇ¿ ˇ*¿ ˇQ¿ ˇk¿ ˇÄ¿ ˇÑ¿ ˇÖ¿ ˇû¿ ˇ∞¿ ˇÎ¿ ˇÛ¿ ˇ˜¿ ˇ¯¿ !¿ ß¿ ®¿ ÿ¿¿T¿ñ¿º¿ﬂ¿+¿/¿0¿<¿i¿â¿∏¿€¿·¿‚¿Y¿Z¿µ¿’¿N¿z¿â¿µ¿Ω¿√¿ƒ¿¯¿3¿4¿ñ¿¥¿ ¿ﬂ¿Â¿È¿Í¿"¿O¿ß¿∆¿Î¿Ò¿¿0¿6¿K¿w¿}¿õ¿Ω¿√¿¿+¿¶¿Ò¿˜¿	¿	¿	¿	a¿	∞¿	—¿	◊¿	ˇ¿
S¿
Y¿
©¿
≠¿
Æ¿
‹¿<¿]¿c¿ ¿Œ¿œ¿¿l¿Œ¿¿ ¿!¿s¿…¿1¿Ö¿â¿ä¿‹¿2¿ö¿Ó¿Ú¿Û¿/¿x¿…¿⁄¿˜¿¿e¿≤¿∂¿∑¿˜¿@¿A¿ã¿»¿¿à¿â¿Ï¿P¿Q¿}¿ú¿∑¿À¿Á¿Î¿Ï¿5¿r¿»¿0¿1¿ì¿ˆ¿˜¿#¿B¿]¿r¿v¿w¿–¿?¿|¿’¿€¿B¿C¿Æ¿¿¿G¿f¿Å¿†¿µ¿π¿∫¿¿]¿≥¿∑¿∏¿	¿Y¿~¿Ç¿É¿¨¿»¿ˇ¿+¿X¿Ç¿â¿ç¿é¿è¿Â¿G¿n¿o¿≤¿«¿Õ¿Œ¿˛¿¿¿¿<¿\¿|¿‚¿Ì¿¸¿ ¿ z¿ Ö¿ ç¿ ì¿ ù¿ ª¿ €¿!¿!$¿!y¿!¥¿!ﬁ¿!¿"¿" ¿")¿"/¿"3¿"4¿"@¿"g¿"ö¿"ƒ¿#5¿#6¿#Ç¿#¬¿#√¿$¿$?¿$É¿$Ω¿%
¿%*¿%=¿%O¿%i¿%û¿%›¿%˚¿&&¿&/¿&6¿&7¿&P¿&o¿&æ¿&⁄¿'/¿'<¿'ä¿'ê¿'«¿'»¿'˜¿(¿($¿(Q¿(Ü¿(≥¿(—¿(ÿ¿(Ÿ¿)>¿)m¿)ã¿)≥¿)’¿*¿*-¿*V¿*z¿*ß¿*·¿*˚¿+&¿+I¿+v¿+ò¿+•¿+∞¿+π¿+¿¿+¡¿,¿,o¿,p¿,í¿,ﬂ¿,Ì¿-|¿-}¿-¢¿-∂¿-Ó¿.¿.{¿.‘¿/¿/&¿/0¿/>¿/?¿/d¿/x¿/∞¿/◊¿0=¿0ñ¿0ƒ¿0Ë¿0Ú¿1 ¿1¿15¿1N¿1z¿1ê¿1ô¿1ü¿1†¿1‡¿2¿2¿2X¿2k¿2ï¿2≠¿2Ì¿3¿30¿3i¿3á¿3ñ¿3ª¿3»¿3”¿3‹¿3›¿4#¿41¿4K¿4f¿4Ç¿4Æ¿4œ¿5¿5H¿5n¿5§¿5€¿5Ó¿5ˇ¿6#¿6F¿6á¿6ß¿6∏¿6ﬁ¿7	¿76¿7É¿7©¿7æ¿7—¿7Û¿8#¿86¿8G¿8V¿8c¿8n¿8w¿8x¿8æ¿8Ã¿8Ê¿9¿9¿9I¿9j¿9ß¿9„¿:	¿:?¿:v¿:â¿:ö¿:¿¿:Â¿;(¿;J¿;]¿;Ö¿;≤¿;·¿<0¿<X¿<o¿<Ñ¿<®¿<⁄¿<Ô¿=¿=¿="¿=/¿=:¿=;¿=h¿=Ñ¿=≠¿=Ê¿>¿>6¿>]¿>î¿>√¿> ¿>À¿>‡¿?¿?*¿?{¿?ñ¿?Ø¿?Œ¿?„¿@¿@å¿@∑¿@Ò¿@¸¿A¿A¿A¿A[¿AÉ¿A«¿B+¿B,¿BQ¿Bw¿Bñ¿Bœ¿B¿C4¿CX¿C´¿D¿DG¿Dè¿DÀ¿E¿E¿Eh¿Eµ¿E¯¿F@¿Fz¿F∏¿F¿¿FÕ¿FÓ¿G4¿Gp¿GÆ¿G¥¿Gµ¿G‚¿H¿H)¿HÑ¿H∂¿H˙¿I8¿IP¿Io¿I≥¿Iÿ¿J¿J¿J2¿JH¿J\¿Jt¿Jå¿J¨¿JÃ¿JÓ¿K¿K%¿K.¿KR¿Kt¿Kß¿K√¿K‚¿KÈ¿KÍ¿LX¿Lw¿Lî¿L∂¿L–¿LŸ¿Lﬂ¿Lı¿L˘¿L˚¿L¸¿MB¿MY¿M]¿M¨¿MÒ¿N>¿NB¿NV¿N¶¿NÚ¿O?¿Oê¿O÷¿O⁄¿P6¿P:¿Pí¿P¢¿P¶¿P∫¿Q ¿QL¿Qê¿Qî¿Q˙¿Q˛¿RV¿Rf¿Rj¿R~¿RÕ¿S¿S^¿Sb¿Sƒ¿S»¿T ¿T0¿T4¿TH¿Të¿T‚¿U¿U¿Uá¿Uã¿U„¿UÛ¿U˜¿V¿Va¿Vµ¿V◊¿V€¿WB¿WR¿WV¿Wj¿W¿¿X¿XU¿XY¿X¿¿X–¿X‘¿X‚¿XÊ¿Y$¿Y>¿Yâ¿YÆ¿Y˙¿Z¿Z#¿Z;¿ZÉ¿Z∞¿Z∂¿[¿[R¿[°¿[¿¿[∆¿\¿\
¿\S¿\m¿\|¿\ê¿\†¿\¥¿\…¿\Ê¿\˚¿]¿]*¿]=¿]Q¿]m¿]Ñ¿]ü¿]Ø¿]√¿]ÿ¿]¿^¿^1¿^G¿^Y¿^r¿^á¿^ß¿^∏¿^Õ¿^„¿^˝¿_¿_#¿_8¿_N¿_h¿_à¿_ö¿_∞¿_«¿_ÿ¿_Ï¿`¿`¿`,¿`D¿`a¿`z¿`í¿`£¿`º¿`⁄¿`˜¿a¿a{¿aÌ¿b_¿bÕ¿bŒ¿c¿c ¿cj¿cp¿cü¿c√¿cﬂ¿cˇ¿d ¿d4¿dP¿di¿d}¿dí¿dß¿dÀ¿d‰¿d¯¿e¿e&¿e?¿eY¿e{¿eï¿e∞¿eŒ¿eÍ¿f
¿f¿f8¿fR¿fo¿fá¿f∞¿fÀ¿fÂ¿f˚¿g¿g0¿gO¿gt¿gä¿g§¿gæ¿gŸ¿g¯¿h¿h4¿hO¿hk¿hÜ¿h£¿h≈¿h„¿i ¿i#¿iF¿ia¿ib¿iØ¿i¿¿i∆¿j¿j\¿jo¿ju¿j≠¿j≥¿jˇ¿kC¿kÅ¿kß¿k≠¿kÃ¿k‚¿k„¿l¿l¿lK¿lç¿lπ¿l”¿l‘¿m
¿m¿mI¿mñ¿m„¿n0¿nÉ¿n”¿nÍ¿nˇ¿o¿o^¿o∞¿o∂¿oÃ¿p¿pm¿ps¿p”¿pÂ¿pÎ¿q'¿q>¿q?¿qs¿qy¿qØ¿qµ¿r¿r>¿rY¿rZ¿rò¿rË¿s¿s¿sP¿só¿s√¿s…¿t¿tc¿ti¿t∂¿t·¿tÁ¿u&¿ul¿u≠¿u≥¿u…¿v¿v=¿vC¿vñ¿v‚¿vı¿v˚¿wg¿wy¿wé¿w≠¿wÆ¿wÙ¿x=¿xy¿x¿xÃ¿xˆ¿x¸¿yL¿yì¿yø¿y≈¿yÓ¿yÙ¿z3¿zy¿z∫¿z¿¿z÷¿{#¿{J¿{P¿{ì¿{‰¿|
¿|¿|Ö¿|ó¿|¨¿|”¿|‘¿}$¿}I¿}O¿}ù¿}Ë¿~¿~7¿~8¿~e¿~k¿~¥¿~˚¿'¿G¿H¿á¿ç¿◊¿Ä¿Ä¿ÄT¿Äã¿Äë¿Ä°¿Äß¿ÄÈ¿Å¿Å¿ÅF¿ÅL¿Åù¿ÅÍ¿Ç7¿ÇR¿Çl¿Çm¿Çò¿Çû¿ÇÂ¿É,¿ÉX¿É^¿Éß¿ÉÙ¿Ñ.¿Ñ4¿ÑÅ¿Ñ¨¿Ñ ¿ÑÀ¿Ñ˙¿Ö ¿ÖI¿Öt¿Öû¿Öü¿Ö‹¿Ö‚¿Ü!¿Ü'¿Üi¿Üæ¿á¿á¿á¿áe¿ák¿áØ¿á˙¿à¿à¿às¿ày¿à“¿àÿ¿â¿â+¿â,¿âu¿â{¿â…¿â⁄¿â‡¿ä*¿ä`¿äf¿ä≥¿äπ¿äı¿ã¿ã¿ãO¿ãã¿ãë¿ãﬁ¿å	¿å¿åP¿åò¿åÁ¿ç0¿ç>¿çS¿çr¿çs¿ç±¿ç∑¿é ¿é5¿é;¿é}¿é≥¿éπ¿é…¿éœ¿è¿è/¿è0¿èy¿è±¿è∑¿ê	¿êW¿êÉ¿êâ¿ê⁄¿ë ¿ë¿ëX¿ë}¿ëí¿ëò¿ë‚¿ëË¿ë¯¿ë˛¿íK¿íi¿íü¿í†¿íÍ¿ì*¿ì0¿ì¿ì…¿î¿î(¿î.¿î¿îó¿î¨¿î≤¿î˝¿ï¿ï¿ï¿ïj¿ï{¿ï≥¿ï¥¿ñ¿ñ¿ñ#¿ñ<¿ñS¿ñT¿ñå¿ñí¿ñÿ¿ñﬁ¿ó+¿ó;¿óA¿óå¿óí¿ó‚¿ò/¿òÄ¿ò—¿ô¿ôk¿ôq¿ôº¿ôˇ¿öH¿öt¿öu¿ö∑¿öΩ¿õ¿õ¿õ`¿õ{¿õ|¿õ∆¿ú¿ú¿úk¿ú∑¿ú ¿ú–¿ù¿ùh¿ù∑¿û¿ûR¿ûe¿ûk¿ûy¿ûî¿û‘¿ü¿ü¿ü ¿ü&¿ül¿ür¿üŒ¿ü‰¿üÍ¿† ¿†Y¿†â¿†è¿†ı¿°¿°¿°¿°#¿°l¿°µ¿°Í¿¢-¿¢z¿¢´¿¢«¿¢»¿¢Û¿¢˘¿£I¿£O¿£û¿£Í¿§8¿§D¿§J¿§`¿§Æ¿§˝¿•¿•B¿•o¿•u¿•¿¿•Ã¿•“¿¶D¿¶V¿¶Ö¿¶Ü¿¶√¿¶…¿ß¿ßc¿ßÆ¿ßæ¿ßƒ¿®¿®¿®R¿®X¿®h¿®n¿®™¿®¬¿®√¿©¿©¿©\¿©ü¿©•¿©Ù¿™2¿™8¿™Ü¿™å¿™ú¿™¢¿™‚¿™˛¿™ˇ¿´,¿´2¿´{¿´¬¿´Ó¿´Ù¿¨ ¿¨&¿¨6¿¨<¿¨}¿¨ù¿¨û¿¨≈¿¨À¿¨È¿¨Ô¿≠8¿≠z¿≠¶¿≠∆¿≠«¿Æ¿Æ]¿Æc¿Æ¥¿Ø ¿Ø¿Ø¿Øg¿Ø±¿∞ ¿∞K¿∞ö¿∞±¿∞∑¿∞≈¿∞‡¿±¿±W¿±_¿±i¿±o¿±ª¿±ˇ¿≤=¿≤c¿≤i¿≤≈¿≤€¿≤·¿≤˜¿≥P¿≥Ä¿≥Ü¿≥Ï¿≥˛¿¥¿¥¿¥¿¥c¿¥¨¿¥·¿µ#¿µp¿µ°¿µΩ¿µæ¿µ˙¿∂ ¿∂P¿∂°¿∂Ì¿∂Û¿∑1¿∑7¿∑Ç¿∑à¿∑ò¿∑û¿∑Ÿ¿∑Ò¿∑Ú¿∏3¿∏9¿∏ä¿∏Õ¿∏”¿π"¿π`¿πf¿πµ¿πª¿πÀ¿π—¿∫¿∫,¿∫-¿∫Z¿∫`¿∫Æ¿∫˜¿ª¿ª"¿ªN¿ªT¿ªd¿ªj¿ª™¿ª ¿ªÀ¿ªı¿ª˚¿º¿º¿ºh¿º™¿º÷¿ºˆ¿º˜¿Ω"¿Ω(¿Ωx¿Ω~¿ΩÕ¿æ¿æg¿æs¿æy¿æ∆¿æ“¿æÿ¿æÓ¿ø<¿øã¿øë¿ø–¿ø˝¿¿¿¿N¿¿Z¿¿`¿¿“¿¿‰¿¡¿¡¿¡V¿¡\¿¡©¿¡µ¿¡ª¿¬
¿¬¿¬]¿¬ä¿¬ß¿¬®¿¬ˆ¿√?¿√N¿√g¿√h¿√ñ¿√ú¿√Ê¿ƒ-¿ƒY¿ƒ_¿ƒç¿ƒÆ¿ƒØ¿ƒÙ¿ƒ˙¿≈K¿≈l¿≈r¿≈√¿≈…¿∆¿∆c¿∆≥¿« ¿«¿«¿«D¿«Z¿«[¿«ö¿«†¿«Ò¿»¿»¿»Q¿»y¿»¿»≈¿»ﬂ¿»‡¿…0¿…6¿…p¿…ô¿…ü¿…Ì¿ 5¿ y¿ ≥¿ π¿ ˇ¿À¿À¿Àf¿Àé¿Àî¿À‡¿Ã¿Ã¿Ã]¿Ãê¿Ãñ¿ÃŸ¿Ãﬂ¿Õ%¿Õ@¿ÕA¿Õì¿ÕÆ¿Õ¥¿Õƒ¿Õ ¿Œ¿Œ5¿Œë¿Œ‰¿œ9¿œy¿œ¡¿–¿–>¿–ä¿–º¿—¿—C¿—ê¿—¬¿“¿“?¿“a¿“b¿“±¿“…¿“œ¿“ﬂ¿“Â¿”8¿”P¿”¨¿”ˇ¿‘T¿‘î¿‘‹¿’¿’Y¿’§¿’⁄¿÷+¿÷a¿÷Æ¿÷‡¿◊+¿◊]¿◊Å¿◊Ç¿◊Õ¿◊Â¿◊Î¿◊˚¿ÿ¿ÿT¿ÿl¿ÿ»¿Ÿ¿Ÿp¿Ÿ∞¿Ÿ¯¿⁄;¿⁄u¿⁄¿¿⁄ˆ¿€B¿€t¿€¡¿€Û¿‹>¿‹p¿‹ô¿‹ö¿‹Á¿‹ˇ¿›¿›¿›¿›s¿›œ¿ﬁ"¿ﬁw¿ﬁ∑¿ﬁˇ¿ﬂB¿ﬂ|¿ﬂ«¿ﬂ˝¿‡I¿‡{¿‡Ã¿·¿·M¿·¿·§¿·•¿·Ò¿‚	¿‚¿‚¿‚%¿‚}¿‚Ÿ¿„,¿„Å¿„¡¿‰	¿‰L¿‰Ü¿‰—¿Â¿ÂS¿ÂÖ¿Â÷¿Ê¿ÊY¿Êã¿ÊØ¿Ê∞¿Ê˘¿Êˇ¿Á:¿Áé¿Á‚¿ÁË¿Ë<¿Ëç¿Ëﬂ¿È-¿Èu¿È{¿È«¿Í¿ÍK¿Íê¿Íµ¿Íª¿Î¿Î%¿Î+¿Îw¿Î…¿Ï¿ÏW¿Ïï¿Ïœ¿Ï’¿Ì¿Ìg¿Ìm¿Ì}¿ÌÉ¿ÌΩ¿Ó¿Ó7¿Ó¿Ó¬¿Óﬂ¿Ó‡¿Ô.¿Ôq¿Ôw¿Ôü¿Ôµ¿Ô∂¿Ô‰¿ÔÍ¿¿¿R¿w¿x¿√¿Ò¿Ò\¿Òb¿Ò{¿Òù¿Òû¿Ò‡¿ÒÊ¿Ú4¿ÚÄ¿Ú«¿Û¿Û¿Û%¿Ûh¿Ûß¿ÛÎ¿Ù¿Ù;¿Ù<¿Ùâ¿Ù¢¿Ùø¿Ù—¿ÙÁ¿Ù˙¿ı¿ı,¿ıO¿ıg¿ıÉ¿ıú¿ı≤¿ıÃ¿ıÚ¿ˆ¿ˆ)¿ˆ<¿ˆS¿ˆn¿ˆÜ¿ˆ∏¿ˆÏ¿˜¿˜¿˜>¿˜V¿˜j¿˜Ç¿˜≠¿˜…¿˜Â¿˜˝¿¯¿¯)¿¯E¿¯a¿¯å¿¯°¿¯∫¿¯◊¿¯È¿¯ˇ¿˘¿˘-¿˘K¿˘k¿˘ê¿˘±¿˘—¿˘Í¿˘˝¿˙¿˙<¿˙]¿˙d¿˙Ä¿˙ü¿˙Õ¿˙Ô¿˚¿˚N¿˚ó¿˚»¿˚¸¿¸:¿¸e¿¸ì¿¸Ÿ¿˝¿˝S¿˝u¿˝£¿˝‘¿˛¿˛`¿˛µ¿˛È¿ˇ¿ˇN¿ˇ¿ˇ§¿ˇ’¿ 	¿ I¿ õ¿ Ã¿ Ò¿"¿V¿ñ¿Ë¿¿D¿{¿†¿Œ¿ˇ¿0¿d¿û¿Á¿$¿^¿É¿´¿˜¿@¿t¿{¿¿Ä¿Ã¿¿¿a¿ë¿œ¿‰¿¿`¿ï¿‘¿¿G¿y¿¥¿	¿	]¿	Ü¿	ƒ¿	˘¿
(¿
]¿
û¿
”¿¿L¿r¿°¿”¿¿:¿u¿ø¿˝¿8¿^¿®¿›¿‰¿Ë¿È¿ı¿¿:¿M¿S¿¿ì¿ô¿Ω¿€¿¿#¿K¿u¿Ø¿Ÿ¿¿7¿]¿Ö¿Ω¿Î¿!¿A¿i¿ì¿√¿¿E¿i¿õ¿«¿Ò¿%¿G¿q¿ù¿›¿¿;¿]¿á¿≥¿Û¿¿C¿q¿ì¿ª¿Â¿¿;¿k¿•¿◊¿¿)¿M¿â¿√¿¿Ù¿ı¿¿¿B¿N¿_¿l¿}¿ó¿©¿ª¿Œ¿‰¿Ù¿¿¿2¿J¿W¿h¿z¿è¿¨¿ ¿Ÿ¿Ô¿¿¿!¿3¿E¿W¿n¿|¿é¿°¿æ¿–¿Á¿ı¿¿¿7¿F¿Y¿m¿Ä¿ï¿Ø¿≈¿⁄¿Ë¿˜¿¿,¿?¿F¿i¿m¿n¿z¿ê¿ø¿Ê¿¿F¿~¿—¿¿S¿à¿…¿¿B¿z¿µ¿˘¿ S¿ ∞¿ ·¿!&¿!c¿!ú¿!‰¿"¿"J¿"Ü¿"‡¿#¿#a¿#é¿#«¿$¿$]¿$ç¿$…¿%¿%3¿%i¿%¢¿%€¿&¿&Y¿&™¿&Ô¿'1¿'^¿'Ñ¿'ÿ¿()¿(e¿(l¿(•¿(©¿(´¿(¨¿(Â¿(È¿)9¿)Ä¿)Ã¿)‹¿)‡¿**¿*a¿*l¿*ù¿*›¿+¿+/¿+D¿+a¿+w¿+ê¿+§¿+ø¿+‘¿+Ï¿,)¿,i¿,É¿,ú¿,∫¿,Œ¿,‰¿,˛¿-¿-.¿-E¿-^¿-r¿-í¿-™¿-ø¿-‘¿-Í¿.¿.¿.8¿.P¿.a¿.Ü¿.ú¿.¢¿.£¿.ﬁ¿.˝¿.˛¿/A¿/h¿/i¿/¢¿/®¿/Ò¿08¿0d¿0Ñ¿0Ö¿0‘¿0⁄¿1)¿1i¿1o¿1±¿1Ë¿1Ó¿1˛¿2¿2V¿2s¿2t¿2Ø¿2µ¿2¸¿3C¿3o¿3u¿3≤¿4¿4R¿4`¿4f¿4≥¿4ﬁ¿4¸¿4˝¿5S¿5w¿5x¿5≥¿5“¿5”¿6!¿6'¿6x¿6µ¿6ª¿6˝¿73¿79¿7I¿7O¿7£¿7ø¿7¿¿8¿8¿8<¿8q¿8r¿8π¿8ø¿8Ò¿9(¿9)¿9w¿9ì¿9ô¿9≤¿9»¿9…¿:¿:¿:G¿:ç¿:“¿;¿;W¿;|¿;Ç¿;œ¿<¿<*¿<V¿<W¿<ô¿<ü¿<Â¿=&¿=@¿=A¿=x¿=~¿=¡¿>¿>/¿>5¿>k¿>Ö¿>Ü¿>√¿>…¿?¿?Y¿?Ö¿?ã¿?∑¿?◊¿?ÿ¿@¿@¿@d¿@¶¿@“¿@ÿ¿A¿A.¿A/¿Al¿Ar¿Aª¿A˝¿B)¿B/¿B[¿B{¿B|¿Bπ¿Bø¿C¿CJ¿Cv¿C|¿C≤¿C“¿C”¿D¿D¿Da¿D®¿D‘¿D⁄¿E¿E)¿E*¿Eo¿Eu¿EÆ¿EÃ¿E“¿F¿FY¿FÉ¿Fâ¿F≤¿F«¿F»¿G¿G¿G\¿Gb¿G®¿GÈ¿H¿H-¿H.¿Hx¿Hõ¿Hú¿HË¿I¿I¿Id¿Iñ¿Iú¿Iﬂ¿IÂ¿J+¿Jl¿Jñ¿J±¿J≤¿J˙¿K5¿K;¿K~¿KÑ¿K ¿L¿L5¿L;¿Lã¿L¶¿Lß¿L˘¿M¿M¿M*¿M0¿MÉ¿Mõ¿M˜¿NJ¿Nü¿Nﬂ¿O'¿Oj¿O§¿O¿P"¿Ps¿P©¿Pˆ¿Q(¿Qs¿Q•¿Q«¿Q»¿R¿R/¿R5¿RE¿RK¿Rû¿R∂¿S¿Se¿S∫¿S˙¿TB¿TÖ¿Tø¿U
¿U@¿Uë¿U«¿V¿VF¿Vë¿V√¿VÁ¿VË¿W3¿WK¿WQ¿Wa¿Wg¿W∫¿W“¿X.¿XÅ¿X÷¿Y¿Y^¿Y°¿Y€¿Z&¿Z\¿Z®¿Z⁄¿['¿[Y¿[§¿[÷¿[ˇ¿\ ¿\M¿\e¿\k¿\{¿\Å¿\Ÿ¿]5¿]à¿]›¿^¿^e¿^®¿^‚¿_-¿_c¿_Ø¿_·¿`2¿`h¿`≥¿`Â¿a
¿a¿aW¿ao¿au¿aÖ¿aã¿a„¿b?¿bí¿bÁ¿c'¿co¿c≤¿cÏ¿d7¿dm¿dπ¿dÎ¿e<¿er¿eø¿eÒ¿f¿f¿f_¿fe¿f†¿fÙ¿gH¿gN¿gö¿gﬁ¿h¿hc¿hà¿hé¿h€¿h¯¿h˛¿iJ¿iú¿iÁ¿j*¿jh¿j¢¿j®¿jÔ¿k:¿k@¿kP¿kV¿kê¿k÷¿l
¿lR¿lï¿l≤¿l≥¿l˛¿mN¿mó¿m∏¿mπ¿m˚¿n¿nO¿nõ¿n‚¿o-¿o:¿o@¿oÖ¿o∞¿o∂¿o∆¿oÃ¿p¿p4¿pY¿pZ¿p™¿pº¿pﬁ¿p˘¿q¿q8¿qQ¿qk¿qã¿q¶¿qæ¿q¿r$¿r7¿r_¿rv¿rå¿r®¿rƒ¿r‡¿r¸¿s¿s+¿sA¿sh¿sá¿sû¿sµ¿s”¿sÛ¿t¿t9¿tY¿tr¿tê¿t±¿t∏¿tŸ¿u
¿uS¿uá¿uƒ¿uÚ¿v5¿vf¿v†¿vÚ¿wG¿wo¿w¨¿w»¿w¸¿x0¿xp¿x§¿x‰¿y¿y@¿yn¿y¿¿y˙¿z+¿z\¿zê¿z ¿{¿{P¿{ä¿{Ø¿{¯¿|,¿|3¿|7¿|8¿|á¿|◊¿|˚¿}¿}Y¿}≤¿}∏¿~¿~\¿~ß¿~œ¿~‚¿~Ë¿~˝¿>¿ó¿€¿Ä(¿Äf¿Äπ¿Ä˙¿ÅD¿Åë¿Åœ¿Ç¿Çc¿Çß¿Ç˜¿É>¿É|¿Éﬁ¿Ñ(¿Ñi¿Ñ™¿ÑÓ¿Ö8¿Öë¿Öﬁ¿Ü(¿Ü]¿Ü°¿Ü®¿Ü¨¿Ü≠¿Üπ¿Ü‹¿ÜÏ¿á¿á¿á)¿á8¿áH¿á[¿áv¿áí¿áü¿á≥¿áƒ¿á”¿á‰¿á˘¿à
¿à¿à1¿à=¿àN¿à_¿à|¿àë¿à£¿àµ¿à»¿à›¿à˜¿â¿â"¿â0¿âJ¿â]¿âu¿â|¿âÅ¿âÇ¿âé¿â±¿â”¿âÊ¿âÏ¿ä¿ä,¿ä2¿ä[¿äÖ¿äø¿äÎ¿ã¿ãE¿ã{¿ã•¿ã’¿ã˘¿å+¿åW¿å¿å´¿åﬂ¿ç¿ç?¿çm¿ç≠¿çÔ¿é¿é9¿éy¿é©¿é”¿é˝¿è)¿èY¿èì¿è≈¿èı¿ê¿êQ¿ê}¿ê∞¿ê¥¿êµ¿ê¡¿ë¿ë1¿ëw¿ëÏ¿íy¿íÒ¿ì_¿ì—¿îW¿îÃ¿ï7¿ïŸ¿ñ¿ñÊ¿óp¿ó„¿òQ¿ò—¿ôI¿ô…¿öA¿öº¿õ ¿õÅ¿ú¿úó¿ú˚¿ù_¿ùŸ¿û^¿ûÌ¿üp¿ü¿†[¿†„¿°`¿°d¿°f¿°g¿°¶¿°÷¿°Á¿°Ë¿¢¿¢¿¢¿¢r¿¢•¿¢Â¿¢Î¿£%¿£+¿£,¿£8¿£ò¿£À¿§¿§¿§K¿§Q¿§R¿§^¿§∆¿§˘¿•9¿•?¿•o¿•≥¿•π¿•Î¿¶1¿¶7¿¶q¿¶w¿¶x¿¶Ñ¿¶Â¿ß¿ßJ¿ßõ¿ß°¿ß¢¿ßÚ¿ß¯¿ß˘¿®¿®e¿®ó¿® ¿©¿©!¿©y¿©¿©Ä¿©å¿©„¿™¿™4¿™S¿™Å¿™ü¿™…¿™Ë¿´¿´¿´!¿´>¿´[¿´á¿´√¿¨ ¿¨¿¨¿¨¿¨¿¨p¿¨Œ¿¨¸¿≠¿≠4¿≠h¿≠n¿≠ö¿≠∂¿≠’¿≠Ú¿Æ¿Æ¿Æ¿Æ¿Æ*¿Æá¿ÆÂ¿Ø¿Ø¿ØK¿Ø¿ØÖ¿Ø±¿ØÕ¿ØÏ¿∞	¿∞(¿∞.¿∞4¿∞5¿∞A¿∞û¿∞¸¿±*¿±0¿±b¿±ñ¿±ú¿±»¿±‰¿≤¿≤ ¿≤?¿≤E¿≤K¿≤M¿≤N¿≤É¿≤Ñ¿≤«¿≥¿≥3¿≥f¿≥g¿≥¶¿≥—¿≥‡¿≥·¿≥ˇ¿¥ ¿¥B¿¥É¿¥Ñ¿¥ê¿¥Ô¿µ"¿µb¿µh¿µ¢¿µ®¿µ©¿µµ¿∂¿∂?¿∂q¿∂w¿∂ö¿∂†¿∂°¿∂≠¿∑¿∑M¿∑í¿∑ò¿∑»¿∑¸¿∏8¿∏@¿∏t¿∏±¿∏π¿∏Ë¿∏Ó¿π ¿πS¿πY¿πã¿π»¿πŒ¿∫¿∫¿∫¿∫¿∫Ä¿∫≥¿∫¯¿∫˛¿ª.¿ªb¿ªû¿ª¶¿ª⁄¿º¿º¿ºN¿ºT¿ºÜ¿ºπ¿ºø¿ºÒ¿Ω.¿Ω4¿Ωc¿Ωi¿Ωj¿Ωv¿Ω™¿Ω´¿Ω∑¿æ¿æ9¿æ?¿æ@¿æL¿æ©¿æ‹¿ø¿ø¿øD¿ø`¿øf¿øã¿øë¿øí¿øû¿ø˛¿¿I¿¿|¿¿…¿¿œ¿¿ˇ¿¡3¿¡w¿¡¿¡≥¿¡Ï¿¡Ù¿¬+¿¬1¿¬c¿¬•¿¬´¿¬›¿√¿√¿√\¿√b¿√c¿√o¿√◊¿ƒ"¿ƒU¿ƒ¢¿ƒ®¿ƒÿ¿≈¿≈P¿≈X¿≈å¿≈≈¿≈Õ¿∆¿∆
¿∆<¿∆~¿∆Ñ¿∆∂¿∆Ô¿∆ı¿«5¿«;¿«<¿«H¿«©¿«Ù¿»'¿»t¿»z¿»∫¿»¿¿»¡¿»Õ¿…-¿…x¿…≠¿…≥¿…µ¿…∂¿…È    _kTransitionDuration_kTransitionCurve_kFinalLabelScale_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3 Ì’