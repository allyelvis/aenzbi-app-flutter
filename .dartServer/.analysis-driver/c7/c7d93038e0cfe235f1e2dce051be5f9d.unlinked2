Åívaluealphaopacityredgreenblue	withAlphawithOpacitywithRed	withGreenwithBlue_linearizeColorComponentcomputeLuminancelerp
alphaBlendgetAlphaFromOpacity==hashCodetoStringclearsrcdstsrcOverdstOversrcIndstInsrcOutdstOutsrcATopdstATopxorplusmodulatescreenoverlaydarkenlighten
colorDodge	colorBurn	hardLight	softLight
difference	exclusionmultiplyhue
saturationcolor
luminositynonelowmediumhighbuttroundsquaremiterbevelfillstrokehardEdge	antiAliasantiAliasWithSaveLayer_data_kIsAntiAliasIndex_kColorIndex_kBlendModeIndex_kStyleIndex_kStrokeWidthIndex_kStrokeCapIndex_kStrokeJoinIndex_kStrokeMiterLimitIndex_kFilterQualityIndex_kMaskFilterIndex_kMaskFilterBlurStyleIndex_kMaskFilterSigmaIndex_kInvertColorIndex_kDitherIndex_kIsAntiAliasOffset_kColorOffset_kBlendModeOffset_kStyleOffset_kStrokeWidthOffset_kStrokeCapOffset_kStrokeJoinOffset_kStrokeMiterLimitOffset_kFilterQualityOffset_kMaskFilterOffset_kMaskFilterBlurStyleOffset_kMaskFilterSigmaOffset_kInvertColorOffset_kDitherOffset_kDataByteCount_objects_ensureObjectsInitialized_kShaderIndex_kColorFilterIndex_kImageFilterIndex_kObjectCountisAntiAlias_kColorDefault_kBlendModeDefault	blendModestylestrokeWidth	strokeCap
strokeJoin_kStrokeMiterLimitDefaultstrokeMiterLimit
maskFilterfilterQualityshadercolorFilterimageFilterinvertColors_ditherenableDitheringsRGBextendedSRGBrawRgbarawStraightRgbarawUnmodifiedrawExtendedRgba128pngrgba8888bgra8888rgbaFloat32_imageonCreate	onDispose_debugStackwidthheight	_disposeddisposedebugDisposed
toByteData
colorSpacedebugGetOpenHandleStackTracesclone	isCloneOf_toByteData_dispose_handlesdurationimage
frameCountrepetitionCountgetNextFrame_cachedFrameCount_frameCount_cachedRepetitionCount_repetitionCount_getNextFramenonZeroevenOdd	intersectunionreverseDifferencefillTypemoveTorelativeMoveTolineTorelativeLineToquadraticBezierTorelativeQuadraticBezierTocubicTorelativeCubicToconicTorelativeConicToarcTo
arcToPointrelativeArcToPointaddRectaddOvaladdArc
addPolygonaddRRectaddPathextendWithPathcloseresetcontainsshift	transform	getBoundscombinecomputeMetrics_constructor_clone_getFillType_setFillType_arcTo_arcToPoint_relativeArcToPoint_addRect_addOval_addArc_addPolygon	_addRRect_addPath_addPathWithMatrix_extendWithPath_extendWithPathAndMatrix	_contains_shift
_transform
_getBounds_oppositionvectorangle	_iteratoriterator_pathMetric_pathMeasurecurrentmoveNextlengthisClosedcontourIndex_measuregetTangentForOffsetextractPath_length
_getPosTan_extractPath	_isClosed_nextContour_nativeNextContourcurrentContourIndexnormalsolidouterinner_style_sigma	_TypeNone	_TypeBlur_color
_blendMode_matrix_type
_kTypeMode_kTypeMatrix_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGamma_toNativeImageFilter_toNativeColorFilter_shortDescriptioncreator	_initMode_initMatrix_initLinearToSrgbGamma_initSrgbToLinearGammadatanativeFiltersigmaXsigmaYtileMode_modeStringradiusXradiusYinnerFilterouterFilter	_initBlur_initDilate
_initErode_initColorFilter_initComposed_debugDisposedclamprepeatedmirrordecal_initLinear_initRadial_initConical
_initSweep_validateColorStops_initWithImage
_debugName	fromAsset_shaderRegistry_reinitializeShader_uniformFloatCount_samplerCount_initFromAssetfragmentShader_kEmptyFloat32List_floatssetFloatsetImageSampler_setImageSampler_validateSamplers	trianglestriangleStriptriangleFan_initpointslinespolygonsave	saveLayerrestorerestoreToCountgetSaveCount	translatescalerotateskewgetTransformclipRect	clipRRectclipPathgetLocalClipBoundsgetDestinationClipBounds	drawColordrawLine	drawPaintdrawRect	drawRRect
drawDRRectdrawOval
drawCircledrawArcdrawPath	drawImagedrawImageRectdrawImageNinedrawPicturedrawParagraph
drawPointsdrawRawPointsdrawVertices	drawAtlasdrawRawAtlas
drawShadow	_recorder_saveLayerWithoutBounds
_saveLayer_scale_getTransform	_clipRect
_clipRRect	_clipPath_getLocalClipBounds_getDestinationClipBounds
_drawColor	_drawLine
_drawPaint	_drawRect
_drawRRect_drawDRRect	_drawOval_drawCircle_drawArc	_drawPath
_drawImage_drawImageRect_drawImageNine_drawPicture_drawPoints_drawVertices
_drawAtlas_drawShadowtoImagetoImageSyncapproximateBytesUsed_toImage_toImageSyncisRecordingendRecording_endRecording_canvas_kBytesPerShadow	_kXOffset	_kYOffset_kBlurOffsetoffset
blurRadiusconvertRadiusToSigma	blurSigmatoPaintlerpList_encodeShadowsfromUint8ListfromFilePath_initFromFileencodedbytesPerPixelinstantiateCodec_initEncoded_initRaw_width	_getWidth_height
_getHeight_bytesPerPixel_getBytesPerPixel_instantiateCodecmessagestackS_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImageEventCallbackImage_ImageImageDecoderCallback	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizeCallbackTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPictureEventCallbackPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_Callback_Callbacker	_futurizePictureRasterizationExceptionÅèdartuiboolRecthasNaNRRectOffsetdxisNaNdyFloat64ListlengtheverydoublevalueisFiniteRadiusxy	withAlphaalpharoundclampintfromRGBOfromARGBmathpowHSVColormaterialColorstransparentCurveselasticInOutAnimationController	_clampInt_lerpInttoIntredgreenblueclampDoubleoverrideObject	identicalruntimeTypehashCodeStringtoRadixStringpadLeftsrcdstclear	saveLayerrestore	blendModesrcOverdstInsrcOutsrcIndstOutdstATopdstOversrcATopplusmultiplyscreenoverlaymodulate	hardLight
colorDodge	colorBurncolor	exclusion
difference
luminosityhue	softLight
saturationblurBackdropFilternonelowmediumhighfilterQualitymatrix	drawImagedrawImageRectdrawImageNine	drawAtlas	strokeCapAsquarestrokeWidthbuttdrawPath
drawPoints
strokeJoinstrokeMiterLimitstyle
drawCirclehardEdge	antiAliasantiAliasWithSaveLayerisAntiAliaspragmaByteDataListfilledgetInt32_kFakeHostEndiansetInt32indexvaluesfillstroke
getFloat32
setFloat32miterbevel	_TypeNone	_TypeBlur_style_sigmadebugDisposed_validateSamplers	Exception
_debugNamecreator_toNativeColorFilter_toNativeImageFilter
DeprecatedfromEnvironmenttoStringStringBufferwritetoStringAsFixed
toByteDataextendedSRGBrawExtendedRgba128
colorSpacevoidwidgets
StackTracecurrent_handlesaddcallMemoryAllocations	_disposedcontainsremoveisEmptydispose
StateErrorformatrawRgbaFuturesRGBUnsupportedErrormaphandle_debugStacktoList__imageNativeFieldWrapperClass1NativeInt32PointerVoidsymbolisLeaf	Uint8Listcallbackencodedbuffer
asByteDataHandleSetgetNextFramecloneDurationimage	CompletersyncdecodeErrorcompleteErrorcompletewidthheightdurationmillisecondsdurationMillisecondsfuturefromUint8ListtargetWidthtargetHeightallowUpscalinggetTargetSizeintrinsicWidthintrinsicHeightinstantiateCodecthenrawrowBytespixelFormatcodec	frameInfofillTypecombinereverseDifferencexor	intersectSceneBuilderclipPath_clonenonZerozero
fromCircle_opextractPathIterablefromDoublelefttoprightbottomBoolradiusrotationlargeArc	clockwiseFloat32List_getValue32matrix4fromLTRBforceClosedgetTangentForOffsetcossinatan2computeMetricslineTomoveToIterableBaseIterator
RangeError_nextContourcurrentContourIndexisClosedcloseaddRectstartWithMoveTonextContour
maskFilter
drawShadowhashcolorFilterfromColorFiltermodelinearToSrgbGammasrgbToLinearGamma_type_listEquals_matrix_color
_blendModehashAll
_kTypeMode_kTypeMatrixfromList_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGammaImageFilteredpushBackdropFilterpushImageFiltersigmaXsigmaYtileModeradiusXradiusYMatrix4	diagonal3ArgumentErrordatainnerFilterinnerouterFilteroutermirrorrepeateddecaldilateerodecomposed_shortDescriptionshaderpaintingGradientLinearGradientRadialGradientBoxDecorationlinearradial	Int32ListiNoSuchMethodError
colorStopsfocalfocalRadiuspi
startAngleendAngle
isNotEmptyUripath
encodeFulltarget	microtask
_fromAssetWeakReferenceMap_initFromAsset	debugNamefragmentShader_uniformFloatCount_samplerCountdrawVertices	trianglestriangleStriptriangleFannew
Uint16ListcolorstextureCoordinatesindicesdrawRawPointsclipRectSceneendRecordingCustomPainterpaintsydoAntiAliasarcTo	ParagraphlayoutParagraphStyleParagraphBuilder	TextAlignParagraphConstraintspointslinespolygonRSTransformscosssintxtyisRecording_canvascullRectlargest_objects_dataclipOpUint32stack_NativeParagraph_needsLayout_paint
addPicturedrawPicture	onDisposeUint64	_recorderonCreate	TextStylenormaloffset
blurRadiusscalelerp_lerpDoubleminshadowIndex_kColorDefaultconvertRadiusToSigma_init_length_initFromFile_initEncodedTttoImageSyncwritelnNativeFieldWrapperClass1CodecEngineLayerPathIterableBaseIteratorImageFilterShaderCanvasPicturePictureRecorderImageDescriptor	ExceptionHò:©ÛÕ¡]ªÀL˘Iéu      	dart:core¿l¥ ¿L¬õN <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuè¨è≠èÌèÛê@êPêuêúê¬ê»ëëë\ëiëûë¿ë‚íí2í3íàíéí≥í⁄ì ìMì}ìÉì∆ìÃîîRîàîæîÙï6ï7ïeïkïìïôï¡ïÁññ3ñFñGñÄñÜñ’ñ˜ó&ó'óZó`ó±ó”ó˘ó˙ò1ò^ò_òòò∆ò«òˇô,ô-ôvô¨ô≤ôÍöö5ö9ö:öÉöÀö—õ	õ/õ]õéõíõìõ„úúúNúgúôúùúûúÁùù#ù[ùvù¶ù™ù´ù¸û)û/ûgûÅû≤û∂û∑ûıü2üRürüxüπüΩüæ†	††c†Å†á†≈†„°#°^°õ°◊¢¢¢¢<¢B¢ä¢Õ¢”££j£©£Ô£ı§B§å§◊•#•q•¡¶¶_¶å¶í¶·ßß6ßKßbßwßÜßÆß∂ß√ß⁄ß¸®®*®n®Æ®Ú©4©?©G©M©Q©R©ï©€©·™-™t™ø´´Y´ô´¡¨ ¨¨¨F¨l¨£¨¿¨Œ≠≠^≠¶≠Ø≠Ã≠˛Æ,ÆLÆiÆ{Æ∆ØØbØkØqØuØvØ√Ø…ØÙ∞'∞b∞f∞g∞s∞ñ∞∏∞À∞—∞˝±±±1±R±V±W±c±â±ä±ñ±‰±Ê±Á≤≤≤k≤µ≤‘≤ÿ≥)≥v≥≈¥¥c¥Æ¥Ú¥ˆµFµëµ‚∂.∂|∂…∑∑[∑™∑∏∏∏]∏™∏ÙπFπìπ‰∫%∫)∫P∫T∫¢∫„ª4ªÅª“º!ºpºãºèºùº°ºÏº˝ΩΩ]ΩpΩ∂Ω∑Ω˚ææ=æCæ†æ©æ™æÈæÔø>øMøSøéøîøÔøˆø˜¿ @6¿ @<¿ @á¿ @ò¿ @û¿ @‡¿ @Ê¿ AA¿ AH¿ AI¿ AÜ¿ Aå¿ A⁄¿ B+¿ BH¿ BN¿ Bú¿ B…¿ Bœ¿ C.¿ C9¿ C:¿ Cx¿ C~¿ Cß¿ C≠¿ C˚¿ D¿ D`¿ Df¿ Dµ¿ D‡¿ DÎ¿ DÏ¿ E4¿ EÅ¿ EŒ¿ E‹¿ E‚¿ F!¿ F'¿ Ft¿ Fº¿ FÃ¿ F“¿ G¿ G$¿ GÅ¿ Gä¿ Gã¿ Gÿ¿ H&¿ Hp¿ Hv¿ H∞¿ H∂¿ I¿ IU¿ I[¿ Iß¿ I≠¿ J
¿ J¿ J¿ Jc¿ J∂¿ K¿ K¿ KK¿ KQ¿ Kû¿ KÔ¿ Kı¿ LB¿ LH¿ L¶¿ L∞¿ L±¿ M¿ MS¿ Mù¿ M£¿ Mﬁ¿ M‰¿ N6¿ NÇ¿ Nà¿ N’¿ N€¿ O9¿ OC¿ OD¿ Oì¿ O≥¿ Oπ¿ P¿ P¿ P]¿ P©¿ P›¿ P„¿ Q.¿ Q?¿ QE¿ Q§¿ QØ¿ Q∞¿ Qˇ¿ R¿ R ¿ Rn¿ Rt¿ Rƒ¿ S¿ S?¿ SE¿ Sê¿ S°¿ Sß¿ T¿ T¿ T¿ Tb¿ Tñ¿ Tú¿ TÈ¿ TÔ¿ UJ¿ UQ¿ UR¿ Uë¿ Uó¿ UÊ¿ V2¿ VX¿ V^¿ V¨¿ V≤¿ W¿ WQ¿ W¢¿ WÒ¿ X;¿ XA¿ Xù¿ X•¿ X¶¿ X¿ Xˆ¿ YE¿ Yî¿ Yö¿ YÎ¿ Z¿ Z¿ Zk¿ Zq¿ Z—¿ Z◊¿ ZÁ¿ ZÌ¿ [/¿ [w¿ [ì¿ [›¿ [Ù¿ \ ¿ \¿ \I¿ \J¿ \ï¿ \ª¿ \¡¿ ]¿ ]Z¿ ]â¿ ]è¿ ]‡¿ ^,¿ ^R¿ ^X¿ ^®¿ ^˜¿ _H¿ _N¿ _ù¿ _ø¿ _≈¿ `#¿ `)¿ `9¿ `?¿ `è¿ `†¿ `Ë¿ a¿ aN¿ ae¿ aà¿ aâ¿ a“¿ b¿ b¿ bX¿ b¶¿ b˜¿ c¿ c¿ ch¿ cµ¿ c‰¿ cÍ¿ dI¿ dO¿ d_¿ de¿ dû¿ dÂ¿ e5¿ e`¿ ek¿ el¿ e∫¿ eŸ¿ eﬂ¿ f(¿ f9¿ f?¿ fù¿ fß¿ f®¿ f˜¿ g¿ g¿ ge¿ gv¿ g|¿ g€¿ gÊ¿ gÁ¿ h"¿ h(¿ ht¿ h¡¿ h¿ hˆ¿ iX¿ if¿ ig¿ i∫¿ i¿¿ j¿ jY¿ jà¿ jé¿ jÔ¿ j¸¿ j˝¿ kF¿ kp¿ kv¿ k∆¿ l¿ l]¿ lä¿ lê¿ l‹¿ m)¿ mX¿ m^¿ mø¿ m≈¿ m’¿ m€¿ n¿ n[¿ n™¿ n÷¿ n„¿ n‰¿ o2¿ oJ¿ oP¿ oí¿ oò¿ o˘¿ oˇ¿ p¿ p¿ pN¿ p[¿ p\¿ p•¿ p´¿ p˙¿ q¿ q¿ q`¿ qq¿ qw¿ qØ¿ qµ¿ r¿ r%¿ r&¿ rr¿ rÄ¿ rÜ¿ r’¿ rÏ¿ rÚ¿ s;¿ sL¿ sR¿ sä¿ sê¿ sÒ¿ s˛¿ sˇ¿ tM¿ tf¿ tl¿ tª¿ u
¿ u¿ u\¿ u©¿ uÒ¿ u˜¿ vF¿ vj¿ vp¿ v–¿ v˘¿ v˙¿ wK¿ wd¿ wj¿ w≥¿ wπ¿ x¿ xR¿ xx¿ x~¿ xŸ¿ xﬂ¿ xÔ¿ xı¿ yE¿ yn¿ yΩ¿ yÓ¿ yı¿ yˆ¿ zG¿ z`¿ zf¿ zØ¿ zˇ¿ {,¿ {2¿ {ç¿ {ì¿ {£¿ {©¿ {Î¿ |:¿ |P¿ |^¿ |_¿ |∞¿ |…¿ |œ¿ }¿ }¿ }g¿ }∑¿ }Ï¿ }Ú¿ ~O¿ ~U¿ ~e¿ ~k¿ ~°¿ ~Ô¿ =¿ F¿ G¿ ò¿ ±¿ ∑¿ Ä ¿ ÄP¿ Ä}¿ ÄÉ¿ ÄÂ¿ ÄÎ¿ Ä˚¿ Å¿ ÅP¿ Åf¿ Å±¿ Å ¿ Åÿ¿ Å⁄¿ Å€¿ Ç3¿ Çn¿ Çr¿ Çœ¿ É¿ É¿ Éo¿ É√¿ Ñ¿ Ñm¿ Ñq¿ Ñø¿ Ñ˙¿ Ñ˛¿ ÖW¿ Ö[¿ Ö®¿ Ö¿ Ü¿ Ü¿ Ü!¿ Ü%¿ Üp¿ Ü©¿ Üø¿ Ü‹¿ Ü˜¿ á¿ á5¿ áP¿ áe¿ áª¿ á„¿ á‰¿ à(¿ à.¿ àt¿ àπ¿ à¡¿ à¬¿ à˙¿ â ¿ âB¿ âq¿ âx¿ ây¿ â√¿ âÎ¿ âÒ¿ ä<¿ äâ¿ ä“¿ ã¿ ã#¿ ãS¿ ãc¿ ãi¿ ã∏¿ ãÏ¿ å¿ å¿ å¿ å\¿ åi¿ åo¿ åΩ¿ å˙¿ ç ¿ ç'¿ ç-¿ ç¿ çœ¿ é¿ é ¿ éM¿ éU¿ éW¿ éX¿ é|¿ éÄ¿ éé¿ éí¿ é«¿ è
¿ èF¿ èW¿ èó¿ èù¿ èÓ¿ êR¿ êX¿ ê¶¿ êÿ¿ ê‡¿ ê·¿ ë¿ ë"¿ ël¿ ëº¿ í,¿ í2¿ íÇ¿ íß¿ í∞¿ í±¿ íÙ¿ ì9¿ ì^¿ ìd¿ ì≥¿ î$¿ î*¿ îz¿ îü¿ î•¿ îÛ¿ ï¿ ï¿ ï¿ ï ¿ ïJ¿ ïN¿ ïõ¿ ïﬂ¿ ï„¿ ïÒ¿ ïı¿ ñA¿ ñM¿ ñà¿ ñ≈¿ ñ◊¿ ó¿ ó¿ ó|¿ óÇ¿ ó ¿ ò¿ ò&¿ ò,¿ ò<¿ òB¿ òê¿ ò°¿ òÚ¿ ô+¿ ô4¿ ô5¿ ôj¿ ôp¿ ô◊¿ ô›¿ ö%¿ öu¿ öÅ¿ öá¿ öó¿ öù¿ öÎ¿ ö¸¿ õ¿ õ¿ õT¿ õÜ¿ õå¿ õÛ¿ õ˘¿ úA¿ úë¿ úù¿ ú£¿ ú≥¿ úπ¿ ù¿ ù¿ ù!¿ ù#¿ ù$¿ ù^¿ ùb¿ ùy¿ ùµ¿ ù ¿ û¿ û#¿ û$¿ ûj¿ û∞¿ û◊¿ ûﬂ¿ û‡¿ ü$¿ üj¿ ü±¿ üÔ¿ ü˘¿ ü˚¿ ü¸¿ †+¿ †7¿ †M¿ †S¿ †û¿ †Ô¿ †ı¿ °A¿ °W¿ °§¿ °˝¿ ¢R¿ ¢k¿ ¢s¿ ¢t¿ ¢†¿ ¢¶¿ ¢ˇ¿ £0¿ £6¿ £v¿ £|¿ £‘¿ §/¿ §5¿ §E¿ §K¿ §ß¿ §À¿ §◊¿ §ÿ¿ §˜¿ §˝¿ •I¿ •O¿ •¢¿ •®¿ •Ô¿ •ı¿ ¶J¿ ¶i¿ ¶¿¿ ¶∆¿ ¶÷¿ ¶‹¿ ß$¿ ßo¿ ß†¿ ß˝¿ ®
¿ ®¿ ®W¿ ®]¿ ®∞¿ ©¿ ©+¿ ©1¿ ©É¿ ©–¿ ™"¿ ™t¿ ™z¿ ™ ¿ ´¿ ´h¿ ´∏¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨h¿ ¨Ç¿ ¨Ñ¿ ¨Ö¿ ¨«¿ ¨À¿ ≠¿ ≠0¿ ≠>¿ ≠Ü¿ ≠ú¿ ≠®¿ ≠√¿ ≠Ÿ¿ ≠ﬂ¿ ≠„¿ ≠‰¿ Æ¿ Æ¿ Æc¿ ÆÆ¿ Æ˝¿ ØK¿ Øö¿ Øü¿ ØÔ¿ ∞@¿ ∞Q¿ ∞V¿ ∞û¿ ∞ü¿ ∞¿¿ ∞‹¿ ±¿ ±¿ ±<¿ ±a¿ ±ä¿ ±Ø¿ ±⁄¿ ≤¿ ≤-¿ ≤]¿ ≤ä¿ ≤¥¿ ≤Ë¿ ≥¿ ≥D¿ ≥k¿ ≥l¿ ≥Æ¿ ≥‰¿ ¥"¿ ¥X¿ ¥ö¿ ¥ÿ¿ µ¿ µd¿ µ™¿ µÍ¿ ∂<¿ ∂Ü¿ ∂»¿ ∑ ¿ ∑A¿ ∑j¿ ∑k¿ ∑Ø¿ ∑–¿ ∑Ï¿ ∏¿ ∏¿ ∏6¿ ∏y¿ ∏}¿ ∏~¿ ∏§¿ ∏œ¿ ∏˙¿ πN¿ πO¿ πï¿ π£¿ π©¿ π¡¿ π⁄¿ ∫!¿ ∫%¿ ∫E¿ ∫ï¿ ∫ø¿ ∫Ê¿ ª*¿ ª.¿ ª/¿ ªg¿ ªó¿ ªò¿ ª—¿ ª◊¿ ª˜¿ ª˝¿ º¿ º¿ ºY¿ ºä¿ º“¿ ºÿ¿ Ω ¿ Ω5¿ ΩI¿ Ωí¿ Ωæ¿ Ω¬¿ Ω›¿ æ¿ æQ¿ æU¿ æV¿ æé¿ æœ¿ æ–¿ ø¿ ø"¿ ød¿ øµ¿ ¿¿ ¿'¿ ¿-¿ ¿z¿ ¿õ¿ ¿°¿ ¿»¿ ¿Œ¿ ¿ﬁ¿ ¿‰¿ ¡3¿ ¡g¿ ¡±¿ ¡«¿ ¡„¿ ¬0¿ ¬k¿ ¬o¿ ¬í¿ ¬Ã¿ √¿ √¿ √¿ √W¿ √]¿ √Ö¿ √°¿ √Û¿ √˜¿ ƒ¿ ƒ?¿ ƒ}¿ ƒÅ¿ ƒÇ¿ ƒº¿ ≈¿ ≈H¿ ≈N¿ ≈ã¿ ≈¶¿ ≈Í¿ ≈Ó¿ ∆¿ ∆2¿ ∆x¿ ∆|¿ ∆}¿ ∆æ¿ ∆Ó¿ ∆Ù¿ «&¿ «B¿ «î¿ «ò¿ «ª¿ «‡¿ »"¿ »&¿ »'¿ »h¿ »n¿ »ø¿ …
¿ …¿ …J¿ …P¿ …n¿ …t¿ …›¿ …„¿  J¿  P¿  ∑¿  Ω¿ À	¿ ÀZ¿ Àf¿ Àl¿ À|¿ ÀÇ¿ À—¿ À˝¿ ÃF¿ ÃÖ¿ Ã£¿ Ã˜¿ Ã˚¿ Õ ¿ ÕE¿ Õà¿ Õå¿ Õç¿ Õ≈¿ Õ¸¿ Õ˝¿ ŒH¿ Œñ¿ Œ·¿ œ.¿ œ|¿ œÇ¿ œ«¿ œÕ¿ –¿ –?¿ –E¿ –Æ¿ –¥¿ —¿ —#¿ —å¿ —í¿ —ﬁ¿ “/¿ “;¿ “A¿ “Q¿ “W¿ “°¿ “º¿ ”¿ ”%¿ ”n¿ ”r¿ ”ô¿ ”◊¿ ‘"¿ ‘&¿ ‘'¿ ‘w¿ ‘µ¿ ‘ª¿ ‘ﬂ¿ ‘˛¿ ’B¿ ’c¿ ’x¿ ’ô¿ ’π¿ ÷¿ ÷[¿ ÷f¿ ÷l¿ ÷}¿ ÷Å¿ ÷ß¿ ÷¿¿ ◊¿ ◊Z¿ ◊¢¿ ◊Ø¿ ◊¸¿ ÿ.¿ ÿÄ¿ ÿŸ¿ Ÿ*¿ Ÿ0¿ Ÿ4¿ Ÿ5¿ Ÿá¿ Ÿ€¿ ⁄'¿ ⁄-¿ ⁄U¿ ⁄¢¿ ⁄∆¿ € ¿ €$¿ €O¿ €t¿ €∫¿ €æ¿ €ø¿ €˘¿ €ˇ¿ ‹5¿ ‹;¿ ‹K¿ ‹Q¿ ‹ç¿ ‹≈¿ ‹˜¿ ›?¿ ›V¿ ›Ü¿ ›ä¿ ›®¿ ›∏¿ ›∆¿ ›ı¿ ﬁ,¿ ﬁ5¿ ﬁH¿ ﬁR¿ ﬁb¿ ﬁá¿ ﬁ±¿ ﬂ¿ ﬂ¿ ﬂ#¿ ﬂ6¿ ﬂ@¿ ﬂx¿ ﬂ|¿ ﬂ}¿ ﬂƒ¿ ﬂ÷¿ ﬂ‹¿ ‡¿ ‡¿ ‡X¿ ‡y¿ ‡–¿ ‡Ú¿ ‡ˆ¿ ·¿ ·d¿ ·Ñ¿ ·¢¿ ·–¿ ·ÿ¿ ·Â¿ ‚+¿ ‚1¿ ‚5¿ ‚6¿ ‚q¿ ‚w¿ ‚æ¿ ‚ÿ¿ ‚ﬁ¿ ‚Ï¿ „¿ „3¿ „E¿ „_¿ „Ø¿ „∫¿ „¬¿ „Ã¿ „“¿ „‚¿ „Ë¿ ‰#¿ ‰D¿ ‰õ¿ ‰Ω¿ ‰¡¿ ‰È¿ Â¿ Â ¿ ÂN¿ ÂV¿ Âc¿ Â§¿ Â˙¿ Ê%¿ Êi¿ Êq¿ Êw¿ Ê{¿ Ê|¿ Êª¿ Ê¡¿ Á¿ ÁW¿ Áà¿ Á¢¿ ÁÈ¿ ÁÌ¿ Ë¿ ËX¿ Ë\¿ Ë]¿ Ër¿ Ë¥¿ Ë∏¿ Ë‘¿ È¿ È¿ È¿ Èo¿ Èu¿ È∆¿ Í¿ ÍK¿ ÍZ¿ Í™¿ Í˜¿ Î&¿ Î^¿ Îñ¿ Îö¿ Î¿¿ Î¡¿ ÎÕ¿ Î„¿ Ï¿ Ï;¿ ÏA¿ Ïq¿ Ïå¿ Ï®¿ Ï—¿ ÏÔ¿ Ì¿ ÌK¿ ÌZ¿ Ì}¿ ÌÖ¿ ÌÆ¿ Ì”¿ Ì€¿ Ó¿ ÓD¿ Óô¿ Ó£¿ Ó≤¿ Óÿ¿ Ó‡¿ Ó¯¿ Ó˛¿ Ô¿ ÔN¿ Ôf¿ Ôl¿ Ôú¿ Ôƒ¿ Ô‹¿ Ô‚¿ ¿ ?¿ W¿ ]¿ |¿ π¿ —¿ ◊¿ ı¿ Ò0¿ ÒH¿ ÒN¿ Ò}¿ Òæ¿ Ò÷¿ Ò‹¿ Òˆ¿ Ú)¿ ÚA¿ ÚG¿ Úf¿ Ú£¿ Úª¿ Ú¡¿ ÚŸ¿ Û¿ Û¿ Û+¿ Û_¿ Ûe¿ Û|¿ Ûö¿ Ûû¿ Û†¿ Û°¿ ÛÏ¿ Û¿ Ù3¿ Ù}¿ Ù»¿ Ù˙¿ Ù˛¿ ı1¿ ı5¿ ım¿ ı¿ ıõ¿ ı°¿ ıÓ¿ ˆ¿ ˆ ¿ ˆS¿ ˆ[¿ ˆ®¿ ˆˆ¿ ˜.¿ ˜g¿ ˜w¿ ˜y¿ ˜z¿ ˜º¿ ˜‘¿ ¯"¿ ¯o¿ ¯∑¿ ˘¿ ˘¿ ˘/¿ ˘5¿ ˘ì¿ ˘û¿ ˘ü¿ ˘ø¿ ˘≈¿ ˙¿ ˙1¿ ˙2¿ ˙O¿ ˙U¿ ˙•¿ ˙‡¿ ˙Ò¿ ˙Ú¿ ˚¿ ˚¿ ˚j¿ ˚ó¿ ˚ù¿ ˚≤¿ ˚∏¿ ˚∆¿ ˚‰¿ ¸¿ ¸
¿ ¸R¿ ¸p¿ ¸∆¿ ˝¿ ˝)¿ ˝C¿ ˝]¿ ˝w¿ ˝ë¿ ˝ú¿ ˝§¿ ˝Æ¿ ˝ƒ¿ ˝≈¿ ˝◊¿ ˝›¿ ˛-¿ ˛{¿ ˛«¿ ˇ¿ ˇ]¿ ˇc¿ ˇ¥¿ ˇ¿¿ ˇ∆¿ ˇ÷¿ ˇ‹¿ ;¿ Ä¿ á¿ â¿ ä¿ …¿ ‹¿*¿z¿≠¿π¿∫¿	¿X¿ã¿ó¿ò¿Ë¿/¿~¿π¿»¿ ¿À¿˜¿0¿1¿g¿k¿´¿Ø¿˝¿¿¿h¿∑¿˛¿F¿î¿¢¿¶¿Ú¿A¿à¿å¿ö¿û¿¿[¿Å¿–¿ﬁ¿	¿	 ¿	H¿	[¿	e¿	Ñ¿	û¿	¢¿	£¿	ƒ¿	‡¿	˜¿	¯¿
6¿
<¿
á¿
…¿
Í¿¿¿Q¿W¿¢¿Â¿¿.¿/¿J¿K¿è¿¢¿£¿Â¿˘¿˙¿¿a¿í¿ò¿È¿¿
¿U¿†¿Ô¿¿"¿=¿j¿ñ¿¨¿„¿¯¿¿3¿9¿=¿>¿Ç¿à¿÷¿Ï¿¿¿+¿G¿Z¿d¿“¿÷¿◊¿¿¿^¿n¿t¿π¿¿O¿U¿¢¿ª¿¿Z¿§¿¿E¿r¿†¿§¿•¿·¿Á¿3¿Ç¿Æ¿¥¿¿Q¿Ñ¿–¿˝¿¿N¿m¿{¿õ¿©¿—¿‡¿.¿4¿8¿9¿ä¿¨¿≤¿Ú¿(¿F¿V¿™¿Ω¿«¿⁄¿ﬁ¿ﬂ¿¿¿e¿¥¿¿Q¿ù¿Î¿7¿U¿[¿©¿“¿ÿ¿ ¿q¿á¿ç¿√¿…¿◊¿Ú¿¿*¿0¿h¿ß¿∆¿ ¿ !¿ 3¿ S¿ £¿ Ò¿!¿!M¿!X¿!y¿!Å¿!á¿!©¿!›¿"(¿"S¿"ñ¿"⁄¿#¿#0¿#6¿#r¿#¢¿#®¿#≈¿#ﬂ¿#Â¿$¿$%¿$@¿$H¿$N¿$j¿$ç¿$ì¿$Æ¿$¥¿$◊¿%¿%¿% ¿%K¿%S¿%]¿%c¿%®¿%ˆ¿&¿&,¿&A¿&Y¿&Ñ¿&’¿'#¿'e¿'n¿'t¿'ì¿'æ¿'¬¿'√¿(¿(U¿([¿(®¿(Ú¿)B¿)ë¿)€¿*(¿*a¿*b¿*n¿*ò¿*ö¿*õ¿*µ¿*Í¿+3¿+N¿+S¿+°¿+√¿+ﬂ¿+Ì¿+Ó¿,=¿,W¿,X¿,®¿,√¿,ƒ¿-¿-O¿-ç¿-Ω¿-«¿-œ¿-”¿-‘¿.¿.f¿.≤¿.≥¿.Õ¿.‡¿.¯¿/¿/¿/i¿/Å¿/À¿0¿0
¿0 ¿00¿04¿05¿0Ä¿0•¿0Á¿1¿1¿1-¿1.¿1t¿1ì¿1î¿1†¿1–¿1“¿1”¿2¿2A¿2B¿2v¿2z¿2∂¿2–¿2‘¿3¿3g¿3µ¿3˚¿4F¿4o¿4s¿4¨¿4∞¿4º¿4»¿5¿5C¿5a¿5Æ¿5˘¿6¿6b¿6Å¿6¢¿6®¿6∞¿6¥¿6 ¿6Œ¿6⁄¿6Á¿7!¿7b¿7¢¿7·¿8-¿8G¿8ñ¿8ﬁ¿8ˇ¿9¿9¿9¿9i¿9Ö¿9ã¿9…¿9Â¿:#¿:$¿:S¿:Y¿:¶¿:¡¿:¬¿:Î¿:Ò¿;9¿;?¿;ã¿;†¿;¢¿;£¿;√¿;«¿<¿<)¿<-¿<e¿<Ç¿<ô¿<ø¿<’¿<÷¿=¿=¿=?¿=d¿=¿=Ä¿=®¿=Æ¿=Ú¿=¯¿>I¿>O¿>ê¿>¿¿>‰¿>Â¿?5¿?X¿?^¿?©¿?Œ¿?‡¿?‚¿?„¿@/¿@4¿@}¿@ò¿@ù¿@÷¿@Ù¿A¿A	¿A#¿A$¿A0¿Ak¿Al¿A¿¿A‡¿A·¿B ¿B¿B¿BW¿BX¿B±¿B÷¿B◊¿B„¿C¿CV¿Cæ¿CŸ¿C¸¿D]¿Dg¿D†¿DØ¿D◊¿E¿EU¿Ea¿Ei¿Eq¿Eä¿E®¿EÆ¿EÀ¿Eœ¿E–¿F¿F]¿F≠¿FÆ¿F∫¿F¸¿G¿G¿G¿G=¿GA¿Gê¿G‡¿H.¿HQ¿HU¿Hß¿Hı¿I¿IP¿Iu¿I∆¿J¿JX¿J®¿Jª¿Jø¿K
¿KT¿K§¿KÛ¿L?¿Lê¿Lﬂ¿M'¿Mc¿Mg¿M±¿M˚¿NK¿Ná¿Nã¿Nÿ¿N‰¿O	¿O¿O1¿OF¿Od¿Oo¿Oª¿OÂ¿OÒ¿P¿P/¿PS¿PX¿PZ¿P[¿P~¿PÇ¿P—¿Q!¿Qo¿Qí¿Qñ¿QÍ¿R8¿Rq¿Ru¿R«¿S¿S#¿S'¿Sr¿Sº¿T¿T[¿Tß¿T¯¿UG¿Uè¿UÀ¿Uœ¿V¿Vc¿V≥¿VÔ¿VÛ¿W@¿WL¿WP¿Wu¿Wy¿W…¿X¿X_¿Xá¿X∂¿X“¿XÊ¿X˚¿Y¿Y¿YF¿YR¿Yë¿YÆ¿YÚ¿Z¿Z$¿Zk¿Zï¿Zü¿Zß¿ZÔ¿Zˆ¿Z˚¿Z˝¿Z˛¿[!¿[%¿[p¿[t¿[¡¿\¿\O¿\S¿\ú¿\Î¿]¿]¿]S¿]†¿]Ï¿^-¿^|¿^Ã¿_¿_l¿_£¿_ß¿_Ò¿`;¿`o¿`s¿`¿¿`Ã¿`–¿`ı¿`˘¿aI¿aî¿aﬂ¿b¿b4¿bP¿bz¿bÖ¿bØ¿b˚¿c¿c^¿cù¿cﬁ¿d¿d+¿dR¿dY¿dg¿d}¿dÅ¿dÉ¿dÑ¿d‘¿dˆ¿d¯¿d˘¿eH¿eq¿eu¿eÉ¿eá¿e—¿eÚ¿f.¿fD¿f[¿f^¿f_¿f§¿f®¿f∂¿f∫¿g¿gD¿gl¿gÑ¿g∞¿g∂¿h¿h¿hP¿h|¿h™¿h´¿hŸ¿hﬂ¿i.¿i~¿iÃ¿j¿jD¿jJ¿jÄ¿jî¿jï¿jƒ¿j ¿k¿ki¿k∂¿l¿l.¿l4¿lj¿l¿lÄ¿lå¿l»¿l ¿lÀ¿m¿m¿mg¿mµ¿m¸¿nF¿ns¿nu¿nv¿n‘¿o¿oG¿od¿of¿og¿o§¿o®¿oˆ¿pA¿pY¿p]¿p©¿p˙¿q9¿q=¿qà¿q“¿r"¿rq¿rΩ¿s¿s]¿s•¿s·¿sÂ¿t/¿ty¿t…¿u¿u!¿u5¿uB¿uP¿uf¿uâ¿uö¿uÆ¿u√¿u·¿uÊ¿v¿v7¿v;¿vY¿vè¿vì¿vî¿vº¿v·¿w¿w/¿wE¿w]¿wy¿wñ¿wü¿w†¿wΩ¿x¿x-¿x7¿xÄ¿x¨¿x∂¿xæ¿xø¿x–¿xÎ¿y¿y5¿y?¿y]¿y°¿yº¿yÿ¿y„¿z	¿z%¿zE¿zF¿zr¿z~¿zÑ¿zÜ¿zá¿z‘¿z‰¿zË¿{¿{3¿{}¿{É¿{‘¿|#¿|r¿|ù¿|£¿|€¿|Ê¿|Á¿})¿}/¿}Ä¿}—¿}◊¿~¿~¿~¿~¿~B¿~F¿~T¿~X¿~ß¿~Õ¿~‚¿¿¿j¿µ¿ˆ¿¸¿Ä¿Ä¿Äa¿Ä{¿Äâ¿Äÿ¿Ä˛¿Å¿ÅR¿Å†¿Å∫¿Å¿¿Å–¿Ç¿Ç¿Ç_¿Çe¿Ç≥¿Ç˛¿É3¿É<¿Éá¿É¿¿É∆¿Ñ¿Ñh¿Ñn¿Ñ~¿Ñª¿Ñ¬¿Ñˆ¿Ñ¸¿ÖJ¿Öï¿Ö÷¿Ö‹¿ÖÏ¿ÖÚ¿Ü;¿ÜT¿Üi¿Ük¿Ül¿ÜΩ¿Ü⁄¿á*¿áM¿áS¿á£¿áÏ¿à=¿àÜ¿à†¿à¶¿àı¿âA¿â{¿âÅ¿âÃ¿âÒ¿ä¿ä¿ä¿ä^¿ä®¿äƒ¿äﬁ¿äﬂ¿äÎ¿ã3¿ãN¿ãP¿ãQ¿ãÉ¿ãá¿ãÃ¿ã–¿å¿åR¿åf¿åj¿å∞¿å€¿åﬂ¿ç¿ça¿çâ¿çç¿ç—¿é
¿é ¿é@¿éA¿éi¿éo¿éº¿è¿è.¿èb¿èí¿è©¿è≠¿èÆ¿èÏ¿èÚ¿ê7¿êT¿êx¿êy¿êÆ¿ê—¿ê“¿ë¿ëG¿ëH¿ëè¿ëú¿ëø¿ë¿¿í¿í9¿íf¿íg¿í™¿íÍ¿í˘¿íˇ¿ìp¿ìÂ¿î+¿î,¿îo¿î∂¿î˚¿ï¿ïV¿ïW¿ïú¿ï„¿ïÚ¿ï¯¿ñe¿ñ÷¿ó(¿ó)¿ón¿óµ¿ó˙¿ò¿òi¿òj¿ò∞¿òÙ¿ô9¿ôÄ¿ô•¿ô´¿ö¿öâ¿öœ¿ö–¿õ¿õZ¿õü¿õÊ¿ú,¿úT¿ú¢¿ú£¿úÊ¿ù¿ù¿ùQ¿ùu¿ù{¿ù¬¿û¿ûI¿ûç¿û‘¿ü¿üF¿üL¿üë¿ü«¿†¿†¿†h¿†≠¿†≥¿°¿°K¿°è¿°∂¿°º¿¢¿¢P¿¢ú¿¢¢¿¢≈¿¢Ê¿£¿£¿£7¿£=¿£>¿£ç¿£“¿£ÿ¿§¿§¿§a¿§Ø¿§Ú¿•<¿•B¿•Ö¿•”¿¶ ¿¶7¿¶R¿¶l¿¶ç¿¶®¿¶√¿¶ﬁ¿¶‰¿¶Â¿ß,¿ßC¿ß^¿ß_¿ß°¿ßœ¿ß’¿®'¿®u¿®ê¿®ë¿®Ÿ¿©¿©U¿©ñ¿©‹¿™ ¿™d¿™p¿™v¿™‚¿´R¿´X¿´»¿¨<¿¨|¿¨}¿¨œ¿¨›¿¨„¿≠2¿≠W¿≠]¿≠§¿≠ÿ¿≠Ÿ¿Æ¿Æ^¿Æn¿Æå¿Æç¿Æ”¿ÆŸ¿Ø&¿Øt¿Øü¿Ø·¿Ø‚¿∞(¿∞g¿∞§¿∞™¿∞˜¿±H¿±s¿±º¿±Ω¿≤¿≤C¿≤S¿≤T¿≤ô¿≤›¿≤¯¿≥¿≥	¿≥Y¿≥¶¿≥≈¿≥À¿¥¿¥¿¥^¿¥}¿¥~¿¥æ¿¥Ì¿µ
¿µ¿µK¿µ{¿µ¢¿µ£¿µÿ¿µﬁ¿∂.¿∂{¿∂∆¿∑¿∑¿∑\¿∑´¿∑˝¿∏J¿∏î¿∏‚¿∏¿π5¿πI¿πJ¿πñ¿π©¿πØ¿πˇ¿∫M¿∫á¿∫–¿∫¸¿ªM¿ª`¿ªf¿ª›¿ª·¿ª‚¿º1¿ºb¿ºh¿º¥¿º¸¿ΩK¿Ωö¿Ω‰¿æ¿æ"¿æm¿æ∫¿ø¿ø7¿ø=¿øç¿ø⁄¿¿*¿¿m¿¿∫¿¡¿¡V¿¡¶¿¡ı¿¡˚¿¬I¿¬ò¿¬Ã¿¬“¿√#¿√n¿√®¿√™¿√´¿√ı¿ƒ¿ƒA¿ƒB¿ƒê¿ƒ’¿ƒË¿ƒÈ¿≈"¿≈B¿≈C¿≈ä¿≈∞¿≈±¿≈Ω¿∆¿∆¿∆N¿∆O¿∆£¿∆¬¿∆√¿«¿«I¿«J¿«V¿«¥¿«‡¿«·¿«Ì¿»S¿»â¿»ä¿»ñ¿»Ù¿… ¿…!¿…-¿…ì¿……¿… ¿…÷¿ O¿ û¿ ü¿ ´¿À,¿ÀW¿Àä¿Àã¿Àó¿Ã¿Ãq¿Ãr¿Ã~¿Õ¿Õh¿Õi¿Õu¿ÕÏ¿Œ;¿Œ<¿ŒH¿Œ«¿œ¿œ¿œ+¿œ}¿œù¿œ¸¿– ¿–¿–Ñ¿—
¿—¿—¿—:¿—[¿—v¿—ë¿—¨¿—≥¿—◊¿—˚¿“U¿“Y¿“Z¿“‡¿”m¿”n¿”z¿”ï¿”Ø¿”–¿”Î¿‘¿‘!¿‘(¿‘Q¿‘u¿‘·¿‘Â¿‘Ê¿’t¿’ô¿’Ø¿’≈¿’€¿’Ò¿÷¿÷¿÷4¿÷5¿÷A¿÷]¿÷}¿÷π¿÷Ω¿÷æ¿◊-¿◊}¿◊~¿◊ä¿◊¶¿◊∆¿ÿ¿ÿ¿ÿ¿ÿv¿ÿ∆¿ÿ«¿ÿ”¿Ÿ¿Ÿ4¿Ÿá¿Ÿã¿Ÿå¿⁄
¿⁄¿⁄Ä¿⁄å¿⁄¡¿⁄Û¿⁄˜¿⁄¯¿€J¿€á¿€à¿€î¿€≥¿€’¿€˘¿€˝¿€˛¿‹H¿‹v¿‹w¿‹É¿‹∆¿‹Í¿›¿›-¿›{¿›à¿›√¿›…¿›Õ¿›Œ¿ﬁ.¿ﬁp¿ﬁq¿ﬁ„¿ﬂC¿ﬂD¿ﬂP¿ﬂö¿ﬂæ¿ﬂŸ¿‡¿‡U¿‡b¿‡§¿‡™¿‡Æ¿‡Ø¿·¿·_¿·`¿·ÿ¿‚>¿‚?¿‚K¿‚ò¿‚±¿‚≤¿‚æ¿„¿„$¿„%¿„1¿„Q¿„t¿„û¿„¢¿„£¿‰¿‰2¿‰3¿‰?¿‰]¿‰Å¿‰Ø¿‰◊¿‰Ë¿‰Ï¿‰Ì¿ÂD¿ÂÄ¿ÂÅ¿Âç¿Âµ¿Â€¿Ê	¿Ê(¿Ê9¿Ê=¿Ê>¿Êë¿Ê–¿Ê—¿Ê›¿ÊÚ¿Á¿Á[¿Á_¿Á`¿Á•¿Á ¿ÁÀ¿Ë,¿Ëv¿Ëw¿ËÉ¿Ëæ¿ËÎ¿ËÔ¿ËÒ¿ËÚ¿È4¿È8¿ÈF¿È§¿È¥¿ÈÂ¿ÈÎ¿Í¿Í>¿Í?¿ÍÑ¿Íä¿Íﬂ¿Î¿ÎH¿Îê¿Îî¿Îï¿Î¥¿Î∫¿Ï¿ÏQ¿Ïj¿Ïk¿Ïò¿Ïû¿ÏÔ¿ÌA¿Ì]¿Ìt¿Ìu¿Ì•¿Ì´¿Ì˚¿ÓJ¿Óf¿Ól¿Ó∫¿Ô	¿ÔX¿Ô¶¿Ô∑¿Ô¸¿5¿7¿8¿Ä¿Ñ¿’¿Ò!¿Òg¿Òk¿Ò±¿Òµ¿Ú¿ÚP¿Ún¿Úr¿Úº¿Û¿Û-¿Ûm¿Ûú¿ÛÚ¿ÛÛ¿Ù¿Ù¿Ù(¿ÙZ¿Ù\¿Ù]¿Ù¨¿Ù∆¿ı¿ı,¿ı-¿ıH¿ık¿ıl¿ıx¿ıì¿ı∆¿ıÁ¿ıˇ¿ˆb¿ˆæ¿˜2¿˜;¿˜A¿˜[¿˜_¿˜`¿˜l¿˜Ä¿˜ß¿˜◊¿˜Í¿˜¿¯¿¯¿¯¿¯ ¿¯!¿¯`¿¯d¿¯¨¿¯˜¿˘E¿˘i¿˘m¿˘ª¿˙
¿˙V¿˙¶¿˙Ù¿˚¿˚¿˚3¿˚q¿˚≥¿˚Ê¿˚Á¿¸¿¸#¿¸l¿¸∂¿¸ˇ¿˝¿˝¿˝<¿˝B¿˝ê¿˝÷¿˛&¿˛E¿˛\¿˛]¿˛à¿˛é¿˛ﬁ¿ˇ%¿ˇs¿ˇ¬¿ˇ˚¿ ¿ O¿ ü¿ Ó¿'¿A¿B¿a¿b¿≤¿Ÿ¿ﬂ¿.¿{¿ì¿ô¿Œ¿‘¿¿L¿ç¿ë¿í¿€¿·¿#¿g¿µ¿¿¿¿#¿ã¿ç¿é¿…¿˛¿#¿'¿(¿}¿ø¿¿¿‰¿Z¿|¿Ä¿Å¿‚¿¿¿T¿Ñ¿“¿	¿	P¿	l¿	¿	å¿	¢¿	»¿	Ì¿	ˆ¿	¸¿
 ¿
¿
\¿
¢¿
£¿
‚¿	¿¿≠¿¿¿¿¿v¿‰¿Â¿	¿¿£¿ß¿®¿¿3¿4¿_¿d¿π¿„¿˚¿'¿7¿T¿Z¿k¿o¿p¿ ¿¿Ò¿=¿C¿Ñ¿§¿¶¿ß¿‹¿¿)¿a¿b¿Ø¿Ú¿¸¿˝¿K¿ó¿≈¿Œ¿œ¿¿m¿∞¿π¿∫¿
¿¿!¿#¿$¿q¿¡¿”¿◊¿(¿;¿Ü¿å¿¿¿∆¿¿¿l¿∫¿
¿¿!¿p¿v¿ú¿¢¿≤¿∏¿¿¿/¿@¿E¿F¿`¿w¿x¿æ¿	¿3¿i¿j¿v¿ô¿∏¿⁄¿˝¿¿¿¿A¿B¿N¿ü¿°¿¢¿Û¿B¿ê¿‹¿¿¿Z¿g¿í¿ﬂ¿0¿t¿z¿À¿¿F¿Å¿ô¿π¿—¿Ì¿Ó¿8¿¿î¿ö¿Á¿ ¿ ¿ H¿ {¿ Æ¿ ·¿!¿!¿!i¿!µ¿!ª¿!…¿"	¿" ¿"7¿"N¿"e¿"o¿"y¿"¿"ë¿"ó¿"∏¿"æ¿"Ã¿#
¿#&¿#B¿#^¿#z¿#Ñ¿#é¿#î¿$¿$!¿$/¿$l¿$è¿$≤¿$’¿$¯¿%¿%¿%¿%õ¿%°¿%Ø¿%¿&¿&<¿&b¿&à¿&í¿&ú¿&Ã¿&„¿&˛¿'¿'6¿'7¿'É¿'ì¿'ª¿'“¿'Ì¿(¿(.¿(/¿(}¿(ò¿(¿¿(◊¿(Ú¿)
¿)3¿)4¿)K¿)j¿)â¿)ú¿)ù¿)Õ¿*¿*F¿*è¿*ÿ¿*Ÿ¿*Ò¿*˝¿+J¿+K¿+t¿+â¿+†¿+‘¿+Î¿+ı¿,¿,6¿,d¿,Ç¿,ô¿,£¿,Ó¿-¿-<¿-q¿-ï¿- ¿-Ÿ¿.¿.!¿.%¿.&¿.2¿.U¿.Å¿.ï¿.õ¿.ª¿.€¿/¿/4¿/_¿/c¿/d¿/p¿/Ö¿/Ø¿0¿0¿0¿0#¿0D¿0Y¿0p¿0©¿0¬¿0Ò¿1¿1G¿1k¿1ù¿1¨¿1—¿1◊¿1€¿1‹¿1Ë¿1˛¿2¿2*¿2c¿2|¿2´¿2œ¿3¿3%¿3W¿3f¿4¿4¿4¿4¿4¿4M¿4Q¿4°¿4Ï¿5>¿5T¿5è¿5±¿5È¿5˝¿6>¿6B¿6C¿6g¿6°¿6µ¿6Ó¿6Ú¿7!¿7f¿7z¿7ò¿7ú¿7ù¿7Ã¿8¿8%¿8C¿8G¿8H¿8ñ¿8º¿8Ÿ¿8⁄¿9¿9:¿9;¿9†¿9’¿9÷¿:)¿:Z¿:[¿:ø¿:È¿:Í¿;N¿;x¿;z¿;{¿;Æ¿;≤¿;¿¿;ƒ¿<¿<`¿<Ø¿<◊¿=#¿=N¿=k¿=Ω¿=Í¿=Î¿>'¿>ñ¿>Ô¿>Û¿>Ù¿?A¿?á¿?÷¿@¿@¿@¿@b¿@¥¿A¿AD¿AH¿AI¿Aç¿Aì¿A·¿B+¿B]¿B©¿B…¿C¿C¿Co¿Cs¿Ct¿Cæ¿Cƒ¿D¿DJ¿Do¿DÀ¿E¿E¿E¿Ei¿E∂¿E›¿Eﬁ¿F'¿F_¿F¿FÅ¿FÇ¿F¥¿Fˇ¿G ¿G¿G?¿G@¿Ga¿G•¿G±¿GË¿GÈ¿Gı¿H8¿H9¿HE¿Hâ¿Hä¿Hñ¿Hπ¿HÂ¿H˘¿Hˇ¿I&¿IV¿Ià¿Iå¿Iç¿Iô¿I·¿I„¿I‰¿J¿JÄ¿JÅ¿Jò¿JØ¿J ¿JÀ¿Jﬂ¿K!¿K-¿Kd¿Ke¿KÄ¿Kò¿K√¿K¿L!¿LL¿LR¿LV¿LW¿Lc¿L≠¿LÆ¿L∫¿M¿M¿M¿M5¿Ma¿Mu¿M{¿M®¿M ¿MÏ¿N¿N¿N¿N$¿NW¿NY¿NZ¿Nå¿N‘¿N’¿NÌ¿O¿O¿OJ¿OV¿Oç¿Oé¿Oö¿O⁄¿O€¿OÁ¿P(¿P)¿P5¿PX¿PÑ¿Pò¿Pû¿P≈¿PÈ¿Q¿Q¿Q¿Q¿QT¿QV¿QW¿Qà¿Qœ¿Q–¿QË¿R ¿R¿RD¿RP¿Rá¿Rà¿Rî¿R”¿R‘¿R‡¿S ¿S!¿S-¿SP¿S|¿Sê¿Sñ¿Sº¿S‡¿T¿T	¿T
¿T¿TK¿TM¿TN¿TÅ¿T“¿T”¿TÙ¿U¿U¿U0¿Uv¿UÇ¿Uπ¿U∫¿U∆¿V0¿V1¿V=¿Vì¿Vî¿V†¿V√¿VÔ¿W¿W	¿W1¿W]¿Wä¿Wé¿Wè¿Wõ¿Wÿ¿W⁄¿W€¿X¿X¿Xn¿X¡¿Y¿Y@¿Y|¿Y±¿Y ¿Yﬁ¿Z"¿Z&¿Z'¿Zt¿Z∫¿ZÎ¿[¿[¿[I¿[M¿[N¿[í¿[‰¿\¿\,¿\@¿\p¿\t¿\u¿\π¿\ø¿]¿]W¿]à¿]°¿]≈¿^¿^	¿^¿^W¿^[¿^\¿^é¿^¡¿^⁄¿^Ó¿_4¿_X¿_\¿_]¿_ê¿_ƒ¿_›¿_Ò¿`G¿`ù¿`÷¿`⁄¿`€¿a¿a;¿a<¿a™¿aÒ¿aÚ¿b[¿bò¿bô¿c¿c=¿c>¿cò¿c›¿cﬁ¿d=¿dz¿d{¿dÎ¿e>¿e?¿eç¿e≥¿e–¿e“¿e”¿f¿fN¿fÉ¿fÕ¿fÈ¿g¿g¿g¿g3¿g4¿g]¿gc¿g¥¿gœ¿gÁ¿g˜¿h¿h+¿h5¿hJ¿hN¿hO¿hü¿h¬¿h»¿i¿i_¿i®¿iÚ¿i¯¿j=¿jP¿j`¿j¿jú¿jØ¿jπ¿jΩ¿jø¿j¿¿k¿k.¿k2¿k¿kÕ¿l¿lj¿ln¿l√¿m¿mp¿m»¿n¿nD¿nH¿n¢¿n«¿nÀ¿nŸ¿n›¿o!¿ok¿oª¿oÂ¿p/¿pw¿pû¿pÎ¿q9¿qS¿qé¿qû¿q¯¿q˛¿rJ¿rê¿rñ¿rÓ¿s¿s¿sw¿s⁄¿t<¿tE¿tF¿tó¿tù¿tı¿uS¿u¿uÖ¿uﬂ¿v<¿vB¿v®¿w¿ws¿w¿wÄ¿w”¿wŸ¿x1¿xâ¿xﬂ¿x˙¿y ¿yZ¿y∞¿y≈¿yÀ¿z/¿zì¿zˆ¿{ ¿{¿{A¿{G¿{°¿{¸¿|¿|¿|k¿|ã¿|ë¿|Ù¿}W¿}π¿}¬¿}ƒ¿}≈¿}ˆ¿~¿~P¿~y¿~ö¿~û¿~Ø¿~±¿~≤¿~Ê¿¿H¿q¿è¿≤¿÷¿˘¿Ä¿Ä7¿Ä;¿ÄL¿ÄN¿ÄO¿Äå¿ÄÆ¿Ä–¿Ä˝¿Å¿Å/¿ÅH¿Åa¿År¿Åt¿Åu¿ÅΩ¿Å¡¿Ç¿Ç&¿Ç*¿Ç8¿Ç<¿Ç≤¿Ç∂¿Ç€¿É¿É¿Ée¿É∂¿Ñ ¿ÑO¿Ñ†¿ÑÒ¿ÖA¿Öc¿Öi¿Ö∏¿ÖÓ¿ÖÙ¿ÜW¿Ü∫¿á¿áÑ¿áä¿á’¿à¿à6¿à<¿àâ¿à‹¿â¿â/¿â@¿âO¿âi¿âá¿âØ¿â…¿âÓ¿ä¿äM¿ä`¿äç¿ä—¿ã¿ãv¿ãä¿ãÂ¿ãÈ¿ãÍ¿å5¿åU¿å[¿å™¿å˚¿çE¿çî¿çÂ¿é6¿éÜ¿é®¿éÆ¿é¸¿è2¿è8¿èõ¿è˛¿êb¿ê»¿êŒ¿ë¿ëe¿ëÄ¿ëÜ¿ë”¿í&¿íf¿íl¿í∏¿ì¿ìP¿ìû¿ìÌ¿î¿î%¿î8¿îK¿îe¿îÉ¿î´¿î≈¿îÿ¿îı¿ï¿ïX¿ïk¿ïò¿ï’¿ñ=¿ñ>¿ñ£¿ñˇ¿óC¿óY¿ó√¿ó–¿ò9¿òO¿ò€¿ò·¿òÂ¿òÊ¿ô6¿ôT¿ôZ¿ô•¿ôÛ¿ö.¿ö4¿öÉ¿ö‘¿õ¿õm¿õæ¿ú¿ú_¿úÅ¿úá¿ú◊¿ù¿ù¿ùÄ¿ù‚¿ûE¿û™¿û∞¿ûˇ¿üO¿ür¿üx¿ü≈¿†¿†X¿†j¿†}¿†ó¿†µ¿†›¿†˙¿°¿°7¿°^¿°Ñ¿°¿¿°”¿¢ ¿¢=¿¢•¿¢π¿£.¿£2¿£3¿£p¿£ê¿£ë¿§ ¿§É¿§Ñ¿•¿• ¿•6¿•L¿•a¿•y¿•ò¿•¨¿•…¿• ¿¶j¿¶à¿¶ù¿¶≤¿¶Ã¿¶ﬂ¿¶Ú¿ß
¿ß"¿ßA¿ßU¿ßr¿ßs¿ß˘¿®¿®+¿®A¿®Y¿®x¿®å¿®•¿®º¿®ÿ¿®Ÿ¿®¸¿©2¿©P¿©p¿©»¿©–¿©›¿™¿™i¿™q¿™w¿™{¿™}¿™~¿™º¿™‰¿´
¿´¿´L¿´õ¿´·¿¨¿¨¿¨i¿¨∏¿¨∆¿¨Ã¿≠¿≠Y¿≠Ü¿≠å¿≠“¿Æ"¿Æo¿Æå¿Æ®¿Æˆ¿Ø¿Ø¿ØA¿ØQ¿Øq¿ØØ¿Øµ¿Ø…¿∞<¿∞U¿∞s¿∞y¿∞}¿∞~¿∞ä¿∞ù¿∞≤¿∞¬¿∞∆¿∞«¿±¿±'¿±(¿±§¿≤¿≤¿≤`¿≤Ö¿≤Õ¿≤È¿≤Î¿≤Ï¿≥6¿≥K¿≥O¿≥y¿≥…¿¥¿¥#¿¥S¿¥g¿¥õ¿¥∏¿¥◊¿¥›¿¥Ì¿µ
¿µ¿µ'¿µ+¿µ,¿µB¿µC¿µà¿µé¿µ◊¿∂¿∂i¿∂¿∂Ω¿∑¿∑K¿∑ï¿∑¬¿∏
¿∏T¿∏o¿∏§¿∏™¿∏‹¿π*¿πw¿πç¿πï¿πô¿πö¿π”¿∫$¿∫r¿∫¬¿∫Œ¿ª¿ªM¿ªN¿ªÉ¿ªŒ¿º¿ºH¿ºö¿º∏¿º∆¿ºÃ¿ºÕ¿Ω¿Ω ¿Ω.¿Ω4¿Ω5¿Ωq¿Ωé¿Ωø¿Ω≈¿Ω…¿Ω ¿ΩÊ¿æ¿æ¿æ"¿æ<¿æ=¿æÅ¿æ°¿æ¢¿æ˛¿ø1¿ø2¿øf¿ø∫¿øº¿øΩ¿ø¿øÙ¿¿)¿¿q¿¿¡¿¡¿¡5¿¡9¿¡Ü¿¡”¿¬!¿¬j¿¬£¿¬Œ¿√7¿√S¿√b¿√Ñ¿√°¿√®¿√¨¿√≠¿√…¿√ ¿ƒ
¿ƒ6¿ƒ7¿ƒk¿ƒq¿ƒø¿≈¿≈X¿≈¶¿≈ˆ¿∆ ¿∆&¿∆m¿∆s¿∆Å¿∆ù¿∆ø¿∆ﬁ¿∆˘¿«¿«	¿«W¿«a¿«g¿«u¿«∆¿«Ò¿»"¿»S¿»Y¿»å¿»◊¿…"¿…m¿…∏¿…æ¿…Â¿ ¿ ¿ !¿ '¿ t¿ …¿ ⁄¿ ‡¿À*¿ÀU¿À™¿À∆¿À ¿ÀÀ¿Ã¿Ã¿Ã_¿Ã¢¿Ã®¿Ãı¿Õ¿ÕG¿Õõ¿Õ∆¿Õ ¿ÕÀ¿Œ¿Œ¿Œb¿ŒÆ¿ŒÈ¿Œı¿œ¿œ¿œ?¿œO¿œS¿œT¿œπ¿–¿– ¿–ã¿–»¿–…¿—%¿—J¿—K¿—û¿—∫¿—º¿—Ω¿“¿“¿“5¿“r¿“Ñ¿“Ã¿“Ÿ¿“⁄¿”(¿”9¿”:¿”ã¿”†¿”¶¿”Ò¿‘/¿‘p¿‘¿‘Å¿‘Ç¿‘∫¿‘æ¿’¿’S¿’û¿’Í¿÷:¿÷`¿÷d¿÷±¿÷ˇ¿◊N¿◊^¿◊b¿◊Æ¿◊˝¿ÿL¿ÿô¿ÿÊ¿Ÿ6¿ŸÖ¿Ÿ“¿ŸÌ¿ŸÒ¿⁄>¿⁄à¿⁄’¿⁄˜¿⁄˚¿€J¿€è¿€‹¿‹-¿‹~¿‹Œ¿‹Ò¿›(¿›o¿›u¿›√¿ﬁ¿ﬁ^¿ﬁ©¿ﬁÿ¿ﬁﬁ¿ﬂ+¿ﬂT¿ﬂZ¿ﬂ´¿ﬂ˘¿‡H¿‡Ö¿‡£¿‡©¿‡¯¿·G¿·M¿·ü¿·»¿·Œ¿‚¿‚o¿‚¿¿„¿„Z¿„•¿„¿‰ ¿‰¿‰T¿‰~¿‰Ñ¿‰¬¿‰»¿Â¿Âe¿Â∂¿Ê¿Ê)¿Ê5¿ÊJ¿Êh¿ÊÅ¿Êß¿Êø¿Ê∆¿Á¿ÁP¿ÁV¿Á≠¿Ë¿Ë
¿Ë%¿Ëe¿Ëó¿Ë∂¿È¿ÈI¿Èî¿È°¿È´¿È≥¿Èπ¿Èˇ¿ÍO¿Í|¿Íä¿Íæ¿Íﬂ¿ÍÌ¿Î$¿ÎI¿ÎW¿ÎX¿Î»¿Ï
¿Ï¿Ï¿Ï¿Ïf¿Ïï¿Ïõ¿ÏÈ¿Ì6¿ÌÑ¿Ìœ¿Ì˛¿Ó¿ÓQ¿Óõ¿ÓÁ¿Ô6¿ÔI¿ÔO¿Ô†¿ÔÔ¿6¿á¿ÿ¿Ò'¿Ò^¿Òd¿Ò≥¿Ú¿ÚS¿Úú¿Ú’¿Ú€¿Û+¿Û|¿ÛÕ¿Ù¿Ùg¿Ù≥¿ı¿ı1¿ı7¿ıÖ¿ı’¿ˆ$¿ˆR¿ˆX¿ˆñ¿ˆ¶¿ˆª¿ˆÿ¿ˆÔ¿˜¿˜-¿˜4¿˜Y¿˜…¿˜œ¿¯¿¯]¿¯c¿¯∫¿˘¿˘¿˘2¿˘r¿˘®¿˘«¿˙¿˙_¿˙™¿˙∑¿˙¡¿˙…¿˙œ¿˚#¿˚e¿˚k¿˚o¿˚p¿˚“¿¸¿¸,¿¸`¿¸û¿¸Œ¿˝¿˝¿˝R¿˝u¿˝à¿˝†¿˝∞¿˝»¿˝€¿˝Â¿˝ı¿˝˘¿˝˙¿˛E¿˛j¿˛Ø¿˛À¿˛Ã¿˛Ê¿ˇ0¿ˇ6¿ˇÑ¿ˇö¿ˇµ¿ˇ…¿ˇŸ¿ˇı¿ ¿ ¿ É¿ á¿ â¿ ä¿ ÿ¿ ‹¿¿\¿m¿è¿ï¿„¿-¿f¿l¿π¿¿¿(¿)¿c¿i¿Ø¿µ¿˜¿¿¿¿M¿S¿ï¿´¿∂¿∏¿π¿¿¿¿2¿@¿x¿Ü¿á¿¿¿Õ¿œ¿–¿¿	¿P¿î¿’¿Ÿ¿"¿r¿ª¿ÿ¿‹¿,¿u¿™¿Æ¿˚¿	:¿	R¿	ï¿	≥¿	π¿
¿
J¿
ö¿
È¿6¿y¿¿∆¿‹¿,¿-¿u¿{¿ß¿≠¿Ω¿√¿¿I¿X¿Y¿™¿˚¿J¿ì¿¢¿®¿Ù¿E¿ì¿€¿)¿s¿y¿∆¿Ã¿¿ˆ¿D¿ê¿‡¿0¿U¿[¿©¿Ú¿C¿ë¿ﬂ¿/¿w¿§¿™¿Ù¿¿¿!¿N¿v¿ç¿Õ¿ˆ¿-¿f¿Ä¿ö¿¢¿¨¿≤¿¿O¿ù¿ª¿¡¿œ¿¸¿?¿g¿~¿æ¿ı¿.¿H¿P¿Z¿`¿±¿˜¿A¿G¿U¿Ç¿ô¿Ì¿&¿@¿W¿∏¿Ò¿¿¿¿#¿n¿∑¿¿@¿F¿j¿p¿Ø¿µ¿¿Q¿¢¿Ì¿<¿ä¿’¿  ¿ q¿ ¬¿ ›¿ „¿ Û¿ ˘¿!I¿!k¿!≥¿!…¿!ˆ¿!˜¿"7¿"V¿"\¿"õ¿"°¿"Í¿#.¿#@¿#A¿#ù¿#Í¿$<¿$B¿$Å¿$á¿$’¿%%¿%G¿%i¿%j¿%≠¿%Ú¿&9¿&n¿&t¿&ô¿&Ø¿&∞¿' ¿'P¿'x¿'y¿'»¿(¿(#¿()¿(o¿(Å¿(®¿(©¿(˛¿)¿)¿)o¿)ª¿*
¿*3¿*V¿*W¿*ß¿*‚¿+	¿+
¿+]¿+≥¿+œ¿+’¿,'¿,u¿,≈¿,Ú¿-¿-¿-_¿-v¿-|¿-“¿-ÿ¿.¿."¿.t¿.º¿.Â¿.Î¿/5¿/I¿/§¿/•¿/Û¿0¿0¿0o¿0u¿0π¿0ø¿1¿1Y¿1©¿1„¿1‰¿22¿2F¿2L¿2¢¿2®¿2Ï¿2Ú¿3D¿3å¿3µ¿3Ï¿3Ì¿4>¿4ê¿4„¿4Ù¿4˙¿5N¿5°¿5Û¿6B¿6ë¿6‰¿77¿7Ü¿7◊¿7Û¿7˘¿81¿8É¿8◊¿9&¿9h¿9n¿9º¿9„¿9È¿9˜¿:¿:7¿:p¿:≠¿:Ã¿;¿;B¿;Q¿;Y¿;c¿;i¿;∫¿<¿<a¿<µ¿<≈¿<À¿=¿=^¿=í¿=ò¿=Ë¿>7¿>É¿>õ¿>∞¿>Õ¿>Œ¿?¿?q¿?ƒ¿? ¿@¿@l¿@º¿A¿A^¿A≤¿B¿B¿B¿BM¿Bp¿Bq¿B¥¿C ¿C¿CQ¿CR¿C°¿CÈ¿CÔ¿D=¿DC¿DÆ¿E¿EQ¿ER¿EÅ¿Eá¿EÃ¿EÁ¿F¿F¿FW¿Fí¿Fò¿G¿Gr¿Gõ¿Gú¿GÌ¿H/¿H5¿H°¿I¿I=¿I>¿Ié¿Iﬁ¿J¿J
¿JO¿Jâ¿Jä¿J◊¿K(¿KK¿KQ¿Kº¿L+¿LT¿LU¿L†¿LÚ¿MA¿Md¿Mj¿M◊¿NH¿NÅ¿NÇ¿Næ¿Nƒ¿O¿OQ¿Oõ¿OÔ¿P@¿Pê¿Pº¿P¬¿Q1¿Q§¿Q™¿R¿R`¿Ra¿Rñ¿Rú¿RÂ¿S.¿SZ¿SÉ¿SÑ¿S“¿T)¿Td¿Te¿T¥¿U ¿U¿UU¿Un¿Ut¿U¿¿V	¿V¿V`¿Va¿V®¿VÆ¿V¸¿WJ¿Wó¿W‰¿X'¿X-¿X{¿X»¿Y¿Y]¿Yn¿Yµ¿Y∂¿Y˝¿Z¿Z;¿Z<¿Zà¿Zò¿Zû¿ZÈ¿Zˆ¿Z¸¿[H¿[ï¿[”¿[Ÿ¿\(¿\t¿\z¿\À¿]¿]e¿]k¿]µ¿^¿^N¿^à¿^â¿^Œ¿^‘¿_¿_!¿_g¿_±¿_∑¿_«¿_Õ¿`¿`6¿`Ä¿`Å¿`∆¿`Ã¿a¿ai¿ao¿aµ¿aˇ¿b¿b¿b¿bi¿bá¿b”¿b‘¿c¿c$¿cp¿cÅ¿cá¿c–¿d!¿d8¿d>¿dá¿d’¿e!¿ei¿eπ¿f¿fO¿fû¿fÎ¿g5¿go¿gu¿gú¿g¢¿g≤¿h¿hO¿hv¿h»¿i¿i¿iW¿i]¿iÆ¿j¿jZ¿jÆ¿jÊ¿jÏ¿k<¿kç¿k‹¿l.¿l~¿l“¿m¿m$¿mu¿m≈¿n¿nq¿n°¿nı¿oC¿oá¿oç¿o‡¿p/¿pz¿p»¿q¿q#¿qw¿q»¿r¿r¿rh¿rÉ¿râ¿ró¿r¨¿r’¿rË¿rˇ¿s¿s¿s;¿sq¿sw¿s–¿sÓ¿t¿t¿t'¿tV¿tw¿tÆ¿t‚¿u¿u+¿uG¿uÑ¿u¢¿u¿¿v¿v4¿vb¿vs¿và¿vº¿vˇ¿w&¿w0¿w6¿wE¿wM¿wW¿w]¿w∂¿wº¿w ¿wﬂ¿x#¿x6¿xM¿x`¿xy¿xÅ¿xá¿xµ¿xÎ¿xÒ¿yJ¿yh¿yâ¿yè¿y°¿y–¿yÒ¿z(¿z\¿zÜ¿z±¿zÕ¿{
¿{(¿{F¿{å¿{∫¿{Ë¿{˘¿|¿|B¿|Ö¿|õ¿|œ¿}¿}/¿}9¿}?¿}N¿}V¿}`¿}f¿}Ø¿}˙¿~-¿~3¿~C¿~I¿~ó¿~Æ¿~Ã¿~˚¿¿D¿k¿å¿´¿¨¿¿ˆ¿ÄG¿Ä†¿ÄÛ¿ÅG¿Åô¿ÅÎ¿Ç"¿Ç(¿Çx¿Ç¿¿Ç∆¿É¿ÉW¿ÉÇ¿Éà¿É÷¿Ñ ¿Ñ&¿Ñr¿Ñø¿Ö¿Ö¿Öp¿ÖÅ¿Öá¿Öï¿Ö™¿Ö”¿ÖÊ¿Ö˝¿Ü¿Ü¿Ü9¿Üo¿Üu¿ÜŒ¿ÜÏ¿á¿á¿á%¿áT¿á§¿áÛ¿àD¿à`¿à•¿àÔ¿â'¿âR¿âà¿â±¿âÿ¿ä¿ä0¿ä6¿äè¿äÍ¿ãD¿ãÜ¿ã≤¿ãﬁ¿å¿å\¿åh¿åâ¿åÁ¿åÒ¿å˜¿ç¿ç¿ç¿ç¿çw¿ç}¿çã¿ç†¿ç‰¿ç˜¿é¿é!¿é:¿éB¿éH¿év¿é¨¿é≤¿è¿è)¿èJ¿èP¿èb¿èë¿è·¿ê0¿êÅ¿êù¿ê‚¿ë,¿ëj¿ë¢¿ëÕ¿í¿í,¿íS¿íÉ¿í´¿í±¿ì¿ìc¿ìæ¿î¿îf¿î¨¿î’¿îÔ¿ï*¿ïF¿ïb¿ï¶¿ï“¿ï˛¿ñ¿ñD¿ñ{¿ñ∞¿ñÂ¿ñÎ¿óE¿óü¿ó˜¿ò>¿òm¿òy¿òö¿ô¿ô¿ô¿ô'¿ô/¿ô9¿ô?¿ôO¿ôU¿ô¢¿ô∑¿ôÿ¿ö¿ö.¿öU¿ö¿ö£¿ö≈¿ö∆¿õ¿õ¿õi¿õ~¿õÑ¿õ™¿ú¿ú¿ú¿úR¿úì¿ú≥¿ù¿ù¿ùJ¿ùi¿ùà¿ù‰¿ùË¿ùÈ¿ûS¿û»¿û…¿ü%¿üÅ¿ü∆¿üÎ¿üÏ¿ü¯¿†F¿†^¿†_¿†k¿†ô¿†≥¿†Ô¿†¸¿° ¿°Ö¿°ã¿°è¿°ê¿°Ú¿¢L¿¢M¿¢¬¿£E¿£F¿£R¿££¿£æ¿£ø¿£À¿§*¿§U¿§V¿§b¿§π¿§ÿ¿§Ÿ¿§Â¿•H¿•y¿•z¿•Ü¿•≈¿•∆¿¶%¿¶S¿¶T¿¶`¿¶∏¿¶‡¿¶·¿¶Ì¿ßK¿ßw¿ßx¿ßÑ¿ß¨¿ßÃ¿®
¿®¿®)¿®-¿®.¿®{¿®¨¿®≠¿®π¿®ÿ¿©	¿©%¿©9¿©=¿©>¿©é¿©¬¿©√¿©œ¿™+¿™K¿™£¿™ß¿™®¿´'¿´ñ¿´ó¿´£¿´ﬁ¿¨ ¿¨2¿¨6¿¨7¿¨ä¿¨À¿¨Ã¿¨ÿ¿≠¿≠A¿≠E¿≠F¿≠ü¿≠ﬁ¿≠ﬂ¿≠Î¿Æ	¿Æ8¿ÆY¿Æü¿Æ£¿Æ§¿Æ˙¿Ø3¿Ø4¿Ø@¿Ød¿Øì¿Ø∫¿∞ ¿∞¿∞¿∞a¿∞†¿∞°¿∞≠¿∞‚¿±¿±¿±¿±w¿±≠¿±Æ¿±∫¿±Ô¿≤¿≤/¿≤w¿≤{¿≤|¿≤¿≥h¿≥i¿≥u¿≥ï¿≥¬¿≥∆¿≥«¿¥¿¥i¿¥j¿¥v¿¥†¿¥¿¿µ¿µ¿µ¿µì¿∂¿∂¿∂"¿∂O¿∂q¿∂≥¿∂∑¿∂∏¿∑¿∑u¿∑v¿∑Ç¿∑Ω¿∑ﬂ¿∏¿∏Y¿∏]¿∏^¿∏ƒ¿π8¿π9¿πE¿πo¿πè¿πÈ¿πÌ¿πÓ¿∫b¿∫‰¿∫Â¿∫Ò¿ª+¿ªJ¿ªå¿ªê¿ªë¿ªˇ¿ºp¿ºq¿º}¿º‹¿º¸¿Ωx¿Ω|¿Ω}¿æ¿æ ¿æ3¿æE¿æY¿æn¿æá¿æ†¿æ∂¿æŸ¿æÙ¿æı¿ø¿ø+¿øl¿øp¿øq¿ø‘¿¿2¿¿3¿¿?¿¿{¿¿ù¿¿¡¿¡C¿¡\¿¡™¿¡∞¿¡¥¿¡µ¿¬2¿¬º¿¬Ω¿¬…¿√¿√0¿√O¿√n¿√•¿√ÿ¿ƒ
¿ƒ>¿ƒs¿ƒ¶¿ƒÿ¿≈¿≈A¿≈z¿≈∞¿≈ı¿∆¿∆\¿∆b¿∆f¿∆g¿«¿«;¿«O¿«e¿«z¿«ë¿«©¿«ø¿«‘¿«Î¿»¿»&¿»@¿»_¿»`¿»l¿»¥¿»÷¿»¯¿…¿…N¿…Ñ¿…π¿…¿ (¿ [¿ ç¿ ¡¿ ˆ¿À/¿Àe¿À™¿À√¿Ã¿Ã¿Ã¿Ã¿ÃÕ¿Ã¿Õ¿Õ¿Õ5¿ÕO¿Õj¿ÕÄ¿Õï¿Õ¨¿Õƒ¿ÕÁ¿Œ¿Œ ¿Œ!¿Œ-¿ŒS¿Œw¿Œ§¿Œ®¿Œ©¿Œˇ¿œ5¿œ6¿œB¿œ}¿œ…¿œı¿–¿–D¿–|¿–Ä¿–Å¿–ç¿–ÿ¿—1¿—5¿—6¿—B¿—è¿—±¿—¸¿“¿“I¿“M¿“N¿“≥¿”$¿”%¿”1¿”|¿”°¿”Ï¿”¿”Ò¿‘_¿‘—¿‘“¿‘ﬁ¿‘¸¿’+¿’N¿’t¿’õ¿’º¿’‹¿’˛¿÷A¿÷B¿÷j¿÷î¿÷ﬂ¿÷Â¿◊2¿◊ö¿◊†¿◊°¿◊Ë¿ÿ'¿ÿ(¿ÿR¿ÿr¿ÿó¿ÿº¿ÿ·¿Ÿ¿Ÿ9¿Ÿ[¿Ÿë¿Ÿ«¿Ÿ˚¿⁄/¿⁄U¿⁄z¿⁄°¿⁄…¿⁄œ¿⁄–¿€9¿€z¿€≤¿€≥¿€Ÿ¿‹8¿‹~¿‹Ö¿‹Ü¿‹ü¿‹Ì¿‹Û¿‹˜¿‹¯¿›¿›%¿›T¿›{¿›¢¿›Ã¿›¿ﬁ¿ﬁD¿ﬁE¿ﬁm¿ﬁö¿ﬁË¿ﬁÓ¿ﬂ¿ﬂj¿ﬂp¿ﬂ¨¿‡%¿‡+¿‡c¿‡d¿‡ä¿‡ﬂ¿·)¿·0¿·1¿·J¿·ò¿·û¿·¢¿·£¿‚7¿‚V¿‚y¿‚ì¿‚±¿‚≈¿‚Ê¿‚ˇ¿„¿„-¿„K¿„L¿„X¿„∞¿‰¿‰¿‰¿‰s¿‰Ÿ¿‰€¿‰‹¿Â
¿ÂI¿ÂJ¿Âí¿Âñ¿Â ¿ÂŒ¿Ê¿ÊW¿Êô¿Ê≤¿ÊÒ¿Ê˜¿ÁB¿ÁÑ¿Á•¿ÁŒ¿Áœ¿Ë¿Ë¿Ëa¿Ë§¿Ë≈¿ËÔ¿Ë¿È¿È ¿Èo¿Èæ¿Í¿Í7¿Í8¿Íz¿ÍÄ¿Í∑¿Î¿ÎU¿Îû¿Î§¿ÎÙ¿ÏB¿Ïo¿Ïu¿Ï≈¿Ì¿Ì'¿Ì-¿Ì|¿Ìë¿ÌΩ¿Ìæ¿Ó¿Ó1¿ÓC¿ÓD¿Óä¿Óê¿Óﬁ¿ÓÙ¿Ô¿Ô¿ÔX¿Ô^¿ÔØ¿Ô·¿¿¿¿T¿û¿∫¿¿¿ˆ¿Ò¿Ò¿Ò¿ÒJ¿Òb¿Òá¿Òª¿Ò¡¿Ò◊¿Ú'¿ÚD¿Ú^¿Úo¿ÚÆ¿Ú∏¿Ú¬¿Ú…¿ÚÕ¿ÚŒ¿Û,¿ÛÅ¿ÛÇ¿Ûé¿Ûª¿Û”¿Û¯¿Ù,¿Ù2¿Ù3¿ÙX¿ÙÄ¿Ù∂¿Ù∫¿Ùª¿ı¿ıa¿ıb¿ın¿ıÅ¿ıô¿ı©¿ı¡¿ı‘¿ıﬁ¿ˆ¿ˆ¿ˆ¿ˆ¿ˆa¿ˆÜ¿ˆ ¿ˆÊ¿ˆÁ¿˜¿˜¿˜¿˜)¿˜=¿˜M¿˜i¿˜|¿˜Ü¿˜ˆ¿˜˙¿˜˚¿¯¿¯e¿¯é¿¯ê¿¯ë¿¯ÿ¿¯‹¿˘!¿˘f¿˘á¿˘»¿˙¿˙+¿˙a¿˙b¿˙ù¿˙£¿˙Á¿˚.¿˚e¿˚™¿˚Ê¿˚˛¿˚ˇ¿¸.¿¸4¿¸¿¸œ¿˝¿˝.¿˝0¿˝1¿˝ë¿˝¿¿˝¡¿˛¿˛%¿˛&¿˛2¿˛]¿˛^¿˛j¿˛Ö¿˛†¿˛‰¿˛Í¿ˇ!¿ˇ=¿ˇ\¿ˇp¿ˇ√¿ 
¿ /¿ C¿ G¿ H¿ °¿ €¿ ‹¿ ˆ¿ ¯¿ ˘¿¿¿N¿]¿w¿}¿»¿¿-¿3¿t¿z¿…¿‚¿Û¿!¿@¿[¿∞¿±¿·¿¿/¿Z¿Å¿®¿“¿”¿¿	¿[¿~¿ì¿î¿”¿Ÿ¿'¿s¿µ¿Ã¿Õ¿¿:¿;¿m¿s¿¶¿¨¿Ÿ¿L¿Ç¿∂¿∫¿ª¿˜¿˝¿	0¿	l¿	m¿	∫¿	¿¿	˝¿
L¿
s¿
y¿
Ω¿¿U¿w¿ã¿û¿¥¿˜¿˚¿¸¿N¿\¿|¿è¿£¿¬¿È¿¿Ù¿ı¿%¿+¿t¿π¿›¿„¿	¿V¿†¿Î¿7¿Ö¿’¿"¿f¿l¿ª¿€¿¿(¿=¿T¿i¿x¿ô¿°¿Æ¿≈¿‡¿Ô¿¿9¿p¿≤¿Ω¿≈¿À¿œ¿–¿	¿¿W¿]¿Ä¿Œ¿¿¿	¿¿5¿a¿ú¿Ã¿˚¿¿8¿_¿e¿ú¿Ω¿√¿÷¿⁄¿€¿Á¿
¿,¿?¿E¿`¿Ä¿¢¿Õ¿—¿“¿ﬁ¿¿¿i¿ª¿◊¿¿,¿F¿L¿M¿ä¿¿¿¡¿€¿(¿Z¿è¿ê¿…¿¿¿H¿u¿v¿≠¿⁄¿€¿*¿d¿ä¿ê¿ë¿©¿≠¿Æ¿∫¿˝¿ˇ¿ ¿G¿K¿ö¿∞¿Ó¿¿¿`¿u¿∂¿˚¿-¿Z¿x¿|¿}¿∑¿Ω¿ˆ¿4¿y¿¬¿ ¿ 9¿ Å¿ º¿ Ì¿!)¿!D¿!^¿!ä¿!í¿!ª¿!√¿!«¿!»¿!˘¿!ˇ¿"8¿"u¿"∞¿"·¿#¿#1¿#K¿#Ö¿#ç¿#∂¿#æ¿#¬¿#√¿$¿$[¿$\¿$π¿%¿%¿%c¿%Ø¿%∞¿%‰¿&¿&¿&¿&0¿&1¿&Z¿&`¿&±¿&Ã¿&‰¿&Ù¿'¿'(¿'2¿'G¿'K¿'L¿'ú¿'ø¿'≈¿(¿(\¿(©¿(ˆ¿)D¿)b¿)u¿)Ö¿)§¿)¡¿)‘¿)ﬁ¿)Ó¿)Ú¿)Û¿*>¿*c¿*Ø¿*À¿*Õ¿*Œ¿+¿+¿+l¿+Ñ¿+•¿+ﬁ¿+‰¿,4¿,Ü¿,†¿,¶¿,Ù¿-G¿-à¿-≈¿-‰¿.¿.¿.3¿.F¿.l¿.è¿.ê¿.€¿/¿/h¿/ö¿/“¿/Ú¿/ˆ¿/˜¿0!¿0'¿0b¿0s¿0t¿0ü¿0•¿0‡¿0Ú¿0Û¿1%¿1+¿1b¿1{¿1|¿1Ã¿1Ô¿1ı¿2@¿2e¿2w¿2x¿2∆¿2‚¿2Ë¿33¿3Ä¿3ë¿3ó¿3Â¿4¿4V¿4X¿4Y¿4π¿4◊¿4ÿ¿5¿5¿5g¿5π¿5”¿5Ÿ¿6'¿6z¿6ª¿6¯¿7¿74¿7L¿7e¿7x¿7û¿7•¿7π¿7œ¿8¿8,¿8z¿8~¿8¿8·¿94¿95¿9û¿:,¿:-¿:<¿:=¿:ñ¿:≤¿:≥¿:ø¿:Í¿:Î¿:˚¿:¸¿;V¿;s¿;t¿;Ä¿;Æ¿;Ø¿;∆¿;«¿<(¿<L¿<M¿<Y¿<ú¿<ù¿<©¿<ı¿=¿=¿=¿=m¿=†¿=∫¿=¿¿=ı¿>¿>¿>¿>N¿>i¿>Ü¿>ƒ¿?¿?&¿?d¿?Ö¿?ª¿?¡¿?‚¿@¿@¿@/¿@j¿@|¿@Ä¿@Å¿@Ï¿AB¿AD¿AE¿Az¿A™¿A´¿A„¿AÁ¿B1¿B>¿BÅ¿BÇ¿B—¿BÊ¿BÈ¿C6¿CS¿CV¿C¢¿C•¿C∑¿C∫¿C≈¿C˘¿C¸¿D7¿Dt¿Dy¿D|¿Dõ¿DÀ¿D–¿D◊¿D⁄¿E/¿EÖ¿E±¿E¥¿F
¿F>¿Ft¿Fª¿Fˇ¿G<¿GR¿G~¿Gì¿Gß¿G‘¿G„¿H#¿H+¿H8¿HU¿H[¿Ha¿Hs¿Hä¿H¶¿H™¿H≈¿H«¿H»¿I¿Ie¿Ii¿Iπ¿J	¿J>¿Jy¿Jæ¿Jø¿JÙ¿K¿K¿K_¿Kz¿K{¿Ká¿Kù¿K˜¿L¿L(¿Lo¿Lò¿Lû¿Lº¿L¿¿L¬       ,áﬁ™å–ÑÎ/// An immutable 32 bit color value in ARGB format.
///
/// Consider the light teal of the Flutter logo. It is fully opaque, with a red
/// channel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue
/// channel value of 0xF5 (245). In the common "hash syntax" for color values,
/// it would be described as `#42A5F5`.
///
/// Here are some ways it could be constructed:
///
/// ```dart
/// Color c1 = const Color(0xFF42A5F5);
/// Color c2 = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);
/// Color c3 = const Color.fromARGB(255, 66, 165, 245);
/// Color c4 = const Color.fromRGBO(66, 165, 245, 1.0);
/// ```
///
/// If you are having a problem with `Color` wherein it seems your color is just
/// not painting, check to make sure you are specifying the full 8 hexadecimal
/// digits. If you only specify six, then the leading two digits are assumed to
/// be zero, which means fully-transparent:
///
/// ```dart
/// Color c1 = const Color(0xFFFFFF); // fully transparent white (invisible)
/// Color c2 = const Color(0xFFFFFFFF); // fully opaque white (visible)
/// ```
///
/// See also:
///
///  * [Colors](https://api.flutter.dev/flutter/material/Colors-class.html), which
///    defines the colors found in the Material Design specification. å⁄Ç— è}èÇÇ|/// Construct a color from the lower 32 bits of an [int].
///
/// The bits are interpreted as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value.
///
/// In other words, if AA is the alpha value in hex, RR the red value in hex,
/// GG the green value in hex, and BB the blue value in hex, a color can be
/// expressed as `const Color(0xAARRGGBB)`.
///
/// For example, to get a fully opaque orange, you would use `const
/// Color(0xFFFF9000)` (`FF` for the alpha, `FF` for the red, `90` for the
/// green, and `00` for the blue).èÉ	èà  èñèêèûèòè†èØÇÇëvëwëÅ£/// Construct a color from the lower 8 bits of four integers.
///
/// * `a` is the alpha value, with 0 being transparent and 255 being fully
///   opaque.
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromRGBO], which takes the alpha value as a floating point
/// value.ëÄëÖ  ëáëå  ëéëì  ëïëö  -ë®ë¢í$ë™í"íë‡ëæë´ëºë∑ë¨ëµëØë≠ë±ë∫ëÕëﬁëŸëŒë◊ë—ëœë”ë‹ëÔëˇë˚ëë˘ëÛëÒëıë˛íí!ííííííí í&í5É î!î"î*Å /// Create a color from red, green, blue, and opacity, similar to `rgba()` in CSS.
///
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
/// * `opacity` is alpha channel of this color as a double, with 0.0 being
///   transparent and 1.0 being fully opaque.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromARGB], which takes the opacity as an integer value.î+î0  î2î7  î9î>  î@îH  3î\îVï(î^ï&îÚîºîÜî_îÑîî`î}îwîaîuîqîjîbîlîtîyîÇîñî∫îµîóî≥î≠îòîØî∏îÃîÔîÎîÕîÈî„îŒîÂîÓïï%ï!ïïïïïï$ï*ï9Åñ?ÄÎ/// A 32 bit value representing this color.
///
/// The bits are assigned as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value. ñIÄ‹óÄß/// The alpha channel of this color in an 8 bit value.
///
/// A value of 0 means this color is fully transparent. A value of 255 means
/// this color is fully opaque.   ó)Äœó‡Ä£/// The alpha channel of this color as a double.
///
/// A value of 0.0 means this color is fully transparent. A value of 1.0 means
/// this color is fully opaque.   ó¸aò;4/// The red channel of this color in an 8 bit value.   òadò¢6/// The green channel of this color in an 8 bit value.   ò…bô	5/// The blue channel of this color in an 8 bit value.   ±Y/±m   ±Y±Zô/Å	ôÚÄ¥/// Returns a new color that matches this color with the alpha channel
/// replaced with `a` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ô¸ö   ö<ÅUõÄ∆/// Returns a new color that matches this color with the alpha channel
/// replaced with the given `opacity` (which ranges from 0.0 to 1.0).
///
/// Out of range values will have unexpected effects. õõ%   õïÅúVÄ≤/// Returns a new color that matches this color with the red channel replaced
/// with `r` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ú^úc   ú†Å	ùcÄ¥/// Returns a new color that matches this color with the green channel
/// replaced with `g` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ùmùr   ù≠ÅûoÄ≥/// Returns a new color that matches this color with the blue channel replaced
/// with `b` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ûxû}   û˜Ä≈ü  üü&   ü¿ÇK†ŒÄ˙/// Returns a brightness value between 0 for darkest and 1 for lightest.
///
/// Represents the relative luminance of the color. This value is computationally
/// expensive to calculate.
///
/// See <https://en.wikipedia.org/wiki/Relative_luminance>.   ¢áAßÑ«/// Linearly interpolate between two colors.
///
/// This is intended to be fast but as a result may be ugly. Consider
/// [HSVColor] or writing custom logic for interpolating colors.
///
/// If either color is null, this function linearly interpolates from a
/// transparent instance of the other color. This is usually preferable to
/// interpolating from [material.Colors.transparent] (`const
/// Color(0x00000000)`), which is specifically transparent _black_.
///
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]). Each channel
/// will be clamped to the range 0 to 255.
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController]. ßß  ß ß(  ß*ß2   ©TÜ ´hÅˆ/// Combine the foreground color as a transparent color over top
/// of a background color, and return the resulting combined color.
///
/// This uses standard alpha blending ("SRC over DST") rules to produce a
/// blended color from two colors. This can be used as a performance
/// enhancement when trying to avoid needless alpha blending compositing
/// operations for two things that are solid colors with the same shape, but
/// overlay each other: instead, just paint one with the combined color. ´s´z  ´Ö´å   ØxÄÌ∞w/// Returns an alpha value representative of the provided [opacity] value.
///
/// The [opacity] value may not be null. ∞∞   ∞iÄÏ∞É  ∞Ü∞é  ∞i∞j±åW±ü   ±å±ç ¿ ¨Ö¿ G¿ ≠6Ä™/// A description of the style to use when drawing on a [Canvas].
///
/// Most APIs on [Canvas] take a [Paint] object to describe the style
/// to use for that operation. ¿ ≠@Ä¢ ¿ ≠û¿ ≠£Y/// Constructs an empty [Paint] object with all fields initialized to
/// their defaults.  '¿ ∞¬L¿ ∞Ì 	¿ ∞¬¿ ∞√¿ ∞…¿ ∞⁄¿ ∞ ¿ ∞ı¿ ∞˝¿ ±¿ ∞˛¿ ±'¿ ±$ ¿ ±9¿ ±>!¿ ±O ¿ ±^¿ ±c%¿ ±t ¿ ±á¿ ±å!¿ ±ù ¿ ±¨¿ ±±'¿ ±¬ ¿ ±◊¿ ±‹%¿ ±Ì ¿ ≤ ¿ ≤&¿ ≤ ¿ ≤*¿ ≤/,¿ ≤@ ¿ ≤Z¿ ≤_)¿ ≤p ¿ ≤á¿ ≤å&¿ ≤ù ¿ ≤±¿ ≤∂0¿ ≤« ¿ ≤‰¿ ≤Í,¿ ≤˚ ¿ ≥¿ ≥(¿ ≥+ ¿ ≥@¿ ≥F#¿ ≥W ¿ ≥g¿ ≥n>¿ ≥ ¿ ≥®¿ ≥ï¿ ≥´¿ ≥∞2¿ ≥¡ ¿ ≥ﬁ¿ ≥—¿ ≥·¿ ≥Ê:¿ ≥˜ ¿ ¥¿ ¥¿ ¥¿ ¥$2¿ ¥5 ¿ ¥R¿ ¥E¿ ¥U¿ ¥Z>¿ ¥k ¿ ¥î¿ ¥Å¿ ¥ó¿ ¥ú:¿ ¥≠ ¿ ¥“¿ ¥¡¿ ¥’¿ ¥⁄<¿ ¥Î ¿ µ¿ µ ¿ µ¿ µH¿ µ+ ¿ µ^¿ µF¿ µa¿ µfB¿ µw ¿ µ§¿ µè¿ µß¿ µ¨<¿ µΩ ¿ µ‰¿ µ“¿ µÁ¿ µÏN¿ µ˝ ¿ ∂6¿ ∂¿ ∂9¿ ∂>F¿ ∂O ¿ ∂Ä¿ ∂i¿ ∂É¿ ∂à>¿ ∂ô ¿ ∂¬¿ ∂Ø¿ ∂≈¿ ∂ 4¿ ∂€ ¿ ∂˙¿ ∂Ï¿ ∂˝¿ ∑C%¿ ∑T ¿ ∑f¿ ∑“3¿ ∑˝ ¿ ∑“¿ ∑”¿ ∑Ÿ¿ ∑Í¿ ∑⁄¿ ∏Ä"¿ ∏ë ¿ ∏°¿ ∏¶'¿ ∏∑ ¿ ∏Ã¿ ∏—'¿ ∏‚ ¿ ∏˜¿ ∏¸"¿ π ¿ π¿ ªi,¿ ªz ¿ ªã¿ æê=¿ æ° ¿ æ∂¿ æø¿ æ¿¿ æ«¿ æ»¿ Õ«3¿ Õ€ ¿ Õ˜¿ È Çû¿ Î®Å"/// Whether to dither the output when drawing some elements such as gradients.
///
/// It is not expected that this flag will be used in the future; please leave
/// feedback in <https://github.com/flutter/flutter/issues/112498> if there is
/// a use case for this flag to remain long term.
¿ ÍM¿ ÍN¿ ÍX¿ Îò¿ Í^¿ ÍÆ¿ Í˚¿ Î*¿ Îb¿ Î∫¿ πQÄ”¿ πÃi/// Whether to apply anti-aliasing to lines and images drawn on the
/// canvas.
///
/// Defaults to true.   ¿ ∫'Å¿ ∫+  ¿ ∫7
¿ ∫=   ¿ ªöÇ'¿ ΩAÅÑ/// The color to use when stroking or filling a shape.
///
/// Defaults to opaque black.
///
/// See also:
///
///  * [style], which controls whether to stroke or fill (or both).
///  * [colorFilter], which overrides [color].
///  * [shader], which overrides [color] with more elaborate effects.
///
/// This color is not used when compositing. To colorize a layer, use
/// [colorFilter].   ¿ ΩƒÄê¿ Ω»  ¿ ΩŒ¿ Ω’   ¿ æ“Éú¿ ¡◊Ç“/// A blend mode to apply when a shape is drawn or a layer is composited.
///
/// The source colors are from the shape being drawn (e.g. from
/// [Canvas.drawPath]) or layer being composited (the graphics that were drawn
/// between the [Canvas.saveLayer] and [Canvas.restore] calls), after applying
/// the [colorFilter], if any.
///
/// The destination colors are from the background onto which the shape or
/// layer is being composited.
///
/// Defaults to [BlendMode.srcOver].
///
/// See also:
///
///  * [Canvas.saveLayer], which uses its [Paint]'s [blendMode] to composite
///    the layer when [Canvas.restore] is called.
///  * [BlendMode], which discusses the user of [Canvas.saveLayer] with
///    [blendMode].   ¿ ¬qÄ†¿ ¬u  ¿ ¬¿ ¬ä   ¿ √Ä·¿ √ôk/// Whether to paint inside shapes, the edges of shapes, or both.
///
/// Defaults to [PaintingStyle.fill].   ¿ √˘Äá¿ √˝  ¿ ƒ¿ ƒ   ¿ ƒÑÅi¿ ≈òÄ˛/// How wide to make edges drawn when [style] is set to
/// [PaintingStyle.stroke]. The width is given in logical pixels measured in
/// the direction orthogonal to the direction of the path.
///
/// Defaults to 0.0, which correspond to a hairline width.   ¿ ≈Äã¿ ≈Ù  ¿ ∆ ¿ ∆   ¿ ∆Å¿ «6Ä†/// The kind of finish to place on the end of lines drawn when
/// [style] is set to [PaintingStyle.stroke].
///
/// Defaults to [StrokeCap.butt], i.e. no caps.   ¿ «öÄã¿ «û  ¿ «®¿ «≥   ¿ »)Ñ—¿ ÃñÑ+/// The kind of finish to place on the joins between segments.
///
/// This applies to paths drawn when [style] is set to [PaintingStyle.stroke],
/// It does not apply to points drawn as lines with [Canvas.drawPoints].
///
/// Defaults to [StrokeJoin.miter], i.e. sharp corners.
///
/// Some examples of joins:
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeMiterLimit] to control when miters are replaced by bevels when
///    this is set to [StrokeJoin.miter].
///  * [strokeCap] to control what is drawn at the ends of the stroke.
///  * [StrokeJoin] for the definitive list of stroke joins.   ¿ Ã˝Äé¿ Õ  ¿ Õ¿ Õ   ¿ ÕˇÖr¿ ”Ñ”/// The limit for miters to be drawn on segments when the join is set to
/// [StrokeJoin.miter] and the [style] is set to [PaintingStyle.stroke]. If
/// this limit is exceeded, then a [StrokeJoin.bevel] join will be drawn
/// instead. This may cause some 'popping' of the corners of a path if the
/// angle between line segments is animated, as seen in the diagrams below.
///
/// This limit is expressed as a limit on the length of the miter.
///
/// Defaults to 4.0.  Using zero as a limit will cause a [StrokeJoin.bevel]
/// join to be used all the time.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_0_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_6_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeJoin] to control the kind of finish to place on the joins
///    between segments.
///  * [strokeCap] to control what is drawn at the ends of the stroke.   ¿ ”tÄ±¿ ”x  ¿ ”â¿ ”ë   ¿ ‘)ÇW¿ ‘ÒÄØ/// A mask filter (for example, a blur) to apply to a shape after it has been
/// drawn but before it has been composited into the image.
///
/// See [MaskFilter] for details.   ¿ ÷ÉÇ∞¿ ÷á  ¿ ÷í¿ ÷ü   ¿ Ÿ7ÅÏ¿ ⁄∂Å/// Controls the performance vs quality trade-off to use when sampling bitmaps,
/// as with an [ImageShader], or when drawing images, as with [Canvas.drawImage],
/// [Canvas.drawImageRect], [Canvas.drawImageNine] or [Canvas.drawAtlas].
///
/// Defaults to [FilterQuality.none].   ¿ €&Äó¿ €*  ¿ €8¿ €G   ¿ €¡Å»¿ ›MÅk/// The shader to use when stroking or filling a shape.
///
/// When this is null, the [color] is used instead.
///
/// See also:
///
///  * [Gradient], a shader that paints a color gradient.
///  * [ImageShader], a shader that tiles an [Image].
///  * [colorFilter], which overrides [shader].
///  * [color], which is used if [shader] and [colorFilter] are null.   ¿ ›åÅÔ¿ ›ê  ¿ ›ó¿ ›†   ¿ ﬂÅv¿ ‡kÄŒ/// A color filter to apply when a shape is drawn or when a layer is
/// composited.
///
/// See [ColorFilter] for details.
///
/// When a shape is being drawn, [colorFilter] overrides [color] and [shader].   ¿ ‡¯Å<¿ ‡¸  ¿ ·¿ ·   ¿ ‚8Çà¿ ‰6Å»/// The [ImageFilter] to use when drawing raster images.
///
/// For example, to blur an image using [Canvas.drawImage], apply an
/// [ImageFilter.blur]:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.drawImage(
///     _image,
///     ui.Offset.zero,
///     Paint()..imageFilter = ui.ImageFilter.blur(sigmaX: 0.5, sigmaY: 0.5),
///   );
/// }
/// ```
///
/// See also:
///
///  * [MaskFilter], which is used for drawing geometry.   ¿ ‰√Å∑¿ ‰«  ¿ ‰”¿ ‰·   ¿ Ê~Ån¿ ÁìÅ/// Whether the colors of the image are inverted when drawn.
///
/// Inverting the colors of an image applies a new color filter that will
/// be composed with any user provided color filters. This is primarily
/// used for implementing smart invert on iOS.   ¿ ÁÔl¿ ÁÛ  ¿ Ë 
¿ Ë   ¿ Ë_X¿ Ëh    ¿ Ë∫b¿ Ëæ  ¿ Ë∆
¿ ËÃ   ¿ ∏
r¿ ∏    ¿ Î√á⁄¿ Î÷   ¿ Î√¿ Îƒ ¿1¶h¿÷Ñû/// Opaque handle to raw decoded image data (pixels).
///
/// To obtain an [Image] object, use the [ImageDescriptor] API.
///
/// To draw an [Image], use one of the methods on the [Canvas] class, such as
/// [Canvas.drawImage].
///
/// A class or method that receives an image object must call [dispose] on the
/// handle when it is no longer needed. To create a shareable reference to the
/// underlying image, call [clone]. The method or object that receives
/// the new instance will then be responsible for disposing it, and the
/// underlying image itself will be disposed when all outstanding handles are
/// disposed.
///
/// If `dart:ui` passes an `Image` object and the recipient wishes to share
/// that handle with other callers, [clone] must be called _before_ [dispose].
/// A handle that has been disposed cannot create new handles anymore.
///
/// See also:
///
///  * [Image](https://api.flutter.dev/flutter/widgets/Image-class.html), the class in the [widgets] library.
///  * [ImageDescriptor], which allows reading information about the image and
///    creating a codec to decode it.
///  * [instantiateImageCodec], a utility method that wraps [ImageDescriptor]. ¿‡Ä¡¿Â¿Ê¿Á ¿Ë¿Ó  ¿ı
¿˚  ¿	¿	   ¿	∆/¿	Ô ¿	∆¿	«¿	Õ¿	ﬁ¿	Œ¿	˙Å¿ÄÁ/// A callback that is invoked to report an image creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿Å¿#ÄÈ/// A callback that is invoked to report the image disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿1¿=  ¿MS¿õA/// The number of image pixels along the image's horizontal axis. ¿•R¿Ò?/// The number of image pixels along the image's vertical axis. ¿¸¿ ¿¿@Åï¿˜Ä•/// Whether this reference to the underlying image is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿ßÉê¿ÅÃ/// The color space that is used by the [Image]'s colors.
///
/// This value is a consequence of how the [Image] has been created.  For
/// example, loading a PNG that is in the Display P3 color space will result
/// in a [ColorSpace.extendedSRGB] image.
///
/// On rendering backends that don't support wide gamut colors (anything but
/// iOS impeller), wide gamut images will still report [ColorSpace.sRGB] if
/// rendering wide gamut colors isn't supported.   ¿É&¿ÅÊ/// Release this handle's claim on the underlying Image. This handle is no
/// longer usable after this method is called.
///
/// Once all outstanding handles have been disposed, the underlying image will
/// be disposed as well.
///
/// In debug mode, [debugGetOpenHandleStackTraces] will return a list of
/// [StackTrace] objects from all open handles' creation points. This is
/// useful when trying to determine what parts of the program are keeping an
/// image resident in memory.   ¿ŸÉ ¿ÅÕ/// Converts the [Image] object into a byte array.
///
/// The [format] argument specifies the format in which the bytes will be
/// returned.
///
/// Using [ImageByteFormat.rawRgba] on an image in the color space
/// [ColorSpace.extendedSRGB] will result in the gamut being squished to fit
/// into the sRGB gamut, resulting in the loss of wide-gamut colors.
///
/// Returns a future that completes with the binary image data or an error
/// if encoding fails. ¿0¿!  ¿)¿8¿9¿;Å¢¿Ä∞/// If asserts are enabled, returns the [StackTrace]s of each open handle from
/// [clone], in creation order.
///
/// If asserts are disabled, this method always returns null.   ¿·å‡¿&"ä¢/// Creates a disposable handle to this image.
///
/// Holders of an [Image] must dispose of the image when they no longer need
/// to access it or draw it. However, once the underlying image is disposed,
/// it is no longer possible to use it. If a holder of an image needs to share
/// access to that image with another object or method, [clone] creates a
/// duplicate handle. The underlying image will only be disposed once all
/// outstanding handles are disposed. This allows for safe sharing of image
/// references while still disposing of the underlying resources when all
/// consumers are finished.
///
/// It is safe to pass an [Image] handle to another object or method if the
/// current holder no longer needs it.
///
/// To check whether two [Image] references are referring to the same
/// underlying image memory, use [isCloneOf] rather than the equality operator
/// or [identical].
///
/// The following example demonstrates valid usage.
///
/// ```dart
/// import 'dart:async';
/// import 'dart:typed_data';
/// import 'dart:ui';
///
/// Future<Image> _loadImage(int width, int height) {
///   final Completer<Image> completer = Completer<Image>();
///   decodeImageFromPixels(
///     Uint8List.fromList(List<int>.filled(width * height * 4, 0xFF)),
///     width,
///     height,
///     PixelFormat.rgba8888,
///     // Don't worry about disposing or cloning this image - responsibility
///     // is transferred to the caller, and that is safe since this method
///     // will not touch it again.
///     (Image image) => completer.complete(image),
///   );
///   return completer.future;
/// }
///
/// Future<void> main() async {
///   final Image image = await _loadImage(5, 5);
///   // Make sure to clone the image, because MyHolder might dispose it
///   // and we need to access it again.
///   final MyImageHolder holder = MyImageHolder(image.clone());
///   final MyImageHolder holder2 = MyImageHolder(image.clone());
///   // Now we dispose it because we won't need it again.
///   image.dispose();
///
///   final PictureRecorder recorder = PictureRecorder();
///   final Canvas canvas = Canvas(recorder);
///
///   holder.draw(canvas);
///   holder.dispose();
///
///   canvas.translate(50, 50);
///   holder2.draw(canvas);
///   holder2.dispose();
/// }
///
/// class MyImageHolder {
///   MyImageHolder(this.image);
///
///   final Image image;
///
///   void draw(Canvas canvas) {
///     canvas.drawImage(image, Offset.zero, Paint());
///   }
///
///   void dispose() => image.dispose();
/// }
/// ```
///
/// The returned object behaves identically to this image. Calling
/// [dispose] on it will only dispose the underlying native resources if it
/// is the last remaining handle.   ¿'≈Çõ¿*/ÇR/// Returns true if `other` is a [clone] of this and thus shares the same
/// underlying image memory, even if this or `other` is [dispose]d.
///
/// This method may return false for two images that were decoded from the
/// same underlying asset, if they are not sharing the same memory. For
/// example, if the same file is decoded using [instantiateImageCodec] twice,
/// or the same bytes are decoded using [decodeImageFromPixels] twice, there
/// will be two distinct [Image]s that render the same but do not share
/// underlying memory, and so will not be treated as clones of each other. ¿*9¿*@   ¿*d3¿*w   ¿*d¿*e ¿*õá6¿*¿  ¿+≈'¿+Á¿+Ë¿+È  ¿+≈¿+∆¿+Ã¿+›¿+Õ¿.µ¿.∫ ¿.∆¿1%¿1 ¿1)¿1*¿1"¿1(¿1#¿+f¿,P   ¿+¿+Ò¿+˜¿,¿+˛¿+¯¿,¿,¿,¿,¿,¿,¿,¿,;¿,¿,¿,¿,5¿,/¿,7¿,Zh¿,ª   ¿,Z¿,[¿,a¿,¿,h¿,b¿,p¿,~¿,q¿,x¿,}¿,y¿,Ä¿,¶¿,á¿,Å¿,â¿,†¿,ö¿,¢¿10b¿1á   ¿10¿11¿17¿1U¿1>¿18¿1F¿1T¿1G¿1N¿1S¿1O¿1V¿1r¿1]¿1W¿1_¿,∆Å¿,ÿ  ¿,‰0¿,ı  ¿,˝¿-¿-¿-÷Ä€¿.y9/// Returns an error message on failure, null on success. ¿.Ö
¿.ä  ¿.ë¿.®  ¿.¿.¿.¿.G¿.!¿.¿.)¿.F¿.*¿.1¿.6¿.2¿.9¿.@¿.H¿.d¿.O¿.I¿.Q¿.œÅd¿.‘    ¿07ÄÀ¿0˜k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿0ß¿0®¿0Æ¿0À¿0¥¿0Ø¿0º¿0 ¿0Ω¿0ƒ¿0…¿0≈¿0Ã¿0Â¿0”¿0Õ¿0’¿1ñ9¿1©   ¿1ñ¿1ó¿*õ¿*ú¿*¢¿*≥¿*£¿2Bâ_¿9Ü /// Information for a single frame of an animation.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].
///
/// The recipient of an instance of this class is responsible for calling
/// [Image.dispose] on [image]. To share the image with other interested
/// parties, use [Image.clone]. If the [FrameInfo] object itself is passed to
/// another method or object, that method or object must assume it is
/// responsible for disposing the image when done, and the passer must not
/// access the [image] after that point.
///
/// For example, the following code sample is incorrect:
///
/// ```dart
/// /// BAD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo);
///   // ERROR - _cacheImage is now responsible for disposing the image, and
///   // the image may not be available any more for this drawing routine.
///   _drawImage(frameInfo);
///   // ERROR again - the previous methods might or might not have created
///   // handles to the image.
///   frameInfo.image.dispose();
/// }
/// ```
///
/// Correct usage is:
///
/// ```dart
/// /// GOOD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo.image.clone(), frameInfo.duration);
///   _drawImage(frameInfo.image.clone(), frameInfo.duration);
///   // This method is done with its handle, and has passed handles to its
///   // clients already.
///   // The image will live until those clients dispose of their handles, and
///   // this one must not be disposed since it will not be used again.
///   frameInfo.image.dispose();
/// }
/// ``` ¿9!Å¿9¿9Ò¿9ÚÄª/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].¿9Ù¿:  ¿:¿:   ¿:&Äô¿:∑{/// The duration this frame should be shown.
///
/// A zero duration indicates that the frame should be shown indefinitely. ¿:ƒÄ⁄¿;ôÄæ/// The [Image] object for this frame.
///
/// This object must be disposed by the recipient of this frame info.
///
/// To share this image with other interested parties, use [Image.clone].    ¿;£Ñ>¿<ëÄﬁ/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec].   ¿<õ9¿<…#/// Number of frames in this image.   ¿<ÿÄ¶¿=nÄÖ/// Number of times to repeat the animation.
///
/// * 0 when the animation should be played once.
/// * -1 for infinity repetitions.   ¿=ÇÅa¿>‘Å//// Fetches the next animation frame.
///
/// Wraps back to the first frame after returning the last frame.
///
/// The returned future can complete with an error if the decoding has failed.
///
/// The caller of this method is responsible for disposing the
/// [FrameInfo.image] on the returned object.   ¿>ÁÄ¯¿?’Äﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿?„á5¿?Ó  ¿@ˆ¿A¿A¿A   ¿A¿A  ¿A„¿AË  ¿A&D¿A:   ¿A&¿A'¿Anq¿A”   ¿An¿Ao¿Au¿Aì¿A|¿Av¿AÑ¿Aí¿AÖ¿Aå¿Aë¿Aç¿Aî¿Aæ¿Aõ¿Aï¿Aù¿A∏¿A≤¿A∫¿BS¿B   ¿B¿B¿BZ{¿Bƒ   ¿BZ¿B[¿Ba¿B¿Bh¿Bb¿Bp¿B~¿Bq¿Bx¿B}¿By¿BÄ¿BØ¿Bá¿BÅ¿Bâ¿B©¿B£¿B´¿BŸÇı¿B˜   ¿BŸ¿B⁄¿E“Ä⁄¿Fp9/// Returns an error message on failure, null on success. ¿F~,¿F£  ¿F¿F¿F¿F<¿F¿F¿F%¿F;¿F&¿F-¿F2¿F.¿F5¿F=¿F[¿FD¿F>¿FF¿F∞f¿G   ¿F∞¿F±¿Fº¿FΩ¿F√¿F‡¿F…¿Fƒ¿F—¿Fﬂ¿F“¿FŸ¿Fﬁ¿F⁄¿F·¿F˙¿FË¿F‚¿FÍ ¿f_Üj¿grÅ/// A specification of the size to which an image should be decoded.
///
/// See also:
///
///  * [TargetImageSizeCallback], a callback that returns instances of this
///    class when consulted by image decoding methods such as
///    [instantiateImageCodecWithSize]. ¿gÜÅ# ¿h%¿h4Äê/// Creates a new instance of this class.
///
/// The `width` and `height` may both be null, but if they're non-null, they
/// must be positive.¿h6
¿h<  ¿hB¿hH  ¿hX¿h^¿hy¿hm¿he¿h_¿hh¿hv¿hp¿hx¿hÑ¿hä¿hß¿hö¿hí¿hã¿hï¿h§¿hù¿h¶¿h≠ÅÂ¿jçÅ¬/// The width into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified width.
/// If this is null and [height] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [height] is non-null, the image
/// will be decoded into a width that maintains its intrinsic aspect ratio
/// while respecting the [height] value.
///
/// If this value is non-null, it must be positive. ¿jóÅÊ¿lwÅ¬/// The height into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified height.
/// If this is null and [width] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [width] is non-null, the image
/// will be decoded into a height that maintains its intrinsic aspect ratio
/// while respecting the [width] value.
///
/// If this value is non-null, it must be positive.  ¿lÇE¿lï   ¿lÇ¿lÉ ¿ÜlÉò¿ÜÃP/// A handle for the framework to hold and retain an engine layer across frames.    ¿Ü‹É&¿â¯Ç¯/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// EngineLayers indirectly retain platform specific graphics resources. Some
/// of these resources, such as images, may be memory intensive. It is
/// important to dispose of EngineLayer objects that will no longer be used as
/// soon as possible to avoid retaining these resources until the next
/// garbage collection.
///
/// Once this EngineLayer is disposed, it is no longer eligible for use as a
/// retained layer, and must not be passed as an `oldLayer` to any of the
/// [SceneBuilder] methods which accept that parameter.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿äÅI¿ä  ¿ä`}¿äÿ¿äŸ¿ä⁄a/// This class is created by the engine, and should not be instantiated
/// or extended directly.    ¿ä·l¿ãC   ¿ä·¿ä‚¿äÌ¿äÓ¿äÙ¿ã¿ä˙¿äı¿ã¿ã¿ã¿ã
¿ã¿ã¿ã¿ã1¿ã¿ã¿ã ¿ãQ∏X¿éÇ∏/// A complex, one-dimensional subset of a plane.
///
/// A path consists of a number of sub-paths, and a _current point_.
///
/// Sub-paths consist of segments of various types, such as lines,
/// arcs, or beziers. Sub-paths can be open or closed, and can
/// self-intersect.
///
/// Closed sub-paths enclose a (possibly discontiguous) region of the
/// plane based on the current [fillType].
///
/// The _current point_ is initially at the origin. After each
/// operation adding a segment to a sub-path, the current point is
/// updated to the end of that segment.
///
/// Paths can be drawn on canvases using [Canvas.drawPath], and can
/// used to create clip regions using [Canvas.clipPath]. ¿é" ¿é*¿é.   ¿éCÅi¿è¿è¿èÄ¡/// Creates a copy of another [Path].
///
/// This copy is fast and does not require additional memory unless either
/// the `source` path or the path returned by this constructor are modified.¿è¿è%    ¿è∞Ä£¿êJÄÇ/// Determines how the interior of this path is calculated.
///
/// Defaults to the non-zero winding rule, [PathFillType.nonZero].   ¿êV!¿êZ  ¿êc¿êq   ¿ê{U¿êµ2/// Starts a new sub-path at the given coordinate. ¿êº¿êƒ  ¿ê∆¿êŒ   ¿ê‘r¿ë!E/// Starts a new sub-path at the given offset from the current point. ¿ë0	¿ë8  ¿ë;	¿ëC   ¿ëJt¿ë£O/// Adds a straight line segment from the current point to the given
/// point. ¿ë™¿ë≤  ¿ë¥¿ëº   ¿ë¬Ä£¿í@t/// Adds a straight line segment from the current point to the point
/// at the given offset from the current point. ¿íO	¿íW  ¿íZ	¿íb   ¿íiÅ¡¿ìÏÅq/// Adds a quadratic bezier segment that curves from the current
/// point to the given point (x2,y2), using the control point
/// (x1,y1).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to_dark.png#gh-dark-mode-only) ¿ì˛	¿î  ¿î		¿î  ¿î	¿î  ¿î	¿î'   ¿î.Å'¿ïÄ”/// Adds a quadratic bezier segment that curves from the current
/// point to the point at the offset (x2,y2) from the current point,
/// using the control point at the offset (x1,y1) from the current
/// point. ¿ï)	¿ï1  ¿ï4	¿ï<  ¿ï?	¿ïG  ¿ïJ	¿ïR   ¿ïYÅŒ¿ñ›År/// Adds a cubic bezier segment that curves from the current point
/// to the given point (x3,y3), using the control points (x1,y1) and
/// (x2,y2).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to_dark.png#gh-dark-mode-only) ¿ñÂ	¿ñÌ  ¿ñ	¿ñ¯  ¿ñ˚	¿ó  ¿ó	¿ó  ¿ó	¿ó  ¿ó	¿ó$   ¿ó+Å=¿òÄ›/// Adds a cubic bezier segment that curves from the current point
/// to the point at the offset (x3,y3) from the current point, using
/// the control points at the offsets (x1,y1) and (x2,y2) from the
/// current point. ¿ò&	¿ò.  ¿ò1	¿ò9  ¿ò<	¿òD  ¿òG	¿òO  ¿òR	¿òZ  ¿ò]	¿òe   ¿òlÇb¿öêÇ/// Adds a bezier segment that curves from the current point to the
/// given point (x2,y2), using the control points (x1,y1) and the
/// weight w. If the weight is greater than 1, then the curve is a
/// hyperbola; if the weight equals 1, it's a parabola; and if it is
/// less than 1, it is an ellipse.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to_dark.png#gh-dark-mode-only) ¿öò	¿ö†  ¿ö£	¿ö´  ¿öÆ	¿ö∂  ¿öπ	¿ö¡  ¿öƒ¿öÃ   ¿ö“Åœ¿ú[Åw/// Adds a bezier segment that curves from the current point to the
/// point at the offset (x2,y2) from the current point, using the
/// control point at the offset (x1,y1) from the current point and
/// the weight w. If the weight is greater than 1, then the curve is
/// a hyperbola; if the weight equals 1, it's a parabola; and if it
/// is less than 1, it is an ellipse. ¿úk	¿ús  ¿úv	¿ú~  ¿úÅ	¿úâ  ¿úå	¿úî  ¿úó¿úü   ¿ú•Ér¿üŒÉ/// If the `forceMoveTo` argument is false, adds a straight line
/// segment and an arc segment.
///
/// If the `forceMoveTo` argument is true, starts a new sub-path
/// consisting of an arc segment.
///
/// In either case, the arc segment consists of the arc that follows
/// the edge of the oval bounded by the given rectangle, from
/// startAngle radians around the oval up to startAngle + sweepAngle
/// radians around the oval, with zero radians being the point on
/// the right hand side of the oval that crosses the horizontal line
/// that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval.
///
/// The line segment added if `forceMoveTo` is false starts at the
/// current point and ends at the start of the arc. ¿ü‘	¿ü⁄  ¿üﬂ¿üÁ  ¿üÚ¿ü˙  ¿†¿†   ¿†É!¿¢©Çp/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEnd`. The curves follow a path in a direction determined by
/// `clockwise` and `largeArc` in such a way that the sweep angle
/// is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero or the last
/// point in the path is `arcEnd`. The radii are scaled to fit the last path
/// point if both are greater than zero but too small to describe an arc.
/// ¿¢¥¿¢º  ¿¢…¿¢—  ¿¢Í¿¢Ú  ¿£¿£  ¿£ ¿£&  ¿¢Ÿ¿¢ﬂ¿¢‡¿¢¸¿£¿£1¿£@É£¿¶>Ç‹/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The last path point is described by (px, py).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
/// path in a direction determined by `clockwise` and `largeArc`
/// in such a way that the sweep angle is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero, or, both
/// `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
/// fit the last path point if both are greater than zero but too small to
/// describe an arc. ¿¶V¿¶^  ¿¶p¿¶x  ¿¶ë¿¶ô  ¿¶¨¿¶≤  ¿¶«¿¶Õ  ¿¶Ä¿¶Ü¿¶á¿¶£¿¶º¿¶ÿ¿¶Áv¿ßJY/// Adds a new sub-path that consists of four lines that outline the
/// given rectangle. ¿ßR	¿ßX   ¿ßaÅ.¿®|Å/// Adds a new sub-path that consists of a curve that forms the
/// ellipse that fills the given rectangle.
///
/// To add a circle, pass an appropriate rectangle as `oval`. [Rect.fromCircle]
/// can be used to easily describe the circle's center [Offset] and radius. ¿®Ñ	¿®ä   ¿®ìÉË¿¨CÉé/// Adds a new sub-path with one arc segment that consists of the arc
/// that follows the edge of the oval bounded by the given
/// rectangle, from startAngle radians around the oval up to
/// startAngle + sweepAngle radians around the oval, with zero
/// radians being the point on the right hand side of the oval that
/// crosses the horizontal line that intersects the center of the
/// rectangle and with positive angles going clockwise around the
/// oval.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_dark.png#gh-dark-mode-only)
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw_dark.png#gh-dark-mode-only) ¿¨J	¿¨P  ¿¨U¿¨]  ¿¨h¿¨p   ¿¨ÅX¿≠´Å/// Adds a new sub-path with a sequence of line segments that connect the given
/// points.
///
/// If `close` is true, a final line segment will be added that connects the
/// last point to the first point.
///
/// The `points` argument is interpreted as offsets from the origin. ¿≠∂¿≠ƒ  ¿≠À
¿≠—   ¿≠€Ä∞¿ÆuÄé/// Adds a new sub-path that consists of the straight lines and
/// curves needed to form the rounded rectangle described by the
/// argument. ¿Æ~¿ÆÖ   ¿ÆèÅQ¿Ø¶Å/// Adds the sub-paths of `path`, offset by `offset`, to this path.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given offset. The matrix is a 4x4
/// matrix stored in column major order. ¿ØÆ	¿Ø¥  ¿Øπ¿Ø¡  ¿Ø…¿Ø◊   ¿Ø‰Å◊¿±zÅÇ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
/// The current sub-path is extended with the first sub-path
/// of `path`, connecting them with a lineTo if necessary.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given `offset`.  The matrix is a 4x4
/// matrix stored in column major order. ¿±â	¿±è  ¿±î¿±ú  ¿±§¿±≤   ¿±øÄì¿≤JÄÅ/// Closes the last sub-path, as if a straight line had been drawn
/// from the current point to the first point of the sub-path.   ¿≤VÄ±¿≤ˇÄù/// Clears the [Path] object of all sub-paths, returning it to the
/// same state it had when it was created. The _current point_ is
/// reset to the origin.   ¿≥Åq¿¥eÅF/// Tests to see if the given point is within the path. (That is, whether the
/// point would be in the visible portion of the path if the path was used
/// with [Canvas.clipPath].)
///
/// The `point` argument is interpreted as an offset from the origin.
///
/// Returns true if the point is in the path, and false otherwise. ¿¥n¿¥v   ¿¥ÄÄâ¿¥Ùj/// Returns a copy of the path with all the segments of every
/// sub-path translated by the given offset. ¿¥˙¿µ   ¿µÄî¿µÇk/// Returns a copy of the path with all the segments of every
/// sub-path transformed by the given matrix. ¿µå¿µô   ¿µ•É£¿π<É0/// Computes the bounding rectangle for this path.
///
/// A path containing only axis-aligned points on the same straight line will
/// have no area, and therefore `Rect.isEmpty` will return true for such a
/// path. Consider checking `rect.width + rect.height > 0.0` instead, or
/// using the [computeMetrics] API to check the path length.
///
/// For many more elaborate paths, the bounds may be inaccurate.  For example,
/// when a path contains a circle, the points used to compute the bounds are
/// the circle's implied control points, which form a square around the circle;
/// if the circle has a transformation applied using [transform] then that
/// square is rotated, and the (axis-aligned, non-rotated) bounding box
/// therefore ends up grossly overestimating the actual area covered by the
/// circle.   ¿πLÇî¿∫ïÅ0/// Combines the two paths according to the manner specified by the given
/// `operation`.
///
/// The resulting path will be constructed from non-overlapping contours. The
/// curve order is reduced where possible so that cubics may be turned into
/// quadratics, and quadratics maybe turned into lines. ¿∫ù¿∫¨  ¿∫∂
¿∫º  ¿∫¬
¿∫»   ¿ª‰á√¿√|áM/// Creates a [PathMetrics] object for this path, which can describe various
/// properties about the contours of the path.
///
/// A [Path] is made up of zero or more contours. A contour is made up of
/// connected curves and segments, created via methods like [lineTo],
/// [cubicTo], [arcTo], [quadraticBezierTo], their relative counterparts, as
/// well as the add* methods such as [addRect]. Creating a new [Path] starts
/// a new contour once it has any drawing instructions, and another new
/// contour is started for each [moveTo] instruction.
///
/// A [PathMetric] object describes properties of an individual contour,
/// such as its length, whether it is closed, what the tangent vector of a
/// particular offset along the path is. It also provides a method for
/// creating sub-paths: [PathMetric.extractPath].
///
/// Calculating [PathMetric] objects is not trivial. The [PathMetrics] object
/// returned by this method is a lazy [Iterable], meaning it only performs
/// calculations when the iterator is moved to the next [PathMetric]. Callers
/// that wish to memoize this iterable can easily do so by using
/// [Iterable.toList] on the result of this method. In particular, callers
/// looking for information about how many contours are in the path should
/// either store the result of `path.computeMetrics().length`, or should use
/// `path.computeMetrics().toList()` so they can repeatedly check the length,
/// since calling `Iterable.length` causes traversal of the entire iterable.
///
/// In particular, callers should be aware that [PathMetrics.length] is the
/// number of contours, **not the length of the path**. To get the length of
/// a contour in a path, use [PathMetric.length].
///
/// If `forceClosed` is set to true, the contours of the path will be measured
/// as if they had been closed, even if they were not explicitly closed. ¿√å¿√í  ¿√ü ¿√´•E¿√∂  ¿√˜I ¿ƒ¿ƒ*%/// Create a new empty [Path] object.  ¿ƒDÄ£¿ƒ‚¿ƒ„¿ƒ‰Äé/// Avoids creating a new native backing for the path for methods that will
/// create it later, such as [Path.from], [shift] and [transform].   ¿≈≥M¿≈–   ¿≈≥¿≈¥¿∆J¿∆  ¿∆¿∆*  ¿∆¿∆0¿ƒÎV¿≈2   ¿ƒÎ¿ƒÏ¿ƒÚ¿≈¿ƒ¯¿ƒÛ¿≈ ¿≈¿≈¿≈	¿≈ ¿≈¿≈
¿≈¿≈Ej¿≈ö  ¿≈°¿≈ß  ¿≈E¿≈F¿≈L¿≈q¿≈R¿≈M¿≈Z¿≈p¿≈[¿≈b¿≈g¿≈c¿≈j¿≈r¿≈à¿≈y¿≈s¿≈{¿∆Qp¿∆≤   ¿∆Q¿∆R¿∆X¿∆v¿∆_¿∆Y¿∆g¿∆u¿∆h¿∆o¿∆t¿∆p¿∆w¿∆°¿∆~¿∆x¿∆Ä¿∆õ¿∆ï¿∆ù¿∆≈ÄÉ¿«-  ¿«:¿«?  ¿∆≈¿∆∆¿∆Ã¿∆¿∆“¿∆Õ¿∆⁄¿∆Ô¿∆€¿∆‚¿∆Á¿∆„¿∆Í¿∆Ò¿«¿∆¯¿∆Ú¿∆˙¿«¿«¿«¿«LÄì¿«ƒ  ¿«À¿«”  ¿«’¿«›  ¿«L¿«M¿«X¿«Y¿«_¿«å¿«e¿«`¿«m¿«ã¿«n¿«u¿«z¿«v¿«}¿«Ö¿«ç¿«≤¿«î¿«é¿«ñ¿«¨¿«¶¿«Æ¿«„Ä•¿»c  ¿»r	¿»z  ¿»}	¿»Ö  ¿«„¿«‰¿«Ô¿«¿«ˆ¿»#¿«¸¿«˜¿»¿»"¿»¿»¿»¿»¿»¿»¿»$¿»Q¿»+¿»%¿»-¿»K¿»E¿»M¿»åÄì¿…  ¿…¿…  ¿…¿…  ¿»å¿»ç¿»ò¿»ô¿»ü¿»Ã¿»•¿»†¿»≠¿»À¿»Æ¿»µ¿»∫¿»∂¿»Ω¿»≈¿»Õ¿»Ú¿»‘¿»Œ¿»÷¿»Ï¿»Ê¿»Ó¿…#Ä•¿…£  ¿…≤	¿…∫  ¿…Ω	¿…≈  ¿…#¿…$¿…/¿…0¿…6¿…c¿…<¿…7¿…D¿…b¿…E¿…L¿…Q¿…M¿…T¿…\¿…d¿…ë¿…k¿…e¿…m¿…ã¿…Ö¿…ç¿…ÃÄ—¿ _  ¿ q	¿ y  ¿ |	¿ Ñ  ¿ á	¿ è  ¿ í	¿ ö  ¿…Ã¿…Õ¿…ÿ¿…Ÿ¿…ﬂ¿ ¿…Â¿…‡¿…Ì¿ ¿…Ó¿…ı¿…˙¿…ˆ¿…˝¿ ¿ ¿ ¿ ¿ M¿ $¿ ¿ &¿ G¿ A¿ I¿ °ÄË¿À<  ¿À]	¿Àe  ¿Àh	¿Àp  ¿Às	¿À{  ¿À~	¿ÀÜ  ¿ °¿ ¢¿ ≠¿ Æ¿ ¥¿ Ò¿ ∫¿ µ¿ ¬¿ ¿ √¿  ¿ œ¿ À¿ “¿ ⁄¿ ‚¿ Í¿ Ú¿À*¿ ˘¿ Û¿ ˚¿À$¿À¿À&¿ÀçÄ„¿Ã&  ¿Ã.	¿Ã6  ¿Ã9	¿ÃA  ¿ÃD	¿ÃL  ¿ÃO	¿ÃW  ¿ÃZ	¿Ãb  ¿Ãe	¿Ãm  ¿Àç¿Àé¿Àô¿Àö¿À†¿ÀÌ¿À¶¿À°¿ÀÆ¿ÀÏ¿ÀØ¿À∂¿Àª¿À∑¿Àæ¿À∆¿ÀŒ¿À÷¿Àﬁ¿ÀÊ¿ÀÓ¿Ã¿Àı¿ÀÔ¿À˜¿Ã¿Ã¿Ã¿ÃtÄÛ¿Õ  ¿Õ%	¿Õ-  ¿Õ0	¿Õ8  ¿Õ;	¿ÕC  ¿ÕF	¿ÕN  ¿ÕQ	¿ÕY  ¿Õ\	¿Õd  ¿Ãt¿Ãu¿ÃÄ¿ÃÅ¿Ãá¿Ã‘¿Ãç¿Ãà¿Ãï¿Ã”¿Ãñ¿Ãù¿Ã¢¿Ãû¿Ã•¿Ã≠¿Ãµ¿ÃΩ¿Ã≈¿ÃÕ¿Ã’¿Õ¿Ã‹¿Ã÷¿Ãﬁ¿Ã˝¿Ã˜¿Ãˇ¿ÕkÄœ¿Õ¸  ¿Œ	¿Œ  ¿Œ	¿Œ  ¿Œ	¿Œ"  ¿Œ%	¿Œ-  ¿Œ0¿Œ8  ¿Õk¿Õl¿Õw¿Õx¿Õ~¿Õ√¿ÕÑ¿Õ¿Õå¿Õ¬¿Õç¿Õî¿Õô¿Õï¿Õú¿Õ§¿Õ¨¿Õ¥¿Õº¿Õƒ¿ÕÍ¿ÕÀ¿Õ≈¿ÕÕ¿Õ‰¿Õﬁ¿ÕÊ¿Œ>Äﬂ¿Œ◊  ¿ŒÁ	¿ŒÔ  ¿ŒÚ	¿Œ˙  ¿Œ˝	¿œ  ¿œ	¿œ  ¿œ¿œ  ¿Œ>¿Œ?¿ŒJ¿ŒK¿ŒQ¿Œñ¿ŒW¿ŒR¿Œ_¿Œï¿Œ`¿Œg¿Œl¿Œh¿Œo¿Œw¿Œ¿Œá¿Œè¿Œó¿Œ≈¿Œû¿Œò¿Œ†¿Œø¿Œπ¿Œ¡¿œ!Äﬁ¿œ2  ¿œ8	¿œ>  ¿œC¿œK  ¿œV¿œ^  ¿œi¿œo  ¿œ!¿œ"¿–Å¿–î  ¿–õ¿–£  ¿–®
¿–∞  ¿–¥¿–º  ¿–¬¿–   ¿–—¿–Ÿ  ¿–‰¿–Ï  ¿–˜¿–˝  ¿–¿–¿–
¿–]¿–¿–¿–¿–\¿–¿– ¿–%¿–!¿–(¿–0¿–8¿–@¿–H¿–P¿–X¿–^¿–Ç¿–e¿–_¿–g¿–|¿–v¿–~¿—ÅK¿—  ¿—)¿—1  ¿—>¿—F  ¿—_¿—g  ¿—z¿—Ä  ¿—ï¿—õ  ¿—¿—¿—N¿—T¿—U¿—q¿—ä¿—¶¿“\Å¿“  ¿“¸¿”  ¿”¿”  ¿”¿”$  ¿”,¿”4  ¿”<¿”D  ¿”M¿”S  ¿”\¿”b  ¿“\¿“]¿“c¿“¥¿“i¿“d¿“q¿“≥¿“r¿“y¿“~¿“z¿“Å¿“â¿“ë¿“ô¿“°¿“©¿“Ø¿“µ¿“ﬁ¿“º¿“∂¿“æ¿“ÿ¿““¿“⁄¿”pÅt¿”Å  ¿”ô¿”°  ¿”≥¿”ª  ¿”‘¿”‹  ¿”Ô¿”ı  ¿‘
¿‘  ¿”p¿”q¿”√¿”…¿” ¿”Ê¿”ˇ¿‘¿‘ËÅK¿’Ñ  ¿’ü¿’ß  ¿’µ¿’Ω  ¿’À¿’”  ¿’·¿’È  ¿’˜¿’ˇ  ¿÷¿÷  ¿÷#¿÷)  ¿‘Ë¿‘È¿‘Ô¿’@¿‘ı¿‘¿‘˝¿’?¿‘˛¿’¿’
¿’¿’¿’¿’¿’%¿’-¿’5¿’;¿’A¿’r¿’H¿’B¿’J¿’l¿’f¿’n¿÷7ÄÖ¿÷H  ¿÷P	¿÷V  ¿÷7¿÷8¿÷¿Äº¿◊=  ¿◊F¿◊N  ¿◊S
¿◊[  ¿◊_¿◊g  ¿◊m¿◊u  ¿÷¿¿÷¡¿÷«¿◊¿÷Õ¿÷»¿÷’¿◊¿÷÷¿÷›¿÷‚¿÷ﬁ¿÷Â¿÷Ì¿÷ı¿÷˝¿◊¿◊+¿◊¿◊¿◊¿◊%¿◊¿◊'¿◊ÄÄÖ¿◊ë  ¿◊ô	¿◊ü  ¿◊Ä¿◊Å¿ÿ	Äº¿ÿÜ  ¿ÿè¿ÿó  ¿ÿú
¿ÿ§  ¿ÿ®¿ÿ∞  ¿ÿ∂¿ÿæ  ¿ÿ	¿ÿ
¿ÿ¿ÿM¿ÿ¿ÿ¿ÿ¿ÿL¿ÿ¿ÿ&¿ÿ+¿ÿ'¿ÿ.¿ÿ6¿ÿ>¿ÿF¿ÿN¿ÿt¿ÿU¿ÿO¿ÿW¿ÿn¿ÿh¿ÿp¿ÿ…Ä¡¿ÿ⁄  ¿ÿ·	¿ÿÁ  ¿ÿÏ¿ÿÙ  ¿ÿˇ¿Ÿ  ¿ÿ…¿ÿ ¿ŸéÄ¿⁄  ¿⁄"¿⁄*  ¿⁄/
¿⁄7  ¿⁄;¿⁄C  ¿⁄I¿⁄Q  ¿⁄X¿⁄`  ¿⁄k¿⁄s  ¿Ÿé¿Ÿè¿Ÿï¿Ÿ‚¿Ÿõ¿Ÿñ¿Ÿ£¿Ÿ·¿Ÿ§¿Ÿ´¿Ÿ∞¿Ÿ¨¿Ÿ≥¿Ÿª¿Ÿ√¿ŸÀ¿Ÿ”¿Ÿ€¿Ÿ„¿⁄¿ŸÍ¿Ÿ‰¿ŸÏ¿⁄¿Ÿ¸¿⁄¿⁄Çt¿⁄ì  ¿⁄û¿⁄¨  ¿⁄≥
¿⁄π  ¿⁄Ç¿⁄É¿⁄˙Äå¿€Z  ¿€f¿€s  ¿€z
¿€Ä  ¿⁄˙¿⁄˚¿€¿€,¿€¿€¿€¿€+¿€¿€¿€¿€¿€¿€'¿€-¿€H¿€4¿€.¿€6¿€är¿€õ  ¿€§¿€´  ¿€ä¿€ã¿‹ u¿‹X  ¿‹b¿‹o  ¿‹ ¿‹¿‹¿‹,¿‹¿‹¿‹¿‹+¿‹¿‹¿‹"¿‹¿‹%¿‹-¿‹F¿‹4¿‹.¿‹6¿‹yÅS¿‹ä  ¿‹í	¿‹ò  ¿‹ù¿‹•  ¿‹≠¿‹ª  ¿‹y¿‹z¿›–Äü¿ﬁ>  ¿ﬁG¿ﬁT  ¿ﬁY	¿ﬁa  ¿ﬁd	¿ﬁl  ¿›–¿›—¿›◊¿ﬁ¿››¿›ÿ¿›Â¿ﬁ¿›Ê¿›Ì¿›Ú¿›Ó¿›ı¿›¸¿ﬁ¿›˝¿ﬁ¿ﬁ¿ﬁ¿ﬁ,¿ﬁ¿ﬁ¿ﬁ¿ﬁsÄœ¿ﬁÛ  ¿ﬂ¿ﬂ  ¿ﬂ	¿ﬂ   ¿ﬂ#	¿ﬂ+  ¿ﬂ.¿ﬂ;  ¿ﬁs¿ﬁt¿ﬁz¿ﬁæ¿ﬁÄ¿ﬁ{¿ﬁà¿ﬁΩ¿ﬁâ¿ﬁê¿ﬁï¿ﬁë¿ﬁò¿ﬁü¿ﬁ§¿ﬁ†¿ﬁß¿ﬁØ¿ﬁ∑¿ﬁø¿ﬁ·¿ﬁ∆¿ﬁ¿¿ﬁ»¿ﬂFÅg¿ﬂW  ¿ﬂf	¿ﬂl  ¿ﬂq¿ﬂy  ¿ﬂÅ¿ﬂè  ¿ﬂF¿ﬂG¿‡±Ä≠¿·&  ¿·6¿·C  ¿·H	¿·P  ¿·S	¿·[  ¿‡±¿‡≤¿‡∏¿‡Ù¿‡æ¿‡π¿‡∆¿‡Û¿‡«¿‡Œ¿‡”¿‡œ¿‡÷¿‡›¿‡‚¿‡ﬁ¿‡Â¿‡Ì¿‡ı¿·¿‡¸¿‡ˆ¿‡˛¿·bÄ€¿·Ë  ¿‚¿‚  ¿‚	¿‚  ¿‚	¿‚&  ¿‚)¿‚6  ¿·b¿·c¿·i¿·≠¿·o¿·j¿·w¿·¨¿·x¿·¿·Ñ¿·Ä¿·á¿·é¿·ì¿·è¿·ñ¿·û¿·¶¿·Æ¿·÷¿·µ¿·Ø¿·∑¿‚Ao¿‚®   ¿‚A¿‚B¿‚M¿‚N¿‚T¿‚q¿‚Z¿‚U¿‚b¿‚p¿‚c¿‚j¿‚o¿‚k¿‚r¿‚ñ¿‚y¿‚s¿‚{¿‚ê¿‚ä¿‚í¿‚¥o¿„   ¿‚¥¿‚µ¿‚¿¿‚¡¿‚«¿‚‰¿‚Õ¿‚»¿‚’¿‚„¿‚÷¿‚›¿‚‚¿‚ﬁ¿‚Â¿„	¿‚Ï¿‚Ê¿‚Ó¿„¿‚˝¿„¿„'z¿„8  ¿„A¿„I  ¿„'¿„(¿„•Äå¿‰  ¿‰¿‰%  ¿‰'¿‰/  ¿„•¿„¶¿„¨¿„Ÿ¿„≤¿„≠¿„∫¿„ÿ¿„ª¿„¬¿„«¿„√¿„ ¿„“¿„⁄¿‰¿„·¿„€¿„„¿„˚¿„ı¿„˝¿‰5Ä∂¿‰F  ¿‰L¿‰T  ¿‰5¿‰6¿‰ÔÄê¿ÂT  ¿Â[¿Âa  ¿Âi	¿Âq  ¿Ât	¿Â|  ¿‰Ô¿‰¿‰ˆ¿Â+¿‰¸¿‰˜¿Â¿Â*¿Â¿Â¿Â¿Â¿Â¿Â¿Â$¿Â,¿ÂB¿Â3¿Â-¿Â5¿ÂÉÄπ¿Âî  ¿Âû¿Â´  ¿ÂÉ¿ÂÑ¿Ê@Äè¿Ê°  ¿Ê¨¿Ê≤  ¿Ê∫¿Ê«  ¿Ê@¿ÊA¿ÊG¿Êt¿ÊM¿ÊH¿ÊU¿Ês¿ÊV¿Ê]¿Êb¿Ê^¿Êe¿Êm¿Êu¿Êè¿Ê|¿Êv¿Ê~¿Ê”Äã¿Ê‰   ¿Ê”¿Ê‘¿Ábg¿Áº   ¿Áb¿Ác¿Ái¿Áà¿Áq¿Áj¿Áy¿Áá¿Áz¿ÁÅ¿ÁÜ¿ÁÇ¿Áâ¿Á£¿Áê¿Áä¿Áí¿ÁÕÄ®¿Ë<  ¿Ë@¿ËM  ¿ËS¿Ë`  ¿Ëf¿Ëk  ¿ÁÕ¿ÁŒ¿Á‘¿Ë¿Á⁄¿Á’¿Á‚¿Ë¿Á„¿ÁÍ¿ÁÔ¿ÁÎ¿ÁÚ¿Á˘¿Á˛¿Á˙¿Ë¿Ë¿Ë¿Ë	¿Ë¿Ë¿Ë*¿Ë¿Ë¿Ë ¿Ëyu¿Ëë  ¿Ë°¿Ëß  ¿Ëy¿Ëz¿Ë¥ ¿ËÚáD¿È™Ä±/// The geometric description of a tangent: the angle at a point.
///
/// See also:
///  * [PathMetric.getTangentForOffset], which returns the tangent of an offset along a path. ¿È∂Äá ¿Í¿Í V/// Creates a [Tangent] with the given values.
///
/// The arguments must not be null.¿Í!¿Í'  ¿Í0¿Í6   ¿ÍAÅR¿Î¿Î¿Î&Ä√/// Creates a [Tangent] based on the angle rather than the vector.
///
/// The [vector] is computed to be the unit vector at the given angle, interpreted
/// as clockwise radians from the x axis.¿Î'¿Î/  ¿Î8¿Î@   ¿ÎóÄ—¿Ï`Ä≥/// Position of the tangent.
///
/// When used with [PathMetric.getTangentForOffset], this represents the precise
/// position that the given offset along the path corresponds to. ¿ÏmÅ¿ÌlÄÁ/// The vector of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the vector of the
/// curve that is at the given offset along the path (i.e. the direction of the
/// curve at [position]). ¿ÌwÇΩ¿	Ç+/// The direction of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the angle of the
/// curve that is the given offset along the path (i.e. the direction of the
/// curve at [position]).
///
/// This value is in radians, with 0.0 meaning pointing along the x axis in
/// the positive x-axis direction, positive numbers pointing downward toward
/// the negative y-axis, i.e. in a clockwise direction, and negative numbers
/// pointing upward toward the positive y-axis, i.e. in a counter-clockwise
/// direction.     ¿8Ñ#¿Û3ÇÙ/// An iterable collection of [PathMetric] objects describing a [Path].
///
/// A [PathMetrics] object is created by using the [Path.computeMetrics] method,
/// and represents the path as it stood at the time of the call. Subsequent
/// modifications of the path do not affect the [PathMetrics] object.
///
/// Each path metric corresponds to a segment, or contour, of a path.
///
/// For example, a path consisting of a [Path.lineTo], a [Path.moveTo], and
/// another [Path.lineTo] will contain two contours and thus be represented by
/// two [PathMetric] objects.
///
/// This iterable does not memoize. Callers who need to traverse the list
/// multiple times, or who need to randomly access elements of the list, should
/// use [toList] on this object. ¿ÛoÄÇ¿Ûz¿Û{¿Û| ¿Û}	¿ÛÉ  ¿Ûà¿Ûé  ¿Û™¿Û†¿Û¨¿Ûæ¿Ûø¿Û¿¿ÛÔ¿Û¡¿ÛÕ¿ÛÓ¿Û”¿ÛŒ¿Û÷¿Û„¿Ûı$¿Ù  ¿Ù;¿ÙC   ¿Ù¿Ù  ¿Ù]É¬¿ÙÃh/// Used by [PathMetrics] to track iteration from one segment of a path to the
/// next for measurement. ¿ı(¿ı¿ı¿ı ¿ı¿ı   ¿ı/¿ı;  ¿ıJ¿ı]  ¿ınÅ¿ıâ   ¿ın¿ıo¿˜bÄª¿˜s   ¿˜b¿˜c ¿¯!çk¿˚Ç‡/// Utilities for measuring a [Path] and extracting sub-paths.
///
/// Iterate over the object returned by [Path.computeMetrics] to obtain
/// [PathMetric] objects. Callers that want to randomly access elements or
/// iterate multiple times should use `path.computeMetrics().toList()`, since
/// [PathMetrics] does not memoize.
///
/// Once created, the metrics are only valid for the path as it was specified
/// when [Path.computeMetrics] was called. If additional contours are added or
/// any contours are updated, the metrics need to be recomputed. Previously
/// created metrics will still refer to a snapshot of the path at the time they
/// were computed, rather than to the actual metrics for the new mutations to
/// the path. ¿˚ÄŒ¿˚!¿˚"¿˚# ¿˚$¿˚*  ¿˚@¿˚9¿˚B¿˚J¿˚K¿˚Q¿˚n¿˚R¿˚Z¿˚[¿˚Ä¿˚w¿˚Ç¿˚ä¿˚ã¿˚ì¿˚∞¿˚î¿˚ú¿˚ù¿˚∆¿˚π¿˚»¿˚–¿˚—¿˚ÈÅ+¿˝Å/// Return the total length of the current contour.
///
/// The length may be calculated from an approximation of the geometry
/// originally added. For this reason, it is not recommended to rely on
/// this property for mathematically correct lengths of common shapes. ¿˝ÅA¿˛RÅ!/// Whether the contour is closed.
///
/// Returns true if the contour ends with a call to [Path.close] (which may
/// have been implied when using methods like [Path.addRect]) or if
/// `forceClosed` was specified as true in the call to [Path.computeMetrics].
/// Returns false otherwise. ¿˛_Ç‡¿3Ç±/// The zero-based index of the contour.
///
/// [Path] objects are made up of zero or more contours. The first contour is
/// created once a drawing command (e.g. [Path.lineTo]) is issued. A
/// [Path.moveTo] command after a drawing command may create a new contour,
/// although it may not if optimizations are applied that determine the move
/// command did not actually result in moving the pen.
///
/// This property is only valid with reference to its original iterator and
/// the contours of the path at the time the path's metrics were computed. If
/// additional contours were added or existing contours updated, this metric
/// will be invalid for the current state of the path. ¿D¿W   ¿dÇ,¿%Å£/// Computes the position of the current contour at the given offset, and the
/// angle of the path at that point.
///
/// For example, calling this method with a distance of 1.41 for a line from
/// 0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees
/// (but in radians).
///
/// Returns null if the contour has zero [length].
///
/// The distance is clamped to the [length] of the current contour. ¿9¿A   ¿îÅÅ¿nÄÃ/// Given a start and end distance, return the intervening segment(s).
///
/// `start` and `end` are clamped to legal values (0..[length])
/// Begin the segment with a moveTo if `startWithMoveTo` is true. ¿z¿Ç  ¿à
¿ê  ¿ï¿õ  ¿¨¿q¿,   ¿¿ ¿éã¿ô  ¿À[ ¿À¿◊ ¿ÿ¿Â  ¿Í¿   ¿ÛÄØ¿äÄå/// The index of the current contour in the list of contours in the path.
///
/// [nextContour] will increment this to the zero based index.¿†¿° ¿*Äî¿ç  ¿ö¿ß  ¿¨¿≤  ¿*¿+¿1¿\¿7¿2¿?¿[¿@¿H¿O¿T¿P¿W¿]¿{¿d¿^¿f¿¬ÄΩ¿…  ¿–¿’   ¿ÉÄã¿Ù  ¿¸¿  ¿É¿Ñ¿ä¿∞¿í¿ã¿ö¿Ø¿õ¿¢¿ß¿£¿™¿±¿‡¿∏¿≤¿∫¿⁄¿‘¿‹¿ÅÌ¿  ¿/¿4  ¿A¿I   ¿
Äû¿
s  ¿
~¿
É  ¿
ê¿
ò  ¿
¿
¿

¿
8¿
¿
¿
¿
7¿
¿
"¿
'¿
#¿
*¿
1¿
9¿
Z¿
@¿
:¿
B¿
•Å_¿
™  ¿
∂¿
ª  ¿
»¿
–  ¿
÷
¿
ﬁ  ¿
È¿
Ô  ¿ ¿Ä€¿Ü  ¿ì¿ô  ¿°¿¶  ¿≥¿ª  ¿¡
¿…  ¿Õ¿”  ¿¿	¿¿Q¿¿¿¿P¿¿%¿*¿&¿-¿5¿<¿D¿L¿R¿t¿Y¿S¿[¿ÁÄø¿Ï  ¿ı¿˙   ¿™Äà¿  ¿ ¿%  ¿™¿´¿±¿’¿∑¿≤¿ø¿‘¿¿¿«¿Ã¿»¿œ¿÷¿¿›¿◊¿ﬂ¿˛¿¯¿ ¿ÂÄâ¿Í    ¿r}¿⁄   ¿r¿s¿y¿ñ¿¿z¿á¿ï¿à¿è¿î¿ê¿ó¿»¿û¿ò¿†¿¬¿º¿ƒ ¿$Ü|¿.Å/// A mask filter to apply to shapes as they are painted. A mask filter is a
/// function that takes a bitmap of color pixels, and returns another bitmap of
/// color pixels.
///
/// Instances of this class are used with [Paint.maskFilter] on [Paint] objects. ¿=É¿¿¿Ç•/// Creates a mask filter that takes the shape being drawn and blurs it.
///
/// This is commonly used to approximate shadows.
///
/// The `style` argument controls the kind of effect to draw; see [BlurStyle].
///
/// The `sigma` argument controls the size of the effect. It is the standard
/// deviation of the Gaussian blur to apply. The value must be greater than
/// zero. The sigma corresponds to very roughly half the radius of the effect
/// in pixels.
///
/// A blur is an expensive operation and should therefore be used sparingly.
///
/// The arguments must not be null.
///
/// See also:
///
///  * [Canvas.drawShadow], which is a more efficient way to draw shadows.¿"¿(  ¿3¿9   ¿H¿X  ¿b¿o  ¿¿ ¿(¿5¿F ¿R¿<¿   ¿¿¿lÄî¿Ü  ¿â¿ë  ¿l¿m¿DZ¿W   ¿D¿E ¿¢ôk¿mÅƒ/// A description of a color filter to apply when drawing a shape or compositing
/// a layer with a particular [Paint]. A color filter is a function that takes
/// two colors, and outputs one color. When applied during compositing, it is
/// independently applied to each pixel of the layer being drawn before the
/// entire layer is merged with the destination.
///
/// Instances of this class are used with [Paint.colorFilter] on [Paint]
/// objects. ¿îÇX¿Y¿Z¿^Å•/// Creates a color filter that applies the blend mode given as the second
/// argument. The source color is the one given as the first argument, and the
/// destination color is the one from the layer being composited.
///
/// The output of this filter is then composited into the background according
/// to the [Paint.blendMode], using the output of this filter as the source
/// and the background as the destination.¿_¿f  ¿l¿w  ¿ê¿â¿í¿¨¿°¿Æ¿…¿¡¿À¿ﬂ¿Ÿ¿·¿àE¿&Ø¿&∞¿&∂á7/// Construct a color filter from a 4x5 row-major matrix. The matrix is
/// interpreted as a 5x5 matrix, where the fifth row is the identity
/// configuration.
///
/// Every pixel's color value, represented as an `[R, G, B, A]`, is matrix
/// multiplied to create a new color:
///
///     | R' |   | a00 a01 a02 a03 a04 |   | R |
///     | G' |   | a10 a11 a12 a13 a14 |   | G |
///     | B' | = | a20 a21 a22 a23 a24 | * | B |
///     | A' |   | a30 a31 a32 a33 a34 |   | A |
///     | 1  |   |  0   0   0   0   1  |   | 1 |
///
/// The matrix is in row-major order and the translation column is specified
/// in unnormalized, 0...255, space. For example, the identity matrix is:
///
/// ```dart
/// const ColorFilter identity = ColorFilter.matrix(<double>[
///   1, 0, 0, 0, 0,
///   0, 1, 0, 0, 0,
///   0, 0, 1, 0, 0,
///   0, 0, 0, 1, 0,
/// ]);
/// ```
///
/// ## Examples
///
/// An inversion color matrix:
///
/// ```dart
/// const ColorFilter invert = ColorFilter.matrix(<double>[
///   -1,  0,  0, 0, 255,
///    0, -1,  0, 0, 255,
///    0,  0, -1, 0, 255,
///    0,  0,  0, 1,   0,
/// ]);
/// ```
///
/// A sepia-toned color matrix (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#sepiaEquivalent)):
///
/// ```dart
/// const ColorFilter sepia = ColorFilter.matrix(<double>[
///   0.393, 0.769, 0.189, 0, 0,
///   0.349, 0.686, 0.168, 0, 0,
///   0.272, 0.534, 0.131, 0, 0,
///   0,     0,     0,     1, 0,
/// ]);
/// ```
///
/// A greyscale color filter (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#grayscaleEquivalent)):
///
/// ```dart
/// const ColorFilter greyscale = ColorFilter.matrix(<double>[
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0,      0,      0,      1, 0,
/// ]);
/// ```¿&∑¿&≈  ¿&€¿&‘¿&›¿&ˆ¿&Î¿&¯¿'¿'¿'¿'&¿' ¿'(¿'9ÄÙ¿'¶¿'ß¿'∏W/// Construct a color filter that applies the sRGB gamma curve to the RGB
/// channels. ¿' ¿'√¿'Ã¿'Â¿'⁄¿'Á¿'˝¿'ı¿'ˇ¿(¿(¿(¿(1Å¿(´¿(¨¿(Ωd/// Creates a color filter that applies the inverse of the sRGB gamma curve
/// to the RGB channels. ¿(œ¿(»¿(—¿(Í¿(ﬂ¿(Ï¿)¿(˙¿)¿)¿)¿)¿)6¿)C  ¿)M¿)^  ¿)l¿)Ä  ¿)ã¿)ï  ¿)œ¿)‡ ¿)Ì¿*!¿* ¿*$¿*H,¿*Y ¿*s¿*ë,¿*¢ ¿*º¿/fÄØ¿/z   ¿/f¿/g¿0Å¡¿00   ¿0¿0¿*ÛV¿+   ¿*Û¿*Ù¿+MÇ◊¿+[    ¿.(Å:¿.B  ¿.E¿.M  ¿.(¿.)¿1ﬁÇ-¿1Ò   ¿1ﬁ¿1ﬂ ¿4áj¿5_ÅD/// A [ColorFilter] that is backed by a native DlColorFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ColorFilter, because we want ColorFilter to be const constructible and
/// efficiently comparable, so that widgets can check for ColorFilter equality to
/// avoid repainting. ¿5ëÄ∞¿5ù¿5û¿5¢ ¿5£¿5©  
¿5∑¿5Ω¿5Â¿5Ã¿5æ¿5≈¿5∆¿5œ¿5⁄¿5€¿6EÄ¨¿6Q¿6R¿6X ¿6Y¿6_  
¿6m¿6s¿6ù¿6Ç¿6t¿6{¿6|¿6Ö¿6ê¿6ë¿6ÙÄß¿7 ¿7¿7 ¿7¿7  
¿7'¿7-¿7b¿7<¿7.¿75¿76¿7?¿7J¿7K¿7üÄß¿7´¿7¨¿7Ω ¿7æ¿7ƒ  
¿7“¿7ÿ¿8¿7Á¿7Ÿ¿7‡¿7·¿7Í¿7ı¿7ˆ¿8JÄç¿8–o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿8‹]¿9*   ¿8‹¿8›¿8„¿8˘¿8È¿8‰¿8Ò¿8¯¿8Ú¿8˙¿9¿9¿8˚¿9¿9=Äó¿9∞  ¿9∫	¿9ø  ¿9≈¿9   ¿9=¿9>¿9D¿9o¿9J¿9E¿9R¿9n¿9S¿9Z¿9_¿9[¿9b¿9i¿9p¿9û¿9w¿9q¿9y¿9ò¿9í¿9ö¿9ÿÄÅ¿:9  ¿:E¿:R  ¿9ÿ¿9Ÿ¿9ﬂ¿:¿9Â¿9‡¿9Ì¿:¿9Ó¿9ı¿9˙¿9ˆ¿9˝¿:¿:'¿:¿:¿:¿:]Äã¿:œ   ¿:]¿:^¿:d¿:Å¿:j¿:e¿:r¿:Ä¿:s¿:z¿:¿:{¿:Ç¿:Ω¿:â¿:É¿:ã¿:∑¿:±¿:π¿:ÏÄã¿;^   ¿:Ï¿:Ì¿:Û¿;¿:˘¿:Ù¿;¿;¿;¿;	¿;¿;
¿;¿;L¿;¿;¿;¿;F¿;@¿;H ¿;{ã¿=]Å“/// A filter operation to apply to a raster image.
///
/// See also:
///
///  * [BackdropFilter], a widget that applies [ImageFilter] to its rendering.
///  * [ImageFiltered], a widget that applies [ImageFilter] to its children.
///  * [SceneBuilder.pushBackdropFilter], which is the low-level API for using
///    this class as a backdrop filter.
///  * [SceneBuilder.pushImageFilter], which is the low-level API for using
///    this class as a child layer filter. ¿=ø¿= ¿=À¿=Ã   ¿=ÌÅ¿><¿>=¿>A9/// Creates an image filter that applies a Gaussian blur.¿>D¿>L  ¿>Y¿>a  ¿>n"¿>x  ¿>T¿>i¿>Ç¿>ä¿>ã¿>ˆÅ&¿?ú¿?ù¿?£Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿?¶¿?Æ  ¿?º¿?ƒ  ¿?∑¿?Õ¿@ Å'¿@…¿@ ¿@œÄë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿@“¿@⁄  ¿@Ë¿@  ¿@„¿@˘¿AKÇ'¿B@¿BA¿BGÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿BH¿BU  ¿Bt/¿BÉ  ¿Bí¿Bü¿B†¿CvÅ†¿DÑ¿DÖ¿DåÄ/// Composes the `inner` filter with `outer`, to combine their effects.
///
/// Creates a single [ImageFilter] that when applied, has the same effect as
/// subsequently applying `inner` and `outer`, i.e.,
/// result = outer(inner(source)).¿Dè¿D•  ¿D´¿D¡    ¿Fa¿Fl    ¿E∏$¿E≈     ¿FÇÉ`¿Fà  ¿F∂H ¿F∂¿F» ¿FÀ¿F⁄  ¿Fﬂ¿FÓ   ¿G¿G  ¿G!¿G0  ¿Gc@¿G{ ¿Gä¿Gñ¿Gó¿Gù¿G¢¿Gû¿GÎL¿H   ¿GÎ¿GÏ¿IèQ¿I£   ¿Iè¿Iê¿Gß@¿G¿   ¿Gß¿G®¿H;M¿HN   ¿H;¿H<¿HåÄˇ¿H¶  ¿H©¿H±  ¿Hå¿Hç ¿I‰Ñt¿IÍ  ¿Ja ¿J¿J6 ¿J9¿JH  ¿JO¿J^  ¿Je¿Jt   ¿JÉ¿Jê  ¿Jö¿Jß  ¿J±¿J¿  ¿J·>¿J˘ ¿K¿K¿K¿K¿K¿K¿KgÄÓ¿Kr    ¿LYS¿Lp   ¿LY¿LZ¿N<¿N.   ¿N¿N¿K#@¿K<   ¿K#¿K$¿L∞T¿L√   ¿L∞¿L±¿MÅ¿M"  ¿M%¿M-  ¿M¿M	 ¿NZÇ˚¿N`  ¿NéE ¿Né¿N† ¿N£¿N≤  ¿N∫¿N…   ¿N◊¿N‰  ¿NÔ¿N¸  ¿O@¿O  ¿O/¿O;¿O<¿OB¿OG¿OC¿OêI¿Oß   ¿Oê¿Oë¿Q>¿Q)   ¿Q¿Q¿OL@¿Oe   ¿OL¿OM¿O›J¿O   ¿O›¿Oﬁ¿P+ÄÊ¿PE  ¿PH¿PP  ¿P+¿P, ¿QWÇı¿Q]  ¿QäD ¿Qä¿Qõ ¿Qû¿Q≠  ¿Qµ¿Qƒ   ¿Q“¿Qﬂ  ¿QÍ¿Q˜  ¿R?¿R ¿R*¿R6¿R7¿R<¿RA¿R=¿RäH¿R°   ¿Rä¿Rã¿T>¿T    ¿T¿T¿RF@¿R_   ¿RF¿RG¿R÷I¿RÈ   ¿R÷¿R◊¿S#ÄÂ¿S=  ¿S@¿SH  ¿S#¿S$ ¿TNÉã¿TT  ¿TÉN ¿TÉ¿Tñ ¿Tô¿T®  ¿T¥¿T√   ¿T’¿TÁ  ¿Tˆ¿U  ¿U2B¿UJ ¿UY¿Ue¿Uf¿Un¿Us¿Uo¿Uºs¿U”   ¿Uº¿UΩ¿WëF¿W•   ¿Wë¿Wí¿Ux@¿Uë   ¿Ux¿Uy¿V3_¿VF   ¿V3¿V4¿VñÄ˜¿V∞  ¿V≥¿Vª  ¿Vñ¿Vó ¿W€çˆ¿YÅ)/// An [ImageFilter] that is backed by a native DlImageFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ImageFilter, because we want ImageFilter to be efficiently comparable, so that
/// widgets can check for ImageFilter equality to avoid repainting. ¿YBÄ„¿Yä¿Yã¿Yè9/// Creates an image filter that applies a Gaussian blur.¿Yê¿Y™  ¿Yø¿Y∑¿Y¡¿Z)Å#¿Z»¿Z…¿ZœÄé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿Z–¿Z‰  ¿Z˘¿ZÒ¿Z˚¿[PÅ#¿[Ú¿[Û¿[¯Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿[˘¿\  ¿\!¿\¿\#¿\wÅ„¿]e¿]f¿]lÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿]m¿]Å  ¿]ñ¿]é¿]ò¿^^Ä˝¿^ú¿^ù¿^¨//// Converts a color filter to an image filter.¿^≠¿^∫  ¿^œ¿^«¿^—¿__Åz¿_û¿_ü¿_ß0/// Composes `_innerFilter` with `_outerFilter`.¿_®¿_Ω  ¿_“¿_ ¿_‘¿eAÄç¿e«o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿`›]¿a+   ¿`›¿`ﬁ¿`‰¿`˙¿`Í¿`Â¿`Ú¿`˘¿`Û¿`˚¿a¿a¿`¸¿a¿a>Ä≤¿a∫  ¿aƒ¿aÃ  ¿a”¿a€  ¿a‚¿aÁ  ¿a>¿a?¿aE¿ay¿aK¿aF¿aS¿ax¿aT¿a[¿a`¿a\¿ac¿ak¿as¿az¿a®¿aÅ¿a{¿aÉ¿a¢¿aú¿a§¿aÙÄ£¿bk  ¿bw¿b  ¿bá¿bè  ¿aÙ¿aı¿a˚¿b(¿b¿a¸¿b	¿b'¿b
¿b¿b¿b¿b¿b!¿b)¿bY¿b0¿b*¿b2¿bS¿bM¿bU¿bõÄ°¿c  ¿c¿c$  ¿c,¿c4  ¿bõ¿bú¿b¢¿bœ¿b®¿b£¿b∞¿bŒ¿b±¿b∏¿bΩ¿bπ¿b¿¿b»¿b–¿bˇ¿b◊¿b—¿bŸ¿b˘¿bÛ¿b˚¿c@Äú¿c®  ¿c¥¿c¡  ¿c…¿cŒ  ¿c@¿cA¿cG¿cs¿cM¿cH¿cU¿cr¿cV¿c]¿cb¿c^¿ce¿cm¿ct¿cñ¿c{¿cu¿c}¿c‡Äô¿dM  ¿d^¿dm  ¿c‡¿c·¿cÁ¿d¿cÌ¿cË¿cı¿d¿cˆ¿c˝¿d¿c˛¿d¿d¿d¿d¿d¿d;¿d¿d¿d¿d}Ä¿¿d˚  ¿e	¿e  ¿e#¿e1  ¿d}¿d~¿dÑ¿dø¿dä¿dÖ¿dí¿dæ¿dì¿dö¿dü¿dõ¿d¢¿d©¿dÆ¿d™¿d±¿d∏¿dΩ¿dπ¿d¿¿dÈ¿d«¿d¡¿d… ¿e”ÑÎ¿fYz/// Base class for objects such as [Gradient] and [ImageShader] which
/// correspond to shaders as used by [Paint.shader]. ¿fÖÄç¿g¿g¿ga/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿fÎ¿fÏ¿fÚ¿g¿fÛ¿g¿g ¿g,¿g6Å¿gøy/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿hQÇk¿jDÅ€/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, a [Picture] that has not been disposed that
/// refers to an [ImageShader] may keep its underlying resources alive.
///
/// Classes that override this method must call `super.dispose()`.    ¿Åu©¿Ç¡Å@/// A shader (as used by [Paint.shader]) that renders a color gradient.
///
/// There are several types of gradients, represented by the various constructors
/// on this class.
///
/// See also:
///
///  * [Gradient](https://api.flutter.dev/flutter/painting/Gradient-class.html), the class in the [painting] library.
/// ¿Ç›â¿â&¿â'¿â-Ü/// Creates a linear gradient from `from` to `to`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before `from` and after `to` is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
///
/// If `from`, `to`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿â3¿â;  ¿âD	¿âL  ¿âS¿â`  ¿âm¿â|  ¿âã"¿âï  ¿â≥¿â¡  !¿âü¿âß¿â®¿â–¿â÷¿âÎ¿â◊¿âÂ¿âÍ¿âÊ¿âı¿â˚¿ä¿â¸¿ä
¿ä¿ä¿ä¿ä¿äJ¿ä/¿ä'¿ä¿ä*¿ä2¿äA¿äI¿äB¿äT¿äY¿äZ¿ä[¿ä\¿ãÏå¯¿î¿î¿î#á„/// Creates a radial gradient centered at `center` that ends at `radius`
/// distance from the center.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before and after the radius is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
///
/// If `center`, `radius`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.
///
/// If `focal` is provided and not equal to `center` and `focalRadius` is
/// provided and not equal to 0.0, the generated shader will be a two point
/// conical radial gradient, with `focal` being the center of the focal
/// circle and `focalRadius` being the radius of that circle. If `focal` is
/// provided and not equal to `center`, at least one of the two offsets must
/// not be equal to [Offset.zero].¿î)¿î1  ¿î<¿îD  ¿îO¿î\  ¿îi¿îx  ¿îá"¿îë  ¿îØ¿îΩ  ¿î…¿î“  ¿î‹¿î‰  ¿îõ¿î£¿î§¿îÒ¿î¸¿ï¿ï¿ï¿ï¿ï¿ï¿ï#¿ï)¿ïU¿ï:¿ï2¿ï*¿ï5¿ï=¿ïL¿ïT¿ïM¿ï_¿ïd¿ïe¿ïf¿ïg¿òËäI¿†b¿†c¿†há3/// Creates a sweep gradient centered at `center` that starts at `startAngle`
/// and ends at `endAngle`.
///
/// `startAngle` and `endAngle` should be provided in radians, with zero
/// radians being the horizontal line to the right of the `center` and with
/// positive angles going clockwise around the `center`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before `startAngle` and after `endAngle` is described by the
/// `tileMode` argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png)
///
/// If `center`, `colors`, `tileMode`, `startAngle`, or `endAngle` are null,
/// or if `colors` or `colorStops` contain null values, this constructor will
/// throw a [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿†n¿†v  ¿†Å¿†é  ¿†õ¿†™  ¿†π"¿†√  ¿†·¿†È  ¿†˛¿°  ¿°!¿°/  &¿†Õ¿†’¿†÷¿†ı¿°¿°¿°¿°¿°¿°>¿°D¿°[¿°E¿°S¿°Z¿°T¿°e¿°k¿°Å¿°w¿°l¿°y¿°ã¿°ë¿°Ω¿°¢¿°ö¿°í¿°ù¿°•¿°¥¿°º¿°µ¿°«¿°Ã¿°Õ¿°Œ¿°œ  ¿£5Z¿£Ä   ¿£5¿£6¿£<¿£R¿£B¿£=¿£J¿£Q¿£K¿£S¿£n¿£Z¿£T¿£\¿£ìÄÔ¿§  ¿§¿§)  ¿§3¿§>  ¿§E¿§S  ¿§^¿§c  ¿§l¿§z  ¿£ì¿£î¿£ö¿£ﬁ¿£†¿£õ¿£®¿£›¿£©¿£∞¿£µ¿£±¿£∏¿£¿¿£»¿£–¿£◊¿£ﬂ¿£˛¿£Ê¿£‡¿£Ë¿§ÜÅB¿•  ¿•&¿•.  ¿•<¿•D  ¿•R¿•Z  ¿•g¿•r  ¿•¿•ç  ¿•û¿•£  ¿•≤¿•¿  ¿§Ü¿§á¿§ç¿§·¿§ì¿§é¿§õ¿§‡¿§ú¿§£¿§®¿§§¿§´¿§≥¿§ª¿§√¿§À¿§”¿§⁄¿§‚¿•¿§È¿§„¿§Î¿•ÃÅ•¿¶z  
¿¶é¿¶ñ  ¿¶£¿¶´  ¿¶∏¿¶¿  ¿¶“¿¶⁄  ¿¶Â¿¶Ì  ¿¶¯¿ß   ¿ß¿ß  ¿ß(¿ß6  ¿ßG¿ßL  ¿ß[¿ßi  ¿•Ã¿•Õ¿•”¿¶?¿•Ÿ¿•‘¿•·¿¶>¿•‚¿•È¿•Ó¿•Í¿•Ò¿•˘¿¶¿¶	¿¶¿¶¿¶!¿¶)¿¶1¿¶8¿¶@¿¶h¿¶G¿¶A¿¶I¿ßuÅb¿®	  ¿®¿®#  ¿®1¿®9  ¿®G¿®R  ¿®_¿®m  ¿®~¿®É  ¿®í¿®ö  ¿®´¿®≥  ¿®¬¿®–  ¿ßu¿ßv¿ß|¿ßÿ¿ßÇ¿ß}¿ßä¿ß◊¿ßã¿ßí¿ßó¿ßì¿ßö¿ß¢¿ß™¿ß≤¿ß∫¿ß¡¿ß…¿ß—¿ßŸ¿ß˜¿ß‡¿ß⁄¿ß‚¿®€Åü¿®Á  ¿©¿©  ¿©¿©%    ¿™~àl¿™«=/// A shader (as used by [Paint.shader]) that tiles an image. ¿™ÊÖñ ¿Æ™¿ÆµÉÅ/// Creates an image-tiling shader.
///
/// The first argument specifies the image to render. The
/// [decodeImageFromList] function can be used to decode an image from bytes
/// into the form expected here. (In production code, starting from
/// [instantiateImageCodec] may be preferable.)
///
/// The second and third arguments specify the [TileMode] for the x direction
/// and y direction respectively. [TileMode.repeated] can be used for tiling
/// images.
///
/// The fourth argument gives the matrix to apply to the effect. The
/// expression `Matrix4.identity().storage` creates a [Float64List]
/// prepopulated with the identity matrix.
///
/// All the arguments are required and must not be null, except for
/// [filterQuality]. If [filterQuality] is not specified at construction time
/// it will be deduced from the environment where it is used, such as from
/// [Paint.filterQuality].¿Æ∂¿ÆΩ  ¿Æ√¿ÆÕ  ¿Æ—¿Æ€  ¿Æﬂ¿ÆÏ  ¿Æ˙¿Ø
  ¿Æé¿Æè¿Æï¿Æ¶¿Æñ¿Ø#¿Ø)¿Ø>¿Ø*¿Ø+¿Ø0¿Ø1¿ØE¿ØJ¿ØK¿ØL¿ØM  ¿∞ÄE¿∞ë   ¿∞Ä¿∞Å¿∞…]¿±   ¿∞…¿∞ ¿∞–¿∞Ê¿∞÷¿∞—¿∞ﬁ¿∞Â¿∞ﬂ¿∞Á¿±¿∞Ó¿∞Ë¿∞¿±*ÄÈ¿±∑  ¿±∆¿±Œ  ¿±‘¿±Ÿ  ¿±›¿±‚  ¿±Ê¿±Î  ¿±˛¿≤  ¿±*¿±+¿±1¿±|¿±9¿±2¿±A¿±{¿±B¿±I¿±N¿±J¿±Q¿±X¿±]¿±Y¿±`¿±g¿±n¿±u¿±}¿±¢¿±Ñ¿±~¿±Ü¿≤Ä—¿≤›k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿≤á¿≤à¿≤é¿≤´¿≤î¿≤è¿≤ú¿≤™¿≤ù¿≤§¿≤©¿≤•¿≤¨¿≤À¿≤≥¿≤≠¿≤µ ¿≤Ïåœ¿≥‘Ä‹/// An instance of [FragmentProgram] creates [Shader] objects (as used by
/// [Paint.shader]).
///
/// For more information, see the website
/// [documentation]( https://docs.flutter.dev/development/ui/advanced/shaders). ¿¥	Å!¿¥4¿¥5¿¥? ¿¥@¿¥H  ¿¥	¿¥
¿¥¿¥!¿¥¿µ.¿µ6  ¿∫–{¿ª	 	¿ªI¿ªJ¿ª!¿ªH¿ª"¿ª*¿ª7¿ªG¿ª8¿ΩÃ7¿ΩÒ ¿ΩÃ¿ΩÕ¿Ω”¿Ω‰¿Ω‘¿æ2¿æ- ¿æ¿æ	¿æ¿æ ¿æ ¿µEÑS¿∂†Å//// Creates a fragment program from the asset with key [assetKey].
///
/// The asset must be a file produced as the output of the `impellerc`
/// compiler. The constructed object should then be reused via the
/// [fragmentShader] method to create [Shader] objects that can be used by
/// [Paint.shader]. ¿∂™¿∂≤   ¿ªPÇx¿ª\  ¿ªp¿ªx   ¿æ?a¿æë   ¿æ?¿æ@¿æF¿æ\¿æL¿æG¿æT¿æ[¿æU¿æ]¿æ¿æd¿æ^¿æf¿æ§Äå¿ø  ¿ø¿ø'  ¿æ§¿æ•¿æ´¿æ“¿æ≥¿æ¨¿æª¿æ—¿æº¿æ√¿æ»¿æƒ¿æÀ¿æ”¿æ¸¿æ⁄¿æ‘¿æ‹¿ø4ÄÖ¿øw1/// Returns a fresh instance of [FragmentShader].    ¿øΩë˛¿¬ÆÇÂ/// A [Shader] generated from a [FragmentProgram].
///
/// Instances of this class can be obtained from the
/// [FragmentProgram.fragmentShader] method. The float uniforms list is
/// initialized to the size expected by the shader and is zero-filled. Uniforms
/// of float type can then be set by calling [setFloat]. Sampler uniforms are
/// set by calling [setImageSampler].
///
/// A [FragmentShader] can be re-used, and this is an efficient way to avoid
/// allocating and re-initializing the uniform buffer and samplers. However,
/// if two [FragmentShader] objects with different float uniforms or samplers
/// are required to exist simultaneously, they must be obtained from two
/// different calls to [FragmentProgram.fragmentShader]. ¿¬–Ä€¿¬ﬁ¿¬ﬂ¿¬‡ ¿¬·¿¬Ú  ¿¬¸¿√  ¿√¿√¿√ ¿√+¿√0¿√1¿√2¿√3¿√Ø¿√Ω  ¿√Ã<¿√Â ¿√˙¿ƒ¿ƒ¿ƒ¿ƒ(¿ƒ ¿ƒ" ¿ƒ9áê¿À1Üú/// Sets the float uniform at [index] to [value].
///
/// All uniforms defined in a fragment shader that are not samplers must be
/// set through this method. This includes floats and vec2, vec3, and vec4.
/// The correct index for each uniform is determined by the order of the
/// uniforms as defined in the fragment program, ignoring any samplers. For
/// data types that are composed of multiple floats such as a vec4, more than
/// one call to [setFloat] is required.
///
/// For example, given the following uniforms in a fragment program:
///
/// ```glsl
/// uniform float uScale;
/// uniform sampler2D uTexture;
/// uniform vec2 uMagnitude;
/// uniform vec4 uColor;
/// ```
///
/// Then the corresponding Dart code to correctly initialize these uniforms
/// is:
///
/// ```dart
/// void updateShader(ui.FragmentShader shader, Color color, ui.Image image) {
///   shader.setFloat(0, 23);  // uScale
///   shader.setFloat(1, 114); // uMagnitude x
///   shader.setFloat(2, 83);  // uMagnitude y
///
///   // Convert color to premultiplied opacity.
///   shader.setFloat(3, color.red / 255 * color.opacity);   // uColor r
///   shader.setFloat(4, color.green / 255 * color.opacity); // uColor g
///   shader.setFloat(5, color.blue / 255 * color.opacity);  // uColor b
///   shader.setFloat(6, color.opacity);                     // uColor a
///
///   // initialize sampler uniform.
///   shader.setImageSampler(0, image);
/// }
/// ```
///
/// Note how the indexes used does not count the `sampler2D` uniform. This
/// uniform will be set separately with [setImageSampler], with the index starting
/// over at 0.
///
/// Any float uniforms that are left uninitialized will default to `0`. ¿À:	¿À?  ¿ÀE¿ÀM   ¿ÀÕÅ¸¿ÕÅ</// Sets the sampler uniform at [index] to [image].
///
/// The index provided to setImageSampler is the index of the sampler uniform defined
/// in the fragment program, excluding all non-sampler uniforms.
///
/// All the sampler uniforms that a shader expects must be provided or the
/// results will be undefined. ¿Õ-	¿Õ2  ¿Õ8¿Õ?   ¿ÕÕÅÖ¿Œ¸Å/// Releases the native resources held by the [FragmentShader].
///
/// After this method is called, calling methods on the shader, or attaching
/// it to a [Paint] object will fail with an exception. Calling [dispose]
/// twice will also result in an exception being thrown.  ¿ŒÎ¿ŒÏ¿œVÄ»¿œ–  ¿œ›¿œÓ  ¿œˆ¿œ˚  ¿–	¿–  ¿œV¿œW¿œ]¿œç¿œe¿œ^¿œm¿œå¿œn¿œv¿œ~¿œÜ¿œé¿œ∑¿œï¿œè¿œó¿–"Ä•¿–õ  ¿–¨	¿–±  ¿–∑¿–ø  ¿–"¿–#¿–)¿–V¿–/¿–*¿–7¿–U¿–8¿–?¿–D¿–@¿–G¿–O¿–W¿–â¿–^¿–X¿–`¿–À~¿—5   ¿–À¿–Ã¿–“¿–Ô¿–ÿ¿–”¿–‡¿–Ó¿–·¿–Ë¿–Ì¿–È¿–¿—#¿–˜¿–Ò¿–˘¿—Ml¿—Æ   ¿—M¿—N¿—T¿—q¿—Z¿—U¿—b¿—p¿—c¿—j¿—o¿—k¿—r¿—ú¿—y¿—s¿—{ ¿‘Ç¨¿‹¸àn/// A set of vertex data used by [Canvas.drawVertices].
///
/// Vertex data consists of a series of points in the canvas coordinate space.
/// Based on the [VertexMode], these points are interpreted either as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single shared
/// point ([VertexMode.triangleFan]).
///
/// Each point can be associated with a color. Each triangle is painted as a
/// gradient that blends between the three colors at the three points of that
/// triangle. If no colors are specified, transparent black is assumed for all
/// the points.
///
/// These colors are then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices]. This paint is either a solid color ([Paint.color]),
/// or a bitmap, specified using a shader ([Paint.shader]), typically either a
/// gradient ([Gradient]) or image ([ImageFilter]). The bitmap uses the same
/// coordinate space as the canvas (in the case of an [ImageFilter], this is
/// notably different than the coordinate space of the source image; the source
/// image is tiled according to the filter's configuration, and the image that
/// is sampled when painting the triangles is the infinite one after all the
/// repeating is applied.)
///
/// Each point in the [Vertices] is associated with a specific point on this
/// image. Each triangle is painted by sampling points from this image by
/// interpolating between the three points of the image corresponding to the
/// three points of the triangle.
///
/// The [Vertices.new] constructor configures all this using lists of [Offset]
/// and [Color] objects. The [Vertices.raw] constructor instead uses
/// [Float32List], [Int32List], and [Uint16List] objects, which more closely
/// corresponds to the data format used internally and therefore reduces some of
/// the conversion overhead. The raw constructor is useful if the data is coming
/// from another source (e.g. a file) and can therefore be parsed directly into
/// the underlying representation. ¿›*éÈ ¿Ê+¿Ê3à¨/// Creates a set of vertex data for use with [Canvas.drawVertices].
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles.
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each triangle is painted as a gradient that blends between
/// the three colors at the three points of that triangle. (These colors are
/// then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
///
/// If the `colors` or `textureCoordinates` parameters are specified, they must
/// be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-1, where _n_ is the number of entries in `positions`. The
/// `indices` parameter, if present and non-empty, must have at least three
/// entries, but may be of any length beyond this. Indicies may refer to
/// offsets in the positions array multiple times, or may skip positions
/// entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for `positions`.
///
/// The `mode` and `positions` parameters must not be null.
///
/// This constructor converts its parameters into [dart:typed_data] lists
/// (e.g. using [Float32List]s for the coordinates) before sending them to the
/// Flutter engine. If the data provided to this constructor is not already in
/// [List] form, consider using the [Vertices.raw] constructor instead to
/// avoid converting the data twice.¿Ê9¿ÊE  ¿ÊN¿Ê\  ¿Êl¿Êz  ¿ÊÖ ¿Êî  ¿Ê´¿Ê∑   ¿ÏèW¿ˆ†¿ˆ°¿ˆ§ä(/// Creates a set of vertex data for use with [Canvas.drawVertices], using the
/// encoding expected by the Flutter engine.
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles. Each point is represented as two
/// numbers in the list, the first giving the x coordinate and the second
/// giving the y coordinate. (As a result, the list must have an even number
/// of entries.)
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each color is represented as ARGB with 8 bit color channels
/// (like [Color.value]'s internal representation), and the list, if
/// specified, must therefore be half the length of `positions`. Each triangle
/// is painted as a gradient that blends between the three colors at the three
/// points of that triangle. (These colors are then blended with the [Paint]
/// specified in the call to [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
/// Each point is represented as two numbers in the list, the first giving the
/// x coordinate and the second giving the y coordinate. This list, if
/// specified, must be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-2, where _n_ is the number of pairs in `positions` (i.e. half
/// the length of `positions`). The `indices` parameter, if present and
/// non-empty, must have at least three entries, but may be of any length
/// beyond this. Indicies may refer to offsets in the positions array multiple
/// times, or may skip positions entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for pairs in `positions`. For example, if there are 12
/// numbers in `positions` (representing 6 coordinates), the `indicies` must
/// be numbers in the range 0..5 inclusive.
///
/// The `mode` and `positions` parameters must not be null.¿ˆ™¿ˆ∂  ¿ˆø¿ˆÃ  ¿ˆ‹¿ˆË  ¿ˆÛ¿˜  ¿˜¿˜%   ¿˛Œ¿˛” ¿˛ﬂ¿˛ËÅû¿ˇ•Ä´/// Whether this reference to the underlying vertex data is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿˚rÅé¿˚È  ¿˚Ô¿˚˘  ¿¸"¿¸'  ¿¸I¿¸V  ¿¸}¿¸ã  ¿¸ª¿¸«  ¿¸Î¿¸¯  ¿˚r¿˚s¿˚y¿˚∂¿˚¿˚z¿˚á¿˚µ¿˚à¿˚ê¿˚ó¿˚ü¿˚ß¿˚Ø¿˚∑¿˚–¿˚æ¿˚∏¿˚¿¿˝ÄÙ¿˝|n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿˝¸ÄŒ¿˛øk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿˛l¿˛m¿˛s¿˛ê¿˛y¿˛t¿˛Å¿˛è¿˛Ç¿˛â¿˛é¿˛ä¿˛ë¿˛≠¿˛ò¿˛í¿˛ö ¿–¿ ñ2¿	IÉi/// An interface for recording graphical operations.
///
/// [Canvas] objects are used in creating [Picture] objects, which can
/// themselves be used with a [SceneBuilder] to build a [Scene]. In
/// normal usage, however, this is all handled by the framework.
///
/// A canvas has a current transformation matrix which is applied to all
/// operations. Initially, the transformation matrix is the identity transform.
/// It can be modified using the [translate], [scale], [rotate], [skew],
/// and [transform] methods.
///
/// A canvas also has a current clip region which is applied to all operations.
/// Initially, the clip region is infinite. It can be modified using the
/// [clipRect], [clipRRect], and [clipPath] methods.
///
/// The current transform and clip can be saved and restored using the stack
/// managed by the [save], [saveLayer], and [restore] methods. ¿	TÇ◊ ¿Ê¿ÏÇq/// Creates a canvas for recording graphical operations into the
/// given picture recorder.
///
/// Graphical operations that affect pixels entirely outside the given
/// `cullRect` might be discarded by the implementation. However, the
/// implementation might draw outside these bounds if, for example, a command
/// draws partially inside and outside the `cullRect`. To ensure that pixels
/// outside a given region are discarded, consider using a [clipRect]. The
/// `cullRect` is optional; by default, all operations are kept.
///
/// To end the recording, call [PictureRecorder.endRecording] on the
/// given recorder.¿Ì¿˛  ¿	¿     %¿/Å(¿PÅ/// Saves a copy of the current transform and clip on the save stack.
///
/// Call [restore] to pop the save stack.
///
/// See also:
///
///  * [saveLayer], which does the same thing but additionally also groups the
///    commands done until the matching [restore].   ¿[îö¿!–ìï/// Saves a copy of the current transform and clip on the save stack, and then
/// creates a new group which subsequent calls will become a part of. When the
/// save stack is later popped, the group will be flattened into a layer and
/// have the given `paint`'s [Paint.colorFilter] and [Paint.blendMode]
/// applied.
///
/// This lets you create composite effects, for example making a group of
/// drawing commands semi-transparent. Without using [saveLayer], each part of
/// the group would be painted individually, so where they overlap would be
/// darker than where they do not. By using [saveLayer] to group them
/// together, they can be drawn with an opaque color at first, and then the
/// entire group can be made transparent using the [saveLayer]'s paint.
///
/// Call [restore] to pop the save stack and apply the paint to the group.
///
/// ## Using saveLayer with clips
///
/// When a rectangular clip operation (from [clipRect]) is not axis-aligned
/// with the raster buffer, or when the clip operation is not rectilinear
/// (e.g. because it is a rounded rectangle clip created by [clipRRect] or an
/// arbitrarily complicated path clip created by [clipPath]), the edge of the
/// clip needs to be anti-aliased.
///
/// If two draw calls overlap at the edge of such a clipped region, without
/// using [saveLayer], the first drawing will be anti-aliased with the
/// background first, and then the second will be anti-aliased with the result
/// of blending the first drawing and the background. On the other hand, if
/// [saveLayer] is used immediately after establishing the clip, the second
/// drawing will cover the first in the layer, and thus the second alone will
/// be anti-aliased with the background when the layer is clipped and
/// composited (when [restore] is called).
///
/// For example, this [CustomPainter.paint] method paints a clean white
/// rounded rectangle:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.saveLayer(rect, Paint());
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.restore();
/// }
/// ```
///
/// On the other hand, this one renders a red outline, the result of the red
/// paint being anti-aliased with the background at the clip edge, then the
/// white paint being similarly anti-aliased with the background _including
/// the clipped red paint_:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   // (this example renders poorly, prefer the example above)
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// This point is moot if the clip only clips one draw operation. For example,
/// the following paint method paints a pair of clean white rounded
/// rectangles, even though the clips are not done on a separate layer:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(Offset.zero & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(size.center(Offset.zero) & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// (Incidentally, rather than using [clipRRect] and [drawPaint] to draw
/// rounded rectangles like this, prefer the [drawRRect] method. These
/// examples are using [drawPaint] as a proxy for "complicated draw operations
/// that will get clipped", to illustrate the point.)
///
/// ## Performance considerations
///
/// Generally speaking, [saveLayer] is relatively expensive.
///
/// There are a several different hardware architectures for GPUs (graphics
/// processing units, the hardware that handles graphics), but most of them
/// involve batching commands and reordering them for performance. When layers
/// are used, they cause the rendering pipeline to have to switch render
/// target (from one layer to another). Render target switches can flush the
/// GPU's command buffer, which typically means that optimizations that one
/// could get with larger batching are lost. Render target switches also
/// generate a lot of memory churn because the GPU needs to copy out the
/// current frame buffer contents from the part of memory that's optimized for
/// writing, and then needs to copy it back in once the previous render target
/// (layer) is restored.
///
/// See also:
///
///  * [save], which saves the current state, but does not create a new layer
///    for subsequent commands.
///  * [BlendMode], which discusses the use of [Paint.blendMode] with
///    [saveLayer]. ¿!⁄¿!·  ¿!Ë¿!Ô   ¿!˘ÅF¿#5Å(/// Pops the current save stack, if there is anything to pop.
/// Otherwise, does nothing.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If the state was pushed with [saveLayer], then this call will also
/// cause the new layer to be composited into the previous layer.   ¿#CÇ%¿%NÅÛ/// Restores the save stack to a previous level as might be obtained from [getSaveCount].
/// If [count] is less than 1, the stack is restored to its initial state.
/// If [count] is greater than the current [getSaveCount] then nothing happens.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If any of the state stack levels restored by this call were pushed with
/// [saveLayer], then this call will also cause those layers to be composited
/// into their previous layers. ¿%]	¿%b   ¿%lÅB¿&üÅ"/// Returns the number of items on the save stack, including the
/// initial state. This means it returns 1 for a clean canvas, and
/// that each call to [save] and [saveLayer] increments it, and that
/// each matching call to [restore] decrements it.
///
/// This number cannot go below 1.   ¿&≤Ä≈¿'WÄõ/// Add a translation to the current transform, shifting the coordinate space
/// horizontally by the first argument and vertically by the second argument. ¿'a	¿'i  ¿'l	¿'t   ¿'{Å,¿(àÄ˚/// Add an axis-aligned scale to the current transform, scaling by the first
/// argument in the horizontal direction and the second in the vertical
/// direction.
///
/// If [sy] is unspecified, [sx] will be used for the scale in both
/// directions. ¿(é	¿(ñ  ¿(ö
¿(£   ¿(´q¿)R/// Add a rotation to the current transform. The argument is in radians clockwise. ¿)¿)   ¿) Å5¿*:Å/// Add an axis-aligned skew to the current transform, with the first argument
/// being the horizontal skew in rise over run units clockwise around the
/// origin, and the second argument being the vertical skew in rise over run
/// units clockwise around the origin. ¿*?	¿*G  ¿*J	¿*R   ¿*YÄØ¿*ÈÄà/// Multiply the current transform by the specified 4‚®â4 transformation matrix
/// specified as a list of values in column-major order. ¿*Û¿+    ¿+Ç¿- Å◊/// Returns the current transform including the combined result of all transform
/// methods executed since the creation of this [Canvas] object, and respecting the
/// save/restore history.
///
/// Methods that can change the current transform include [translate], [scale],
/// [rotate], [skew], and [transform]. The [restore] method can also modify
/// the current transform by restoring it to the same value it had before its
/// associated [save] or [saveLayer] call.   ¿-Çê¿/PÇ/// Reduces the clip region to the intersection of the current clip and the
/// given rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that.
///
/// Use [ClipOp.difference] to subtract the provided rectangle from the
/// current clip. ¿/Y	¿/_  ¿/f ¿/n  ¿/à¿/é  ¿/v¿/|¿/}¿/õ¿/ßÇ;¿1∞ÅÔ/// Reduces the clip region to the intersection of the current clip and the
/// given rounded rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rrect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that and some examples of using [clipRRect]. ¿1∫¿1¡  ¿1»¿1Œ  ¿1€¿1ÊÇ¿3ºÅº/// Reduces the clip region to the intersection of the current clip and the
/// given [Path].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_path.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that. ¿3≈	¿3À  ¿3—¿3◊  ¿3‰¿3Ôä›¿>∑äZ/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the local coordinate space under which rendering operations are currently
/// performed.
///
/// The combined clip results are rounded out to an integer pixel boundary before
/// they are transformed back into the local coordinate space which accounts for
/// the pixel roundoff in rendering operations, particularly when antialiasing.
/// Because the [Picture] may eventually be rendered into a scene within the
/// context of transforming widgets or layers, the result may thus be overly
/// conservative due to premature rounding. Using the [getDestinationClipBounds]
/// method combined with the external transforms and rounding in the true device
/// coordinate system will produce more accurate results, but this value may
/// provide a more convenient approximation to compare rendering operations to
/// the established clip.
///
/// {@template dart.ui.canvas.conservativeClipBounds}
/// The conservative estimate of the bounds is based on intersecting the bounds
/// of each clip method that was executed with [ClipOp.intersect] and potentially
/// ignoring any clip method that was executed with [ClipOp.difference]. The
/// [ClipOp] argument is only present on the [clipRect] method.
///
/// To understand how the bounds estimate can be conservative, consider the
/// following two clip method calls:
///
/// ```dart
/// void draw(Canvas canvas) {
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(10, 10, 20, 20))
///     ..addRect(const Rect.fromLTRB(80, 80, 100, 100)));
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(80, 10, 100, 20))
///     ..addRect(const Rect.fromLTRB(10, 80, 20, 100)));
///   // ...
/// }
/// ```
///
/// After executing both of those calls there is no area left in which to draw
/// because the two paths have no overlapping regions. But, in this case,
/// [getLocalClipBounds] would return a rectangle from `10, 10` to `100, 100` because it
/// only intersects the bounds of the two path objects to obtain its conservative
/// estimate.
///
/// The clip bounds are not affected by the bounds of any enclosing
/// [saveLayer] call as the engine does not currently guarantee the strict
/// enforcement of those bounds during rendering.
///
/// Methods that can change the current clip include [clipRect], [clipRRect],
/// and [clipPath]. The [restore] method can also modify the current clip by
/// restoring it to the same value it had before its associated [save] or
/// [saveLayer] call.
/// {@endtemplate}   ¿>–Éü¿BTÉb/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the destination coordinate space in which the [Picture] will be rendered.
///
/// Unlike [getLocalClipBounds], the bounds are not rounded out to an integer
/// pixel boundary as the Destination coordinate space may not represent pixels
/// if the [Picture] being constructed will be further transformed when it is
/// rendered or added to a scene. In order to determine the true pixels being
/// affected, those external transforms should be applied first before rounding
/// out the result to integer pixel boundaries. Most typically, [Picture] objects
/// are rendered in a scene with a scale transform representing the Device Pixel
/// Ratio.
///
/// {@macro dart.ui.canvas.conservativeClipBounds}   ¿BsÄ›¿C$Ä•/// Paints the given [Color] onto the canvas, applying the given
/// [BlendMode], with the given color being the source and the background
/// being the destination. ¿C.¿C5  ¿C;¿CF   ¿CTÅ¸¿E$Åº/// Draws a line between the given points using the given paint. The line is
/// stroked, the value of the [Paint.style] is ignored for this call.
///
/// The `p1` and `p2` arguments are interpreted as offsets from the origin.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line_dark.png#gh-dark-mode-only) ¿E-	¿E5  ¿E8	¿E@  ¿EC¿EJ   ¿ETÄ±¿EÓÄå/// Fills the canvas with the given [Paint].
///
/// To fill the canvas with a solid color and blend mode, consider
/// [drawColor] instead. ¿E¯¿Eˇ   ¿F	Åë¿GyÅ`/// Draws a rectangle with the given [Paint]. Whether the rectangle is filled
/// or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect_dark.png#gh-dark-mode-only) ¿GÇ	¿Gà  ¿Gç¿Gî   ¿GûÅû¿IÅj/// Draws a rounded rectangle with the given [Paint]. Whether the rectangle is
/// filled or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect_dark.png#gh-dark-mode-only) ¿I"¿I)  ¿I/¿I6   ¿I@ÅH¿JVÅ/// Draws a shape consisting of the difference between two rounded rectangles
/// with the given [Paint]. Whether this shape is filled or stroked (or both)
/// is controlled by [Paint.style].
///
/// This shape is almost but not quite entirely unlike an annulus. ¿Ja¿Jh  ¿Jn¿Ju  ¿J{¿JÇ   ¿JåÅ«¿L2Åî/// Draws an axis-aligned oval that fills the given axis-aligned rectangle
/// with the given [Paint]. Whether the oval is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval_dark.png#gh-dark-mode-only) ¿L;	¿LA  ¿LF¿LM   ¿LWÇ)¿NOÅ‰/// Draws a circle centered at the point given by the first argument and
/// that has the radius given by the second argument, with the [Paint] given in
/// the third argument. Whether the circle is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle_dark.png#gh-dark-mode-only) ¿NZ¿Nb  ¿Nd¿Nl  ¿Ns¿Nz   ¿NÑÉ€¿R	Éc/// Draw an arc scaled to fit inside the given rectangle.
///
/// It starts from `startAngle` radians around the oval up to
/// `startAngle` + `sweepAngle` radians around the oval, with zero radians
/// being the point on the right hand side of the oval that crosses the
/// horizontal line that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval. If `useCenter` is true, the arc is
/// closed back to the center, forming a circle sector. Otherwise, the arc is
/// not closed, forming a circle segment.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc_dark.png#gh-dark-mode-only)
///
/// This method is optimized for drawing arcs and should be faster than [Path.arcTo]. ¿R	¿R  ¿R¿R$  ¿R/¿R7  ¿RB¿RH  ¿RR¿RY   ¿RcÅ¿SaÄÓ/// Draws the given [Path] with the given [Paint].
///
/// Whether this shape is filled or stroked (or both) is controlled by
/// [Paint.style]. If the path is filled, then sub-paths within it are
/// implicitly closed (see [Path.close]). ¿Sj	¿Sp  ¿Su¿S|   ¿SÜÄ›¿T0Ä†/// Draws the given [Image] into the canvas with its top-left corner at the
/// given [Offset]. The image is composited into the canvas using the given [Paint]. ¿T:¿TA  ¿TG¿TO  ¿TV¿T]   ¿TgÅ¯¿V#Å§/// Draws the subset of the given image described by the `src` argument into
/// the canvas in the axis-aligned rectangle given by the `dst` argument.
///
/// This might sample from outside the `src` rect by up to half the width of
/// an applied filter.
///
/// Multiple calls to this method with different arguments (from the same
/// image) can be batched into a single call to [drawAtlas] to improve
/// performance. ¿V1¿V8  ¿V>¿VD  ¿VH¿VN  ¿VR¿VY   ¿VcÉQ¿YuÇÚ/// Draws the given [Image] into the canvas using the given [Paint].
///
/// The image is drawn in nine portions described by splitting the image by
/// drawing two horizontal lines and two vertical lines, where the `center`
/// argument describes the rectangle formed by the four points where these
/// four lines intersect each other. (This forms a 3-by-3 grid of regions,
/// the center region being described by the `center` argument.)
///
/// The four regions in the corners are drawn, without scaling, in the four
/// corners of the destination rectangle described by `dst`. The remaining
/// five regions are drawn by stretching them to fit such that they exactly
/// cover the destination rectangle while maintaining their relative
/// positions. ¿YÉ¿Yä  ¿Yê¿Yñ  ¿Yù¿Y£  ¿Yß¿YÆ   ¿Y∏ÄÇ¿Z[/// Draw the given picture onto the canvas. To create a picture, see
/// [PictureRecorder]. ¿Z)¿Z2   ¿Z>ÑI¿^UÉÈ/// Draws the text in the given [Paragraph] into this canvas at the given
/// [Offset].
///
/// The [Paragraph] object must have had [Paragraph.layout] called on it
/// first.
///
/// To align the text, set the `textAlign` on the [ParagraphStyle] object
/// passed to the [ParagraphBuilder.new] constructor. For more details see
/// [TextAlign] and the discussion at [ParagraphStyle.new].
///
/// If the text is left aligned or justified, the left margin will be at the
/// position specified by the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is right aligned or justified, the right margin will be at the
/// position described by adding the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is centered, the centering axis will be at the position
/// described by adding half of the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate. ¿^c¿^n  ¿^x¿^Ä   ¿^ãÅÙ¿`=Åñ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as offsets from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawRawPoints], which takes `points` as a [Float32List] rather than a
///    [List<Offset>]. ¿`H¿`S  ¿`]¿`k  ¿`r¿`y   ¿`ÉÇO¿béÅÌ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as a list of pairs of floating point
/// numbers, where each pair represents an x and y offset from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawPoints], which takes `points` as a [List<Offset>] rather than a
///    [List<Float32List>]. ¿bú¿bß  ¿b±¿bæ  ¿b≈¿bÃ   ¿b÷Ü;¿hœÖª/// Draws a set of [Vertices] onto the canvas as one or more triangles.
///
/// The [Paint.color] property specifies the default color to use for the
/// triangles.
///
/// The [Paint.shader] property, if set, overrides the color entirely,
/// replacing it with the colors from the specified [ImageShader], [Gradient],
/// or other shader.
///
/// The `blendMode` parameter is used to control how the colors in the
/// `vertices` are combined with the colors in the `paint`. If there are no
/// colors specified in `vertices` then the `blendMode` has no effect. If
/// there are colors in the `vertices`, then the color taken from the
/// [Paint.shader] or [Paint.color] in the `paint` is blended with the colors
/// specified in the `vertices` using the `blendMode` parameter. For the
/// purposes of this blending, the colors from the `paint` parameter are
/// considered the source, and the colors from the `vertices` are considered
/// the destination. [BlendMode.dst] ignores the `paint` and uses only the
/// colors of the `vertices`; [BlendMode.src] ignores the colors of the
/// `vertices` and uses only the colors in the `paint`.
///
/// All parameters must not be null.
///
/// See also:
///   * [Vertices.new], which creates a set of vertices to draw on the canvas.
///   * [Vertices.raw], which creates the vertices using typed data lists
///     rather than unencoded lists.
///   * [paint], Image shaders can be used to draw images on a triangular mesh. ¿h‹¿hÊ  ¿hÔ¿h˙  ¿i¿i   ¿iñï¿~µîî/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color.
///
/// The method takes a list of [Rect] objects that each define a piece of the
/// [atlas] image to be drawn independently. Each [Rect] is associated with an
/// [RSTransform] entry in the [transforms] list which defines the location,
/// rotation, and (uniform) scale with which to draw that portion of the image.
/// Each [Rect] can also be associated with an optional [Color] which will be
/// composed with the associated image part using the [blendMode] before blending
/// the result onto the canvas. The full operation can be broken down as:
///
/// - Blend each rectangular portion of the image specified by an entry in the
/// [rects] argument with its associated entry in the [colors] list using the
/// [blendMode] argument (if a color is specified). In this part of the operation,
/// the image part will be considered the source of the operation and the associated
/// color will be considered the destination.
/// - Blend the result from the first step onto the canvas using the translation,
/// rotation, and scale properties expressed in the associated entry in the
/// [transforms] list using the properties of the [Paint] object.
///
/// If the first stage of the operation which blends each part of the image with
/// a color is needed, then both the [colors] and [blendMode] arguments must
/// not be null and there must be an entry in the [colors] list for each
/// image part. If that stage is not needed, then the [colors] argument can
/// be either null or an empty list and the [blendMode] argument may also be null.
///
/// The optional [cullRect] argument can provide an estimate of the bounds of the
/// coordinates rendered by all components of the atlas to be compared against
/// the clip to quickly reject the operation if it does not intersect.
///
/// An example usage to render many sprites from a single sprite atlas with no
/// rotations or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: 0.0,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: sprite.rotation,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], <Color>[
///       for (final Sprite sprite in allSprites)
///         Colors.white.withAlpha(sprite.alpha),
///     ], BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// The length of the [transforms] and [rects] lists must be equal and
/// if the [colors] argument is not null then it must either be empty or
/// have the same length as the other two lists.
///
/// See also:
///
///  * [drawRawAtlas], which takes its arguments as typed data lists rather
///    than objects. ¿~ø¿~∆  ¿~›¿~  ¿¿  ¿/¿=  ¿U¿a  ¿|¿É  ¿ù¿§   ¿Æõ¿ôæò‰/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color. It is also more efficient
/// than [drawAtlas] as the data in the arguments is already packed in a format
/// that can be directly used by the rendering code.
///
/// A full description of how this method uses its arguments to draw onto the
/// canvas can be found in the description of the [drawAtlas] method.
///
/// The [rstTransforms] argument is interpreted as a list of four-tuples, with
/// each tuple being ([RSTransform.scos], [RSTransform.ssin],
/// [RSTransform.tx], [RSTransform.ty]).
///
/// The [rects] argument is interpreted as a list of four-tuples, with each
/// tuple being ([Rect.left], [Rect.top], [Rect.right], [Rect.bottom]).
///
/// The [colors] argument, which can be null, is interpreted as a list of
/// 32-bit colors, with the same packing as [Color.value]. If the [colors]
/// argument is not null then the [blendMode] argument must also not be null.
///
/// An example usage to render many sprites from a single sprite atlas with no rotations
/// or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example sets the RSTransform values directly for a common case of no
///       // rotations or scales and just a translation to position the atlas entry. For
///       // more complicated transforms one could use the RSTransform class to compute
///       // the necessary values or do the same math directly.
///       transformList[i * 4 + 0] = 1.0;
///       transformList[i * 4 + 1] = 0.0;
///       transformList[i * 4 + 2] = sprite.center.dx - 5.0;
///       transformList[i * 4 + 3] = sprite.center.dy - 5.0;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     Int32List colorList = Int32List(allSprites.length);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example uses an RSTransform object to compute the necessary values for
///       // the transform using a factory helper method because the sprites contain
///       // rotation values which are not trivial to work with. But if the math for the
///       // values falls out from other calculations on the sprites then the values could
///       // possibly be generated directly from the sprite update code.
///       final RSTransform transform = RSTransform.fromComponents(
///         rotation: sprite.rotation,
///         scale: 1.0,
///         // Center of the sprite relative to its rect
///         anchorX: 5.0,
///         anchorY: 5.0,
///         // Location at which to draw the center of the sprite
///         translateX: sprite.center.dx,
///         translateY: sprite.center.dy,
///       );
///       transformList[i * 4 + 0] = transform.scos;
///       transformList[i * 4 + 1] = transform.ssin;
///       transformList[i * 4 + 2] = transform.tx;
///       transformList[i * 4 + 3] = transform.ty;
///
///       // This example computes the color value directly, but one could also compute
///       // an actual Color object and use its Color.value getter for the same result.
///       // Since we are using BlendMode.srcIn, only the alpha component matters for
///       // these colors which makes this a simple shift operation.
///       colorList[i] = sprite.alpha << 24;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, colorList, BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// See also:
///
///  * [drawAtlas], which takes its arguments as objects rather than typed
///    data lists. ¿ôÀ¿ô“  ¿ôÏ¿ô˘  ¿ö¿ö(  ¿öB¿öN  ¿öi¿öu  ¿öì¿öö  ¿ö∑¿öæ   ¿ö»Å8¿õ±Ä◊/// Draws a shadow for a [Path] representing the given material elevation.
///
/// The `transparentOccluder` argument should be true if the occluding object
/// is not opaque.
///
/// The arguments must not be null. ¿õº	¿õ¬  ¿õ«¿õŒ  ¿õ‘¿õ‹  ¿õÊ¿õÏ    ¿ú¿ H÷¿ú  ¿úTÅì ¿úT¿úa ¿úb¿ús  ¿ú~¿úÖ   ¿ü»!¿ü‡   B¿ùÎÄ‹¿ûc  ¿ûp¿ûà  ¿ûë¿ûô  ¿ûû
¿û¶  ¿û™¿û≤  ¿û∏¿û¿  ¿ùÎ¿ùÏ¿ùÚ¿û7¿ù¯¿ùÛ¿û ¿û6¿û¿û	¿û¿û¿û¿û¿û ¿û(¿û0¿û8¿ûQ¿û?¿û9¿ûA¿üÓo¿†V   ¿üÓ¿üÔ¿ü˙¿ü˚¿†¿†¿†¿†¿†¿†¿†¿†¿†¿†¿†¿†D¿†&¿† ¿†(¿†>¿†8¿†@¿†aÅ-¿†r  ¿†|¿†É  ¿†ä¿†ë  ¿†a¿†b¿°íÄπ¿¢  ¿¢¿¢*  ¿¢7¿¢A  ¿°í¿°ì¿°ô¿°∆¿°ü¿°ö¿°ß¿°≈¿°®¿°Ø¿°¥¿°∞¿°∑¿°ø¿°«¿°¿°Œ¿°»¿°–¿¢OÄı¿¢“  ¿¢›¿¢Â  ¿¢Í
¿¢Ú  ¿¢ˆ¿¢˛  ¿£¿£  ¿£¿£#  ¿£0¿£:  ¿¢O¿¢P¿¢V¿¢£¿¢\¿¢W¿¢d¿¢¢¿¢e¿¢l¿¢q¿¢m¿¢t¿¢|¿¢Ñ¿¢å¿¢î¿¢ú¿¢§¿¢¿¿¢´¿¢•¿¢≠¿£Hu¿£≥   ¿£H¿£I¿£T¿£U¿£[¿£x¿£a¿£\¿£i¿£w¿£j¿£q¿£v¿£r¿£y¿£°¿£Ä¿£z¿£Ç¿£õ¿£ï¿£ù¿£¡Äì¿§:  ¿§I	¿§N  ¿£¡¿£¬¿£Õ¿£Œ¿£‘¿£¯¿£⁄¿£’¿£‚¿£˜¿£„¿£Í¿£Ô¿£Î¿£Ú¿£˘¿§(¿§ ¿£˙¿§¿§"¿§¿§$¿§X¿§»   ¿§X¿§Y¿§d¿§e¿§k¿§â¿§r¿§l¿§z¿§à¿§{¿§Ç¿§á¿§É¿§ä¿§∑¿§ë¿§ã¿§ì¿§±¿§´¿§≥¿§€Äù¿•X  ¿•b	¿•j  ¿•m	¿•u  ¿§€¿§‹¿§Á¿§Ë¿§Ó¿•¿§Ù¿§Ô¿§¸¿•¿§˝¿•¿•	¿•¿•¿•¿•¿•F¿•#¿•¿•%¿•@¿•:¿•B¿•|H¿•ç  ¿•ì	¿•õ  ¿•ü
¿•®  ¿•|¿•}¿•»Ää¿¶5  ¿¶<	¿¶D  ¿¶G	¿¶O  ¿•»¿•…¿•œ¿•¸¿•’¿•–¿•›¿•˚¿•ﬁ¿•Â¿•Í¿•Ê¿•Ì¿•ı¿•˝¿¶#¿¶¿•˛¿¶¿¶¿¶¿¶¿¶VÄâ¿¶»  ¿¶œ¿¶◊  ¿¶V¿¶W¿¶b¿¶c¿¶i¿¶é¿¶o¿¶j¿¶w¿¶ç¿¶x¿¶¿¶Ñ¿¶Ä¿¶á¿¶è¿¶∂¿¶ñ¿¶ê¿¶ò¿¶∞¿¶™¿¶≤¿¶„Äì¿ß[  ¿ß`	¿ßh  ¿ßk	¿ßs  ¿¶„¿¶‰¿¶Ô¿¶¿¶ˆ¿ß#¿¶¸¿¶˜¿ß¿ß"¿ß¿ß¿ß¿ß¿ß¿ß¿ß$¿ßI¿ß+¿ß%¿ß-¿ßC¿ß=¿ßE¿ßzÄ≤¿ßã  ¿ßï¿ß¢  ¿ßz¿ß{¿®0{¿®ã  ¿®ñ¿®£  ¿®0¿®1¿®7¿®\¿®=¿®8¿®E¿®[¿®F¿®M¿®R¿®N¿®U¿®]¿®y¿®d¿®^¿®f¿®ØÄç¿®«   ¿®Ø¿®∞¿©@ÄÅ¿©û  ¿©¨¿©π  ¿©@¿©A¿©G¿©l¿©M¿©H¿©U¿©k¿©V¿©]¿©b¿©^¿©e¿©m¿©å¿©t¿©n¿©v¿©≈Ä·¿©÷  ¿©ﬂ	¿©Â  ¿©Ï ¿©Ù  ¿™¿™  ¿©≈¿©∆¿©¸¿™¿™¿™!¿™™ÄÎ¿´7  ¿´A¿´I  ¿´N
¿´V  ¿´Z¿´b  ¿´h¿´p  ¿´w
¿´|  ¿´É¿´â  ¿™™¿™´¿™±¿™˚¿™∑¿™≤¿™ø¿™˙¿™¿¿™«¿™Ã¿™»¿™œ¿™◊¿™ﬂ¿™Á¿™Ô¿™ˆ¿™¸¿´%¿´¿™˝¿´¿´¿´¿´!¿´ôÄú¿´™  ¿´¥¿´ª  ¿´¬¿´»  ¿´ô¿´ö¿´’¿¨9Äë¿¨ö  ¿¨•¿¨≤  ¿¨∏¿¨æ  ¿¨9¿¨:¿¨@¿¨k¿¨F¿¨A¿¨N¿¨j¿¨O¿¨V¿¨[¿¨W¿¨^¿¨f¿¨l¿¨à¿¨s¿¨m¿¨u¿¨Œv¿¨ﬂ  ¿¨Ë	¿¨Ó  ¿¨Ù¿¨˙  ¿¨Œ¿¨œ¿≠¿≠HÄï¿≠Ø  ¿≠π¿≠∆  ¿≠À¿≠—  ¿≠H¿≠I¿≠O¿≠Å¿≠U¿≠P¿≠]¿≠Ä¿≠^¿≠e¿≠j¿≠f¿≠m¿≠t¿≠y¿≠u¿≠|¿≠Ç¿≠ù¿≠â¿≠É¿≠ã¿≠·Ä¡¿≠Ú   ¿≠·¿≠‚¿Æ¶Äå¿Ø
  ¿Ø¿Ø+  ¿Æ¶¿Æß¿Æ≠¿Æ“¿Æ≥¿ÆÆ¿Æª¿Æ—¿Æº¿Æ√¿Æ»¿Æƒ¿ÆÀ¿Æ”¿Æ¯¿Æ⁄¿Æ‘¿Æ‹¿Ø6ÄÕ¿ØG   ¿Ø6¿Ø7¿∞Äò¿∞q  ¿∞ã¿∞ò  ¿∞¿∞¿∞¿∞3¿∞¿∞¿∞¿∞2¿∞¿∞$¿∞)¿∞%¿∞,¿∞4¿∞_¿∞;¿∞5¿∞=¿∞£p¿∞¥  ¿∞æ¿∞≈  ¿∞À¿∞÷  ¿∞£¿∞§¿±Äï¿±á  ¿±í	¿±ó  ¿±ù¿±¢  ¿±¿±¿±¿±J¿±$¿±¿±,¿±I¿±-¿±4¿±9¿±5¿±<¿±D¿±K¿±u¿±R¿±L¿±T¿±o¿±i¿±q¿±∞Ä ¿±¡  ¿± 	¿±“  ¿±’	¿±›  ¿±‡¿±Á  ¿±∞¿±±¿≤~ÄÈ¿≥   ¿≥
	¿≥  ¿≥	¿≥  ¿≥ 	¿≥(  ¿≥+	¿≥3  ¿≥6¿≥F  ¿≥S¿≥]  ¿≤~¿≤¿≤Ö¿≤“¿≤ã¿≤Ü¿≤ì¿≤—¿≤î¿≤õ¿≤†¿≤ú¿≤£¿≤´¿≤≥¿≤ª¿≤√¿≤À¿≤”¿≤Ó¿≤⁄¿≤‘¿≤‹¿≥kZ¿≥|  ¿≥Ü¿≥ç  ¿≥k¿≥l¿≥…Äü¿¥,  ¿¥7¿¥G  ¿¥T¿¥^  ¿≥…¿≥ ¿≥–¿≥˝¿≥÷¿≥—¿≥ﬁ¿≥¸¿≥ﬂ¿≥Ê¿≥Î¿≥Á¿≥Ó¿≥ˆ¿≥˛¿¥¿¥¿≥ˇ¿¥¿¥lÄ±¿¥}  ¿¥Ü	¿¥å  ¿¥ë¿¥ò  ¿¥l¿¥m¿µ!ÄÛ¿µ£  ¿µ≠¿µµ  ¿µ∫
¿µ¬  ¿µ∆¿µŒ  ¿µ‘¿µ‹  ¿µ„¿µÛ  ¿∂ ¿∂
  ¿µ!¿µ"¿µ(¿µu¿µ.¿µ)¿µ6¿µt¿µ7¿µ>¿µC¿µ?¿µF¿µN¿µV¿µ^¿µf¿µn¿µv¿µë¿µ}¿µw¿µ¿∂Äû¿∂)  ¿∂3¿∂:  ¿∂@¿∂G  ¿∂¿∂¿∂∫Ä∫¿∑%  ¿∑0¿∑=  ¿∑C¿∑S  ¿∑`¿∑j  ¿∂∫¿∂ª¿∂¡¿∂ˆ¿∂«¿∂¬¿∂œ¿∂ı¿∂–¿∂◊¿∂‹¿∂ÿ¿∂ﬂ¿∂Á¿∂Ô¿∂˜¿∑¿∂˛¿∂¯¿∑ ¿∑xÄ‰¿∑â  ¿∑î¿∑õ  ¿∑°¿∑®  ¿∑Æ¿∑µ  ¿∑x¿∑y¿∏`Ä◊¿∏‘  ¿∏‡¿∏Ì  ¿∏Û¿π   ¿π¿π  ¿π#¿π-  ¿∏`¿∏a¿∏g¿∏§¿∏m¿∏h¿∏u¿∏£¿∏v¿∏}¿∏Ç¿∏~¿∏Ö¿∏ç¿∏ï¿∏ù¿∏•¿∏¬¿∏¨¿∏¶¿∏Æ¿π;Ä±¿πL  ¿πU	¿π[  ¿π`¿πg  ¿π;¿π<¿πÄÛ¿∫r  ¿∫|¿∫Ñ  ¿∫â
¿∫ë  ¿∫ï¿∫ù  ¿∫£¿∫´  ¿∫≤¿∫¬  ¿∫œ¿∫Ÿ  ¿π¿πÒ¿π˜¿∫D¿π˝¿π¯¿∫¿∫C¿∫¿∫¿∫¿∫¿∫¿∫¿∫%¿∫-¿∫5¿∫=¿∫E¿∫`¿∫L¿∫F¿∫N¿∫ÁÄ®¿∫¯  ¿ª¿ª  ¿ª¿ª  ¿ª¿ª#  ¿∫Á¿∫Ë¿ªìÄ‹¿º  ¿º¿º#  ¿º%¿º-  ¿º/¿º7  ¿º>¿ºN  ¿º[¿ºe  ¿ªì¿ªî¿ªö¿ªﬂ¿ª†¿ªõ¿ª®¿ªﬁ¿ª©¿ª∞¿ªµ¿ª±¿ª∏¿ª¿¿ª»¿ª–¿ªÿ¿ª‡¿ª˝¿ªÁ¿ª·¿ªÈ¿ºsÅ¿ºÑ  ¿ºå	¿ºí  ¿ºó¿ºü  ¿º™¿º≤  ¿ºΩ¿º√  ¿ºÕ¿º‘  ¿ºs¿ºt¿ΩÅt¿æ  	¿æ&¿æ.  ¿æ9
¿æA  ¿æK¿æS  ¿æ_¿æg  ¿æt¿æ|  ¿æç¿æï  ¿æ¶¿æ¨  ¿æº¿æÃ  ¿æﬂ¿æÈ  ¿Ω¿ΩÄ¿ΩÜ¿ΩÈ¿Ωå¿Ωá¿Ωî¿ΩË¿Ωï¿Ωú¿Ω°¿Ωù¿Ω§¿Ω¨¿Ω¥¿Ωº¿Ωƒ¿ΩÃ¿Ω‘¿Ω⁄¿Ω‚¿ΩÍ¿æ¿ΩÒ¿ΩÎ¿ΩÛ¿æ˜x¿ø  ¿ø	¿ø  ¿ø¿ø#  ¿æ˜¿æ¯¿øsÄæ¿ø‰  ¿øÓ¿ø˚  ¿¿ ¿¿  ¿¿¿¿'  ¿øs¿øt¿øz¿ø∂¿øÄ¿ø{¿øà¿øµ¿øâ¿øê¿øï¿øë¿øò¿øü¿ø§¿ø†¿øß¿øØ¿ø∑¿ø“¿øæ¿ø∏¿ø¿¿¿5Å~¿¿F  ¿¿P¿¿W  ¿¿]¿¿e  ¿¿l¿¿s  ¿¿5¿¿6¿¡∑Å¿¬E  ¿¬P¿¬X  ¿¬^¿¬f  ¿¬h¿¬p  ¿¬r¿¬Ç  ¿¬è¿¬ô  ¿¬£¿¬®  ¿¡∑¿¡∏¿¡æ¿¬¿¡∆¿¡ø¿¡Œ¿¬¿¡œ¿¡÷¿¡€¿¡◊¿¡ﬁ¿¡Â¿¡Í¿¡Ê¿¡Ì¿¡ı¿¡˝¿¬¿¬¿¬¿¬0¿¬¿¬¿¬¿¬øÉ¶¿¬–  ¿¬ﬁ¿¬Â  ¿¬Î¿¬Ò  ¿¬ı¿¬˚  ¿¬ˇ¿√  ¿¬ø¿¬¿¿∆iÅı¿«+  ¿«A¿«I  ¿«U¿«]  ¿«k¿«s  ¿«Ä¿«à  ¿«ó¿«ü  ¿«Ø¿«∑  ¿«≈¿«Õ  ¿«⁄¿«‚  ¿«Ò¿«˘  ¿»	¿»  ¿»,¿»6  ¿»F¿»K   ¿∆i¿∆j¿∆p¿∆ı¿∆x¿∆q¿∆Ä¿∆Ù¿∆Å¿∆à¿∆ç¿∆â¿∆ê¿∆ó¿∆ú¿∆ò¿∆ü¿∆ß¿∆Ø¿∆∑¿∆ø¿∆«¿∆œ¿∆◊¿∆ﬂ¿∆Á¿∆Ô¿∆ˆ¿«¿∆˝¿∆˜¿∆ˇ¿»bÉ∏¿»s  ¿»Å¿»à  ¿»é¿»î  ¿»õ¿»°  ¿»•¿»¨  ¿»b¿»c¿ÃÇ¿Ã‡  ¿Ãˆ¿Ã˛  ¿Õ
¿Õ  ¿Õ#¿Õ+  ¿Õ;¿ÕC  ¿ÕU¿Õ]  ¿Õp¿Õx  ¿ÕÜ¿Õé  ¿Õõ¿Õ£  ¿Õ≤¿Õ∫  ¿Õ ¿Õ⁄  ¿ÕÌ¿Õ˜  ¿Œ¿Œ   ¿Ã¿Ã¿Ã%¿Ã™¿Ã-¿Ã&¿Ã5¿Ã©¿Ã6¿Ã=¿ÃB¿Ã>¿ÃE¿ÃL¿ÃQ¿ÃM¿ÃT¿Ã\¿Ãd¿Ãl¿Ãt¿Ã|¿ÃÑ¿Ãå¿Ãî¿Ãú¿Ã§¿Ã´¿ÃÀ¿Ã≤¿Ã¨¿Ã¥¿Œ#ÄÑ¿Œ4  ¿Œ@¿ŒI  ¿Œ#¿Œ$¿Œ´Äâ¿œ  ¿œ¿œ,  ¿Œ´¿Œ¨¿Œ≤¿Œﬁ¿Œ∏¿Œ≥¿Œ¿¿Œ›¿Œ¡¿Œ»¿ŒÕ¿Œ…¿Œ–¿Œ◊¿Œ‹¿Œÿ¿Œﬂ¿Œ˝¿ŒÊ¿Œ‡¿ŒË¿œ8ÅG¿œI  ¿œW¿œb  ¿œl¿œt  ¿œ8¿œ9¿–ÉÄ±¿–î  ¿–ü¿–™  ¿–¥¿–¬  ¿–…¿––  ¿–É¿–Ñ¿—8Å¿—I  ¿—W¿—b  ¿—l¿—y  ¿—Ä¿—á  ¿—8¿—9¿“PÄ”¿“√  ¿“œ¿“ﬂ  ¿“Ï¿“ˆ  ¿” ¿”  ¿”¿”  ¿“P¿“Q¿“W¿“ì¿“]¿“X¿“e¿“í¿“f¿“m¿“r¿“n¿“u¿“}¿“Ö¿“å¿“î¿“±¿“õ¿“ï¿“ù¿”'Ä»¿”8  ¿”E¿”O  ¿”X¿”c  ¿”m¿”t  ¿”'¿”(¿”ÛÄ›¿‘o  ¿‘}¿‘á  ¿‘ê¿‘ï  ¿‘ü¿‘Ø  ¿‘º¿‘∆  ¿”Û¿”Ù¿”˙¿‘=¿‘ ¿”˚¿‘¿‘<¿‘	¿‘¿‘¿‘¿‘¿‘¿‘$¿‘ ¿‘'¿‘.¿‘6¿‘>¿‘]¿‘E¿‘?¿‘G¿‘‘à"¿‘Â  ¿‘Ô¿‘ˆ  ¿’¿’   ¿’<¿’H  ¿’_¿’m  ¿’Ö¿’ë  ¿’¨¿’≥  ¿’Õ¿’‘  ¿‘‘¿‘’¿‹˙Ñß¿›  ¿›¿›  ¿›9¿›F  ¿›h¿›u  ¿›è¿›õ  ¿›∂¿›¬  ¿›‡¿›Á  ¿ﬁ¿ﬁ  ¿‹˙¿‹˚¿·•Å•¿‚J  	¿‚\¿‚l  ¿‚¿‚â  ¿‚ô¿‚û  ¿‚∑¿‚ø  ¿‚À¿‚ÿ  ¿‚Ï¿‚˘  ¿„¿„  ¿„¿„#  ¿„3¿„A  ¿·•¿·¶¿·¨¿‚¿·¥¿·≠¿·º¿‚¿·Ω¿·ƒ¿·…¿·≈¿·Ã¿·‘¿·‹¿·„¿·Í¿·Ô¿·Î¿·Ú¿·˙¿‚¿‚
¿‚¿‚¿‚5¿‚ ¿‚¿‚"¿„NÄ∏¿„_  ¿„j	¿„p  ¿„u¿„|  ¿„Ç¿„ä  ¿„î¿„ö  ¿„N¿„O¿‰
ÄŒ¿‰É  ¿‰è¿‰ú  ¿‰°	¿‰¶  ¿‰¨¿‰¥  ¿‰æ¿‰ƒ  ¿‰
¿‰¿‰¿‰S¿‰¿‰¿‰¿‰R¿‰ ¿‰'¿‰,¿‰(¿‰/¿‰6¿‰;¿‰7¿‰>¿‰F¿‰N¿‰T¿‰q¿‰[¿‰U¿‰] ¿ÂJä∏¿Ê®ÅN/// An object representing a sequence of recorded graphical operations.
///
/// To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method. A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method.  ¿Ê¥Å¿ÁƒÄË/// A callback that is invoked to report a picture creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿Á—Å¿Ë‰ÄÎ/// A callback that is invoked to report the picture disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿ÓFÄ«¿ÓˇÄß/// Whether this reference to the underlying picture is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿ÔÄÔ¿ÔÎÄ…/// Returns the approximate number of bytes allocated for this object.
///
/// The actual size of this picture may be larger, particularly if it contains
/// references to image or other large objects.   ¿ËÚÅD¿ÍÅ/// Creates an image from this picture.
///
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped. ¿Í	¿Í$  ¿Í*
¿Í/   ¿Í:ÉÇ¿ÌôÉ6/// Synchronously creates a handle to an image of this picture.
///
/// {@template dart.ui.painting.Picture.toImageSync}
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped.
///
/// The image object is created and returned synchronously, but is rasterized
/// asynchronously. If the rasterization fails, an exception will be thrown
/// when the image is drawn to a [Canvas].
///
/// If a GPU context is available, this image will be created as GPU resident
/// and not copied back to the host. This means the image will be more
/// efficient to draw.
///
/// If no GPU context is available, the image will be rasterized on the CPU.
/// {@endtemplate} ¿Ì•	¿Ì™  ¿Ì∞
¿Ìµ   ¿Ì¿ÄÇ¿Ó8n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.    ¿àã¿  ¿VÄµ¿Ò¿Ò¿ÒÄô/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To create a [Picture], use a [PictureRecorder].  ¿ˆÈ¿ˆÓ ¿ˆ˙¿˜Äı¿˜   ¿˜¿˜¿˜˝Äê¿¯x   ¿˜˝¿˜˛¿¯	¿¯
¿¯¿¯/¿¯¿¯¿¯ ¿¯.¿¯!¿¯(¿¯-¿¯)¿¯0¿¯c¿¯7¿¯1¿¯9¿¯]¿¯W¿¯_¿ÒÅΩ¿Ò)  ¿Ò1	¿Ò6  ¿Ò<
¿ÒA  ¿Ò¿Ò¿Ú–Ä∞¿Û?  ¿ÛH	¿ÛM  ¿ÛS
¿ÛX  ¿Û_¿Ûw  ¿Ú–¿Ú—¿Ú◊¿Û¿Úﬂ¿Úÿ¿ÚÁ¿Û¿ÚË¿ÚÔ¿ÚÙ¿Ú¿Ú˜¿Úˇ¿Û¿Û¿Û*¿Û¿Û¿Û¿ÛÑÅ5¿Ûñ  ¿Û¢	¿Ûß  ¿Û≠
¿Û≤  ¿ÛÑ¿ÛÖ¿ÙΩÄ£¿ı+  ¿ı8	¿ı=  ¿ıC
¿ıH  ¿ıO¿ıW  ¿ÙΩ¿Ùæ¿Ùƒ¿Ù˘¿Ù ¿Ù≈¿Ù“¿Ù¯¿Ù”¿Ù⁄¿Ùﬂ¿Ù€¿Ù‚¿ÙÍ¿ÙÚ¿Ù˙¿ı¿ı¿Ù˚¿ı¿ıdÄ∞¿ıu   ¿ıd¿ıe¿ˆÄÕ¿ˆ⁄k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿ˆà¿ˆâ¿ˆè¿ˆ¨¿ˆï¿ˆê¿ˆù¿ˆ´¿ˆû¿ˆ•¿ˆ™¿ˆ¶¿ˆ≠¿ˆ»¿ˆ¥¿ˆÆ¿ˆ∂ ¿¯ëÑû¿˘uÄ‘/// Records a [Picture] containing a sequence of graphical operations.
///
/// To begin recording, construct a [Canvas] to record the commands.
/// To end recording, use the [PictureRecorder.endRecording] method. ¿˘âÄ◊ ¿˙5¿˙DÄù/// Creates a new idle PictureRecorder. To associate it with a
/// [Canvas] and begin recording, pass this [PictureRecorder] to the
/// [Canvas] constructor.   ¿˙dÅô¿˚ÒÅu/// Whether this object is currently recording commands.
///
/// Specifically, this returns true if a [Canvas] object has been
/// created to record commands and recording has not yet ended via a
/// call to [endRecording], and false if either this
/// [PictureRecorder] has not yet been associated with a [Canvas],
/// or the [endRecording] method has already been called.   ¿¸Å,¿˝Å
/// Finishes recording graphical operations.
///
/// Returns a picture containing the graphical operations that have been
/// recorded thus far. After calling this function, both the picture recorder
/// and the canvas objects are invalid and cannot be used further.    ¿˝1É∆¿˝<  ¿˝ì, ¿˝ì¿˝©   ¿ ﬁ¿ Ì  ¿˛(4¿˛=   ¿˛(¿˛)¿˝√a¿˛   ¿˝√¿˝ƒ¿˝ ¿˝‡¿˝–¿˝À¿˝ÿ¿˝ﬂ¿˝Ÿ¿˝·¿˛¿˝Ë¿˝‚¿˝Í¿˛`ÅÊ¿˛t   ¿˛`¿˛a¿ JÄê¿ ±  ¿ ø¿ œ  ¿ J¿ K¿ Q¿ v¿ W¿ R¿ _¿ u¿ `¿ g¿ l¿ h¿ o¿ w¿ ü¿ ~¿ x¿ Ä ¿ ˘õ¿TT/// A single shadow.
///
/// Multiple shadows are stacked together in a [TextStyle]. ¿_ÇP ¿Í¿Åp/// Construct a shadow.
///
/// The default shadow is a black shadow with zero offset and zero blur.
/// Default shadows should be completely covered by the casting element,
/// and not be visible.
///
/// Transparency should be adjusted through the [color] alpha.
///
/// Shadow order matters due to compositing multiple translucent objects not
/// being commutative.¿˜(¿˝  ¿%¿+  ¿D¿J  ¿¿
¿¿¿¿3¿9¿:¿V¿b¿h¿z¿≠¿t¿i¿w¿|	¿≥,¿ƒ ¿’¿&¿ ¿+¿1'¿B ¿T¿R¿W¿\#¿m ¿{¿y¿~¿É#¿î ¿¢¿†¿•¿™&¿ª ¿Ã¿ ¿œ¿’Äº¿åÄ¢/// Color that the shadow will be drawn with.
///
/// The shadows are shapes composited directly over the base canvas, and do not
/// represent optical occlusion. ¿ñÅ4¿ƒÅ/// The displacement of the shadow from the casting element.
///
/// Positive x/y offsets will shift the shadow to the right and down, while
/// negative offsets shift the shadow to the left and up. The offsets are
/// relative to the position of the element that is casting it. ¿œi¿.O/// The standard deviation of the Gaussian to convolve with the shadow's shape. ¿ΩÄÆ¿	=n/// The [blurRadius] in sigmas instead of logical pixels.
///
/// See the sigma argument to [MaskFilter.blur].   ¿‘G¿Ë   ¿‘¿’¿=Å|¿\h/// Converts a blur radius in pixels to sigmas.
///
/// See the sigma argument to [MaskFilter.blur].
/// ¿q¿y   ¿	oÇã¿Åı/// Create the [Paint] object that corresponds to this shadow description.
///
/// The [offset] is not represented in the [Paint] object.
/// To honor this as well, the shape should be translated by [offset] before
/// being filled using this [Paint].
///
/// This class does not provide a way to disable shadows to avoid
/// inconsistencies in shadow blur rendering, primarily as a method of
/// reducing test flakiness. [toPaint] should be overridden in subclasses to
/// provide this functionality.   ¿˛Äı¿e[/// Returns a new shadow with its [offset] and [blurRadius] scaled by the given
/// factor. ¿k¿s   ¿˜Ö◊¿É‘/// Linearly interpolate between two shadows.
///
/// If either shadow is null, this function linearly interpolates from
/// a shadow that matches the other shadow in color but has a zero
/// offset and a zero blurRadius.
///
/// {@template dart.ui.shadow.lerp}
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]).
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController].
/// {@endtemplate} ¿	¿  ¿	¿  ¿¿$   ¿“É¿óÄ•/// Linearly interpolate between two lists of shadows.
///
/// If the lists differ in length, excess items are lerped with null.
///
/// {@macro dart.ui.shadow.lerp} ¿†¿Ø  ¿±¿¿  ¿¬¿    ¿›ÄÛ¿˜  ¿˙¿  ¿›¿ﬁ¿ŸÉ”¿È  ¿¯¿   ¿∞L¿√   ¿∞¿± ¿ éÃ¿ªÄØ/// A handle to a read-only byte buffer that is managed by the engine.
///
/// The creator of this object is responsible for calling [dispose] when it is
/// no longer needed. ¿ ¿ˇ¿ ¿ ¿¿   ¿&¿&  ¿&¿& ¿&)¿%≤N¿%Ó1/// The length, in bytes, of the underlying data.   ¿&3Å¿&ºy/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿Åg¿ñ^/// Creates a copy of the data from a [Uint8List] suitable for internal use
/// in the engine. ¿§¿Ø   ¿ÉG¿r/// Create a buffer from the asset with key [assetKey].
///
/// Throws an [Exception] if the asset does not exist. ¿!¿)   ¿! Å˜¿"Yi/// Create a buffer from the file with [path].
///
/// Throws an [Exception] if the asset does not exist. ¿"f¿"n   ¿#≈Äï¿$*  ¿$0¿$;  ¿$@¿$Q  ¿#≈¿#∆¿#Ã¿#Ù¿#‘¿#Õ¿#‹¿#Û¿#›¿#Â¿#Ì¿#ı¿$¿#¸¿#ˆ¿#˛¿$^Äß¿$Ã  ¿$€¿$„  ¿$Ï¿$¸  ¿$^¿$_¿$e¿$ç¿$m¿$f¿$u¿$å¿$v¿$~¿$Ü¿$é¿$∑¿$ï¿$è¿$ó¿%	Ä•¿%v  ¿%Ñ¿%å  ¿%ï¿%•  ¿%	¿%
¿%¿%8¿%¿%¿% ¿%7¿%!¿%)¿%1¿%9¿%a¿%@¿%:¿%B¿'NÇ£¿)iÇ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, an [ImageDescriptor] that has not been disposed
/// may still retain a reference to the memory from this buffer even if it
/// has been disposed. Freeing that memory requires disposing all resources
/// that may still hold it.   ¿)ıÄ’¿*øk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿*e¿*f¿*l¿*â¿*r¿*m¿*z¿*à¿*{¿*Ç¿*á¿*É¿*ä¿*≠¿*ë¿*ã¿*ì ¿*Œââ¿+ìÄµ/// A descriptor of data that can be turned into an [Image] via a [Codec].
///
/// Use this class to determine the height, width, and byte size of image data
/// before decoding it. ¿+ßÇÁ¿-ﬁ¿-ﬂ¿-‚Å–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿-Ë¿-˘  ¿.¿.  ¿.¿.,  ¿.7¿.=  ¿.J ¿.`    ¿/˘y¿0ld/// The width, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿0v{¿0Íe/// The height, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿0ıÄÖ¿1lh/// The number of bytes per pixel in the image.
///
/// On web, this is only supported for [raw] images.   ¿.íÅc¿.¸H/// Creates an image descriptor from encoded data in a supported format. ¿/¿/   ¿1~Ä¯¿2lÄﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).   ¿2zÅ€¿4ÅÇ/// Creates a [Codec] object which is suitable for decoding the data in the
/// buffer to an [Image].
///
/// If only one of targetWidth or  targetHeight are specified, the other
/// dimension will be scaled according to the aspect ratio of the supplied
/// dimension.
///
/// If either targetWidth or targetHeight is less than or equal to zero, it
/// will be treated as if it is null. ¿4/¿45  ¿4A¿4G    ¿4YåÍ¿4d  ¿4ª¿4—¿4“¿4”   ¿4⁄É£¿7¿7¿7Å–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿7¿7+  ¿78¿7F  ¿7P¿7^  ¿7i¿7o  ¿7| ¿7í   ¿:/¿:4  ¿:Ì¿:Ú  ¿;±¿;∂  ¿:µ4¿:…   ¿:µ¿:∂¿;v7¿;ä   ¿;v¿;w¿<OL¿<c   ¿<O¿<P¿8ÅÄ≤¿8Ù  ¿9¿9  ¿9¿9*  ¿8Å¿8Ç¿8à¿8∑¿8ê¿8â¿8ò¿8∂¿8ô¿8°¿8®¿8≠¿8©¿8∞¿8∏¿8ﬂ¿8ø¿8π¿8¡¿97ÄÙ¿9µ  ¿9æ¿9œ  ¿9›¿9Ó  ¿9ı	¿9˙  ¿: 
¿:  ¿:¿:  ¿:¿:  ¿97¿98¿9>¿9x¿9D¿9?¿9L¿9w¿9M¿9U¿9]¿9d¿9k¿9r¿9y¿9ú¿9Ä¿9z¿9Ç¿:?r¿:•   ¿:?¿:@¿:F¿:d¿:M¿:G¿:U¿:c¿:V¿:]¿:b¿:^¿:e¿:î¿:l¿:f¿:n¿:é¿:à¿:ê¿:˛t¿;e   ¿:˛¿:ˇ¿;¿;#¿;¿;¿;¿;"¿;¿;¿;!¿;¿;$¿;T¿;+¿;%¿;-¿;N¿;H¿;P¿;…ÄÇ¿<7   ¿;…¿; ¿;–¿;Ó¿;◊¿;—¿;ﬂ¿;Ì¿;‡¿;Á¿;Ï¿;Ë¿;Ô¿<&¿;ˆ¿;¿;¯¿< ¿<¿<"¿<üp¿=   ¿<ü¿<†¿<´¿<¨¿<≤¿<œ¿<∏¿<≥¿<¿¿<Œ¿<¡¿<»¿<Õ¿<…¿<–¿<Û¿<◊¿<—¿<Ÿ¿=Él¿=-  ¿=?¿=E  ¿=Q¿=W  ¿=¿=¿@ÉÄæ¿@¸  ¿A¿A  ¿A¿A#  ¿A/¿A4  ¿@É¿@Ñ¿@ä¿@Ω¿@ê¿@ã¿@ò¿@º¿@ô¿@†¿@•¿@°¿@®¿@∞¿@∑¿@æ¿@Í¿@≈¿@ø¿@« ¿H»É˘¿JDÅu/// An exception thrown by [Canvas.drawImage] and related methods when drawing
/// an [Image] created via [Picture.toImageSync] that is in an invalid state.
///
/// This exception may be thrown if the requested image dimensions exceeded the
/// maximum 2D texture size allowed by the GPU, or if no GPU surface or context
/// was available for rasterization at request time. ¿J{B¿Jû¿Jü¿J† ¿J°¿Jß  ¿J∞
¿J∂   ¿J¡I¿K2/// A string containing details about the failure. ¿Ki¿KsO/// If available, the stack trace at the time [Picture.toImageSync] was called.  ¿K}ÅB¿Kê   ¿K}¿K~  ±Á¿ OÚΩã/// Algorithms to use when painting on the canvas.
///
/// When drawing a shape or image onto a canvas, different algorithms can be
/// used to blend the pixels. The different values of [BlendMode] specify
/// different such algorithms.
///
/// Each algorithm has two inputs, the _source_, which is the image being drawn,
/// and the _destination_, which is the image into which the source image is
/// being composited. The destination is often thought of as the _background_.
/// The source and destination both have four color channels, the red, green,
/// blue, and alpha channels. These are typically represented as numbers in the
/// range 0.0 to 1.0. The output of the algorithm also has these same four
/// channels, with values computed from the source and destination.
///
/// The documentation of each value below describes how the algorithm works. In
/// each case, an image shows the output of blending a source image with a
/// destination image. In the images below, the destination is represented by an
/// image with horizontal lines and an opaque landscape photograph, and the
/// source is represented by an image with vertical lines (the same lines but
/// rotated) and a bird clip-art image. The [src] mode shows only the source
/// image, and the [dst] mode shows only the destination image. In the
/// documentation below, the transparency is illustrated by a checkerboard
/// pattern. The [clear] mode drops both the source and destination, resulting
/// in an output that is entirely transparent (illustrated by a solid
/// checkerboard pattern).
///
/// The horizontal and vertical bars in these images show the red, green, and
/// blue channels with varying opacity levels, then all three color channels
/// together with those same varying opacity levels, then all three color
/// channels set to zero with those varying opacity levels, then two bars showing
/// a red/green/blue repeating gradient, the first with full opacity and the
/// second with partial opacity, and finally a bar with the three color channels
/// set to zero but the opacity varying in a repeating gradient.
///
/// ## Application to the [Canvas] API
///
/// When using [Canvas.saveLayer] and [Canvas.restore], the blend mode of the
/// [Paint] given to the [Canvas.saveLayer] will be applied when
/// [Canvas.restore] is called. Each call to [Canvas.saveLayer] introduces a new
/// layer onto which shapes and images are painted; when [Canvas.restore] is
/// called, that layer is then composited onto the parent layer, with the source
/// being the most-recently-drawn shapes and images, and the destination being
/// the parent layer. (For the first [Canvas.saveLayer] call, the parent layer
/// is the canvas itself.)
///
/// See also:
///
///  * [Paint.blendMode], which uses [BlendMode] to define the compositing
///    strategy.  ΩπÄÓæ¢Äﬁ/// Drop both the source and destination images, leaving nothing.
///
/// This corresponds to the "clear" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_clear.png) æ¨ÅHøÒÅ4/// Drop the destination image, only paint the source image.
///
/// Conceptually, the destination is first cleared, then the source image is
/// painted.
///
/// This corresponds to the "Copy" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_src.png) ø˘ÅM¿ ACÅ9/// Drop the source image, only paint the destination image.
///
/// Conceptually, the source image is discarded, leaving the destination
/// untouched.
///
/// This corresponds to the "Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dst.png) ¿ AKÅÏ¿ C0Å–/// Composite the source image over the destination image.
///
/// This is the default value. It represents the most intuitive case, where
/// shapes are painted on top of what is below, with transparent areas showing
/// the destination layer.
///
/// This corresponds to the "Source over Destination" Porter-Duff operator,
/// also known as the Painter's Algorithm.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOver.png) ¿ C<Å≠¿ D‚Åë/// Composite the source image under the destination image.
///
/// This is the opposite of [srcOver].
///
/// This corresponds to the "Destination over Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOver.png)
///
/// This is useful when the source image should have been painted before the
/// destination image, but could not be. ¿ DÓÇö¿ GÉÇx/// Show the source image, but only where the two images overlap. The
/// destination image is not rendered, it is treated merely as a mask. The
/// color channels of the destination are ignored, only the opacity has an
/// effect.
///
/// To show the destination image instead, consider [dstIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is absent, rather than where it is present), consider
/// [srcOut].
///
/// This corresponds to the "Source in Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcIn.png) ¿ GçÇÑ¿ JÇf/// Show the destination image, but only where the two images overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [dstOut].
///
/// This corresponds to the "Destination in Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstIn.png) ¿ JÇò¿ L®Çy/// Show the source image, but only where the two images do not overlap. The
/// destination image is not rendered, it is treated merely as a mask. The color
/// channels of the destination are ignored, only the opacity has an effect.
///
/// To show the destination image instead, consider [dstOut].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [srcIn].
///
/// This corresponds to the "Source out Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOut.png) ¿ L≥Çé¿ O;Ço/// Show the destination image, but only where the two images do not overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcOut].
///
/// To reverse the semantic of the mask (only showing the destination where the
/// source is present, rather than where it is absent), consider [dstIn].
///
/// This corresponds to the "Destination out Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOut.png) ¿ OFÇg¿ Q¶ÇE/// Composite the source image over the destination image, but only where it
/// overlaps the destination.
///
/// This corresponds to the "Source atop Destination" Porter-Duff operator.
///
/// This is essentially the [srcOver] operator, but with the output's opacity
/// channel being set to that of the destination image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the destination on top instead of the source, see
/// [dstATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcATop.png) ¿ Q≤Ç]¿ TÇ;/// Composite the destination image over the source image, but only where it
/// overlaps the source.
///
/// This corresponds to the "Destination atop Source" Porter-Duff operator.
///
/// This is essentially the [dstOver] operator, but with the output's opacity
/// channel being set to that of the source image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the source on top instead of the destination, see
/// [srcATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstATop.png) ¿ TÅ;¿ ULÅ+/// Apply a bitwise `xor` operator to the source and destination images. This
/// leaves transparency where they would overlap.
///
/// This corresponds to the "Source xor Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_xor.png) ¿ UTÉO¿ XüÉ,/// Sum the components of the source and destination images.
///
/// Transparency in a pixel of one of the images reduces the contribution of
/// that image to the corresponding output pixel, as if the color of that
/// pixel in that image was darker.
///
/// This corresponds to the "Source plus Destination" Porter-Duff operator.
///
/// This is the right blend mode for cross-fading between two images. Consider
/// two images A and B, and an interpolation time variable _t_ (from 0.0 to
/// 1.0). To cross fade between them, A should be drawn with opacity 1.0 - _t_
/// into a new layer using [BlendMode.srcOver], and B should be drawn on top
/// of it, at opacity _t_, into the same layer, using [BlendMode.plus].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_plus.png) ¿ X®ÉV¿ [ˆÉ'/// Multiply the color components of the source and destination images.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// When compositing two opaque images, this has similar effect to overlapping
/// two transparencies on a projector.
///
/// For a variant that also multiplies the alpha channel, consider [multiply].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_modulate.png)
///
/// See also:
///
///  * [screen], which does a similar computation but inverted.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ \LÖ!¿ agÑ‚/// Multiply the inverse of the components of the source and destination
/// images, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// This is essentially the same as [modulate] blend mode, but with the values
/// of the colors inverted before the multiplication and the result being
/// inverted back before rendering.
///
/// This can only result in the same or lighter colors (multiplying by black,
/// 1.0, results in no change; multiplying by white, 0.0, results in white).
/// Similarly, in the alpha channel, it can only result in more opaque colors.
///
/// This has similar effect to two projectors displaying their images on the
/// same screen simultaneously.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_screen.png)
///
/// See also:
///
///  * [modulate], which does a similar computation but without inverting the
///    values.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ aãÉﬁ¿ ebÉÆ/// Multiply the components of the source and destination images after
/// adjusting them to favor the destination.
///
/// Specifically, if the destination value is smaller, this multiplies it with
/// the source value, whereas is the source value is smaller, it multiplies
/// the inverse of the source value with the inverse of the destination value,
/// then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_overlay.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [hardLight], which is similar to [overlay] but favors the source image
///    instead of the destination image. ¿ enÅ7¿ füÅ"/// Composite the source and destination image by choosing the lowest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_darken.png) ¿ f™Å:¿ g›Å$/// Composite the source and destination image by choosing the highest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_lighten.png) ¿ gÈÅ{¿ iZÅb/// Divide the destination by the inverse of the source.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorDodge.png) ¿ iiÅë¿ jÒÅy/// Divide the inverse of the destination by the source, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorBurn.png) ¿ jˇÉ‚¿ nÿÉ∞/// Multiply the components of the source and destination images after
/// adjusting them to favor the source.
///
/// Specifically, if the source value is smaller, this multiplies it with the
/// destination value, whereas is the destination value is smaller, it
/// multiplies the inverse of the destination value with the inverse of the
/// source value, then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hardLight.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [overlay], which is similar to [hardLight] but favors the destination
///    image instead of the source image. ¿ nÊÅs¿ pPÅU/// Use [colorDodge] for source values below 0.5 and [colorBurn] for source
/// values above 0.5.
///
/// This results in a similar but softer effect than [overlay].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_softLight.png)
///
/// See also:
///
///  * [color], which is a more subtle tinting effect. ¿ p^Å≈¿ rÅ§/// Subtract the smaller value from the bigger value for each channel.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [exclusion] but harsher.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_difference.png) ¿ r(Å‘¿ sÛÅ≤/// Subtract double the product of the two images from the sum of the two
/// images.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [difference] but softer.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_exclusion.png) ¿ tÇŸ¿ v“Ç¥/// Multiply the components of the source and destination images, including
/// the alpha channel.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// Since the alpha channel is also multiplied, a fully-transparent pixel
/// (opacity 0.0) in one image results in a fully transparent pixel in the
/// output. This is similar to [dstIn], but with the colors combined.
///
/// For a variant that multiplies the colors but does not multiply the alpha
/// channel, consider [modulate].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_multiply.png) ¿ v¸Ç˜¿ yÇ—/// Take the hue of the source image, and the saturation and luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which is a similar but stronger effect as it also applies the
///    saturation of the source image.
///  * [HSVColor], which allows colors to be expressed using Hue rather than
///    the red/green/blue channels of [Color]. ¿ y¯Çd¿ |RÇ=/// Take the saturation of the source image, and the hue and luminosity of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which also applies the hue of the source image.
///  * [luminosity], which applies the luminosity of the source image to the
///    destination. ¿ |aÇ„¿ ?ÇΩ/// Take the hue and saturation of the source image, and the luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue and saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_color.png)
///
/// See also:
///
///  * [hue], which is a similar but weaker effect.
///  * [softLight], which is a similar tinting effect but also tints white.
///  * [saturation], which only applies the saturation of the source image. ¿ IÇç¿ ÅÃÇd/// Take the luminosity of the source image, and the hue and saturation of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their luminosity from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_luminosity.png)
///
/// See also:
///
///  * [saturation], which applies the saturation of the source image to the
///    destination.
///  * [ImageFilter.blur], which can be used with [BackdropFilter] for a
///    related effect.    ¿ Å€å{¿ áUÖt/// Quality levels for image sampling in [ImageFilter] and [Shader] objects that sample
/// images and for [Canvas] operations that render images.
///
/// When scaling up typically the quality is lowest at [none], higher at [low] and [medium],
/// and for very large scale factors (over 10x) the highest at [high].
///
/// When scaling down, [medium] provides the best quality especially when scaling an
/// image to less than half its size or for animating the scale factor between such
/// reductions. Otherwise, [low] and [high] provide similar effects for reductions of
/// between 50% and 100% but the image may lose detail and have dropouts below 50%.
///
/// To get high quality when scaling images up and down, or when the scale is
/// unknown, [medium] is typically a good balanced choice.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/filter_quality.png)
///
/// When building for the web using the `--web-renderer=html` option, filter
/// quality has no effect. All images are rendered using the respective
/// browser's default setting.
///
/// See also:
///
///  * [Paint.filterQuality], which is used to pass [FilterQuality] to the
///    engine while using drawImage calls on a [Canvas].
///  * [ImageShader].
///  * [ImageFilter.matrix].
///  * [Canvas.drawImage].
///  * [Canvas.drawImageRect].
///  * [Canvas.drawImageNine].
///  * [Canvas.drawAtlas].  ¿ áÊÄŸ¿ àªÄÃ/// The fastest filtering method, albeit also the lowest quality.
///
/// This value results in a "Nearest Neighbor" algorithm which just
/// repeats or eliminates pixels as an image is scaled up or down. ¿ àƒÄ≤¿ âsÄ¶/// Better quality than [none], faster than [medium].
///
/// This value results in a "Bilinear" algorithm which smoothly
/// interpolates between pixels in an image. ¿ â{Çé¿ åÇk/// The best all around filtering method that is only worse than [high]
/// at extremely large scale factors.
///
/// This value improves upon the "Bilinear" algorithm specified by [low]
/// by utilizing a Mipmap that pre-computes high quality lower resolutions
/// of the image at half (and quarter and eighth, etc.) sizes and then
/// blends between those to prevent loss of detail at small scale sizes.
///
/// {@template dart.ui.filterQuality.seeAlso}
/// See also:
///
///  * [FilterQuality] class-level documentation that goes into detail about
///    relative qualities of the constant values.
/// {@endtemplate} ¿ åÇE¿ éOÇ&/// Best possible quality when scaling up images by scale factors larger than
/// 5-10x.
///
/// When images are scaled down, this can be worse than [medium] for scales
/// smaller than 0.5x, or when animating the scale factor.
///
/// This option is also the slowest.
///
/// This value results in a standard "Bicubic" algorithm which uses a 3rd order
/// equation to smooth the abrupt transitions between pixels while preserving
/// some of the sense of an edge and avoiding sharp peaks in the result.
///
/// {@macro dart.ui.filterQuality.seeAlso}    ¿ éXÜ∆¿ èKÄ±/// Styles to use for line endings.
///
/// See also:
///
///  * [Paint.strokeCap] for how this value is used.
///  * [StrokeJoin] for the different kinds of line segment joins.  ¿ èYÅÖ¿ ê⁄År/// Begin and end contours with a flat edge and no extension.
///
/// ![A butt cap ends line segments with a square end that stops at the end of
/// the line segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/butt_cap.png)
///
/// Compare to the [square] cap, which has the same shape, but extends past
/// the end of the line by half a stroke width. ¿ ê„ÅÀ¿ í©Åµ/// Begin and end contours with a semi-circle extension.
///
/// ![A round cap adds a rounded end to the line segment that protrudes
/// by one half of the thickness of the line (which is the radius of the cap)
/// past the end of the segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line. ¿ í≥Çh¿ ïÇI/// Begin and end contours with a half square extension. This is
/// similar to extending each contour by half the stroke width (as
/// given by [Paint.strokeWidth]).
///
/// ![A square cap has a square end that effectively extends the line length
/// by half of the stroke width.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/square_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line.
///
/// Compare to the [butt] cap, which has the same shape, but doesn't extend
/// past the end of the line.    ¿ ï à¿ ñ Åg/// Styles to use for line segment joins.
///
/// This only affects line joins for polygons drawn by [Canvas.drawPath] and
/// rectangles, not points drawn as lines with [Canvas.drawPoints].
///
/// See also:
///
/// * [Paint.strokeJoin] and [Paint.strokeMiterLimit] for how this value is
///   used.
/// * [StrokeCap] for the different kinds of line endings.  ¿ ñŸÇY¿ ô-Ç7/// Joins between line segments form sharp corners.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.
///   * [Paint.strokeMiterLimit], used to define when a miter is drawn instead
///     of a bevel when the join is set to this value. ¿ ô7ÅÃ¿ ö˛ÅÆ/// Joins between line segments are semi-circular.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value. ¿ õÇ¿ ùÅ˜/// Joins between line segments connect the corners of the butt ends of the
/// line segments to give a beveled appearance.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.    ¿ ù$Ç÷¿ ù∫T/// Strategies for painting shapes and paths on a canvas.
///
/// See [Paint.style].  ¿ û&Ä∑¿ ûŸÄ¨/// Apply the [Paint] to the inside of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results in a disc
/// of the given size being painted. ¿ û‚Å¿ üÒÅ/// Apply the [Paint] to the edge of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results is a hoop
/// of the given size being painted. The line drawn on the edge will
/// be the width given by the [Paint.strokeWidth] property.    ¿ ü¸åá¿ †0./// Different ways to clip a widget's content.  ¿ †9Ç8¿ ¢mÇ/// No clip at all.
///
/// This is the default option for most widgets: if the content does not
/// overflow the widget boundary, don't pay any performance cost for clipping.
///
/// If the content does overflow, please explicitly specify the following
/// [Clip] options:
///  * [hardEdge], which is the fastest clipping, but with lower fidelity.
///  * [antiAlias], which is a little slower than [hardEdge], but with smoothed edges.
///  * [antiAliasWithSaveLayer], which is much slower than [antiAlias], and should
///    rarely be used. ¿ ¢vÇ_¿ §ÕÇ:/// Clip, but do not apply anti-aliasing.
///
/// This mode enables clipping, but curves and non-axis-aligned straight lines will be
/// jagged as no effort is made to anti-alias.
///
/// Faster than other clipping modes, but slower than [none].
///
/// This is a reasonable choice when clipping is needed, if the container is an axis-
/// aligned rectangle or an axis-aligned rounded rectangle with very small corner radii.
///
/// See also:
///
///  * [antiAlias], which is more reasonable when clipping is needed and the shape is not
///    an axis-aligned rectangle. ¿ §⁄É.¿ ßˇÉ /// Clip with anti-aliasing.
///
/// This mode has anti-aliased clipping edges to achieve a smoother look.
///
/// It' s much faster than [antiAliasWithSaveLayer], but slower than [hardEdge].
///
/// This will be the common case when dealing with circles and arcs.
///
/// Different from [hardEdge] and [antiAliasWithSaveLayer], this clipping may have
/// bleeding edge artifacts.
/// (See https://fiddle.skia.org/c/21cb4c2b2515996b537f36e7819288ae for an example.)
///
/// See also:
///
///  * [hardEdge], which is a little faster, but with lower fidelity.
///  * [antiAliasWithSaveLayer], which is much slower, but can avoid the
///    bleeding edges if there's no other way.
///  * [Paint.isAntiAlias], which is the anti-aliasing switch for general draw operations. ¿ ®Ñs¿ ¨jÑ4/// Clip with anti-aliasing and saveLayer immediately following the clip.
///
/// This mode not only clips with anti-aliasing, but also allocates an offscreen
/// buffer. All subsequent paints are carried out on that buffer before finally
/// being clipped and composited back.
///
/// This is very slow. It has no bleeding edge artifacts (that [antiAlias] has)
/// but it changes the semantics as an offscreen buffer is now introduced.
/// (See https://github.com/flutter/flutter/issues/18057#issuecomment-394197336
/// for a difference between paint without saveLayer and paint with saveLayer.)
///
/// This will be only rarely needed. One case where you might need this is if
/// you have an image overlaid on a very different background color. In these
/// cases, consider whether you can avoid overlaying multiple colors in one
/// spot (e.g. by having the background color only present where the image is
/// absent). If you can, [antiAlias] would be fine and much faster.
///
/// See also:
///
///  * [antiAlias], which is much faster, and has similar clipping results.    ¿ Û°É◊¿ ırÅÀ/// The color space describes the colors that are available to an [Image].
///
/// This value can help decide which [ImageByteFormat] to use with
/// [Image.toByteData]. Images that are in the [extendedSRGB] color space
/// should use something like [ImageByteFormat.rawExtendedRgba128] so that
/// colors outside of the sRGB gamut aren't lost.
///
/// This is also the result of [Image.colorSpace].
///
/// See also: https://en.wikipedia.org/wiki/Color_space  ¿ ıÅÄÿ¿ ˆUÄ«/// The sRGB color space.
///
/// You may know this as the standard color space for the web or the color
/// space of non-wide-gamut Flutter apps.
///
/// See also: https://en.wikipedia.org/wiki/SRGB ¿ ˆ]Å¿ ˜iÅ/// A color space that is backwards compatible with sRGB but can represent
/// colors outside of that gamut with values outside of [0..1]. In order to
/// see the extended values an [ImageByteFormat] like
/// [ImageByteFormat.rawExtendedRgba128] must be used.    ¿ ˜zâ¿ ˘Y/// The format in which image bytes should be returned when using
/// [Image.toByteData].  ¿ ˘ÄÇ¿ ˘ït/// Raw RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with premultiplied alpha, 8 bits per channel. ¿ ˘°Äé¿ ˙ x/// Raw straight RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 8 bits per channel. ¿ ˙4Äª¿ ˙‚Ä•/// Raw unmodified format.
///
/// Unencoded bytes, in the image's existing format. For example, a grayscale
/// image may use a single 8-bit channel for each pixel. ¿ ˙ÙÇŒ¿ ˝∞Çç/// Raw extended range RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 32 bit
/// float (IEEE 754 binary32) per channel.
///
/// Example usage:
///
/// ```dart
/// import 'dart:ui' as ui;
/// import 'dart:typed_data';
///
/// Future<Map<String, double>> getFirstPixel(ui.Image image) async {
///   final ByteData data =
///       (await image.toByteData(format: ui.ImageByteFormat.rawExtendedRgba128))!;
///   final Float32List floats = Float32List.view(data.buffer);
///   return <String, double>{
///     'r': floats[0],
///     'g': floats[1],
///     'b': floats[2],
///     'a': floats[3],
///   };
/// }
/// ``` ¿ ˝«Çæ¿ ÇÇú/// PNG format.
///
/// A loss-less compression format for images. This format is well suited for
/// images with hard edges, such as screenshots or sprites, and images with
/// text. Transparency is supported. The PNG format supports images up to
/// 2,147,483,647 pixels in either dimension, though in practice available
/// memory provides a more immediate limitation on maximum image size.
///
/// PNG images normally use the `.png` file extension and the `image/png` MIME
/// type.
///
/// See also:
///
///  * <https://en.wikipedia.org/wiki/Portable_Network_Graphics>, the Wikipedia page on PNG.
///  * <https://tools.ietf.org/rfc/rfc2083.txt>, the PNG standard.    ¿ äÉ?¿ Œ>/// The format of pixel data given to [decodeImageFromPixels].  ¿ ﬁÄŸ¿ØÄ /// Each pixel is 32 bits, with the highest 8 bits encoding red, the next 8
/// bits encoding green, the next 8 bits encoding blue, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿ºÄŸ¿çÄ /// Each pixel is 32 bits, with the highest 8 bits encoding blue, the next 8
/// bits encoding green, the next 8 bits encoding red, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿öÅ,¿ªÅ/// Each pixel is 128 bits, where each color component is a 32 bit float that
/// is normalized across the sRGB gamut.  The first float is the red
/// component, followed by: green, blue and alpha. Premultiplied alpha isn't
/// used, matching [ImageByteFormat.rawExtendedRgba128].    ¿záÉï¿{$Äó/// Determines the winding rule that decides how the interior of a [Path] is
/// calculated.
///
/// This enum is used by the [Path.fillType] property.  ¿{5ÅØ¿|›Åó/// The interior is defined by a non-zero sum of signed edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses lines going clockwise
/// around the point a different number of times than it crosses lines going
/// counter-clockwise around that point.
///
/// See: <https://en.wikipedia.org/wiki/Nonzero-rule> ¿|ÈÅ0¿~Å/// The interior is defined by an odd number of edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses an odd number of lines.
///
/// See: <https://en.wikipedia.org/wiki/Even-odd_rule>    ¿~àL¿~“Äà/// Strategies for combining paths.
///
/// See also:
///
/// * [Path.combine], which uses this enum to decide how to combine two paths.  ¿~‰Å£¿Ä}ÅÑ/// Subtract the second path from the first path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// first circle that was not overlapped by the second circle.
///
/// See also:
///
///  * [reverseDifference], which is the same but subtracting the first path
///    from the second. ¿ÄãÅá¿Ç	Åk/// Create a new path that is the intersection of the two paths, leaving the
/// overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be only the overlapping portion
/// of the two circles.
///
/// See also:
///  * [xor], which is the inverse of this operation ¿ÇÅ$¿É5Å/// Create a new path that is the union (inclusive-or) of the two paths.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a figure-eight like shape
/// matching the outer boundaries of both circles. ¿É>ÅÇ¿ÑΩÅn/// Create a new path that is the exclusive-or of the two paths, leaving
/// everything but the overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the figure-eight like shape less the overlapping parts
///
/// See also:
///  * [intersect], which is the inverse of this operation ¿ÑƒÅ£¿ÜVÅ}/// Subtract the first path from the second path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// second circle that was not overlapped by the first circle.
///
/// See also:
///
///  * [difference], which is the same but subtracting the second path
///    from the first.    ¿ßÉ{¿4/// Styles to use for blurs in [MaskFilter] objects.  ¿dÄñ¿ÙÄã/// Fuzzy inside and outside. This is useful for painting shadows that are
/// offset from the shape that ostensibly is casting the shadow. ¿ˇÄÕ¿«Ä¡/// Solid inside, fuzzy outside. This corresponds to drawing the shape, and
/// additionally drawing the blur. This can make objects appear brighter,
/// maybe even as if they were fluorescent. ¿—ÄÊ¿≤Ä⁄/// Nothing inside, fuzzy outside. This is useful for painting shadows for
/// partially transparent shapes, when they are painted separately but without
/// an offset, so that the shadow doesn't paint below the shape. ¿ºc¿Y/// Fuzzy inside, nothing outside. This can make shapes appear to be lit from
/// within.    ¿j¿ì¿qìÜí/// Defines what happens at the edge of a gradient or the sampling of a source image
/// in an [ImageFilter].
///
/// A gradient is defined along a finite inner area. In the case of a linear
/// gradient, it's between the parallel lines that are orthogonal to the line
/// drawn between two points. In the case of radial gradients, it's the disc
/// that covers the circle centered on a particular point up to a given radius.
///
/// An image filter reads source samples from a source image and performs operations
/// on those samples to produce a result image. An image defines color samples only
/// for pixels within the bounds of the image but some filter operations, such as a blur
/// filter, read samples over a wide area to compute the output for a given pixel. Such
/// a filter would need to combine samples from inside the image with hypothetical
/// color values from outside the image.
///
/// This enum is used to define how the gradient or image filter should treat the regions
/// outside that defined inner area.
///
/// See also:
///
///  * [painting.Gradient], the superclass for [LinearGradient] and
///    [RadialGradient], as used by [BoxDecoration] et al, which works in
///    relative coordinates and can create a [Shader] representing the gradient
///    for a particular [Rect] on demand.
///  * [dart:ui.Gradient], the low-level class used when dealing with the
///    [Paint.shader] property directly, with its [Gradient.linear] and
///    [Gradient.radial] constructors.
///  * [dart:ui.ImageFilter.blur], an ImageFilter that may sometimes need to
///    read samples from outside an image to combine with the pixels near the
///    edge of the image.  ¿q†Ç£¿t>Çá/// Samples beyond the edge are clamped to the nearest color in the defined inner area.
///
/// A gradient will paint all the regions outside the inner area with the
/// color at the end of the color stop list closest to that region.
///
/// An image filter will substitute the nearest edge pixel for any samples taken from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png) ¿tHÉ5¿wuÉ/// Samples beyond the edge are repeated from the far end of the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated from 1.0 to 2.0, 2.0 to 3.0, and so forth (and for linear gradients, similarly
/// from -1.0 to 0.0, -2.0 to -1.0, etc).
///
/// An image filter will treat its source image as if it were tiled across the enlarged
/// sample space from which it reads, each tile in the same orientation as the base image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png) ¿wÇÉ|¿z¯ÉY/// Samples beyond the edge are mirrored back and forth across the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated backwards from 2.0 to 1.0, then forwards from 2.0 to 3.0, then backwards
/// again from 4.0 to 3.0, and so forth (and for linear gradients, similarly in the
/// negative direction).
///
/// An image filter will treat its source image as tiled in an alternating forwards and
/// backwards or upwards and downwards direction across the sample space from which
/// it is reading.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png) ¿{ÇΩ¿}ªÇü/// Samples beyond the edge are treated as transparent black.
///
/// A gradient will render transparency over any region that is outside the circle of a
/// radial gradient or outside the parallel lines that define the inner area of a linear
/// gradient.
///
/// An image filter will substitute transparent black for any sample it must read from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)    ¿—ΩÇ√¿“ww/// Defines how a list of points is interpreted when drawing a set of triangles.
///
/// Used by [Canvas.drawVertices].  ¿“ÜQ¿“ŒE/// Draw each sequence of three points as the vertices of a triangle. ¿“‹[¿”*K/// Draw each sliding window of three points as the vertices of a triangle. ¿”<ÅA¿‘rÅ)/// Draw the first point and each sliding window of two points as the vertices
/// of a triangle.
///
/// This mode is not natively supported by most backends, and is instead
/// implemented by unrolling the points into the equivalent
/// [VertexMode.triangles], which is generally more efficient.    ¿ äÑ-¿aÄç/// Defines how a list of points is interpreted when drawing a set of points.
///
/// Used by [Canvas.drawPoints] and [Canvas.drawRawPoints].  ¿oÅ∑¿ Åû/// Draw each point separately.
///
/// If the [Paint.strokeCap] is [StrokeCap.round], then each point is drawn
/// as a circle with the diameter of the [Paint.strokeWidth], filled as
/// described by the [Paint] (ignoring [Paint.style]).
///
/// Otherwise, each point is drawn as an axis-aligned square with sides of
/// length [Paint.strokeWidth], filled as described by the [Paint] (ignoring
/// [Paint.style]). ¿+ÄÈ¿Ä◊/// Draw each sequence of two points as a line segment.
///
/// If the number of points is odd, then the last point is ignored.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]). ¿Äõ¿≠Äã/// Draw the entire sequence of points as one line.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]).    ¿πÅ¿7x/// Defines how a new clip region should be merged with the existing clip
/// region.
///
/// Used by [Canvas.clipRect].  ¿BB¿z5/// Subtract the new region from the existing region. ¿âB¿¬6/// Intersect the new region from the existing region.       ÑãoÑê  Ñù	Ñ£   Ñ¸tÖ  ÖÖ   ÖrÄèÖw  ÖÜÖé   ÜÄ€Ü  ÜÜ%   Ü‡ÄçÜÂ  ÜÙÜ¸   áomáu  áÅáà  áäáí   ¿Gâ?¿NÚáâ/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The `list` parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported:
/// {@template dart.ui.imageFormats}
/// JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP. Additional
/// formats may be supported by the underlying platform. Flutter will
/// attempt to call platform API to decode unrecognized formats, and if the
/// platform API supports decoding the image Flutter will be able to render it.
/// {@endtemplate}
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿O¿O  ¿O¿O%  ¿O3¿O9  ¿OH¿ON  ¿O^¿P[ä°¿Xïà+/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been created,
/// so the caller must relinquish ownership of the [buffer] when they call this
/// method.
///
/// The [targetWidth] and [targetHeight] arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿X∏¿X…  ¿X‘¿X⁄  ¿XË¿XÓ  ¿X˝¿Y  ¿Y¿Z˛âÑ¿bá/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary
/// data). The data can be for either static or animated images. The following
/// image formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been
/// created, so the caller must relinquish ownership of the [buffer] when they
/// call this method.
///
/// The [getTargetSize] parameter, when specified, will be invoked and passed
/// the image's intrinsic size to determine the size to decode the image to.
/// The width and the height of the size it returns must be positive values
/// greater than or equal to 1, or null. It is valid to return a
/// [TargetImageSize] that specifies only one of `width` and `height` with the
/// other remaining null, in which case the omitted dimension will be scaled to
/// maintain the aspect ratio of the original dimensions. When both are null or
/// omitted, the image will be decoded at its native resolution (as will be the
/// case if the [getTargetSize] parameter is omitted).
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿b6¿bG  ¿bR&¿bl   ¿dÑs¿dî  ¿d©¿dÆ  ¿dΩ¿d¬   ¿lÀÅ©¿nÅ0/// Loads a single image frame from a byte array into an [Image] object.
///
/// This is a convenience wrapper around [instantiateImageCodec]. Prefer using
/// [instantiateImageCodec] which also supports multi frame images and offers
/// better error handling. This function swallows asynchronous errors. ¿n¿n   ¿n%¿n;   ¿nvÄÔ¿nÉ  ¿nù¿n®  ¿n≠¿n√   ¿ogã¿u
Öù/// Convert an array of pixel values into an [Image] object.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `format`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true. 	¿u#¿u.  ¿u7	¿u<  ¿uD
¿uI  ¿uR¿u_  ¿uh¿u~  ¿uã¿uë  ¿uú¿u¢  ¿u∞¿u∂  ¿u≈¿uÀ  ¿u€¿}≈ÄÎ¿}œ  ¿}‡¿}Ì   ¿~≤Åõ¿~æ  ¿~œ¿~›   ¿ÄOÅ$¿Ä[  ¿Äl¿Ät  ¿Ä{¿ÄÉ   ¿F
Çº¿F ¿F¿F¿F!¿F1    ¿Àd¿ˇ+/// Signature for [Image] lifecycle events.  ¿"¿)   ¿1”m¿21/// Callback signature for [decodeImageFromList].  ¿22¿29   ¿d˘Åd¿e˙Ä¯/// Signature for a callback that determines the size to which an image should
/// be decoded given its intrinsic size.
///
/// See also:
///
///  * [instantiateImageCodecWithSize], which used this signature for its
///    `getTargetSize` argument.  ¿f0¿f5  ¿fF¿fK   ¿‰‹l¿Â-/// Signature for [Picture] lifecycle events.  ¿Â7¿Â@   ¿AEd¿AÇ4/// Generic callback signature, used by [_futurize].¿Aå¿Aå ¿Aü¿A¢   ¿A´Ä’¿BFÄí/// Signature for a method that receives a [_Callback].
///
/// Return value should be null on success, and a string error message on
/// failure.¿BR¿BR ¿Bh¿Bw       õN <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuè¨è≠èÌèÛê@êPêuêúê¬ê»ëëë\ëiëûë¿ë‚íí2í3íàíéí≥í⁄ì ìMì}ìÉì∆ìÃîîRîàîæîÙï6ï7ïeïkïìïôï¡ïÁññ3ñFñGñÄñÜñ’ñ˜ó&ó'óZó`ó±ó”ó˘ó˙ò1ò^ò_òòò∆ò«òˇô,ô-ôvô¨ô≤ôÍöö5ö9ö:öÉöÀö—õ	õ/õ]õéõíõìõ„úúúNúgúôúùúûúÁùù#ù[ùvù¶ù™ù´ù¸û)û/ûgûÅû≤û∂û∑ûıü2üRürüxüπüΩüæ†	††c†Å†á†≈†„°#°^°õ°◊¢¢¢¢<¢B¢ä¢Õ¢”££j£©£Ô£ı§B§å§◊•#•q•¡¶¶_¶å¶í¶·ßß6ßKßbßwßÜßÆß∂ß√ß⁄ß¸®®*®n®Æ®Ú©4©?©G©M©Q©R©ï©€©·™-™t™ø´´Y´ô´¡¨ ¨¨¨F¨l¨£¨¿¨Œ≠≠^≠¶≠Ø≠Ã≠˛Æ,ÆLÆiÆ{Æ∆ØØbØkØqØuØvØ√Ø…ØÙ∞'∞b∞f∞g∞s∞ñ∞∏∞À∞—∞˝±±±1±R±V±W±c±â±ä±ñ±‰±Ê±Á≤≤≤k≤µ≤‘≤ÿ≥)≥v≥≈¥¥c¥Æ¥Ú¥ˆµFµëµ‚∂.∂|∂…∑∑[∑™∑∏∏∏]∏™∏ÙπFπìπ‰∫%∫)∫P∫T∫¢∫„ª4ªÅª“º!ºpºãºèºùº°ºÏº˝ΩΩ]ΩpΩ∂Ω∑Ω˚ææ=æCæ†æ©æ™æÈæÔø>øMøSøéøîøÔøˆø˜¿ @6¿ @<¿ @á¿ @ò¿ @û¿ @‡¿ @Ê¿ AA¿ AH¿ AI¿ AÜ¿ Aå¿ A⁄¿ B+¿ BH¿ BN¿ Bú¿ B…¿ Bœ¿ C.¿ C9¿ C:¿ Cx¿ C~¿ Cß¿ C≠¿ C˚¿ D¿ D`¿ Df¿ Dµ¿ D‡¿ DÎ¿ DÏ¿ E4¿ EÅ¿ EŒ¿ E‹¿ E‚¿ F!¿ F'¿ Ft¿ Fº¿ FÃ¿ F“¿ G¿ G$¿ GÅ¿ Gä¿ Gã¿ Gÿ¿ H&¿ Hp¿ Hv¿ H∞¿ H∂¿ I¿ IU¿ I[¿ Iß¿ I≠¿ J
¿ J¿ J¿ Jc¿ J∂¿ K¿ K¿ KK¿ KQ¿ Kû¿ KÔ¿ Kı¿ LB¿ LH¿ L¶¿ L∞¿ L±¿ M¿ MS¿ Mù¿ M£¿ Mﬁ¿ M‰¿ N6¿ NÇ¿ Nà¿ N’¿ N€¿ O9¿ OC¿ OD¿ Oì¿ O≥¿ Oπ¿ P¿ P¿ P]¿ P©¿ P›¿ P„¿ Q.¿ Q?¿ QE¿ Q§¿ QØ¿ Q∞¿ Qˇ¿ R¿ R ¿ Rn¿ Rt¿ Rƒ¿ S¿ S?¿ SE¿ Sê¿ S°¿ Sß¿ T¿ T¿ T¿ Tb¿ Tñ¿ Tú¿ TÈ¿ TÔ¿ UJ¿ UQ¿ UR¿ Uë¿ Uó¿ UÊ¿ V2¿ VX¿ V^¿ V¨¿ V≤¿ W¿ WQ¿ W¢¿ WÒ¿ X;¿ XA¿ Xù¿ X•¿ X¶¿ X¿ Xˆ¿ YE¿ Yî¿ Yö¿ YÎ¿ Z¿ Z¿ Zk¿ Zq¿ Z—¿ Z◊¿ ZÁ¿ ZÌ¿ [/¿ [w¿ [ì¿ [›¿ [Ù¿ \ ¿ \¿ \I¿ \J¿ \ï¿ \ª¿ \¡¿ ]¿ ]Z¿ ]â¿ ]è¿ ]‡¿ ^,¿ ^R¿ ^X¿ ^®¿ ^˜¿ _H¿ _N¿ _ù¿ _ø¿ _≈¿ `#¿ `)¿ `9¿ `?¿ `è¿ `†¿ `Ë¿ a¿ aN¿ ae¿ aà¿ aâ¿ a“¿ b¿ b¿ bX¿ b¶¿ b˜¿ c¿ c¿ ch¿ cµ¿ c‰¿ cÍ¿ dI¿ dO¿ d_¿ de¿ dû¿ dÂ¿ e5¿ e`¿ ek¿ el¿ e∫¿ eŸ¿ eﬂ¿ f(¿ f9¿ f?¿ fù¿ fß¿ f®¿ f˜¿ g¿ g¿ ge¿ gv¿ g|¿ g€¿ gÊ¿ gÁ¿ h"¿ h(¿ ht¿ h¡¿ h¿ hˆ¿ iX¿ if¿ ig¿ i∫¿ i¿¿ j¿ jY¿ jà¿ jé¿ jÔ¿ j¸¿ j˝¿ kF¿ kp¿ kv¿ k∆¿ l¿ l]¿ lä¿ lê¿ l‹¿ m)¿ mX¿ m^¿ mø¿ m≈¿ m’¿ m€¿ n¿ n[¿ n™¿ n÷¿ n„¿ n‰¿ o2¿ oJ¿ oP¿ oí¿ oò¿ o˘¿ oˇ¿ p¿ p¿ pN¿ p[¿ p\¿ p•¿ p´¿ p˙¿ q¿ q¿ q`¿ qq¿ qw¿ qØ¿ qµ¿ r¿ r%¿ r&¿ rr¿ rÄ¿ rÜ¿ r’¿ rÏ¿ rÚ¿ s;¿ sL¿ sR¿ sä¿ sê¿ sÒ¿ s˛¿ sˇ¿ tM¿ tf¿ tl¿ tª¿ u
¿ u¿ u\¿ u©¿ uÒ¿ u˜¿ vF¿ vj¿ vp¿ v–¿ v˘¿ v˙¿ wK¿ wd¿ wj¿ w≥¿ wπ¿ x¿ xR¿ xx¿ x~¿ xŸ¿ xﬂ¿ xÔ¿ xı¿ yE¿ yn¿ yΩ¿ yÓ¿ yı¿ yˆ¿ zG¿ z`¿ zf¿ zØ¿ zˇ¿ {,¿ {2¿ {ç¿ {ì¿ {£¿ {©¿ {Î¿ |:¿ |P¿ |^¿ |_¿ |∞¿ |…¿ |œ¿ }¿ }¿ }g¿ }∑¿ }Ï¿ }Ú¿ ~O¿ ~U¿ ~e¿ ~k¿ ~°¿ ~Ô¿ =¿ F¿ G¿ ò¿ ±¿ ∑¿ Ä ¿ ÄP¿ Ä}¿ ÄÉ¿ ÄÂ¿ ÄÎ¿ Ä˚¿ Å¿ ÅP¿ Åf¿ Å±¿ Å ¿ Åÿ¿ Å⁄¿ Å€¿ Ç3¿ Çn¿ Çr¿ Çœ¿ É¿ É¿ Éo¿ É√¿ Ñ¿ Ñm¿ Ñq¿ Ñø¿ Ñ˙¿ Ñ˛¿ ÖW¿ Ö[¿ Ö®¿ Ö¿ Ü¿ Ü¿ Ü!¿ Ü%¿ Üp¿ Ü©¿ Üø¿ Ü‹¿ Ü˜¿ á¿ á5¿ áP¿ áe¿ áª¿ á„¿ á‰¿ à(¿ à.¿ àt¿ àπ¿ à¡¿ à¬¿ à˙¿ â ¿ âB¿ âq¿ âx¿ ây¿ â√¿ âÎ¿ âÒ¿ ä<¿ äâ¿ ä“¿ ã¿ ã#¿ ãS¿ ãc¿ ãi¿ ã∏¿ ãÏ¿ å¿ å¿ å¿ å\¿ åi¿ åo¿ åΩ¿ å˙¿ ç ¿ ç'¿ ç-¿ ç¿ çœ¿ é¿ é ¿ éM¿ éU¿ éW¿ éX¿ é|¿ éÄ¿ éé¿ éí¿ é«¿ è
¿ èF¿ èW¿ èó¿ èù¿ èÓ¿ êR¿ êX¿ ê¶¿ êÿ¿ ê‡¿ ê·¿ ë¿ ë"¿ ël¿ ëº¿ í,¿ í2¿ íÇ¿ íß¿ í∞¿ í±¿ íÙ¿ ì9¿ ì^¿ ìd¿ ì≥¿ î$¿ î*¿ îz¿ îü¿ î•¿ îÛ¿ ï¿ ï¿ ï¿ ï ¿ ïJ¿ ïN¿ ïõ¿ ïﬂ¿ ï„¿ ïÒ¿ ïı¿ ñA¿ ñM¿ ñà¿ ñ≈¿ ñ◊¿ ó¿ ó¿ ó|¿ óÇ¿ ó ¿ ò¿ ò&¿ ò,¿ ò<¿ òB¿ òê¿ ò°¿ òÚ¿ ô+¿ ô4¿ ô5¿ ôj¿ ôp¿ ô◊¿ ô›¿ ö%¿ öu¿ öÅ¿ öá¿ öó¿ öù¿ öÎ¿ ö¸¿ õ¿ õ¿ õT¿ õÜ¿ õå¿ õÛ¿ õ˘¿ úA¿ úë¿ úù¿ ú£¿ ú≥¿ úπ¿ ù¿ ù¿ ù!¿ ù#¿ ù$¿ ù^¿ ùb¿ ùy¿ ùµ¿ ù ¿ û¿ û#¿ û$¿ ûj¿ û∞¿ û◊¿ ûﬂ¿ û‡¿ ü$¿ üj¿ ü±¿ üÔ¿ ü˘¿ ü˚¿ ü¸¿ †+¿ †7¿ †M¿ †S¿ †û¿ †Ô¿ †ı¿ °A¿ °W¿ °§¿ °˝¿ ¢R¿ ¢k¿ ¢s¿ ¢t¿ ¢†¿ ¢¶¿ ¢ˇ¿ £0¿ £6¿ £v¿ £|¿ £‘¿ §/¿ §5¿ §E¿ §K¿ §ß¿ §À¿ §◊¿ §ÿ¿ §˜¿ §˝¿ •I¿ •O¿ •¢¿ •®¿ •Ô¿ •ı¿ ¶J¿ ¶i¿ ¶¿¿ ¶∆¿ ¶÷¿ ¶‹¿ ß$¿ ßo¿ ß†¿ ß˝¿ ®
¿ ®¿ ®W¿ ®]¿ ®∞¿ ©¿ ©+¿ ©1¿ ©É¿ ©–¿ ™"¿ ™t¿ ™z¿ ™ ¿ ´¿ ´h¿ ´∏¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨h¿ ¨Ç¿ ¨Ñ¿ ¨Ö¿ ¨«¿ ¨À¿ ≠¿ ≠0¿ ≠>¿ ≠Ü¿ ≠ú¿ ≠®¿ ≠√¿ ≠Ÿ¿ ≠ﬂ¿ ≠„¿ ≠‰¿ Æ¿ Æ¿ Æc¿ ÆÆ¿ Æ˝¿ ØK¿ Øö¿ Øü¿ ØÔ¿ ∞@¿ ∞Q¿ ∞V¿ ∞û¿ ∞ü¿ ∞¿¿ ∞‹¿ ±¿ ±¿ ±<¿ ±a¿ ±ä¿ ±Ø¿ ±⁄¿ ≤¿ ≤-¿ ≤]¿ ≤ä¿ ≤¥¿ ≤Ë¿ ≥¿ ≥D¿ ≥k¿ ≥l¿ ≥Æ¿ ≥‰¿ ¥"¿ ¥X¿ ¥ö¿ ¥ÿ¿ µ¿ µd¿ µ™¿ µÍ¿ ∂<¿ ∂Ü¿ ∂»¿ ∑ ¿ ∑A¿ ∑j¿ ∑k¿ ∑Ø¿ ∑–¿ ∑Ï¿ ∏¿ ∏¿ ∏6¿ ∏y¿ ∏}¿ ∏~¿ ∏§¿ ∏œ¿ ∏˙¿ πN¿ πO¿ πï¿ π£¿ π©¿ π¡¿ π⁄¿ ∫!¿ ∫%¿ ∫E¿ ∫ï¿ ∫ø¿ ∫Ê¿ ª*¿ ª.¿ ª/¿ ªg¿ ªó¿ ªò¿ ª—¿ ª◊¿ ª˜¿ ª˝¿ º¿ º¿ ºY¿ ºä¿ º“¿ ºÿ¿ Ω ¿ Ω5¿ ΩI¿ Ωí¿ Ωæ¿ Ω¬¿ Ω›¿ æ¿ æQ¿ æU¿ æV¿ æé¿ æœ¿ æ–¿ ø¿ ø"¿ ød¿ øµ¿ ¿¿ ¿'¿ ¿-¿ ¿z¿ ¿õ¿ ¿°¿ ¿»¿ ¿Œ¿ ¿ﬁ¿ ¿‰¿ ¡3¿ ¡g¿ ¡±¿ ¡«¿ ¡„¿ ¬0¿ ¬k¿ ¬o¿ ¬í¿ ¬Ã¿ √¿ √¿ √¿ √W¿ √]¿ √Ö¿ √°¿ √Û¿ √˜¿ ƒ¿ ƒ?¿ ƒ}¿ ƒÅ¿ ƒÇ¿ ƒº¿ ≈¿ ≈H¿ ≈N¿ ≈ã¿ ≈¶¿ ≈Í¿ ≈Ó¿ ∆¿ ∆2¿ ∆x¿ ∆|¿ ∆}¿ ∆æ¿ ∆Ó¿ ∆Ù¿ «&¿ «B¿ «î¿ «ò¿ «ª¿ «‡¿ »"¿ »&¿ »'¿ »h¿ »n¿ »ø¿ …
¿ …¿ …J¿ …P¿ …n¿ …t¿ …›¿ …„¿  J¿  P¿  ∑¿  Ω¿ À	¿ ÀZ¿ Àf¿ Àl¿ À|¿ ÀÇ¿ À—¿ À˝¿ ÃF¿ ÃÖ¿ Ã£¿ Ã˜¿ Ã˚¿ Õ ¿ ÕE¿ Õà¿ Õå¿ Õç¿ Õ≈¿ Õ¸¿ Õ˝¿ ŒH¿ Œñ¿ Œ·¿ œ.¿ œ|¿ œÇ¿ œ«¿ œÕ¿ –¿ –?¿ –E¿ –Æ¿ –¥¿ —¿ —#¿ —å¿ —í¿ —ﬁ¿ “/¿ “;¿ “A¿ “Q¿ “W¿ “°¿ “º¿ ”¿ ”%¿ ”n¿ ”r¿ ”ô¿ ”◊¿ ‘"¿ ‘&¿ ‘'¿ ‘w¿ ‘µ¿ ‘ª¿ ‘ﬂ¿ ‘˛¿ ’B¿ ’c¿ ’x¿ ’ô¿ ’π¿ ÷¿ ÷[¿ ÷f¿ ÷l¿ ÷}¿ ÷Å¿ ÷ß¿ ÷¿¿ ◊¿ ◊Z¿ ◊¢¿ ◊Ø¿ ◊¸¿ ÿ.¿ ÿÄ¿ ÿŸ¿ Ÿ*¿ Ÿ0¿ Ÿ4¿ Ÿ5¿ Ÿá¿ Ÿ€¿ ⁄'¿ ⁄-¿ ⁄U¿ ⁄¢¿ ⁄∆¿ € ¿ €$¿ €O¿ €t¿ €∫¿ €æ¿ €ø¿ €˘¿ €ˇ¿ ‹5¿ ‹;¿ ‹K¿ ‹Q¿ ‹ç¿ ‹≈¿ ‹˜¿ ›?¿ ›V¿ ›Ü¿ ›ä¿ ›®¿ ›∏¿ ›∆¿ ›ı¿ ﬁ,¿ ﬁ5¿ ﬁH¿ ﬁR¿ ﬁb¿ ﬁá¿ ﬁ±¿ ﬂ¿ ﬂ¿ ﬂ#¿ ﬂ6¿ ﬂ@¿ ﬂx¿ ﬂ|¿ ﬂ}¿ ﬂƒ¿ ﬂ÷¿ ﬂ‹¿ ‡¿ ‡¿ ‡X¿ ‡y¿ ‡–¿ ‡Ú¿ ‡ˆ¿ ·¿ ·d¿ ·Ñ¿ ·¢¿ ·–¿ ·ÿ¿ ·Â¿ ‚+¿ ‚1¿ ‚5¿ ‚6¿ ‚q¿ ‚w¿ ‚æ¿ ‚ÿ¿ ‚ﬁ¿ ‚Ï¿ „¿ „3¿ „E¿ „_¿ „Ø¿ „∫¿ „¬¿ „Ã¿ „“¿ „‚¿ „Ë¿ ‰#¿ ‰D¿ ‰õ¿ ‰Ω¿ ‰¡¿ ‰È¿ Â¿ Â ¿ ÂN¿ ÂV¿ Âc¿ Â§¿ Â˙¿ Ê%¿ Êi¿ Êq¿ Êw¿ Ê{¿ Ê|¿ Êª¿ Ê¡¿ Á¿ ÁW¿ Áà¿ Á¢¿ ÁÈ¿ ÁÌ¿ Ë¿ ËX¿ Ë\¿ Ë]¿ Ër¿ Ë¥¿ Ë∏¿ Ë‘¿ È¿ È¿ È¿ Èo¿ Èu¿ È∆¿ Í¿ ÍK¿ ÍZ¿ Í™¿ Í˜¿ Î&¿ Î^¿ Îñ¿ Îö¿ Î¿¿ Î¡¿ ÎÕ¿ Î„¿ Ï¿ Ï;¿ ÏA¿ Ïq¿ Ïå¿ Ï®¿ Ï—¿ ÏÔ¿ Ì¿ ÌK¿ ÌZ¿ Ì}¿ ÌÖ¿ ÌÆ¿ Ì”¿ Ì€¿ Ó¿ ÓD¿ Óô¿ Ó£¿ Ó≤¿ Óÿ¿ Ó‡¿ Ó¯¿ Ó˛¿ Ô¿ ÔN¿ Ôf¿ Ôl¿ Ôú¿ Ôƒ¿ Ô‹¿ Ô‚¿ ¿ ?¿ W¿ ]¿ |¿ π¿ —¿ ◊¿ ı¿ Ò0¿ ÒH¿ ÒN¿ Ò}¿ Òæ¿ Ò÷¿ Ò‹¿ Òˆ¿ Ú)¿ ÚA¿ ÚG¿ Úf¿ Ú£¿ Úª¿ Ú¡¿ ÚŸ¿ Û¿ Û¿ Û+¿ Û_¿ Ûe¿ Û|¿ Ûö¿ Ûû¿ Û†¿ Û°¿ ÛÏ¿ Û¿ Ù3¿ Ù}¿ Ù»¿ Ù˙¿ Ù˛¿ ı1¿ ı5¿ ım¿ ı¿ ıõ¿ ı°¿ ıÓ¿ ˆ¿ ˆ ¿ ˆS¿ ˆ[¿ ˆ®¿ ˆˆ¿ ˜.¿ ˜g¿ ˜w¿ ˜y¿ ˜z¿ ˜º¿ ˜‘¿ ¯"¿ ¯o¿ ¯∑¿ ˘¿ ˘¿ ˘/¿ ˘5¿ ˘ì¿ ˘û¿ ˘ü¿ ˘ø¿ ˘≈¿ ˙¿ ˙1¿ ˙2¿ ˙O¿ ˙U¿ ˙•¿ ˙‡¿ ˙Ò¿ ˙Ú¿ ˚¿ ˚¿ ˚j¿ ˚ó¿ ˚ù¿ ˚≤¿ ˚∏¿ ˚∆¿ ˚‰¿ ¸¿ ¸
¿ ¸R¿ ¸p¿ ¸∆¿ ˝¿ ˝)¿ ˝C¿ ˝]¿ ˝w¿ ˝ë¿ ˝ú¿ ˝§¿ ˝Æ¿ ˝ƒ¿ ˝≈¿ ˝◊¿ ˝›¿ ˛-¿ ˛{¿ ˛«¿ ˇ¿ ˇ]¿ ˇc¿ ˇ¥¿ ˇ¿¿ ˇ∆¿ ˇ÷¿ ˇ‹¿ ;¿ Ä¿ á¿ â¿ ä¿ …¿ ‹¿*¿z¿≠¿π¿∫¿	¿X¿ã¿ó¿ò¿Ë¿/¿~¿π¿»¿ ¿À¿˜¿0¿1¿g¿k¿´¿Ø¿˝¿¿¿h¿∑¿˛¿F¿î¿¢¿¶¿Ú¿A¿à¿å¿ö¿û¿¿[¿Å¿–¿ﬁ¿	¿	 ¿	H¿	[¿	e¿	Ñ¿	û¿	¢¿	£¿	ƒ¿	‡¿	˜¿	¯¿
6¿
<¿
á¿
…¿
Í¿¿¿Q¿W¿¢¿Â¿¿.¿/¿J¿K¿è¿¢¿£¿Â¿˘¿˙¿¿a¿í¿ò¿È¿¿
¿U¿†¿Ô¿¿"¿=¿j¿ñ¿¨¿„¿¯¿¿3¿9¿=¿>¿Ç¿à¿÷¿Ï¿¿¿+¿G¿Z¿d¿“¿÷¿◊¿¿¿^¿n¿t¿π¿¿O¿U¿¢¿ª¿¿Z¿§¿¿E¿r¿†¿§¿•¿·¿Á¿3¿Ç¿Æ¿¥¿¿Q¿Ñ¿–¿˝¿¿N¿m¿{¿õ¿©¿—¿‡¿.¿4¿8¿9¿ä¿¨¿≤¿Ú¿(¿F¿V¿™¿Ω¿«¿⁄¿ﬁ¿ﬂ¿¿¿e¿¥¿¿Q¿ù¿Î¿7¿U¿[¿©¿“¿ÿ¿ ¿q¿á¿ç¿√¿…¿◊¿Ú¿¿*¿0¿h¿ß¿∆¿ ¿ !¿ 3¿ S¿ £¿ Ò¿!¿!M¿!X¿!y¿!Å¿!á¿!©¿!›¿"(¿"S¿"ñ¿"⁄¿#¿#0¿#6¿#r¿#¢¿#®¿#≈¿#ﬂ¿#Â¿$¿$%¿$@¿$H¿$N¿$j¿$ç¿$ì¿$Æ¿$¥¿$◊¿%¿%¿% ¿%K¿%S¿%]¿%c¿%®¿%ˆ¿&¿&,¿&A¿&Y¿&Ñ¿&’¿'#¿'e¿'n¿'t¿'ì¿'æ¿'¬¿'√¿(¿(U¿([¿(®¿(Ú¿)B¿)ë¿)€¿*(¿*a¿*b¿*n¿*ò¿*ö¿*õ¿*µ¿*Í¿+3¿+N¿+S¿+°¿+√¿+ﬂ¿+Ì¿+Ó¿,=¿,W¿,X¿,®¿,√¿,ƒ¿-¿-O¿-ç¿-Ω¿-«¿-œ¿-”¿-‘¿.¿.f¿.≤¿.≥¿.Õ¿.‡¿.¯¿/¿/¿/i¿/Å¿/À¿0¿0
¿0 ¿00¿04¿05¿0Ä¿0•¿0Á¿1¿1¿1-¿1.¿1t¿1ì¿1î¿1†¿1–¿1“¿1”¿2¿2A¿2B¿2v¿2z¿2∂¿2–¿2‘¿3¿3g¿3µ¿3˚¿4F¿4o¿4s¿4¨¿4∞¿4º¿4»¿5¿5C¿5a¿5Æ¿5˘¿6¿6b¿6Å¿6¢¿6®¿6∞¿6¥¿6 ¿6Œ¿6⁄¿6Á¿7!¿7b¿7¢¿7·¿8-¿8G¿8ñ¿8ﬁ¿8ˇ¿9¿9¿9¿9i¿9Ö¿9ã¿9…¿9Â¿:#¿:$¿:S¿:Y¿:¶¿:¡¿:¬¿:Î¿:Ò¿;9¿;?¿;ã¿;†¿;¢¿;£¿;√¿;«¿<¿<)¿<-¿<e¿<Ç¿<ô¿<ø¿<’¿<÷¿=¿=¿=?¿=d¿=¿=Ä¿=®¿=Æ¿=Ú¿=¯¿>I¿>O¿>ê¿>¿¿>‰¿>Â¿?5¿?X¿?^¿?©¿?Œ¿?‡¿?‚¿?„¿@/¿@4¿@}¿@ò¿@ù¿@÷¿@Ù¿A¿A	¿A#¿A$¿A0¿Ak¿Al¿A¿¿A‡¿A·¿B ¿B¿B¿BW¿BX¿B±¿B÷¿B◊¿B„¿C¿CV¿Cæ¿CŸ¿C¸¿D]¿Dg¿D†¿DØ¿D◊¿E¿EU¿Ea¿Ei¿Eq¿Eä¿E®¿EÆ¿EÀ¿Eœ¿E–¿F¿F]¿F≠¿FÆ¿F∫¿F¸¿G¿G¿G¿G=¿GA¿Gê¿G‡¿H.¿HQ¿HU¿Hß¿Hı¿I¿IP¿Iu¿I∆¿J¿JX¿J®¿Jª¿Jø¿K
¿KT¿K§¿KÛ¿L?¿Lê¿Lﬂ¿M'¿Mc¿Mg¿M±¿M˚¿NK¿Ná¿Nã¿Nÿ¿N‰¿O	¿O¿O1¿OF¿Od¿Oo¿Oª¿OÂ¿OÒ¿P¿P/¿PS¿PX¿PZ¿P[¿P~¿PÇ¿P—¿Q!¿Qo¿Qí¿Qñ¿QÍ¿R8¿Rq¿Ru¿R«¿S¿S#¿S'¿Sr¿Sº¿T¿T[¿Tß¿T¯¿UG¿Uè¿UÀ¿Uœ¿V¿Vc¿V≥¿VÔ¿VÛ¿W@¿WL¿WP¿Wu¿Wy¿W…¿X¿X_¿Xá¿X∂¿X“¿XÊ¿X˚¿Y¿Y¿YF¿YR¿Yë¿YÆ¿YÚ¿Z¿Z$¿Zk¿Zï¿Zü¿Zß¿ZÔ¿Zˆ¿Z˚¿Z˝¿Z˛¿[!¿[%¿[p¿[t¿[¡¿\¿\O¿\S¿\ú¿\Î¿]¿]¿]S¿]†¿]Ï¿^-¿^|¿^Ã¿_¿_l¿_£¿_ß¿_Ò¿`;¿`o¿`s¿`¿¿`Ã¿`–¿`ı¿`˘¿aI¿aî¿aﬂ¿b¿b4¿bP¿bz¿bÖ¿bØ¿b˚¿c¿c^¿cù¿cﬁ¿d¿d+¿dR¿dY¿dg¿d}¿dÅ¿dÉ¿dÑ¿d‘¿dˆ¿d¯¿d˘¿eH¿eq¿eu¿eÉ¿eá¿e—¿eÚ¿f.¿fD¿f[¿f^¿f_¿f§¿f®¿f∂¿f∫¿g¿gD¿gl¿gÑ¿g∞¿g∂¿h¿h¿hP¿h|¿h™¿h´¿hŸ¿hﬂ¿i.¿i~¿iÃ¿j¿jD¿jJ¿jÄ¿jî¿jï¿jƒ¿j ¿k¿ki¿k∂¿l¿l.¿l4¿lj¿l¿lÄ¿lå¿l»¿l ¿lÀ¿m¿m¿mg¿mµ¿m¸¿nF¿ns¿nu¿nv¿n‘¿o¿oG¿od¿of¿og¿o§¿o®¿oˆ¿pA¿pY¿p]¿p©¿p˙¿q9¿q=¿qà¿q“¿r"¿rq¿rΩ¿s¿s]¿s•¿s·¿sÂ¿t/¿ty¿t…¿u¿u!¿u5¿uB¿uP¿uf¿uâ¿uö¿uÆ¿u√¿u·¿uÊ¿v¿v7¿v;¿vY¿vè¿vì¿vî¿vº¿v·¿w¿w/¿wE¿w]¿wy¿wñ¿wü¿w†¿wΩ¿x¿x-¿x7¿xÄ¿x¨¿x∂¿xæ¿xø¿x–¿xÎ¿y¿y5¿y?¿y]¿y°¿yº¿yÿ¿y„¿z	¿z%¿zE¿zF¿zr¿z~¿zÑ¿zÜ¿zá¿z‘¿z‰¿zË¿{¿{3¿{}¿{É¿{‘¿|#¿|r¿|ù¿|£¿|€¿|Ê¿|Á¿})¿}/¿}Ä¿}—¿}◊¿~¿~¿~¿~¿~B¿~F¿~T¿~X¿~ß¿~Õ¿~‚¿¿¿j¿µ¿ˆ¿¸¿Ä¿Ä¿Äa¿Ä{¿Äâ¿Äÿ¿Ä˛¿Å¿ÅR¿Å†¿Å∫¿Å¿¿Å–¿Ç¿Ç¿Ç_¿Çe¿Ç≥¿Ç˛¿É3¿É<¿Éá¿É¿¿É∆¿Ñ¿Ñh¿Ñn¿Ñ~¿Ñª¿Ñ¬¿Ñˆ¿Ñ¸¿ÖJ¿Öï¿Ö÷¿Ö‹¿ÖÏ¿ÖÚ¿Ü;¿ÜT¿Üi¿Ük¿Ül¿ÜΩ¿Ü⁄¿á*¿áM¿áS¿á£¿áÏ¿à=¿àÜ¿à†¿à¶¿àı¿âA¿â{¿âÅ¿âÃ¿âÒ¿ä¿ä¿ä¿ä^¿ä®¿äƒ¿äﬁ¿äﬂ¿äÎ¿ã3¿ãN¿ãP¿ãQ¿ãÉ¿ãá¿ãÃ¿ã–¿å¿åR¿åf¿åj¿å∞¿å€¿åﬂ¿ç¿ça¿çâ¿çç¿ç—¿é
¿é ¿é@¿éA¿éi¿éo¿éº¿è¿è.¿èb¿èí¿è©¿è≠¿èÆ¿èÏ¿èÚ¿ê7¿êT¿êx¿êy¿êÆ¿ê—¿ê“¿ë¿ëG¿ëH¿ëè¿ëú¿ëø¿ë¿¿í¿í9¿íf¿íg¿í™¿íÍ¿í˘¿íˇ¿ìp¿ìÂ¿î+¿î,¿îo¿î∂¿î˚¿ï¿ïV¿ïW¿ïú¿ï„¿ïÚ¿ï¯¿ñe¿ñ÷¿ó(¿ó)¿ón¿óµ¿ó˙¿ò¿òi¿òj¿ò∞¿òÙ¿ô9¿ôÄ¿ô•¿ô´¿ö¿öâ¿öœ¿ö–¿õ¿õZ¿õü¿õÊ¿ú,¿úT¿ú¢¿ú£¿úÊ¿ù¿ù¿ùQ¿ùu¿ù{¿ù¬¿û¿ûI¿ûç¿û‘¿ü¿üF¿üL¿üë¿ü«¿†¿†¿†h¿†≠¿†≥¿°¿°K¿°è¿°∂¿°º¿¢¿¢P¿¢ú¿¢¢¿¢≈¿¢Ê¿£¿£¿£7¿£=¿£>¿£ç¿£“¿£ÿ¿§¿§¿§a¿§Ø¿§Ú¿•<¿•B¿•Ö¿•”¿¶ ¿¶7¿¶R¿¶l¿¶ç¿¶®¿¶√¿¶ﬁ¿¶‰¿¶Â¿ß,¿ßC¿ß^¿ß_¿ß°¿ßœ¿ß’¿®'¿®u¿®ê¿®ë¿®Ÿ¿©¿©U¿©ñ¿©‹¿™ ¿™d¿™p¿™v¿™‚¿´R¿´X¿´»¿¨<¿¨|¿¨}¿¨œ¿¨›¿¨„¿≠2¿≠W¿≠]¿≠§¿≠ÿ¿≠Ÿ¿Æ¿Æ^¿Æn¿Æå¿Æç¿Æ”¿ÆŸ¿Ø&¿Øt¿Øü¿Ø·¿Ø‚¿∞(¿∞g¿∞§¿∞™¿∞˜¿±H¿±s¿±º¿±Ω¿≤¿≤C¿≤S¿≤T¿≤ô¿≤›¿≤¯¿≥¿≥	¿≥Y¿≥¶¿≥≈¿≥À¿¥¿¥¿¥^¿¥}¿¥~¿¥æ¿¥Ì¿µ
¿µ¿µK¿µ{¿µ¢¿µ£¿µÿ¿µﬁ¿∂.¿∂{¿∂∆¿∑¿∑¿∑\¿∑´¿∑˝¿∏J¿∏î¿∏‚¿∏¿π5¿πI¿πJ¿πñ¿π©¿πØ¿πˇ¿∫M¿∫á¿∫–¿∫¸¿ªM¿ª`¿ªf¿ª›¿ª·¿ª‚¿º1¿ºb¿ºh¿º¥¿º¸¿ΩK¿Ωö¿Ω‰¿æ¿æ"¿æm¿æ∫¿ø¿ø7¿ø=¿øç¿ø⁄¿¿*¿¿m¿¿∫¿¡¿¡V¿¡¶¿¡ı¿¡˚¿¬I¿¬ò¿¬Ã¿¬“¿√#¿√n¿√®¿√™¿√´¿√ı¿ƒ¿ƒA¿ƒB¿ƒê¿ƒ’¿ƒË¿ƒÈ¿≈"¿≈B¿≈C¿≈ä¿≈∞¿≈±¿≈Ω¿∆¿∆¿∆N¿∆O¿∆£¿∆¬¿∆√¿«¿«I¿«J¿«V¿«¥¿«‡¿«·¿«Ì¿»S¿»â¿»ä¿»ñ¿»Ù¿… ¿…!¿…-¿…ì¿……¿… ¿…÷¿ O¿ û¿ ü¿ ´¿À,¿ÀW¿Àä¿Àã¿Àó¿Ã¿Ãq¿Ãr¿Ã~¿Õ¿Õh¿Õi¿Õu¿ÕÏ¿Œ;¿Œ<¿ŒH¿Œ«¿œ¿œ¿œ+¿œ}¿œù¿œ¸¿– ¿–¿–Ñ¿—
¿—¿—¿—:¿—[¿—v¿—ë¿—¨¿—≥¿—◊¿—˚¿“U¿“Y¿“Z¿“‡¿”m¿”n¿”z¿”ï¿”Ø¿”–¿”Î¿‘¿‘!¿‘(¿‘Q¿‘u¿‘·¿‘Â¿‘Ê¿’t¿’ô¿’Ø¿’≈¿’€¿’Ò¿÷¿÷¿÷4¿÷5¿÷A¿÷]¿÷}¿÷π¿÷Ω¿÷æ¿◊-¿◊}¿◊~¿◊ä¿◊¶¿◊∆¿ÿ¿ÿ¿ÿ¿ÿv¿ÿ∆¿ÿ«¿ÿ”¿Ÿ¿Ÿ4¿Ÿá¿Ÿã¿Ÿå¿⁄
¿⁄¿⁄Ä¿⁄å¿⁄¡¿⁄Û¿⁄˜¿⁄¯¿€J¿€á¿€à¿€î¿€≥¿€’¿€˘¿€˝¿€˛¿‹H¿‹v¿‹w¿‹É¿‹∆¿‹Í¿›¿›-¿›{¿›à¿›√¿›…¿›Õ¿›Œ¿ﬁ.¿ﬁp¿ﬁq¿ﬁ„¿ﬂC¿ﬂD¿ﬂP¿ﬂö¿ﬂæ¿ﬂŸ¿‡¿‡U¿‡b¿‡§¿‡™¿‡Æ¿‡Ø¿·¿·_¿·`¿·ÿ¿‚>¿‚?¿‚K¿‚ò¿‚±¿‚≤¿‚æ¿„¿„$¿„%¿„1¿„Q¿„t¿„û¿„¢¿„£¿‰¿‰2¿‰3¿‰?¿‰]¿‰Å¿‰Ø¿‰◊¿‰Ë¿‰Ï¿‰Ì¿ÂD¿ÂÄ¿ÂÅ¿Âç¿Âµ¿Â€¿Ê	¿Ê(¿Ê9¿Ê=¿Ê>¿Êë¿Ê–¿Ê—¿Ê›¿ÊÚ¿Á¿Á[¿Á_¿Á`¿Á•¿Á ¿ÁÀ¿Ë,¿Ëv¿Ëw¿ËÉ¿Ëæ¿ËÎ¿ËÔ¿ËÒ¿ËÚ¿È4¿È8¿ÈF¿È§¿È¥¿ÈÂ¿ÈÎ¿Í¿Í>¿Í?¿ÍÑ¿Íä¿Íﬂ¿Î¿ÎH¿Îê¿Îî¿Îï¿Î¥¿Î∫¿Ï¿ÏQ¿Ïj¿Ïk¿Ïò¿Ïû¿ÏÔ¿ÌA¿Ì]¿Ìt¿Ìu¿Ì•¿Ì´¿Ì˚¿ÓJ¿Óf¿Ól¿Ó∫¿Ô	¿ÔX¿Ô¶¿Ô∑¿Ô¸¿5¿7¿8¿Ä¿Ñ¿’¿Ò!¿Òg¿Òk¿Ò±¿Òµ¿Ú¿ÚP¿Ún¿Úr¿Úº¿Û¿Û-¿Ûm¿Ûú¿ÛÚ¿ÛÛ¿Ù¿Ù¿Ù(¿ÙZ¿Ù\¿Ù]¿Ù¨¿Ù∆¿ı¿ı,¿ı-¿ıH¿ık¿ıl¿ıx¿ıì¿ı∆¿ıÁ¿ıˇ¿ˆb¿ˆæ¿˜2¿˜;¿˜A¿˜[¿˜_¿˜`¿˜l¿˜Ä¿˜ß¿˜◊¿˜Í¿˜¿¯¿¯¿¯¿¯ ¿¯!¿¯`¿¯d¿¯¨¿¯˜¿˘E¿˘i¿˘m¿˘ª¿˙
¿˙V¿˙¶¿˙Ù¿˚¿˚¿˚3¿˚q¿˚≥¿˚Ê¿˚Á¿¸¿¸#¿¸l¿¸∂¿¸ˇ¿˝¿˝¿˝<¿˝B¿˝ê¿˝÷¿˛&¿˛E¿˛\¿˛]¿˛à¿˛é¿˛ﬁ¿ˇ%¿ˇs¿ˇ¬¿ˇ˚¿ ¿ O¿ ü¿ Ó¿'¿A¿B¿a¿b¿≤¿Ÿ¿ﬂ¿.¿{¿ì¿ô¿Œ¿‘¿¿L¿ç¿ë¿í¿€¿·¿#¿g¿µ¿¿¿¿#¿ã¿ç¿é¿…¿˛¿#¿'¿(¿}¿ø¿¿¿‰¿Z¿|¿Ä¿Å¿‚¿¿¿T¿Ñ¿“¿	¿	P¿	l¿	¿	å¿	¢¿	»¿	Ì¿	ˆ¿	¸¿
 ¿
¿
\¿
¢¿
£¿
‚¿	¿¿≠¿¿¿¿¿v¿‰¿Â¿	¿¿£¿ß¿®¿¿3¿4¿_¿d¿π¿„¿˚¿'¿7¿T¿Z¿k¿o¿p¿ ¿¿Ò¿=¿C¿Ñ¿§¿¶¿ß¿‹¿¿)¿a¿b¿Ø¿Ú¿¸¿˝¿K¿ó¿≈¿Œ¿œ¿¿m¿∞¿π¿∫¿
¿¿!¿#¿$¿q¿¡¿”¿◊¿(¿;¿Ü¿å¿¿¿∆¿¿¿l¿∫¿
¿¿!¿p¿v¿ú¿¢¿≤¿∏¿¿¿/¿@¿E¿F¿`¿w¿x¿æ¿	¿3¿i¿j¿v¿ô¿∏¿⁄¿˝¿¿¿¿A¿B¿N¿ü¿°¿¢¿Û¿B¿ê¿‹¿¿¿Z¿g¿í¿ﬂ¿0¿t¿z¿À¿¿F¿Å¿ô¿π¿—¿Ì¿Ó¿8¿¿î¿ö¿Á¿ ¿ ¿ H¿ {¿ Æ¿ ·¿!¿!¿!i¿!µ¿!ª¿!…¿"	¿" ¿"7¿"N¿"e¿"o¿"y¿"¿"ë¿"ó¿"∏¿"æ¿"Ã¿#
¿#&¿#B¿#^¿#z¿#Ñ¿#é¿#î¿$¿$!¿$/¿$l¿$è¿$≤¿$’¿$¯¿%¿%¿%¿%õ¿%°¿%Ø¿%¿&¿&<¿&b¿&à¿&í¿&ú¿&Ã¿&„¿&˛¿'¿'6¿'7¿'É¿'ì¿'ª¿'“¿'Ì¿(¿(.¿(/¿(}¿(ò¿(¿¿(◊¿(Ú¿)
¿)3¿)4¿)K¿)j¿)â¿)ú¿)ù¿)Õ¿*¿*F¿*è¿*ÿ¿*Ÿ¿*Ò¿*˝¿+J¿+K¿+t¿+â¿+†¿+‘¿+Î¿+ı¿,¿,6¿,d¿,Ç¿,ô¿,£¿,Ó¿-¿-<¿-q¿-ï¿- ¿-Ÿ¿.¿.!¿.%¿.&¿.2¿.U¿.Å¿.ï¿.õ¿.ª¿.€¿/¿/4¿/_¿/c¿/d¿/p¿/Ö¿/Ø¿0¿0¿0¿0#¿0D¿0Y¿0p¿0©¿0¬¿0Ò¿1¿1G¿1k¿1ù¿1¨¿1—¿1◊¿1€¿1‹¿1Ë¿1˛¿2¿2*¿2c¿2|¿2´¿2œ¿3¿3%¿3W¿3f¿4¿4¿4¿4¿4¿4M¿4Q¿4°¿4Ï¿5>¿5T¿5è¿5±¿5È¿5˝¿6>¿6B¿6C¿6g¿6°¿6µ¿6Ó¿6Ú¿7!¿7f¿7z¿7ò¿7ú¿7ù¿7Ã¿8¿8%¿8C¿8G¿8H¿8ñ¿8º¿8Ÿ¿8⁄¿9¿9:¿9;¿9†¿9’¿9÷¿:)¿:Z¿:[¿:ø¿:È¿:Í¿;N¿;x¿;z¿;{¿;Æ¿;≤¿;¿¿;ƒ¿<¿<`¿<Ø¿<◊¿=#¿=N¿=k¿=Ω¿=Í¿=Î¿>'¿>ñ¿>Ô¿>Û¿>Ù¿?A¿?á¿?÷¿@¿@¿@¿@b¿@¥¿A¿AD¿AH¿AI¿Aç¿Aì¿A·¿B+¿B]¿B©¿B…¿C¿C¿Co¿Cs¿Ct¿Cæ¿Cƒ¿D¿DJ¿Do¿DÀ¿E¿E¿E¿Ei¿E∂¿E›¿Eﬁ¿F'¿F_¿F¿FÅ¿FÇ¿F¥¿Fˇ¿G ¿G¿G?¿G@¿Ga¿G•¿G±¿GË¿GÈ¿Gı¿H8¿H9¿HE¿Hâ¿Hä¿Hñ¿Hπ¿HÂ¿H˘¿Hˇ¿I&¿IV¿Ià¿Iå¿Iç¿Iô¿I·¿I„¿I‰¿J¿JÄ¿JÅ¿Jò¿JØ¿J ¿JÀ¿Jﬂ¿K!¿K-¿Kd¿Ke¿KÄ¿Kò¿K√¿K¿L!¿LL¿LR¿LV¿LW¿Lc¿L≠¿LÆ¿L∫¿M¿M¿M¿M5¿Ma¿Mu¿M{¿M®¿M ¿MÏ¿N¿N¿N¿N$¿NW¿NY¿NZ¿Nå¿N‘¿N’¿NÌ¿O¿O¿OJ¿OV¿Oç¿Oé¿Oö¿O⁄¿O€¿OÁ¿P(¿P)¿P5¿PX¿PÑ¿Pò¿Pû¿P≈¿PÈ¿Q¿Q¿Q¿Q¿QT¿QV¿QW¿Qà¿Qœ¿Q–¿QË¿R ¿R¿RD¿RP¿Rá¿Rà¿Rî¿R”¿R‘¿R‡¿S ¿S!¿S-¿SP¿S|¿Sê¿Sñ¿Sº¿S‡¿T¿T	¿T
¿T¿TK¿TM¿TN¿TÅ¿T“¿T”¿TÙ¿U¿U¿U0¿Uv¿UÇ¿Uπ¿U∫¿U∆¿V0¿V1¿V=¿Vì¿Vî¿V†¿V√¿VÔ¿W¿W	¿W1¿W]¿Wä¿Wé¿Wè¿Wõ¿Wÿ¿W⁄¿W€¿X¿X¿Xn¿X¡¿Y¿Y@¿Y|¿Y±¿Y ¿Yﬁ¿Z"¿Z&¿Z'¿Zt¿Z∫¿ZÎ¿[¿[¿[I¿[M¿[N¿[í¿[‰¿\¿\,¿\@¿\p¿\t¿\u¿\π¿\ø¿]¿]W¿]à¿]°¿]≈¿^¿^	¿^¿^W¿^[¿^\¿^é¿^¡¿^⁄¿^Ó¿_4¿_X¿_\¿_]¿_ê¿_ƒ¿_›¿_Ò¿`G¿`ù¿`÷¿`⁄¿`€¿a¿a;¿a<¿a™¿aÒ¿aÚ¿b[¿bò¿bô¿c¿c=¿c>¿cò¿c›¿cﬁ¿d=¿dz¿d{¿dÎ¿e>¿e?¿eç¿e≥¿e–¿e“¿e”¿f¿fN¿fÉ¿fÕ¿fÈ¿g¿g¿g¿g3¿g4¿g]¿gc¿g¥¿gœ¿gÁ¿g˜¿h¿h+¿h5¿hJ¿hN¿hO¿hü¿h¬¿h»¿i¿i_¿i®¿iÚ¿i¯¿j=¿jP¿j`¿j¿jú¿jØ¿jπ¿jΩ¿jø¿j¿¿k¿k.¿k2¿k¿kÕ¿l¿lj¿ln¿l√¿m¿mp¿m»¿n¿nD¿nH¿n¢¿n«¿nÀ¿nŸ¿n›¿o!¿ok¿oª¿oÂ¿p/¿pw¿pû¿pÎ¿q9¿qS¿qé¿qû¿q¯¿q˛¿rJ¿rê¿rñ¿rÓ¿s¿s¿sw¿s⁄¿t<¿tE¿tF¿tó¿tù¿tı¿uS¿u¿uÖ¿uﬂ¿v<¿vB¿v®¿w¿ws¿w¿wÄ¿w”¿wŸ¿x1¿xâ¿xﬂ¿x˙¿y ¿yZ¿y∞¿y≈¿yÀ¿z/¿zì¿zˆ¿{ ¿{¿{A¿{G¿{°¿{¸¿|¿|¿|k¿|ã¿|ë¿|Ù¿}W¿}π¿}¬¿}ƒ¿}≈¿}ˆ¿~¿~P¿~y¿~ö¿~û¿~Ø¿~±¿~≤¿~Ê¿¿H¿q¿è¿≤¿÷¿˘¿Ä¿Ä7¿Ä;¿ÄL¿ÄN¿ÄO¿Äå¿ÄÆ¿Ä–¿Ä˝¿Å¿Å/¿ÅH¿Åa¿År¿Åt¿Åu¿ÅΩ¿Å¡¿Ç¿Ç&¿Ç*¿Ç8¿Ç<¿Ç≤¿Ç∂¿Ç€¿É¿É¿Ée¿É∂¿Ñ ¿ÑO¿Ñ†¿ÑÒ¿ÖA¿Öc¿Öi¿Ö∏¿ÖÓ¿ÖÙ¿ÜW¿Ü∫¿á¿áÑ¿áä¿á’¿à¿à6¿à<¿àâ¿à‹¿â¿â/¿â@¿âO¿âi¿âá¿âØ¿â…¿âÓ¿ä¿äM¿ä`¿äç¿ä—¿ã¿ãv¿ãä¿ãÂ¿ãÈ¿ãÍ¿å5¿åU¿å[¿å™¿å˚¿çE¿çî¿çÂ¿é6¿éÜ¿é®¿éÆ¿é¸¿è2¿è8¿èõ¿è˛¿êb¿ê»¿êŒ¿ë¿ëe¿ëÄ¿ëÜ¿ë”¿í&¿íf¿íl¿í∏¿ì¿ìP¿ìû¿ìÌ¿î¿î%¿î8¿îK¿îe¿îÉ¿î´¿î≈¿îÿ¿îı¿ï¿ïX¿ïk¿ïò¿ï’¿ñ=¿ñ>¿ñ£¿ñˇ¿óC¿óY¿ó√¿ó–¿ò9¿òO¿ò€¿ò·¿òÂ¿òÊ¿ô6¿ôT¿ôZ¿ô•¿ôÛ¿ö.¿ö4¿öÉ¿ö‘¿õ¿õm¿õæ¿ú¿ú_¿úÅ¿úá¿ú◊¿ù¿ù¿ùÄ¿ù‚¿ûE¿û™¿û∞¿ûˇ¿üO¿ür¿üx¿ü≈¿†¿†X¿†j¿†}¿†ó¿†µ¿†›¿†˙¿°¿°7¿°^¿°Ñ¿°¿¿°”¿¢ ¿¢=¿¢•¿¢π¿£.¿£2¿£3¿£p¿£ê¿£ë¿§ ¿§É¿§Ñ¿•¿• ¿•6¿•L¿•a¿•y¿•ò¿•¨¿•…¿• ¿¶j¿¶à¿¶ù¿¶≤¿¶Ã¿¶ﬂ¿¶Ú¿ß
¿ß"¿ßA¿ßU¿ßr¿ßs¿ß˘¿®¿®+¿®A¿®Y¿®x¿®å¿®•¿®º¿®ÿ¿®Ÿ¿®¸¿©2¿©P¿©p¿©»¿©–¿©›¿™¿™i¿™q¿™w¿™{¿™}¿™~¿™º¿™‰¿´
¿´¿´L¿´õ¿´·¿¨¿¨¿¨i¿¨∏¿¨∆¿¨Ã¿≠¿≠Y¿≠Ü¿≠å¿≠“¿Æ"¿Æo¿Æå¿Æ®¿Æˆ¿Ø¿Ø¿ØA¿ØQ¿Øq¿ØØ¿Øµ¿Ø…¿∞<¿∞U¿∞s¿∞y¿∞}¿∞~¿∞ä¿∞ù¿∞≤¿∞¬¿∞∆¿∞«¿±¿±'¿±(¿±§¿≤¿≤¿≤`¿≤Ö¿≤Õ¿≤È¿≤Î¿≤Ï¿≥6¿≥K¿≥O¿≥y¿≥…¿¥¿¥#¿¥S¿¥g¿¥õ¿¥∏¿¥◊¿¥›¿¥Ì¿µ
¿µ¿µ'¿µ+¿µ,¿µB¿µC¿µà¿µé¿µ◊¿∂¿∂i¿∂¿∂Ω¿∑¿∑K¿∑ï¿∑¬¿∏
¿∏T¿∏o¿∏§¿∏™¿∏‹¿π*¿πw¿πç¿πï¿πô¿πö¿π”¿∫$¿∫r¿∫¬¿∫Œ¿ª¿ªM¿ªN¿ªÉ¿ªŒ¿º¿ºH¿ºö¿º∏¿º∆¿ºÃ¿ºÕ¿Ω¿Ω ¿Ω.¿Ω4¿Ω5¿Ωq¿Ωé¿Ωø¿Ω≈¿Ω…¿Ω ¿ΩÊ¿æ¿æ¿æ"¿æ<¿æ=¿æÅ¿æ°¿æ¢¿æ˛¿ø1¿ø2¿øf¿ø∫¿øº¿øΩ¿ø¿øÙ¿¿)¿¿q¿¿¡¿¡¿¡5¿¡9¿¡Ü¿¡”¿¬!¿¬j¿¬£¿¬Œ¿√7¿√S¿√b¿√Ñ¿√°¿√®¿√¨¿√≠¿√…¿√ ¿ƒ
¿ƒ6¿ƒ7¿ƒk¿ƒq¿ƒø¿≈¿≈X¿≈¶¿≈ˆ¿∆ ¿∆&¿∆m¿∆s¿∆Å¿∆ù¿∆ø¿∆ﬁ¿∆˘¿«¿«	¿«W¿«a¿«g¿«u¿«∆¿«Ò¿»"¿»S¿»Y¿»å¿»◊¿…"¿…m¿…∏¿…æ¿…Â¿ ¿ ¿ !¿ '¿ t¿ …¿ ⁄¿ ‡¿À*¿ÀU¿À™¿À∆¿À ¿ÀÀ¿Ã¿Ã¿Ã_¿Ã¢¿Ã®¿Ãı¿Õ¿ÕG¿Õõ¿Õ∆¿Õ ¿ÕÀ¿Œ¿Œ¿Œb¿ŒÆ¿ŒÈ¿Œı¿œ¿œ¿œ?¿œO¿œS¿œT¿œπ¿–¿– ¿–ã¿–»¿–…¿—%¿—J¿—K¿—û¿—∫¿—º¿—Ω¿“¿“¿“5¿“r¿“Ñ¿“Ã¿“Ÿ¿“⁄¿”(¿”9¿”:¿”ã¿”†¿”¶¿”Ò¿‘/¿‘p¿‘¿‘Å¿‘Ç¿‘∫¿‘æ¿’¿’S¿’û¿’Í¿÷:¿÷`¿÷d¿÷±¿÷ˇ¿◊N¿◊^¿◊b¿◊Æ¿◊˝¿ÿL¿ÿô¿ÿÊ¿Ÿ6¿ŸÖ¿Ÿ“¿ŸÌ¿ŸÒ¿⁄>¿⁄à¿⁄’¿⁄˜¿⁄˚¿€J¿€è¿€‹¿‹-¿‹~¿‹Œ¿‹Ò¿›(¿›o¿›u¿›√¿ﬁ¿ﬁ^¿ﬁ©¿ﬁÿ¿ﬁﬁ¿ﬂ+¿ﬂT¿ﬂZ¿ﬂ´¿ﬂ˘¿‡H¿‡Ö¿‡£¿‡©¿‡¯¿·G¿·M¿·ü¿·»¿·Œ¿‚¿‚o¿‚¿¿„¿„Z¿„•¿„¿‰ ¿‰¿‰T¿‰~¿‰Ñ¿‰¬¿‰»¿Â¿Âe¿Â∂¿Ê¿Ê)¿Ê5¿ÊJ¿Êh¿ÊÅ¿Êß¿Êø¿Ê∆¿Á¿ÁP¿ÁV¿Á≠¿Ë¿Ë
¿Ë%¿Ëe¿Ëó¿Ë∂¿È¿ÈI¿Èî¿È°¿È´¿È≥¿Èπ¿Èˇ¿ÍO¿Í|¿Íä¿Íæ¿Íﬂ¿ÍÌ¿Î$¿ÎI¿ÎW¿ÎX¿Î»¿Ï
¿Ï¿Ï¿Ï¿Ïf¿Ïï¿Ïõ¿ÏÈ¿Ì6¿ÌÑ¿Ìœ¿Ì˛¿Ó¿ÓQ¿Óõ¿ÓÁ¿Ô6¿ÔI¿ÔO¿Ô†¿ÔÔ¿6¿á¿ÿ¿Ò'¿Ò^¿Òd¿Ò≥¿Ú¿ÚS¿Úú¿Ú’¿Ú€¿Û+¿Û|¿ÛÕ¿Ù¿Ùg¿Ù≥¿ı¿ı1¿ı7¿ıÖ¿ı’¿ˆ$¿ˆR¿ˆX¿ˆñ¿ˆ¶¿ˆª¿ˆÿ¿ˆÔ¿˜¿˜-¿˜4¿˜Y¿˜…¿˜œ¿¯¿¯]¿¯c¿¯∫¿˘¿˘¿˘2¿˘r¿˘®¿˘«¿˙¿˙_¿˙™¿˙∑¿˙¡¿˙…¿˙œ¿˚#¿˚e¿˚k¿˚o¿˚p¿˚“¿¸¿¸,¿¸`¿¸û¿¸Œ¿˝¿˝¿˝R¿˝u¿˝à¿˝†¿˝∞¿˝»¿˝€¿˝Â¿˝ı¿˝˘¿˝˙¿˛E¿˛j¿˛Ø¿˛À¿˛Ã¿˛Ê¿ˇ0¿ˇ6¿ˇÑ¿ˇö¿ˇµ¿ˇ…¿ˇŸ¿ˇı¿ ¿ ¿ É¿ á¿ â¿ ä¿ ÿ¿ ‹¿¿\¿m¿è¿ï¿„¿-¿f¿l¿π¿¿¿(¿)¿c¿i¿Ø¿µ¿˜¿¿¿¿M¿S¿ï¿´¿∂¿∏¿π¿¿¿¿2¿@¿x¿Ü¿á¿¿¿Õ¿œ¿–¿¿	¿P¿î¿’¿Ÿ¿"¿r¿ª¿ÿ¿‹¿,¿u¿™¿Æ¿˚¿	:¿	R¿	ï¿	≥¿	π¿
¿
J¿
ö¿
È¿6¿y¿¿∆¿‹¿,¿-¿u¿{¿ß¿≠¿Ω¿√¿¿I¿X¿Y¿™¿˚¿J¿ì¿¢¿®¿Ù¿E¿ì¿€¿)¿s¿y¿∆¿Ã¿¿ˆ¿D¿ê¿‡¿0¿U¿[¿©¿Ú¿C¿ë¿ﬂ¿/¿w¿§¿™¿Ù¿¿¿!¿N¿v¿ç¿Õ¿ˆ¿-¿f¿Ä¿ö¿¢¿¨¿≤¿¿O¿ù¿ª¿¡¿œ¿¸¿?¿g¿~¿æ¿ı¿.¿H¿P¿Z¿`¿±¿˜¿A¿G¿U¿Ç¿ô¿Ì¿&¿@¿W¿∏¿Ò¿¿¿¿#¿n¿∑¿¿@¿F¿j¿p¿Ø¿µ¿¿Q¿¢¿Ì¿<¿ä¿’¿  ¿ q¿ ¬¿ ›¿ „¿ Û¿ ˘¿!I¿!k¿!≥¿!…¿!ˆ¿!˜¿"7¿"V¿"\¿"õ¿"°¿"Í¿#.¿#@¿#A¿#ù¿#Í¿$<¿$B¿$Å¿$á¿$’¿%%¿%G¿%i¿%j¿%≠¿%Ú¿&9¿&n¿&t¿&ô¿&Ø¿&∞¿' ¿'P¿'x¿'y¿'»¿(¿(#¿()¿(o¿(Å¿(®¿(©¿(˛¿)¿)¿)o¿)ª¿*
¿*3¿*V¿*W¿*ß¿*‚¿+	¿+
¿+]¿+≥¿+œ¿+’¿,'¿,u¿,≈¿,Ú¿-¿-¿-_¿-v¿-|¿-“¿-ÿ¿.¿."¿.t¿.º¿.Â¿.Î¿/5¿/I¿/§¿/•¿/Û¿0¿0¿0o¿0u¿0π¿0ø¿1¿1Y¿1©¿1„¿1‰¿22¿2F¿2L¿2¢¿2®¿2Ï¿2Ú¿3D¿3å¿3µ¿3Ï¿3Ì¿4>¿4ê¿4„¿4Ù¿4˙¿5N¿5°¿5Û¿6B¿6ë¿6‰¿77¿7Ü¿7◊¿7Û¿7˘¿81¿8É¿8◊¿9&¿9h¿9n¿9º¿9„¿9È¿9˜¿:¿:7¿:p¿:≠¿:Ã¿;¿;B¿;Q¿;Y¿;c¿;i¿;∫¿<¿<a¿<µ¿<≈¿<À¿=¿=^¿=í¿=ò¿=Ë¿>7¿>É¿>õ¿>∞¿>Õ¿>Œ¿?¿?q¿?ƒ¿? ¿@¿@l¿@º¿A¿A^¿A≤¿B¿B¿B¿BM¿Bp¿Bq¿B¥¿C ¿C¿CQ¿CR¿C°¿CÈ¿CÔ¿D=¿DC¿DÆ¿E¿EQ¿ER¿EÅ¿Eá¿EÃ¿EÁ¿F¿F¿FW¿Fí¿Fò¿G¿Gr¿Gõ¿Gú¿GÌ¿H/¿H5¿H°¿I¿I=¿I>¿Ié¿Iﬁ¿J¿J
¿JO¿Jâ¿Jä¿J◊¿K(¿KK¿KQ¿Kº¿L+¿LT¿LU¿L†¿LÚ¿MA¿Md¿Mj¿M◊¿NH¿NÅ¿NÇ¿Næ¿Nƒ¿O¿OQ¿Oõ¿OÔ¿P@¿Pê¿Pº¿P¬¿Q1¿Q§¿Q™¿R¿R`¿Ra¿Rñ¿Rú¿RÂ¿S.¿SZ¿SÉ¿SÑ¿S“¿T)¿Td¿Te¿T¥¿U ¿U¿UU¿Un¿Ut¿U¿¿V	¿V¿V`¿Va¿V®¿VÆ¿V¸¿WJ¿Wó¿W‰¿X'¿X-¿X{¿X»¿Y¿Y]¿Yn¿Yµ¿Y∂¿Y˝¿Z¿Z;¿Z<¿Zà¿Zò¿Zû¿ZÈ¿Zˆ¿Z¸¿[H¿[ï¿[”¿[Ÿ¿\(¿\t¿\z¿\À¿]¿]e¿]k¿]µ¿^¿^N¿^à¿^â¿^Œ¿^‘¿_¿_!¿_g¿_±¿_∑¿_«¿_Õ¿`¿`6¿`Ä¿`Å¿`∆¿`Ã¿a¿ai¿ao¿aµ¿aˇ¿b¿b¿b¿bi¿bá¿b”¿b‘¿c¿c$¿cp¿cÅ¿cá¿c–¿d!¿d8¿d>¿dá¿d’¿e!¿ei¿eπ¿f¿fO¿fû¿fÎ¿g5¿go¿gu¿gú¿g¢¿g≤¿h¿hO¿hv¿h»¿i¿i¿iW¿i]¿iÆ¿j¿jZ¿jÆ¿jÊ¿jÏ¿k<¿kç¿k‹¿l.¿l~¿l“¿m¿m$¿mu¿m≈¿n¿nq¿n°¿nı¿oC¿oá¿oç¿o‡¿p/¿pz¿p»¿q¿q#¿qw¿q»¿r¿r¿rh¿rÉ¿râ¿ró¿r¨¿r’¿rË¿rˇ¿s¿s¿s;¿sq¿sw¿s–¿sÓ¿t¿t¿t'¿tV¿tw¿tÆ¿t‚¿u¿u+¿uG¿uÑ¿u¢¿u¿¿v¿v4¿vb¿vs¿và¿vº¿vˇ¿w&¿w0¿w6¿wE¿wM¿wW¿w]¿w∂¿wº¿w ¿wﬂ¿x#¿x6¿xM¿x`¿xy¿xÅ¿xá¿xµ¿xÎ¿xÒ¿yJ¿yh¿yâ¿yè¿y°¿y–¿yÒ¿z(¿z\¿zÜ¿z±¿zÕ¿{
¿{(¿{F¿{å¿{∫¿{Ë¿{˘¿|¿|B¿|Ö¿|õ¿|œ¿}¿}/¿}9¿}?¿}N¿}V¿}`¿}f¿}Ø¿}˙¿~-¿~3¿~C¿~I¿~ó¿~Æ¿~Ã¿~˚¿¿D¿k¿å¿´¿¨¿¿ˆ¿ÄG¿Ä†¿ÄÛ¿ÅG¿Åô¿ÅÎ¿Ç"¿Ç(¿Çx¿Ç¿¿Ç∆¿É¿ÉW¿ÉÇ¿Éà¿É÷¿Ñ ¿Ñ&¿Ñr¿Ñø¿Ö¿Ö¿Öp¿ÖÅ¿Öá¿Öï¿Ö™¿Ö”¿ÖÊ¿Ö˝¿Ü¿Ü¿Ü9¿Üo¿Üu¿ÜŒ¿ÜÏ¿á¿á¿á%¿áT¿á§¿áÛ¿àD¿à`¿à•¿àÔ¿â'¿âR¿âà¿â±¿âÿ¿ä¿ä0¿ä6¿äè¿äÍ¿ãD¿ãÜ¿ã≤¿ãﬁ¿å¿å\¿åh¿åâ¿åÁ¿åÒ¿å˜¿ç¿ç¿ç¿ç¿çw¿ç}¿çã¿ç†¿ç‰¿ç˜¿é¿é!¿é:¿éB¿éH¿év¿é¨¿é≤¿è¿è)¿èJ¿èP¿èb¿èë¿è·¿ê0¿êÅ¿êù¿ê‚¿ë,¿ëj¿ë¢¿ëÕ¿í¿í,¿íS¿íÉ¿í´¿í±¿ì¿ìc¿ìæ¿î¿îf¿î¨¿î’¿îÔ¿ï*¿ïF¿ïb¿ï¶¿ï“¿ï˛¿ñ¿ñD¿ñ{¿ñ∞¿ñÂ¿ñÎ¿óE¿óü¿ó˜¿ò>¿òm¿òy¿òö¿ô¿ô¿ô¿ô'¿ô/¿ô9¿ô?¿ôO¿ôU¿ô¢¿ô∑¿ôÿ¿ö¿ö.¿öU¿ö¿ö£¿ö≈¿ö∆¿õ¿õ¿õi¿õ~¿õÑ¿õ™¿ú¿ú¿ú¿úR¿úì¿ú≥¿ù¿ù¿ùJ¿ùi¿ùà¿ù‰¿ùË¿ùÈ¿ûS¿û»¿û…¿ü%¿üÅ¿ü∆¿üÎ¿üÏ¿ü¯¿†F¿†^¿†_¿†k¿†ô¿†≥¿†Ô¿†¸¿° ¿°Ö¿°ã¿°è¿°ê¿°Ú¿¢L¿¢M¿¢¬¿£E¿£F¿£R¿££¿£æ¿£ø¿£À¿§*¿§U¿§V¿§b¿§π¿§ÿ¿§Ÿ¿§Â¿•H¿•y¿•z¿•Ü¿•≈¿•∆¿¶%¿¶S¿¶T¿¶`¿¶∏¿¶‡¿¶·¿¶Ì¿ßK¿ßw¿ßx¿ßÑ¿ß¨¿ßÃ¿®
¿®¿®)¿®-¿®.¿®{¿®¨¿®≠¿®π¿®ÿ¿©	¿©%¿©9¿©=¿©>¿©é¿©¬¿©√¿©œ¿™+¿™K¿™£¿™ß¿™®¿´'¿´ñ¿´ó¿´£¿´ﬁ¿¨ ¿¨2¿¨6¿¨7¿¨ä¿¨À¿¨Ã¿¨ÿ¿≠¿≠A¿≠E¿≠F¿≠ü¿≠ﬁ¿≠ﬂ¿≠Î¿Æ	¿Æ8¿ÆY¿Æü¿Æ£¿Æ§¿Æ˙¿Ø3¿Ø4¿Ø@¿Ød¿Øì¿Ø∫¿∞ ¿∞¿∞¿∞a¿∞†¿∞°¿∞≠¿∞‚¿±¿±¿±¿±w¿±≠¿±Æ¿±∫¿±Ô¿≤¿≤/¿≤w¿≤{¿≤|¿≤¿≥h¿≥i¿≥u¿≥ï¿≥¬¿≥∆¿≥«¿¥¿¥i¿¥j¿¥v¿¥†¿¥¿¿µ¿µ¿µ¿µì¿∂¿∂¿∂"¿∂O¿∂q¿∂≥¿∂∑¿∂∏¿∑¿∑u¿∑v¿∑Ç¿∑Ω¿∑ﬂ¿∏¿∏Y¿∏]¿∏^¿∏ƒ¿π8¿π9¿πE¿πo¿πè¿πÈ¿πÌ¿πÓ¿∫b¿∫‰¿∫Â¿∫Ò¿ª+¿ªJ¿ªå¿ªê¿ªë¿ªˇ¿ºp¿ºq¿º}¿º‹¿º¸¿Ωx¿Ω|¿Ω}¿æ¿æ ¿æ3¿æE¿æY¿æn¿æá¿æ†¿æ∂¿æŸ¿æÙ¿æı¿ø¿ø+¿øl¿øp¿øq¿ø‘¿¿2¿¿3¿¿?¿¿{¿¿ù¿¿¡¿¡C¿¡\¿¡™¿¡∞¿¡¥¿¡µ¿¬2¿¬º¿¬Ω¿¬…¿√¿√0¿√O¿√n¿√•¿√ÿ¿ƒ
¿ƒ>¿ƒs¿ƒ¶¿ƒÿ¿≈¿≈A¿≈z¿≈∞¿≈ı¿∆¿∆\¿∆b¿∆f¿∆g¿«¿«;¿«O¿«e¿«z¿«ë¿«©¿«ø¿«‘¿«Î¿»¿»&¿»@¿»_¿»`¿»l¿»¥¿»÷¿»¯¿…¿…N¿…Ñ¿…π¿…¿ (¿ [¿ ç¿ ¡¿ ˆ¿À/¿Àe¿À™¿À√¿Ã¿Ã¿Ã¿Ã¿ÃÕ¿Ã¿Õ¿Õ¿Õ5¿ÕO¿Õj¿ÕÄ¿Õï¿Õ¨¿Õƒ¿ÕÁ¿Œ¿Œ ¿Œ!¿Œ-¿ŒS¿Œw¿Œ§¿Œ®¿Œ©¿Œˇ¿œ5¿œ6¿œB¿œ}¿œ…¿œı¿–¿–D¿–|¿–Ä¿–Å¿–ç¿–ÿ¿—1¿—5¿—6¿—B¿—è¿—±¿—¸¿“¿“I¿“M¿“N¿“≥¿”$¿”%¿”1¿”|¿”°¿”Ï¿”¿”Ò¿‘_¿‘—¿‘“¿‘ﬁ¿‘¸¿’+¿’N¿’t¿’õ¿’º¿’‹¿’˛¿÷A¿÷B¿÷j¿÷î¿÷ﬂ¿÷Â¿◊2¿◊ö¿◊†¿◊°¿◊Ë¿ÿ'¿ÿ(¿ÿR¿ÿr¿ÿó¿ÿº¿ÿ·¿Ÿ¿Ÿ9¿Ÿ[¿Ÿë¿Ÿ«¿Ÿ˚¿⁄/¿⁄U¿⁄z¿⁄°¿⁄…¿⁄œ¿⁄–¿€9¿€z¿€≤¿€≥¿€Ÿ¿‹8¿‹~¿‹Ö¿‹Ü¿‹ü¿‹Ì¿‹Û¿‹˜¿‹¯¿›¿›%¿›T¿›{¿›¢¿›Ã¿›¿ﬁ¿ﬁD¿ﬁE¿ﬁm¿ﬁö¿ﬁË¿ﬁÓ¿ﬂ¿ﬂj¿ﬂp¿ﬂ¨¿‡%¿‡+¿‡c¿‡d¿‡ä¿‡ﬂ¿·)¿·0¿·1¿·J¿·ò¿·û¿·¢¿·£¿‚7¿‚V¿‚y¿‚ì¿‚±¿‚≈¿‚Ê¿‚ˇ¿„¿„-¿„K¿„L¿„X¿„∞¿‰¿‰¿‰¿‰s¿‰Ÿ¿‰€¿‰‹¿Â
¿ÂI¿ÂJ¿Âí¿Âñ¿Â ¿ÂŒ¿Ê¿ÊW¿Êô¿Ê≤¿ÊÒ¿Ê˜¿ÁB¿ÁÑ¿Á•¿ÁŒ¿Áœ¿Ë¿Ë¿Ëa¿Ë§¿Ë≈¿ËÔ¿Ë¿È¿È ¿Èo¿Èæ¿Í¿Í7¿Í8¿Íz¿ÍÄ¿Í∑¿Î¿ÎU¿Îû¿Î§¿ÎÙ¿ÏB¿Ïo¿Ïu¿Ï≈¿Ì¿Ì'¿Ì-¿Ì|¿Ìë¿ÌΩ¿Ìæ¿Ó¿Ó1¿ÓC¿ÓD¿Óä¿Óê¿Óﬁ¿ÓÙ¿Ô¿Ô¿ÔX¿Ô^¿ÔØ¿Ô·¿¿¿¿T¿û¿∫¿¿¿ˆ¿Ò¿Ò¿Ò¿ÒJ¿Òb¿Òá¿Òª¿Ò¡¿Ò◊¿Ú'¿ÚD¿Ú^¿Úo¿ÚÆ¿Ú∏¿Ú¬¿Ú…¿ÚÕ¿ÚŒ¿Û,¿ÛÅ¿ÛÇ¿Ûé¿Ûª¿Û”¿Û¯¿Ù,¿Ù2¿Ù3¿ÙX¿ÙÄ¿Ù∂¿Ù∫¿Ùª¿ı¿ıa¿ıb¿ın¿ıÅ¿ıô¿ı©¿ı¡¿ı‘¿ıﬁ¿ˆ¿ˆ¿ˆ¿ˆ¿ˆa¿ˆÜ¿ˆ ¿ˆÊ¿ˆÁ¿˜¿˜¿˜¿˜)¿˜=¿˜M¿˜i¿˜|¿˜Ü¿˜ˆ¿˜˙¿˜˚¿¯¿¯e¿¯é¿¯ê¿¯ë¿¯ÿ¿¯‹¿˘!¿˘f¿˘á¿˘»¿˙¿˙+¿˙a¿˙b¿˙ù¿˙£¿˙Á¿˚.¿˚e¿˚™¿˚Ê¿˚˛¿˚ˇ¿¸.¿¸4¿¸¿¸œ¿˝¿˝.¿˝0¿˝1¿˝ë¿˝¿¿˝¡¿˛¿˛%¿˛&¿˛2¿˛]¿˛^¿˛j¿˛Ö¿˛†¿˛‰¿˛Í¿ˇ!¿ˇ=¿ˇ\¿ˇp¿ˇ√¿ 
¿ /¿ C¿ G¿ H¿ °¿ €¿ ‹¿ ˆ¿ ¯¿ ˘¿¿¿N¿]¿w¿}¿»¿¿-¿3¿t¿z¿…¿‚¿Û¿!¿@¿[¿∞¿±¿·¿¿/¿Z¿Å¿®¿“¿”¿¿	¿[¿~¿ì¿î¿”¿Ÿ¿'¿s¿µ¿Ã¿Õ¿¿:¿;¿m¿s¿¶¿¨¿Ÿ¿L¿Ç¿∂¿∫¿ª¿˜¿˝¿	0¿	l¿	m¿	∫¿	¿¿	˝¿
L¿
s¿
y¿
Ω¿¿U¿w¿ã¿û¿¥¿˜¿˚¿¸¿N¿\¿|¿è¿£¿¬¿È¿¿Ù¿ı¿%¿+¿t¿π¿›¿„¿	¿V¿†¿Î¿7¿Ö¿’¿"¿f¿l¿ª¿€¿¿(¿=¿T¿i¿x¿ô¿°¿Æ¿≈¿‡¿Ô¿¿9¿p¿≤¿Ω¿≈¿À¿œ¿–¿	¿¿W¿]¿Ä¿Œ¿¿¿	¿¿5¿a¿ú¿Ã¿˚¿¿8¿_¿e¿ú¿Ω¿√¿÷¿⁄¿€¿Á¿
¿,¿?¿E¿`¿Ä¿¢¿Õ¿—¿“¿ﬁ¿¿¿i¿ª¿◊¿¿,¿F¿L¿M¿ä¿¿¿¡¿€¿(¿Z¿è¿ê¿…¿¿¿H¿u¿v¿≠¿⁄¿€¿*¿d¿ä¿ê¿ë¿©¿≠¿Æ¿∫¿˝¿ˇ¿ ¿G¿K¿ö¿∞¿Ó¿¿¿`¿u¿∂¿˚¿-¿Z¿x¿|¿}¿∑¿Ω¿ˆ¿4¿y¿¬¿ ¿ 9¿ Å¿ º¿ Ì¿!)¿!D¿!^¿!ä¿!í¿!ª¿!√¿!«¿!»¿!˘¿!ˇ¿"8¿"u¿"∞¿"·¿#¿#1¿#K¿#Ö¿#ç¿#∂¿#æ¿#¬¿#√¿$¿$[¿$\¿$π¿%¿%¿%c¿%Ø¿%∞¿%‰¿&¿&¿&¿&0¿&1¿&Z¿&`¿&±¿&Ã¿&‰¿&Ù¿'¿'(¿'2¿'G¿'K¿'L¿'ú¿'ø¿'≈¿(¿(\¿(©¿(ˆ¿)D¿)b¿)u¿)Ö¿)§¿)¡¿)‘¿)ﬁ¿)Ó¿)Ú¿)Û¿*>¿*c¿*Ø¿*À¿*Õ¿*Œ¿+¿+¿+l¿+Ñ¿+•¿+ﬁ¿+‰¿,4¿,Ü¿,†¿,¶¿,Ù¿-G¿-à¿-≈¿-‰¿.¿.¿.3¿.F¿.l¿.è¿.ê¿.€¿/¿/h¿/ö¿/“¿/Ú¿/ˆ¿/˜¿0!¿0'¿0b¿0s¿0t¿0ü¿0•¿0‡¿0Ú¿0Û¿1%¿1+¿1b¿1{¿1|¿1Ã¿1Ô¿1ı¿2@¿2e¿2w¿2x¿2∆¿2‚¿2Ë¿33¿3Ä¿3ë¿3ó¿3Â¿4¿4V¿4X¿4Y¿4π¿4◊¿4ÿ¿5¿5¿5g¿5π¿5”¿5Ÿ¿6'¿6z¿6ª¿6¯¿7¿74¿7L¿7e¿7x¿7û¿7•¿7π¿7œ¿8¿8,¿8z¿8~¿8¿8·¿94¿95¿9û¿:,¿:-¿:<¿:=¿:ñ¿:≤¿:≥¿:ø¿:Í¿:Î¿:˚¿:¸¿;V¿;s¿;t¿;Ä¿;Æ¿;Ø¿;∆¿;«¿<(¿<L¿<M¿<Y¿<ú¿<ù¿<©¿<ı¿=¿=¿=¿=m¿=†¿=∫¿=¿¿=ı¿>¿>¿>¿>N¿>i¿>Ü¿>ƒ¿?¿?&¿?d¿?Ö¿?ª¿?¡¿?‚¿@¿@¿@/¿@j¿@|¿@Ä¿@Å¿@Ï¿AB¿AD¿AE¿Az¿A™¿A´¿A„¿AÁ¿B1¿B>¿BÅ¿BÇ¿B—¿BÊ¿BÈ¿C6¿CS¿CV¿C¢¿C•¿C∑¿C∫¿C≈¿C˘¿C¸¿D7¿Dt¿Dy¿D|¿Dõ¿DÀ¿D–¿D◊¿D⁄¿E/¿EÖ¿E±¿E¥¿F
¿F>¿Ft¿Fª¿Fˇ¿G<¿GR¿G~¿Gì¿Gß¿G‘¿G„¿H#¿H+¿H8¿HU¿H[¿Ha¿Hs¿Hä¿H¶¿H™¿H≈¿H«¿H»¿I¿Ie¿Ii¿Iπ¿J	¿J>¿Jy¿Jæ¿Jø¿JÙ¿K¿K¿K_¿Kz¿K{¿Ká¿Kù¿K˜¿L¿L(¿Lo¿Lò¿Lû¿Lº¿L¿¿L¬  dart.uiÄ¨ M_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImage_Image	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_futurizePictureRasterizationException q}