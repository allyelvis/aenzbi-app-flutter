Ä¸detachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemanticsdebugDescribeChildrendebugFillProperties	_children	_manifold_debugParent_debugSetParent%_debugRootSuffixForTimelineEventNamesattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_relayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics1_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChange_cleanRelayoutBoundary_propagateRelayoutBoundary_cleanChildRelayoutBoundary!_propagateRelayoutBoundaryToChildscheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEvent_cachedSemanticsConfiguration_semanticsConfigurationsemanticBounds_needsSemanticsUpdate
_semanticsdebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate_updateSemantics_getSemanticsForParent_marksExplicitInMergeGroupvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowshowOnScreendescribeForErrordebugValidateChild_childchildpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdate dropsSemanticsOfPreviousSiblingsmergeUpFragmentssiblingMergeGroups_ancestorChaincompileChildrenconfigmarkAsExplicithasConfigForParent_tagsForChildrenaddTagsaddAncestor_mergeIntoParent_config_isConfigWritable_mergesToSibling_siblingMergeGroups_mergeSiblingGroup_computeSemanticsGeometry_ensureConfigIsWritable_isExplicit_needsGeometryUpdate_paintClipRect_semanticsClipRect
_transform_rect	transformsemanticsClipRectpaintClipRectrect_computeValues_temporaryTransformHolder_transformRect!_applyIntermediatePaintTransforms_intersectRectsdropFromTreemarkAsHidden_markAsHidden
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreatorÅ€PictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandlesemanticsOwneraddListenerremoveListener_didDisposeSemanticsHandleRendererBindingDiagnosticableTreeMixinrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachListkReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerdisposelistenerSemanticsBindingensureSemantics_onSemanticsUpdateSetscheduleInitialSemanticstoList_needsSemanticsUpdate_updateSemanticssendSemanticsUpdateflushSemanticstoDiagnosticsNodedebugFillPropertiesadddefaultValue_debugParent	drawFramecontainsforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutHitTestTarget kFlutterMemoryAllocationsEnabledMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectdebugPaintSizeEnabledBindingBasereassembleApplication
reassembledispatchObjectDisposed
parentData_depthredepthChildren_parentparent_cleanRelayoutBoundaryDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstackcontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutisSemanticBoundary
StateError_relayoutBoundary_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_propagateRelayoutBoundary_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayout	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagerootNoderendereridentityindexapplyPaintTransformpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventisMergedIntoParentsendSemanticsEventexplicitChildNodeschildConfigurationsDelegateclearSemantics_semanticsConfiguration
_semanticsmergeIntoParentisPartOfNodeMergingblockUserActionsareUserActionsBlockedcompileChildrenparentSemanticsClipRectparentPaintClipRectelevationAdjustmentresultsiblingNodesconfigany+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotatedisBlockingUserActionsisMergingSemanticsOfDescendantstagsForChildrenrenderChild_getSemanticsForParent dropsSemanticsOfPreviousSiblingsmergeUpFragmentsfragmentaddAncestoraddTagssiblingMergeGroupssiblingMergeGroupsiblingMergingFragmentmarkAsExplicit"ChildSemanticsConfigurationsResultmergeUpmapIterable	isMergeUphasConfigForParentisCompatibleWithj
updateWithchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLeveltoStringShallowjoinervalueifTrueleveltooltipmissingIfNullshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdatefirstSemanticsTagchildren_tagsForChildren_ancestorChainrootmatrixEqualssemanticBoundsisInvisible_mergesToSiblingabsorb_computeSemanticsGeometrytransformRectexpandToIncludesemanticsClipRect	intersectpaintClipRectidtags
followedBysiblingGrouplast_isExplicitskip	elevationdropFromTreemarkAsHiddenisHiddenassembleSemanticsNodesiblingNode	ancestorsaddTagForChildrencopydescribeSemanticsClipdescribeApproximatePaintClipsetIdentityisZero
isIdentitySemanticsFlaghidden
ClipContextSemanticsHandleDiagnosticableTreeMixin
ListenableHitTestTargetRenderObject
ParentData_SemanticsFragment_InterestingSemanticsFragmentDiagnosticsProperty˜◊ŒaŸª˙1ß≠iR> € ÇÉDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty ÅÙpackage:flutter/foundation.dartÉ>É^HitTestEntryHitTestResult Épackage:flutter/gestures.dart  É`package:flutter/painting.dart
ÄºÄ–PictureRecorder Ä¶  Ä∂uiÄπdart:ui  Ä‘  package:flutter/animation.dart  Ä˝  package:flutter/foundation.dart  Å'  package:flutter/gestures.dart  ÅO  package:flutter/painting.dart  Åw  package:flutter/scheduler.dart  Å†  package:flutter/semantics.dart  Å   
debug.dart  Åﬂ  
layer.dart    	dart:core¿ø ¿$ÏîD <ÄÜÄ§Ä•Ä“Ä”Ä¸Å&ÅNÅvÅüÅ»Å…ÅﬁÅÛÅÙÇ"ÇAÇTÇkÇ}ÇçÇ°ÇÆÇæÇŒÇﬁÇˆÉÉÉ`ÉàÉâÉ—É’ÑÑgÑõÑüÑ≠Ñ±Ñ¸ÖAÖTÖëÖûÖØÖ√ÖƒÖ–ÖÒÖÛÖÙÜ)Ü-Ü~Ü ÜŒáá]á^átáxá ààYàmàqà¬ââbâ¨â∆â ääOä{ä|äûä§äÏãããOãPãxãyã∆åååNåTå†åæåøåÊåÏç7çÑç’çÒç˜ééé]é~é‚èèè+èaèhèlèmèîèÆè◊è˙êê&ê6êmêúêÃêÈêÚëëëWëuëõëÀëÃíídíØí÷ì#ìXìeì¢ì¿ì“ìˇîî îFî†î“ï&ïâï”ï‹ñññFñGñÑñπñ…óó&ó0ó1óvóÆóØó˛ò2òoòôòùòûòÏòÚô=ôäôÿööö)ö/öö†ö⁄õõ<õjõkõ∏õ‘õ‰úú!ú+úÉú≥ùùfùÆùµùËûûûûiûπûÌûÛüü	üVüpü•üøüË†††+†J†Y†ë†∂†ø†“†‹†‡†·°°°Y°®°¯¢/¢?¢g¢z¢Ñ¢Ö¢®¢«¢Ì£9£Ä£¨£„§
§7§D§q§w§{§|§∏§”§¯•5•6•x•≥•ˆ¶¶2¶X¶`¶r¶´¶ﬁß,ßAßMßSßàß€®®$®(®)®u®Ñ®ä®”©©F©L©ô©¨©π©€©ˆ™
™-™1™2™L™x™à™ü™∆™È´
´´@´c´Ñ´å´ü´©´ø´√´ƒ´Ÿ´¯¨¨,¨-¨Q¨W¨°¨Î≠
≠≠,≠G≠`≠f≠â≠û≠¢≠£≠æ≠ŸÆÆ2ÆTÆÄÆÑÆÖÆ÷ÆÂÆÎØ9ØáØ—∞∞∞S∞Y∞i∞î∞⁄±±±±W±]±©±¯≤G≤T≤Z≤©≤Ù≥≥≥$≥E≥^≥l≥r≥Ç≥™≥Œ≥˜¥¥M¥ã¥ì¥æ¥‚µµ)µVµáµèµ¢µ¨µ‰µ˛∂∂(∂,∂-∂}∂ë∂ó∂Ê∑/∑>∑D∑è∑ﬂ∏+∏M∏i∏ä∏£∏©∏“∏÷∏◊π*π0πÄπ…∫∫H∫N∫ô∫Èª5ªWªtªïªÆª¥ªﬁª‚ª„ºººoº™º∞º˝ΩOΩüΩÂΩÎΩ˚ææOæ\æ{æòæ∞æ¥æµøøUø•ø«øÕ¿ @¿ @`¿ @t¿ @z¿ @ø¿ A¿ A_¿ A≠¿ A¿ B¿ B¿ B\¿ B≠¿ B˙¿ CK¿ Cõ¿ CŸ¿ Cﬂ¿ CÔ¿ Cı¿ D@¿ DT¿ DŒ¿ E¿ Em¿ Eè¿ Eµ¿ Eª¿ Eÿ¿ Eı¿ Fc¿ Fd¿ Fá¿ F±¿ Fµ¿ F∂¿ F˛¿ G¿ GJ¿ GW¿ G¶¿ G÷¿ G⁄¿ G€¿ H
¿ H¿ Hb¿ H™¿ H·¿ I-¿ I}¿ Iª¿ Iˇ¿ J¿ JS¿ Jó¿ J¨¿ J≤¿ J˙¿ KC¿ Kå¿ K°¿ Kß¿ K¯¿ L@¿ LP¿ LV¿ L¶¿ LÁ¿ LÌ¿ M6¿ M<¿ MÜ¿ M”¿ N¿ Ng¿ N∑¿ Nˇ¿ OK¿ OÅ¿ Oñ¿ PL¿ Pq¿ Pé¿ P°¿ Pß¿ Pﬂ¿ P˚¿ Q:¿ QF¿ Qj¿ Që¿ Q‹¿ Q¿ Q˝¿ R`¿ Rs¿ Ry¿ R}¿ R~¿ Rµ¿ Rª¿ S
¿ S¿ SU¿ S[¿ S´¿ SÓ¿ SÙ¿ TD¿ Tè¿ T∂¿ Tº¿ U¿ UO¿ UU¿ U¶¿ U¨¿ UÛ¿ Vº¿ V·¿ V˛¿ W¿ W¿ WK¿ WÜ¿ W¢¿ W„¿ WÔ¿ X¿ X<¿ XÖ¿ Xô¿ X¶¿ Y	¿ Y¿ Y"¿ Y&¿ Y'¿ YQ¿ YW¿ Y¶¿ Y¨¿ YÒ¿ Y˜¿ ZG¿ Zä¿ Zê¿ Zﬂ¿ [*¿ [F¿ [L¿ [ú¿ [›¿ [„¿ \'¿ \-¿ \t¿ ]8¿ ]]¿ ]z¿ ]ç¿ ]ì¿ ]«¿ ]ˇ¿ ^¿ ^Z¿ ^f¿ ^ä¿ ^±¿ ^˙¿ _¿ _¿ _|¿ _è¿ _ï¿ _ô¿ _ö¿ _Ã¿ _“¿ `¿ `¿ `k¿ `ë¿ `ó¿ `Á¿ a.¿ a4¿ a{¿ aÅ¿ aŒ¿ b ¿ bp¿ b∂¿ cD¿ cá¿ c¨¿ c”¿ cÂ¿ cÈ¿ cÍ¿ d¿ d!¿ dp¿ dv¿ d«¿ dÌ¿ dÛ¿ e?¿ eê¿ e…¿ eœ¿ f ¿ fb¿ fh¿ fØ¿ gI¿ g•¿ gÂ¿ h¿ hB¿ hn¿ h¿ hé¿ hü¿ hØ¿ i¿ i¿ i-¿ i:¿ iG¿ iX¿ iâ¿ i¶¿ iæ¿ i—¿ i◊¿ i€¿ i‹¿ j¿ j¿ ja¿ jç¿ jì¿ j„¿ k,¿ k|¿ kÇ¿ kœ¿ l¿ l¿ l\¿ lb¿ lØ¿ m¿ mQ¿ mó¿ n¿ nF¿ nP¿ nf¿ n¿ n´¿ nΩ¿ n¡¿ n¬¿ nŒ¿ oZ¿ o\¿ o]¿ oà¿ oå¿ oÿ¿ p¿ p¿ pC¿ pG¿ pó¿ p„¿ q¿ q¿ qZ¿ q™¿ q˜¿ q˚¿ rK¿ rô¿ rÁ¿ s4¿ sA¿ sE¿ sç¿ s‹¿ t&¿ tg¿ t∑¿ u¿ uU¿ uõ¿ u∑¿ uª¿ v
¿ vU¿ v§¿ vÓ¿ w$¿ wt¿ wå¿ wê¿ wﬁ¿ x,¿ x{¿ xï¿ xô¿ xÈ¿ y:¿ yE¿ yb¿ y≥¿ y˚¿ z¿ z¿ z]¿ zq¿ zr¿ z¥¿ zÕ¿ zŒ¿ z¸¿ {¿ {E¿ {K¿ {ö¿ {∂¿ {º¿ |
¿ |Z¿ |©¿ |Ú¿ }+¿ }|¿ }Õ¿ }ﬁ¿ }‰¿ ~2¿ ~¿ ~∏¿ ~æ¿  ¿ ¿ B¿ r¿ y¿ ì¿ ¨¿ ∞¿ ≤¿ ≥¿ ¯¿ ¸¿ ÄS¿ Äî¿ Äï¿ Ä–¿ Ä‘¿ Å¿ ÅS¿ ÅT¿ Åç¿ ÅÀ¿ Å‰¿ Ç ¿ Ç5¿ Ç;¿ Ç?¿ Ç@¿ Ç^¿ Ç_¿ Ç©¿ Ç…¿ Ç ¿ Ç÷¿ ÇÈ¿ É¿ É=¿ ÉC¿ Él¿ Ép¿ Ér¿ És¿ É™¿ ÉÆ¿ É˛¿ ÑO¿ Ñú¿ Ñ¥¿ Ñ∏¿ Ö¿ ÖJ¿ Öî¿ Ö¿¿ Ü	¿ ÜW¿ Üß¿ Ü¯¿ áF¿ áé¿ á‘¿ à"¿ àm¿ à≠¿ à˘¿ âG¿ âî¿ âò¿ âÁ¿ ä1¿ ä~¿ äú¿ ä†¿ äÒ¿ ã?¿ ãé¿ ã€¿ å'¿ åu¿ å∂¿ å∫¿ ç¿ çT¿ ç§¿ çÓ¿ é¿ éP¿ ép¿ év¿ é√¿ è¿ è6¿ èH¿ èe¿ èá¿ è£¿ è∆¿ èÃ¿ èÕ¿ ê¿ êA¿ êG¿ êò¿ êÂ¿ ë2¿ ëQ¿ ëW¿ ëû¿ ëÎ¿ í4¿ í^¿ í_¿ í•¿ í´¿ íÛ¿ ì	¿ ì8¿ ì9¿ ìê¿ ìñ¿ ìÎ¿ î¿ îL¿ îM¿ îï¿ îõ¿ î‹¿ ï¿ ï¿ ïS¿ ïY¿ ï©¿ ï–¿ ïÔ¿ ñ¿ ñ2¿ ñ?¿ ñg¿ ñm¿ ñq¿ ñr¿ ñ∑¿ ñ‚¿ ñ˝¿ ó#¿ óA¿ óO¿ óU¿ ón¿ óÖ¿ ó¢¿ ó¶¿ óß¿ óÛ¿ ò>¿ ò{¿ òÄ¿ ò…¿ ô¿ ô^¿ ôñ¿ ôõ¿ ô◊¿ ö'¿ öu¿ ö¡¿ ö÷¿ ö˝¿ õ:¿ õ;¿ õy¿ õ¿ õø¿ õ≈¿ ú¿ ú$¿ úV¿ úx¿ úü¿ ú†¿ ú‚¿ úË¿ ù8¿ ùÉ¿ ùπ¿ ùø¿ û¿ û¿ û8¿ ûk¿ û}¿ û∞¿ ûÂ¿ ü!¿ üS¿ ü`¿ üj¿ ü¿ üã¿ ü¨¿ ü‰¿ †¿ †¿ †¿ †.¿ †N¿ †a¿ †k¿ †u¿ †§¿ †Õ¿ °¿ °@¿ °ê¿ °∆¿ °Ó¿ ¢¿ ¢L¿ ¢°¿ ¢∂¿ ¢ƒ¿ ¢–¿ £¿ £<¿ £e¿ £q¿ £{¿ £∆¿ £È¿ §¿ §¿ §¿ §,¿ §S¿ §h¿ §t¿ §©¿ §∆¿ §Œ¿ •7¿ •G¿ •m¿ •¿ •¢¿ • ¿ •ﬂ¿ •Î¿ ¶¿ ¶,¿ ¶4¿ ¶:¿ ¶>¿ ¶?¿ ¶ç¿ ¶ﬁ¿ ß+¿ ßz¿ ßß¿ ß€¿ ß‹¿ ®
¿ ®J¿ ®i¿ ®}¿ ®ç¿ ®√¿ ®ı¿ ©¿ ©¿ ©¿ ©.¿ ©>¿ ©c¿ ©u¿ ©Æ¿ ©√¿ ©œ¿ ©’¿ ©Ÿ¿ ©⁄¿ ™,¿ ™d¿ ™j¿ ™∏¿ ™Ã¿ ™Ï¿ ´¿ ´i¿ ´o¿ ´”¿ ¨¿ ¨a¿ ¨à¿ ¨ê¿ ¨ñ¿ ¨∆¿ ¨˘¿ ≠¿ ≠#¿ ≠ô¿ ≠≤¿ ≠÷¿ ≠‹¿ ≠‡¿ ≠·¿ Æ¿ Æ¿ Æ[¿ Æa¿ Æ†¿ Æ¶¿ Æ‰¿ Ø¿ Ø5¿ ØV¿ ØW¿ Øé¿ Øî¿ Ø›¿ ∞-¿ ∞~¿ ∞Ñ¿ ∞Õ¿ ∞„¿ ∞¸¿ ±/¿ ±A¿ ±s¿ ±®¿ ±„¿ ≤¿ ≤!¿ ≤+¿ ≤@¿ ≤L¿ ≤m¿ ≤§¿ ≤œ¿ ≤ÿ¿ ≤ﬁ¿ ≤Ë¿ ≤˙¿ ≥¿ ≥0¿ ≥<¿ ≥|¿ ≥©¿ ≥™¿ ≥Í¿ ¥[¿ ¥å¿ ¥Ë¿ µ¿ µG¿ µk¿ µß¿ µº¿ µ˜¿ ∂¿ ∂¿ ∂D¿ ∂P¿ ∂Z¿ ∂b¿ ∂ó¿ ∂≥¿ ∂ª¿ ∑#¿ ∑3¿ ∑E¿ ∑g¿ ∑|¿ ∑à¿ ∑£¿ ∑…¿ ∑—¿ ∑◊¿ ∑€¿ ∑‹¿ ∏)¿ ∏/¿ ∏Ä¿ ∏–¿ π¿ πK¿ πï¿ π‚¿ πÙ¿ π˙¿ ∫C¿ ∫`¿ ∫ô¿ ∫º¿ ∫Ω¿ ∫˝¿ ª¿ ªT¿ ªÑ¿ ª–¿ ª¯¿ ª˘¿ ºJ¿ ºñ¿ ºú¿ ºÌ¿ Ω¿ Ωn¿ Ωà¿ Ωé¿ Ωﬂ¿ æ/¿ æx¿ æñ¿ æú¿ æ◊¿ ø#¿ øs¿ øô¿ øŸ¿ ¿ ¿ ¿¿ ¿Q¿ ¿U¿ ¿V¿ ¿w¿ ¿Õ¿ ¿Ú¿ ¡q¿ ¡¬¿ ¡Î¿ ¡Û¿ ¬¿ ¬?¿ ¬]¿ ¬Ö¿ ¬ã¿ ¬è¿ ¬ê¿ ¬∂¿ ¬€¿ √¿ √¿ √#¿ √$¿ √I¿ √é¿ √è¿ √€¿ √È¿ √Ô¿ ƒ$¿ ƒm¿ ƒs¿ ƒ¿¿ ƒ˚¿ ≈:¿ ≈@¿ ≈â¿ ≈£¿ ≈∆¿ ≈‘¿ ≈⁄¿ ≈Û¿ ∆G¿ ∆M¿ ∆r¿ ∆Ç¿ ∆•¿ ∆∏¿ ∆¬¿ ∆Ã¿ «¿ «c¿ «â¿ «¡¿ »¿ »$¿ ».¿ »6¿ »d¿ »ô¿ »π¿ »¡¿ …-¿ …=¿ …O¿ …u¿ …ä¿ …ñ¿ …±¿ …◊¿ …ﬂ¿ …Â¿ …È¿ …Í¿ …ˆ¿  (¿  F¿  y¿  ú¿  £¿  ß¿  ®¿  ¥¿  ˘¿ À$¿ ÀÖ¿ Àâ¿ Àä¿ Àü¿ À†¿ À⁄¿ À˘¿ À˙¿ Ã¿ Ã^¿ Ã¿ Ãê¿ Ãî¿ Ãï¿ ÃÚ¿ ÃÛ¿ Õ@¿ ÕF¿ Õë¿ Õ‡¿ Œ¿ Œ.¿ ŒM¿ Œg¿ Œö¿ Œ∑¿ Œ∏¿ ŒÎ¿ œ	¿ œ¿ œ¿ œ¿ œA¿ œG¿ œí¿ œ„¿ –¿ –¿ –6¿ –l¿ –Ç¿ –—¿ —"¿ —c¿ —d¿ —ó¿ —≠¿ —≥¿ —∑¿ —∏¿ —˝¿ “D¿ “í¿ “·¿ ”X¿ ”Y¿ ”Ö¿ ”ã¿ ”⁄¿ ‘'¿ ‘t¿ ‘ø¿ ’¿ ’[¿ ’¨¿ ’Ã¿ ’“¿ ÷¿ ÷7¿ ÷=¿ ÷é¿ ÷›¿ ÷„¿ ◊¿ ◊7¿ ◊_¿ ◊á¿ ◊‡¿ ◊˙¿ ÿ¿ ÿ7¿ ÿ=¿ ÿZ¿ ÿz¿ ÿÄ¿ ÿÑ¿ ÿÖ¿ ÿŒ¿ ÿ‘¿ Ÿ%¿ Ÿ7¿ Ÿ=¿ Ÿå¿ Ÿ€¿ ⁄¿ ⁄+¿ ⁄R¿ ⁄´¿ ⁄»¿ ⁄·¿ €¿ €¿ €(¿ €>¿ €D¿ €H¿ €I¿ €ë¿ €ó¿ €ß¿ €≠¿ €”¿ €˚¿ ‹0¿ ‹P¿ ‹T¿ ‹U¿ ‹é¿ ‹î¿ ‹„¿ ›2¿ ›É¿ ›â¿ ›≈¿ ›ÿ¿ ›˜¿ ﬁ¿ ﬁ4¿ ﬁV¿ ﬁv¿ ﬁí¿ ﬁ≥¿ ﬁ„¿ ﬂ¿ ﬂ'¿ ﬂ+¿ ﬂ-¿ ﬂ.¿ ﬂo¿ ﬂs¿ ﬂ†¿ ﬂ„¿ ﬂ‰¿ ‡¿ ‡¿ ‡P¿ ‡ù¿ ‡Ï¿ ·:¿ ·á¿ ·Æ¿ ·≤¿ ‚¿ ‚S¿ ‚ô¿ ‚π¿ ‚Ω¿ „¿ „W¿ „è¿ „⁄¿ ‰¿ ‰"¿ ‰r¿ ‰¥¿ ‰∫¿ ‰ ¿ ‰–¿ Â¿ ÂU¿ Âr¿ Âs¿ Â¡¿ Ê¿ Ê(¿ Ê.¿ Ê¿ ÊÃ¿ Á¿ Á8¿ Á>¿ ÁÖ¿ Á‘¿ Ë"¿ Ë(¿ Ë8¿ Ë>¿ Ëá¿ Ë…¿ ËÁ¿ ËÈ¿ ËÍ¿ È4¿ È5¿ ÈW¿ È[¿ Èü¿ Èø¿ È√¿ Í¿ Í
¿ ÍV¿ Í¶¿ ÍÒ¿ Î¿ Î¿ Î`¿ ÎÆ¿ Î˜¿ ÏG¿ Ïî¿ Ï„¿ Ì3¿ ÌZ¿ Ì^¿ Ì¢¿ Ì…¿ ÌÕ¿ Ìﬁ¿ Ì‚¿ Ó/¿ Ó¿ Ó–¿ ÓÍ¿ ÓÓ¿ Ô:¿ Ôà¿ Ôÿ¿ )¿ g¿ k¿ í¿ ñ¿ ‹¿ Ò*¿ Òw¿ Ò¬¿ Ú¿ Ú_¿ ÚØ¿ Ú˝¿ ÛE¿ Ûî¿ Û·¿ Ù,¿ Ùm¿ Ùq¿ Ù¿¿ ı¿ ıa¿ ıù¿ ı°¿ ı∞¿ ı¥¿ ı˚¿ ˆB¿ ˆ^¿ ˆb¿ ˆ∞¿ ˜¿ ˜M¿ ˜ö¿ ˜ﬂ¿ ¯ ¿ ¯$¿ ¯t¿ ¯ß¿ ¯´¿ ¯ø¿ ¯√¿ ˘¿ ˘=¿ ˘A¿ ˘é¿ ˘‹¿ ˙-¿ ˙u¿ ˙ø¿ ˚¿ ˚Z¿ ˚¿ ˚É¿ ˚±¿ ˚µ¿ ¸¿ ¸W¿ ¸¢¿ ¸Ú¿ ˝C¿ ˝Z¿ ˝^¿ ˝Æ¿ ˝æ¿ ˝¬¿ ˛¿ ˛P¿ ˛a¿ ˛e¿ ˛≤¿ ˇ¿ ˇ¿ ˇ8¿ ˇ<¿ ˇé¿ ˇﬁ¿ -¿ x¿ √¿ «¿¿b¿±¿˝¿L¿õ¿–¿!¿q¿~¿“¿¿¿C¿{¿¶¿ ¿‡¿È¿Ô¿4¿a¿e¿f¿µ¿¿O¿~¿Ñ¿≈¿¿b¿Å¿á¿”¿Ÿ¿È¿Ô¿¿2¿I¿o¿Ö¿•¿Œ¿Ë¿¿Ù¿ı¿	¿	!¿	^¿	z¿	é¿	û¿	ø¿	“¿	‹¿	Ò¿	ı¿	ˆ¿
¿
¿
N¿
T¿
ü¿
Ó¿9¿x¿¡¿¿)¿/¿z¿°¿ß¿„¿Ù¿¿$¿P¿ó¿ù¿º¿Ã¿¿+¿Y¿l¿è¿˝¿¿¿5¿H¿R¿V¿W¿c¿d¿î¿ö¿Á¿6¿Ü¿ƒ¿ ¿¿D¿î¿“¿#¿o¿ª¿ˆ¿¿¿R¿X¿®¿Ÿ¿¿7¿b¿â¿è¿ì¿î¿Œ¿‘¿$¿l¿©¿Ø¿˝¿H¿ò¿Á¿-¿}¿É¿À¿¿:¿U¿g¿h¿π¿»¿Œ¿¿¿F¿h¿ä¿´¿ ¿–¿‘¿’¿¿¿f¿û¿´¿»¿…¿¿
¿J¿q¿ä¿ã¿”¿Ÿ¿(¿{¿å¿ô¿¡¿‰¿Ù¿¿8¿U¿]¿¶¿π¿√¿ƒ¿‡¿˜¿¿=¿W¿k¿à¿é¿ß¿´¿¨¿˛¿¿S¿¶¿∑¿ƒ¿Î¿ ¿ 6¿ \¿ Ä¿ †¿ Ω¿ ◊¿ Î¿!¿!¿!¿!D¿!d¿!h¿!i¿!≠¿!≥¿"¿"9¿":¿"x¿"~¿"ú¿"¢¿"≤¿"∏¿#¿#$¿#%¿#r¿#§¿#¿¿#‘¿#¯¿$-¿$b¿$≤¿$›¿%¿%?¿%®¿%˜¿&F¿&ë¿& ¿'"¿'+¿'3¿'7¿'8¿'É¿'â¿'÷¿'„¿(¿(C¿(D¿(è¿(ï¿(‚¿(Ô¿))¿)O¿)P¿)ã¿)ë¿)ﬁ¿)Í¿*.¿*Y¿*Z¿*°¿*Í¿+8¿+U¿+s¿+µ¿+‚¿+Ú¿,(¿,I¿,\¿,f¿,Ñ¿,î¿, ¿,›¿,Á¿,˙¿,˛¿,ˇ¿-O¿-[¿-a¿-°¿-ß¿-Ì¿.*¿.J¿.K¿.q¿.r¿.®¿.Æ¿.˛¿/N¿/ê¿/ñ¿/‰¿0¿0!¿01¿0M¿0Ö¿0≈¿0Ú¿1¿11¿1h¿1u¿1Å¿1â¿1ä¿1π¿2¿2X¿2p¿2¶¿2Ω¿2“¿2⁄¿2€¿3¿31¿3¨¿4¿4>¿4ë¿4ﬁ¿5-¿5U¿5¿¿5Ÿ¿5¿5˙¿5˚¿62¿6x¿6≥¿6ƒ¿6È¿6˙¿7¿7¿7¿7[¿7Œ¿80¿8F¿8G¿8m¿8•¿8ˆ¿9¿9x¿9Ö¿9≤¿9‰¿9ˆ¿:-¿::¿:g¿:≥¿:“¿;	¿;¿;"¿;*¿;+¿;Q¿;â¿;Ì¿<P¿<}¿<Ø¿<¡¿<¯¿=¿=t¿=Ä¿=à¿=â¿=Û¿>A¿>v¿>”¿?4¿?c¿?d¿?ö¿?´¿?“¿?˝¿@-¿@=¿@r¿@}¿@®¿A¿A8¿Am¿Ax¿AΩ¿A‰¿B ¿B5¿B@¿BS¿B◊¿C:¿CE¿CO¿CY¿Cl¿Cp¿Cq¿C¬¿CÔ¿Cı¿DF¿Dë¿D⁄¿D‡¿E+¿Ed¿E¥¿F¿F¿F'¿FO¿Fo¿F¿Fú¿FØ¿Fπ¿F“¿F÷¿F◊¿G¿G¿GZ¿Gz¿G†¿Gπ¿G∫¿H¿H¿HS¿HY¿Hè¿H∂¿H∑¿Hı¿H˚¿IG¿I}¿IÉ¿I¡¿I˜¿J>¿JO¿Jt¿Jë¿J≠¿J¡¿K¿KV¿Kã¿KÀ¿K˚¿L¿L0¿L6¿L]¿Là¿L∞¿L∂¿LÎ¿M*¿MY¿Mt¿Må¿Mí¿M·¿N*¿N]¿NÇ¿N§¿N™¿NÆ¿NØ¿NÛ¿N˘¿OI¿Ot¿Oz¿O∏¿O˛¿P¿P-¿P?¿P[¿Pn¿P™¿PÆ¿PØ¿PÔ¿Pı¿QF¿Qí¿Qﬂ¿R¿R¿RR¿Rp¿RÜ¿Rñ¿R≥¿R∆¿R–¿R„¿RÁ¿S¿S¿S'¿S(¿Sz¿S«¿SÙ¿Sı¿T8¿T>¿T¿T•¿T≤¿T“¿TÚ¿UW¿U]¿Uw¿U{¿Uò¿Uô¿U‹¿V ¿Vf¿V¨¿V„¿V¿W¿W¿WY¿Wö¿Wæ¿Wƒ¿X¿XG¿XÜ¿XÀ¿Xˇ¿Y.¿Yk¿Yê¿YÀ¿Yﬁ¿Y‰¿Z¿Z*¿Ze¿Zà¿Z£¿ZÊ¿Z¸¿[¿[
¿[6¿[G¿[K¿[L¿[ù¿[Ó¿\4¿\:¿\N¿\T¿\•¿\Û¿]@¿]¿]Ö¿]’¿^
¿^¿^`¿^©¿^˘¿_F¿_ì¿_‡¿`¿` ¿`a¿`Ø¿`Ú¿`¯¿a¿a¿a^¿a®¿a˜¿b6¿bs¿bƒ¿b‡¿bÊ¿c¿c^¿cy¿c†¿c∏¿c˚¿d	¿d¿d4¿dO¿dk¿d∫¿e¿e+¿eL¿eT¿eb¿eh¿eç¿e¨¿eπ¿e‘¿eÔ¿f¿f4¿f~¿fä¿f°¿fØ¿f›¿g¿g¿g¿g¿g¿ge¿gw¿g}¿g¡¿h¿ha¿hí¿hò¿h∆¿h”¿hÙ¿i¿i4¿iU¿iÉ¿i¨¿iÃ¿iŸ¿j¿j¿j.¿j2¿j3¿ju¿j¬¿k¿k¿kP¿kV¿kÑ¿kµ¿kÃ¿kÈ¿kÌ¿kÓ¿l¿l5¿lU¿lá¿lç¿lë¿lí¿l∏¿l›¿lÎ¿lÒ¿m=¿mi¿m†¿m“¿n
¿n¿n¿n¿nR¿ní¿n∂¿n∫¿nª¿o¿o)¿o-¿o.¿oz¿oÄ¿oÕ¿oÛ¿o˘¿p=¿p^¿p{¿pë¿p∂¿p›¿q¿q"¿q2¿qX¿qk¿qu¿qü¿q£¿q§¿q—¿qÒ¿r¿rE¿ri¿rî¿r¿¿r–¿rÙ¿s¿sN¿so¿sé¿s«¿sœ¿s‚¿sÏ¿sˆ¿t¿t/¿tH¿t{¿tÅ¿të¿t«¿tÏ¿u¿u$¿u.¿uH¿u^¿ub¿uc¿uî¿uö¿uÈ¿v8¿và¿v∂¿vº¿w
¿wZ¿w´¿w˜¿x;¿xã¿x∆¿xÃ¿y¿yd¿y¨¿y≤¿z ¿zO¿zú¿z…¿zˆ¿{@¿{]¿{î¿{«¿{Ÿ¿|¿|Z¿|d¿|y¿|Ö¿|¶¿|æ¿|È¿|Ú¿|¯¿}#¿}D¿}e¿}≥¿}Õ¿~-¿~a¿~•¿~∆¿~Ú¿¿¿¿\¿•¿Ä¿Ä¶¿Ä ¿ÄË¿Å<¿Åç¿Å¿¿Å‰¿ÅÛ¿Ç ¿Ç
¿Ç.¿Ç7¿Ç?¿Çc¿Çá¿Çˇ¿Éa¿Éq¿É†¿É≥¿ÉΩ¿Éæ¿Éˆ¿Ñ¿ÑV¿Ñó¿Ñ∆¿Ñˆ¿ÖB¿Öe¿Ö¿Ö∑¿Öﬁ¿Ü¿Ü¿Ü&¿Ü'¿ÜZ¿Üà¿Ü¬¿Ü ¿ÜÀ¿á¿á*¿á2¿á@¿áF¿áf¿á¥¿à¿àQ¿àÉ¿àµ¿àª¿àÂ¿â	¿â4¿âD¿âh¿âá¿âÛ¿â˚¿ä¿ä¿ä1¿äC¿äi¿ä~¿ää¿äñ¿äØ¿ä√¿äÔ¿ã¿ã¿ã/¿ãd¿ãl¿ã~¿ã•¿ã∫¿ã∆¿ãÃ¿ã˘¿å	¿å-¿åc¿åÑ¿åó¿å°¿å´¿å¬¿å‰¿åˆ¿ç ¿ç5¿çA¿çZ¿çç¿çì¿ç£¿çŸ¿ç˛¿é#¿é6¿é@¿éZ¿ép¿éq¿é®¿éÃ¿é“¿é÷¿é◊¿è#¿èl¿èπ¿ê¿êV¿êÉ¿êê¿ê¨¿ê≠¿ê˙¿ë)¿ë/¿ëw¿ë∆¿í¿í¿í^¿í≠¿í‹¿í‚¿ì2¿ìx¿ì∂¿ì⁄¿ìÁ¿î
¿î¿îJ¿îå¿îí¿î·¿ï,¿ïw¿ï∞¿ï∂¿ïı¿ñ
¿ñ¿ña¿ñ∞¿ñ‹¿ñÈ¿ó¿ó¿óD¿óJ¿óô¿ó‰¿ò/¿òh¿òn¿òæ¿ô¿ô]¿ôÆ¿ôø¿ô≈¿ö¿ö_¿ö§¿öÙ¿õ=¿õu¿õÇ¿õö¿õõ¿õ‚¿ú2¿ú¿úÀ¿úÁ¿úÌ¿ù>¿ùå¿ù›¿û&¿û,¿û}¿ûÕ¿û”¿ü	¿ü¿üg¿üä¿ü≠¿üÿ¿†¿†¿†]¿†m¿†ô¿†ü¿†£¿†§¿†≤¿†≥¿†ˆ¿†¸¿°I¿°V¿°é¿°≥¿°¥¿°Á¿°Ì¿¢:¿¢F¿¢à¿¢≤¿¢≥¿¢˘¿¢ˇ¿£P¿£ô¿£Í¿£¸¿§¿§R¿§®¿§Ó¿•B¿•l¿•r¿•√¿•‘¿•⁄¿¶2¿¶Y¿¶Z¿¶ß¿¶‡¿¶Ê¿ß6¿ßS¿ßº¿ßΩ¿ß¯¿ß˛¿®L¿®õ¿®≈¿®À¿©¿©j¿©w¿©£¿©§¿©≈¿©∆¿™¿™¿™Z¿™`¿™´¿™˙¿´K¿´ö¿´Â¿´ı¿´˚¿¨H¿¨r¿¨x¿¨À¿≠¿≠i¿≠ª¿≠Œ¿Æ%¿Æs¿Æ≈¿Æ‰¿Ø
¿Ø¿Ø¿ØT¿ØZ¿Ø™¿Ø˜¿∞D¿∞ì¿∞Ê¿±4¿±z¿±∆¿≤¿≤I¿≤O¿≤ú¿≤Í¿≥4¿≥Ä¿≥œ¿¥¿¥=¿¥C¿¥í¿¥ﬂ¿µ+¿µ8¿µE¿µc¿µ∆¿µÂ¿µÈ¿µÍ¿µ˜¿∂¿∂+¿∂E¿∂ç¿∂‘¿∂ı¿∂¸¿∑¿∑#¿∑$¿∑v¿∑w¿∑À¿∑—¿∏"¿∏u¿∏Ö¿∏ã¿∏∏¿∏€¿∏˜¿π¿π*¿π=¿πG¿πZ¿π^¿π_¿π∞¿πÚ¿π¯¿∫H¿∫ò¿∫•¿∫´¿∫Á¿ª.¿ªu¿ªº¿º¿º6¿º<¿ºÅ¿º«¿Ω ¿Ω*¿ΩG¿Ωn¿Ω|¿ΩÇ¿Ω™¿ΩÃ¿Ω¸¿æ,¿æ<¿æD¿æE¿æú¿æÕ¿æ›¿æÂ¿æÎ¿ø(¿øA¿ø|¿øÇ¿øÜ¿øá¿ø»¿¿¿¿¿¿c¿¿ã¿¿ë¿¿–¿¡¿¡+¿¡â¿¡ß¿¡´¿¡¨¿¡Œ¿¡ˆ¿¬¿¬
¿¬B¿¬a¿¬ä¿¬∞¿¬‘¿¬ˆ¿¬˛¿√¿√=¿√]¿√c¿√≤¿√˝¿ƒI¿ƒ†¿ƒÎ¿≈ ¿≈;¿≈f¿≈î¿≈ø¿≈◊¿∆¿∆=¿∆U¿∆b¿∆ç¿∆ì¿∆ó¿∆ò¿∆◊¿∆›¿«.¿«z¿««¿» ¿»¿»<¿»B¿»é¿»›¿…"¿…n¿…©¿…∆¿…‹¿…Ï¿ ¿ ¿ %¿ 8¿ <¿ W¿ X¿ ó¿ ù¿ Ó¿À:¿Àá¿À¿¿À∆¿À¸¿Ã)¿Ã?¿ÃO¿Ã{¿Ãé¿Ãò¿Ã´¿ÃØ¿Ã€¿Ã‹¿Õ#¿Õ)¿Õn¿Õª¿Œ¿ŒZ¿Œr¿Œx¿Œ√¿Œˇ¿œ¿œE¿œí¿œ‘¿œ⁄¿œÍ¿œ¿–>¿–ê¿–†¿–∫¿–◊¿—¿—$¿—2¿—8¿—P¿—ñ¿—∏¿—Ï¿—˛¿“,¿“s¿“}¿“í¿“û¿“·¿”¿”H¿”c¿”ê¿”∂¿”æ¿”Á¿‘¿‘¿‘&¿‘T¿‘±¿‘ª¿‘–¿‘‹¿’&¿’p¿’¥¿’Ú¿’˚¿÷8¿÷w¿÷í¿÷∏¿÷¿¿÷∆¿÷ ¿÷À¿◊¿◊%¿◊+¿◊|¿◊–¿ÿ¿ÿj¿ÿ≥¿ÿπ¿Ÿ
¿ŸZ¿Ÿ}¿ŸÉ¿Ÿì¿Ÿô¿ŸÈ¿⁄(¿⁄R¿⁄o¿⁄•¿⁄€¿⁄È¿⁄Ô¿€¿€]¿€¿€≥¿€ˆ¿‹,¿‹V¿‹q¿‹û¿‹ƒ¿‹Ã¿‹Ÿ¿‹Ò¿‹˜¿‹˚¿‹¸¿›L¿›ö¿›Î¿ﬁ4¿ﬁm¿ﬁê¿ﬁ¶¿ﬁ≈¿ﬁ˝¿ﬂ%¿ﬂP¿ﬂq¿ﬂî¿ﬂ∏¿ﬂÁ¿‡>¿‡O¿‡Y¿‡ä¿‡Ê¿‡˜¿·¿·"¿·*¿·D¿·J¿·N¿·O¿·ö¿·†¿·Ó¿‚¿‚¿‚`¿‚ò¿‚∏¿‚Œ¿‚Û¿„¿„8¿„`¿„Ñ¿„ù¿„∆¿„ ¿„À¿‰¿‰Q¿‰c¿‰i¿‰Æ¿‰ﬂ¿‰¸¿Â¿Â2¿ÂW¿Â}¿Âú¿ÂÔ¿Ê¿Ê5¿ÊK¿ÊO¿ÊP¿Êì¿Ê∞¿Ê¿¿Ê‚¿Á¿Á`¿Á|¿ÁÃ¿ÁÈ¿Áˆ¿Ë¿Ë]¿Ëx¿ËÖ¿Ëë¿Ëô¿Ë¨¿Ë∂¿È¿ÈP¿Èû¿ÈÌ¿Í9¿ÍÜ¿Íœ¿ÍÁ¿Íı¿Í˚¿Î1¿Îd¿Îv¿Î®¿Îˆ¿Ï ¿Ï¿Ï!¿ÏB¿ÏZ¿ÏÖ¿Ïé¿Ïî¿Ï§¿ÏÕ¿ÏÛ¿Ì'¿ÌO¿ÌÖ¿Ì¶¿ÌÃ¿Ì⁄¿ÌË¿Ó
¿ÓF¿Ób¿Ó≤¿Ó”¿Ó‰¿Ô¿Ô-¿Ô>¿Ô^¿Ôî¿Ô•¿Ô≈¿¿j¿Æ¿ø¿ÿ¿Ò,¿Ò=¿ÒM¿ÒY¿Òc¿Òõ¿Ò≥¿Ú¿Ú¿Ú&¿ÚB¿Úì¿Ú«¿Ú‘¿Ú¿Û>¿Ûã¿ÛÀ¿Ûÿ¿ÛÌ¿Ù=¿ÙJ¿ÙV¿Ù^¿Ùq¿Ù{¿Ù£¿Ù≥¿Ù÷¿ı¿ı&¿ıf¿ıy¿ıÉ¿ıú¿ı≈¿ıÚ¿ı¸¿ˆ¿ˆs¿ˆÀ¿ˆ‰¿˜¿˜¿˜%¿˜H¿˜x¿˜ú¿˜Ø¿˜π¿˜Ô¿¯¿¯¿¯¿¯¿¯j¿¯¥¿¯∫¿˘
¿˘#¿˘;¿˘<¿˘w¿˘µ¿˘∂¿˙¿˙¿˙S¿˙ò¿˙Ê¿˚3¿˚Y¿˚_¿˚≠¿˚˝¿¸K¿¸b¿¸h¿¸¥¿¸˛¿˝M¿˝¿˝∏¿˝π¿˛	¿˛$¿˛*¿˛z¿˛√¿˛…¿ˇ¿ˇ_¿ˇ´¿ˇÙ¿ @¿ y¿ «¿ È¿ Ì¿ Ó¿5¿;¿ã¿◊¿(¿A¿G¿é¿€¿'¿w¿«¿‰¿¿9¿J¿N¿O¿è¿Ã¿“¿¿C¿I¿ñ¿⁄¿˙¿¿¿a¿∞¿˛¿M¿_¿í¿«¿›¿˘¿/¿U¿r¿z¿Ä¿ª¿	¿	6¿	â¿	è¿	¨¿	Ã¿	“¿
¿
H¿
ï¿
õ¿
±¿
µ¿
∂¿
∑¿
˛¿@¿Å¿á¿Ω¿√¿	¿0¿6¿Ü¿”¿#¿]¿©¿™¿Ò¿@¿å¿ÿ¿)¿u¿¿¿Õ¿”¿¿k¿∑¿“¿ÿ¿)¿w¿≈¿¿d¿©¿Ø¿ø¿≈¿¿M¿ì¿î¿£¿§¿Î¿¿¿]¿t¿z¿√¿Á¿¿¿?¿i¿â¿¨¿ÿ¿¿'¿+¿,¿}¿É¿Œ¿Í¿¿9¿Ñ¿”¿¿k¿≤¿∏¿Œ¿‘¿$¿7¿=¿K¿í¿§¿Ò¿)¿:¿[¿Å¿†¿™¿∞¿Ã¿Á¿Ò¿˘¿¿¿"¿i¿ä¿é¿è¿‰¿Í¿5¿p¿v¿±¿∑¿¿>¿g¿u¿{¿º¿È¿
¿<¿B¿F¿G¿u¿Æ¿Ø¿Ê¿¿W¿ù¿´¿ -¿ °¿ ™¿ ∞¿ €¿ ﬂ¿ ‡¿! ¿!J¿!e¿!f¿!ã¿!®¿!©¿!‘¿!⁄¿"(¿"l¿"ì¿"ô¿"Á¿"Û¿#¿#2¿#K¿#Q¿#b¿#f¿#g¿#∞¿#∂¿$¿$¿$T¿$†¿$±¿$À¿$Ì¿%¿%-¿%K¿%S¿%W¿%X¿%†¿%¶¿%Ì¿&>¿&j¿&é¿&´¿&‚¿'¿'E¿'S¿'Y¿'Z¿'•¿'Ô¿(?¿(ã¿(å¿)¿)¿))¿)u¿)∏¿)‚¿)„¿*O¿*m¿*n¿*Ω¿+¿+W¿+u¿+‹¿,¿,#¿,+¿,T¿,¶¿,˜¿-&¿-P¿-x¿-Ä¿-Å¿-ú¿-Ú¿.7¿.ä¿.‹¿/%¿/5¿/=¿/C¿/ä¿/€¿0¿0n¿0Ω¿1¿1¿1j¿1ú¿1¢¿1…¿1Ú¿2¿2n¿2ü¿2≈¿2Õ¿2”¿2◊¿2ÿ¿3¿31¿3Ñ¿3ú¿3Í¿4<¿4J¿4P¿4i¿4£¿4©¿4È¿52¿5v¿5}¿5ñ¿5∫¿5¿¿5˜¿6`¿6ö¿6⁄¿6€¿6Ù¿72¿78¿7a¿7•¿7·¿8$¿8:¿8\¿8c¿8|¿8†¿8¶¿8Û¿9]¿9a¿9b¿9Æ¿9‹¿9ˇ¿:#¿:*¿:é¿:è¿:“¿;1¿;å¿;Ê¿<J¿<£¿<¸¿=X¿=Î¿>O¿>…¿?¿?J¿?g¿?ª¿?Ì¿@¿@(¿@e¿@ä¿@¨¿@ÿ¿A¿A4¿A>¿AF¿A§¿A»¿Aﬂ¿B¿B¿Bg¿B∂¿B‘¿C	¿CB¿CS¿C}¿Cá¿Cè¿C ¿D¿DK¿Dº¿E¿ET¿Eo¿E∂¿Eƒ¿E–¿F¿F¿F¿F'¿F(¿Fp¿Fq¿Fé¿F›¿G ¿G¿G9¿G´¿G ¿H&¿Hz¿Hú¿HÊ¿I¿II¿Ió¿I£¿Iæ¿I ¿I”¿J+¿JS¿J®¿K¿K)¿K4¿K<¿KB¿KC¿Kf¿Kg¿Kå¿KØ¿K◊¿K˜¿L)¿Ln¿L¥¿L€¿L¿M;¿MD¿Mn¿Mö¿M“¿N¿N&¿N3¿Nx¿Næ¿NÎ¿O¿O/¿OY¿Oë¿O¶¿OÒ¿O˙¿P!¿P¿P¢¿P™¿P∞¿P’¿PË¿PÏ¿PÌ¿Q[¿Q∫¿QÔ¿R3¿R]¿Ro¿Rw¿RÃ¿R¿R¯¿S¿SN¿Sõ¿SÂ¿T¿T8¿TB¿TJ¿TP¿Tô¿T∫¿T¿¿Tƒ¿T≈¿T˛¿U¿UT¿Uù¿UØ¿Uµ¿UÓ¿V2¿Vr¿Vé¿Ví¿Vì¿Vœ¿V’¿W¿WU¿Wü¿WÔ¿X¿X ¿Xl¿XÑ¿Xä¿X◊¿Y"¿YS¿Yq¿Yâ¿Y¨¿Y“¿Yÿ¿Y¯¿Zq¿Z‘¿Zÿ¿ZŸ¿ZÂ¿ZÊ¿[7¿[C¿[å¿[ç¿[é¿[ü¿[†¿[Ó¿\6¿\N¿\S¿\í¿\ﬁ¿\Û¿]C¿]í¿]‡¿^¿^H¿^O¿^T¿^•¿^Ÿ¿^⁄¿^€¿_¿_¿_-¿_Y¿_r¿_é¿_≠¿_ƒ¿_Ã¿`¿`'¿`N¿`é¿`∞¿`∆¿`–¿a ¿a¿a"¿aE¿aM¿af¿aà¿aê¿aπ¿aÌ¿aı¿b¿b+¿b3¿b9¿bL¿bP¿bQ¿b]¿b∏¿bπ¿bˆ¿c>¿ce¿cq¿câ¿c®¿cÀ¿d¿d¿dK¿ds¿d°¿dø¿dÀ¿dœ¿d–¿e¿eC¿eI¿eî¿e–¿e‹¿e˜¿f¿fG¿fN¿fπ¿fΩ¿fæ¿fÀ¿f◊¿g¿gG¿g¥¿h1¿hŸ¿iA¿i†¿j
¿jt¿jï¿j ¿k¿kr¿kz¿l¿l¿l¿l¿l[¿l\¿l≠¿læ¿lƒ¿m¿mS¿mY¿m©¿mË¿n5¿nÄ¿n≈¿nÂ¿nÎ¿o6¿ox¿o~¿oé¿oî¿o‡¿p¿p/¿pM¿p]¿pÑ¿p£¿p™¿pÃ¿pË¿q¿q$¿q@¿qV¿q_¿qe¿qi¿qj¿qª¿q—¿q◊¿r'¿rv¿r§¿r™¿r˙¿sG¿s∏¿s¿sÙ¿sˆ¿s˜¿t,¿t0¿tq¿t±¿tµ¿t˙¿u$¿uw¿u»¿uÌ¿uÛ¿v"¿v(¿vC¿vs¿vÉ¿v§¿v‹¿vÙ¿wE¿wx¿wÖ¿w°¿wÌ¿x8¿xä¿x€¿xË¿y¿y)¿yy¿yì¿y ¿y◊¿y¿z¿zk¿zâ¿z©¿z‡¿zÌ¿z˘¿{¿{¿{¿{/¿{3¿{4¿{I¿{q¿{ì¿{≥¿{Õ¿{Á¿{Ì¿|¿|¿|6¿|<¿|@¿|A¿|M¿|r¿|ã¿|¶¿|™¿|´¿|∑¿|…¿|›¿|Û¿|˜¿|¯¿}¿}¿}9¿}V¿}\¿}`¿}a¿}m¿}°¿}ª¿}”¿}Ÿ¿}›¿}ﬁ¿}Í¿~¿~â¿~ç¿~è¿~ê¿~Õ¿~—¿¿^¿ö¿∆¿Ä¿ÄL¿Äj¿Äù¿Ä∑¿Ä∏¿Ä⁄¿ÄÊ¿Ä¯¿Åa¿Å∆¿Å⁄¿Åﬁ¿Å‡¿Å·¿Ç¿Ç#¿Çt¿Çä¿Çé¿Ç·¿Ç˜¿Ç˚¿ÉJ¿Éñ¿ÉÀ¿Ñ¿Ñ¿Ñp¿Ñ¬¿Ñ”¿Ñ◊¿Ö=¿ÖA¿ÖO¿ÖS¿Öú¿ÖΩ¿ÜL¿Üù¿ÜÁ¿á¿áU¿áÖ¿á¬¿á»¿á‰¿áË¿à5¿à¿à±¿àÂ¿â¿âN¿âT¿âp¿ât¿âu¿âå¿â™¿âœ¿â–¿ä!¿äF¿äL¿ä{¿äÅ¿äú¿äÃ¿ä‹¿ä˝¿ã5¿ãM¿ãû¿ã—¿ãﬁ¿ã˙¿åF¿åë¿å„¿ç4¿çA¿çZ¿çÇ¿ç“¿çÏ¿é#¿é0¿éI¿éq¿éƒ¿é‚¿è¿è9¿èF¿èR¿èZ¿èm¿èw¿èà¿èå¿èç¿èß¿è¿¿ê¿êU¿êÜ¿êª¿ê—¿êÓ¿ë¿ë2¿ëc¿ëÑ¿ë‰¿í¿í"¿í=¿íY¿íf¿íâ¿í´¿íˆ¿ì<¿ìé¿ìø¿î¿î6¿îg¿îî¿î∞¿îø¿ï	¿ï8¿ï{¿ï¨¿ï€¿ñY¿ñœ¿ó¿óG¿ó}¿óÖ¿óã¿óè¿óê¿óﬂ¿óÂ¿ò5¿òg¿òû¿òÎ¿ôj¿ôπ¿ô€¿ô¸¿ö¿öB¿öF¿öG¿öâ¿öß¿öÕ¿ö—¿ö“¿õ¿õG¿õc¿õg¿õh¿õó¿õÁ¿ú0¿út¿úí¿ú≈¿úÈ¿ù¿ù'¿ù£¿ùÛ¿ù˘¿û(¿ûK¿û¿ûå¿ü ¿üT¿üZ¿üÜ¿üÆ¿üƒ¿ü»¿ü…¿üˆ¿ü¸¿†6¿†W¿†x¿†é¿†í¿†ì¿†Ÿ¿†ﬂ¿°¿°*¿°N¿°j¿°º¿°˜¿¢%¿¢O¿¢g¿¢{¿¢Å¿¢ô¿¢∞¿¢≈¿¢…¿¢ ¿£¿£¿£i¿£∫¿£Ô¿§$¿§?¿§Z¿§v¿§ò¿§Ë¿•¿•*¿•0¿•Q¿•Ä¿•ó¿•õ¿•ú¿•®¿•Õ¿•Ê¿¶
¿¶&¿¶A¿¶ì¿¶æ¿¶ƒ¿¶»¿¶…¿¶’¿¶Á¿¶˚¿ß¿ß;¿ßQ¿ß£¿ßŒ¿ß‘¿ßÿ¿ßŸ¿ßÂ¿® ¿®$¿®@¿®[¿®≠¿®ÿ¿®ﬁ¿®‚¿®„¿®Ô¿©#¿©G¿©c¿©y¿©À¿©ˆ¿©¸¿™ ¿™¿™*¿™V¿™W¿™¿™©¿™™¿™Ì¿´¿´;¿´ã¿´∑¿´ª¿´º¿´˙¿¨%¿¨G¿¨ó¿¨ø¿¨√¿¨ƒ¿¨–¿≠¿≠B¿≠`¿≠Ö¿≠ö¿≠Ø¿≠Ù¿Æ¿Æ'¿Æ1¿ÆE¿Æô¿Æ«¿Æœ¿Æ’¿ÆÍ¿ÆÓ¿Æ¿ÆÒ¿ØA¿ØZ¿Ø^¿Ø´¿Ø˙¿∞¿∞Z¿∞[¿∞õ¿∞°¿∞‚¿±%¿±u¿±«¿±Õ¿≤¿≤0¿≤6¿≤Ü¿≤•¿≤≤¿≤√¿≤„¿≤˙¿≤˛¿≤ˇ¿≥7¿≥]¿≥i¿≥∞¿¥¿¥[¿¥b¿¥ï¿¥£¿¥©¿¥›¿µ(¿µ_¿µñ¿µ§¿µ—¿∂6¿∂?¿∂U¿∂u¿∂}¿∂Ö¿∂â¿∂ä¿∂ñ¿∂ª¿∂‘¿∑!¿∑o¿∑ø¿∑ı¿∏G¿∏K¿∏L¿∏X¿∏j¿∏†¿∏ı¿π	¿π¿π¿π¿π]¿πi¿πm¿πê¿π·¿∫ ¿∫R¿∫û¿∫¬¿∫Ÿ¿ª¿ª¿ª¿ªT¿ªñ¿ªó¿ªﬁ¿º/¿º5¿ºE¿ºK¿ºô¿º◊¿Ω¿Ω¿ΩT¿Ωï¿Ω—¿Ω”¿Ω‘¿æ!¿æT¿æX¿æ°¿æ∆¿ø¿ø%¿øZ¿øÄ¿øÜ¿øá¿øÕ¿øŒ¿ø⁄¿¿¿¿E¿¿I¿¿J¿¿V¿¿∏¿¿∫¿¿ª¿¡	¿¡Q¿¡U¿¡¶¿¡˜¿¬%¿¬o¿¬ë¿¬≤¿¬Á¿√¿√¿√e¿√~¿√∞¿√±¿√‹¿√›¿ƒ¿ƒ¿ƒ!¿ƒ'¿ƒv¿ƒ™¿ƒı¿≈%¿≈p¿≈†¿≈π¿≈Â¿∆¿∆6¿∆_¿∆é¿∆î¿∆ï¿∆„¿«'¿«M¿«N¿«ô¿«∞¿«∂¿»¿»>¿»W¿»X¿»Å¿»á¿»–¿…!¿…Z¿…`¿…™¿…Ì¿…˘¿ ;¿ <¿ å¿ £¿ ‘¿ ’¿ ·¿ÀF¿ÀG¿Àn¿Ào¿À±¿À∑¿À◊¿Ã¿Ã"¿ÃM¿Ãq¿Ãu¿Ãv¿Ãπ¿Ãø¿Õ¿ÕE¿Õa¿Õg¿Õ∞¿ÕÌ¿Œ¿Œ;¿Œ?¿ŒA¿ŒB¿Œì¿Œ´¿ŒØ¿Œ˛¿œ¿œS¿œn¿œà¿œΩ¿œ√¿œƒ¿œ–¿œÈ¿–¿–+¿–T¿–}¿–¨¿–≥¿–ˆ¿—#¿—L¿—t¿—ú¿—ù¿— ¿—Ú¿“¿“$¿“V¿“†¿““¿” ¿”¿”'¿”(¿”d¿”™¿”—¿”Ò¿‘+¿‘]¿‘¿‘ô¿‘Ω¿‘∆¿‘Ã¿’¿’;¿’Ö¿’Ü¿’‘¿÷¿÷p¿÷º¿÷ ¿÷˝¿◊¿◊¿◊¿◊$¿◊R¿◊S¿◊Æ¿◊Ø¿◊ª¿◊’¿ÿ¿ÿ¿ÿ¿ÿ¿ÿW¿ÿx¿ÿ|¿ÿ~¿ÿ¿ÿ∆¿Ÿ¿Ÿ¿Ÿk¿Ÿ•¿Ÿ¿⁄¿⁄+¿⁄E¿⁄|¿⁄}¿⁄â¿⁄Ã¿€¿€¿€	¿€¿€.¿€Z¿€Ç¿€´¿€‘¿‹¿‹
¿‹V¿‹s¿‹w¿‹x¿‹Ñ¿‹´¿‹¨¿‹∏¿‹“¿‹ﬁ¿‹Î¿›¿›c¿›Ç¿›â¿›ç¿›è¿›ê¿››¿ﬁ¿ﬁ¿ﬁM¿ﬁõ¿ﬁΩ¿ﬁ¡¿ﬂ¿ﬂZ¿ﬂ®¿ﬂ˘¿‡E¿‡Ä¿‡Ñ¿‡—¿·¿·e¿·z¿·≈¿·Ê¿‚	¿‚-¿‚Y¿‚§¿‚æ¿‚Û¿„$¿„O¿„i¿„ß¿„»¿„Ù¿„˙¿„˛¿„ˇ¿‰¿‰@¿‰b¿‰É¿‰Ñ¿‰À¿‰Ã¿ÂY¿Â¨¿Âæ¿Â›¿Â¯¿Ê%¿Êu¿Êƒ¿Á¿Á#¿ÁZ¿Áu¿Áπ¿Á‡¿ËL¿ËÇ¿Ë∞¿ËÊ¿È"¿Èo¿ÈÜ¿È‚¿Í ¿ÍV¿Íd¿Í∆¿Í‰¿Î¿Î¿ÎO¿Î[¿Îè¿Î˘¿Ï&¿ÏN¿Ïc¿Ï®¿Ï∂¿Ï¬¿ÏÚ¿ÌX¿ÌÅ¿Ì•¿Ì∫¿Ì˜¿Ó¿Ó¿ÓN¿Óç¿Óô¿Ó£¿Ó´¿ÓÚ¿Ô'¿Ôi¿Ô´¿Ôµ¿Ô‹¿ÔÈ¿¿¿k¿£¿‘¿Ò¿ÒC¿Òq¿Ò}¿Òá¿Ò∑¿Ò—¿ÒŸ¿Òﬂ¿Ò„¿Ò‰¿Ú?¿Ú@¿ÚL¿Úe¿Úà¿Úß¿Ú–¿Ú˘¿Û(¿Û/¿Û^¿Û™¿Ù¿ÙL¿ÙR¿Ùj¿Ùâ¿Ù™¿Ù≤¿ÙÃ¿ÙÌ¿ı
¿ı ¿ı:¿ıC¿ıî¿ı⁄¿ˆ¿ˆ`¿ˆÆ¿ˆ‰¿˜
¿˜=¿˜á¿˜µ¿˜¡¿˜À¿¯¿¯-¿¯i¿¯ù¿¯Î¿˘:¿˘â¿˘—¿˘Î¿˙¿˙¿˙$¿˙2¿˙8¿˙9¿˙}¿˙µ¿˙Â¿˙Ï¿˙Ì¿˚/¿˚m¿˚s¿˚t¿˚æ¿˚Ô¿¸¿¸>¿¸?¿¸s¿¸ô¿¸∫¿¸Í¿¸¿¸Ò¿˝¿˝1¿˝<¿˝[¿˝Ñ¿˝√¿˝˚¿˛3¿˛V¿˛w¿˛¿˛Ö¿˛¡¿˛Ÿ¿˛˝¿ˇ¿ˇ1¿ˇI¿ˇP¿ˇü¿ˇ’¿ !¿ m¿ °¿ ≈¿ ˆ¿>¿j¿t¿|¿√¿„¿"¿Y¿{¿ï¿æ¿«¿ı¿˚¿¸¿"¿^¿k¿∫¿¿¿÷¿¿Y¿´¿˝¿-¿Z¿l¿ë¿…¿Ô¿¿S¿[¿a¿Ç¿ú¿†¿°¿”¿ˇ¿'¿.¿N¿‡¿Ó¿Ú¿Û¿ˇ¿&¿O¿S¿T¿`¿£¿È¿	¿	-¿	?¿	G¿	h¿	ê¿	ñ¿	ö¿	õ¿	ß¿	’¿	Ó¿
<¿
Ö¿
†¿
¡¿
¿
ˆ¿
˙¿
˚¿¿<¿\¿|¿Ç¿Ü¿á¿£¿§¿∞¿ ¿‚¿Ê¿Á¿%¿'¿(¿p¿t¿¬¿˙¿¿¿^¿d¿≥¿ ¿Q¿°¿∏¿‰¿¿7¿>¿ã¿è¿ê¿®¿ƒ¿ﬂ¿Ú¿Û¿¿E¿F¿¿¥¿µ¿Í¿¿¿>¿X¿Y¿∞¿∂¿∆¿Ã¿1¿ô¿	¿+¿,¿Q¿É¿≠¿Ô¿#¿X¿©¿÷¿¿r¿Å¿Ô¿˜¿K¿™¿¿V¿\¿]¿ç¿¿$¿c¿û¿∫¿’¿›¿„¿Á¿Ë¿¿#¿r¿â¿é¿›¿'¿j¿k¿ô¿ÿ¿¿¿	¿7¿O¿U¿ì¿ó¿ò¿Ë¿7¿t¿y¿≥¿‰¿ˇ¿¿.¿M¿S¿¿¥¿·¿!¿X¿u¿{¿Ø¿Î¿Ô¿¿#¿8¿H¿N¿c¿s¿y¿î¿ò¿ô¿Ï¿ 7¿ T¿ n¿ ü¿ £¿ §¿ Ô¿!9¿!R¿!X¿!¢¿!‰¿!Í¿!˙¿" ¿"O¿"y¿"ó¿"ô¿"ö¿"Ó¿"Ú¿#I¿#ô¿#¨¿#¿$;¿$^¿$Ü¿$ì¿$´¿$∫¿$·¿$Í¿$Ï    	Ä•Ä∫ÄºÄ–Ä”  Ä¸  Å&  ÅN  Åv  Åü  Å…  Åﬁ  ÅÙÇÉÉÉ>É^É`  ÉâÇiÖGÅ∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    ÖVlÖ∂:/// Called when the RenderObject is removed from the tree.  ÖìÖîÖ†Ö°Ö∆*ÖŸ   Ö∆Ö« á^¿ g˝äUÇ/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ä~Ä– ãã!~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].ã"ã(  ã8ã>  ãããR$ãg  ã{ÅAå≠Å/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ´€´È  ´˙¨  ¨¨#  ™4Åé™=    ¨/År≠#Ä“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ≠≠å¡Ç™éåÅ®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. é£é±  éπ#éø  é◊èoâ-è{  èòè¶  è≤#è∏  è€èÌ  è–ò†ÖzöÆÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. öƒö“   ûÇ¡ü~ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. ü©ü∑  ü√#ü…  üÏ&†  ü·†„Éó°ˇÅ/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. ¢
¢  ¢¢&   §~É©§É  §ì§°  §ß§Ø   ®+Ç©¿Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ©Ã©”  ©Æ©Ø≠•Äﬁ≠™    ÆáÇì∞£Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ∞∫∞œ   ±Ö≥+Å’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ≥≥	≥≥∂/Ç¶∏TÇ	/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ∏ŸÉª^Çi/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ªÂÇŒæcÇ\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ælæs   æ∑á˝¿ D[Öh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ De¿ Du  ¿ DÄ¿ Dô  ¿ D°¿ D©  ¿ D≤¿ Dπ   ¿ F∏Å!¿ GiÄç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ G|¿ Gå  ¿ Gó¿ Gù  ¿ GL¿ GM¿ G›äü¿ Oßáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ O¥¿ O∫  ¿ OÀ¿ O”  ¿ O⁄¿ O‡  ¿ OÈ¿ P  ¿ P!¿ P  ¿ P/¿ P?  ¿ P ¿ P$¿ P%¿ RÄÜ•¿ VÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ V¿ V  ¿ V*¿ V2  ¿ V9¿ V?  ¿ VF¿ VM  ¿ VW¿ Vp  ¿ Vz"¿ VÄ  ¿ Vû¿ VØ  ¿ Vé¿ Ví¿ Vì¿ Y)Üo¿ \ÖÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ \í¿ \ò  ¿ \©¿ \±  ¿ \∏¿ \æ  ¿ \≈¿ \À  ¿ \‘¿ \Ì  ¿ \˜"¿ \˝  ¿ ]¿ ]+  ¿ ]¿ ]¿ ]¿ _úÑL¿ b…Ç˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ bŸ¿ b·  ¿ bË¿ bı  ¿ c¿ c  ¿ c$¿ c7   ¿ cÏÖÓ¿ f¡Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ fœ¿ f’  ¿ fÊ¿ fÓ  ¿ fı¿ f˛  ¿ g¿ g!  ¿ g+¿ g<   ¿ iﬁÑ‚¿ m¶Éñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ m≤¿ m∫  ¿ m¡	¿ m∆  ¿ mÃ¿ mÂ  ¿ mÔ¿ m˛   ¿ nƒÄï¿ n◊   ¿ nƒ¿ n≈ ¿ o]êT¿ yTâ‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ ydÄ≠ ¿ z¿ zÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ z[¿ zhG/// Whether there is exactly one size possible given these constraints.   ¿ ztX¿ zø?/// Whether the constraint is expressed in a consistent manner.   ¿ z–Ñﬂ¿ Ñ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿   ¿ &  ¿ F*¿ ]  ¿ ;¿ y:¿ y;¿ ÅTÇ¿ ÅZ  ¿ ÅèÄØ¿ Å§¿ Å•¿ Å¶ ¿ Åß¿ Å∂  ¿ Åº¿ Å¬  ¿ Å⁄¿ Å”¿ Å‹¿ ÇB¿ ÇV  ¿ Çaf¿ ÇøG/// The callback that will be notified when the semantics tree updates.  ¿ ÇÃÄ£¿ Ç›   ¿ ÇÃ¿ ÇÕ ¿ És¿ [π¿ é#ä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ éRÅy ¿ è8¿ èEÄ€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ èL¿ èR  ¿ èi¿ èo  ¿ èã¿ èë  ¿ èß¿ è≠   ¿ èœÇç¿ íJÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ íaÄ’¿ ìÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ ì;Å¿ î9Ä÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ îOÄª¿ îÚÄà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ ñ‰¿ ñÚ  ¿ öÿ#¿ ö› ¿ öˆ¿ öˇ9¿ õ ¿ õ6¿ õ7¿ õ(¿ õ5¿ õ)¿ úX¿ ú] ¿ úq¿ úz#¿ ú ¿ úò¿ ß©0¿ ßÆ ¿ ß‘¿ ©‹N¿ ©ı ¿ ™(¿ ™)¿ ™¿ ™'¿ ™¿ ≠„8¿ ≠ˆ ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ¿ Ø7¿ Ø< ¿ ØO¿ ∫õ¿ ∫´  ¿ ª“$¿ ª÷ ¿ ªı¿ √&!¿ √+ ¿ √B¿ √KA¿ √c ¿ √ä¿ √ã¿ √|¿ √â¿ √}¿ À¢6¿ Àª ¿ À÷¿ À◊¿ À«¿ À’¿ À»¿ À‹¿ ÀÓ  ¿ À¸¿ Ã  ¿ ñtm¿ ñÀB/// The unique object managed by this pipeline that has no parent.   ¿ ñˇÄ¶¿ ó  ¿ ó¿ ó   ¿ õ=Å¿ ú/Ä‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ Æ Å¿ ØÄ⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ ∑ﬁÇ∫¿ ∫vÇk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ∫øÅ¿ ªéÄæ/// The number of clients registered to listen for semantics.
///
/// The number is increased whenever [ensureSemantics] is called and decreased
/// when [SemanticsHandle.dispose] is called.   ¿ ÃóZ¿ Ã¢    ¿ “„t¿ “Ï    ¿ ïÅa¿ ï◊Ä∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ ú¢âõ¿ ûÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ®ÅÃ¿ ®  ¿ ®1¿ ®?   ¿ ™.É±¿ ™”Äó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ ØYàÅ¿ ∞‘Åg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ª˚ÑY¿ ø´É}/// Opens a [SemanticsHandle] and calls [listener] whenever the semantics tree
/// generated from the render tree owned by this [PipelineOwner] updates.
///
/// Calling this method only ensures that this particular [PipelineOwner] will
/// generate a semantics tree. Consider calling
/// [SemanticsBinding.ensureSemantics] instead to turn on semantics globally
/// for the entire app.
///
/// The [PipelineOwner] updates the semantics tree only when there are clients
/// that wish to use the semantics tree. These clients express their interest
/// by holding [SemanticsHandle] objects that notify them whenever the
/// semantics tree updates.
///
/// Clients can close their [SemanticsHandle] by calling
/// [SemanticsHandle.dispose]. Once all the outstanding [SemanticsHandle]
/// objects for a given [PipelineOwner] are closed, the [PipelineOwner] stops
/// maintaining the semantics tree. ¿ øΩ¿ øÃ   ¿ ¿XÇ6¿ ¿]    ¿ ¬íÄê¿ ¬ó    ¿ √ëÜW¿ ≈êÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ …ÏÄ∫¿     ¿ …Ï¿ …Ì¿  ™Äﬁ¿  ª  ¿  œ&¿  Ï  ¿  ™¿  ´¿ Ãx¿ Ã   ¿ Ã0¿ Ã?  ¿ ÃE¿ ÃU   ¿ ÃıÇ¿ Œ
Å/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ Œ¿ Œ#   ¿ œÇ†¿ –ÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ ”[Ö(¿ ◊Éê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ ◊ ¿ ◊/   ¿ ÿáÇ¿¿ Ÿ‚ÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ ŸÏ¿ Ÿ˚   ¿ €KÅ¿ ‹Ä•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ ‹¿ ‹&   ¿ ‹WÇ”¿ ›ÃÅa/// Release any resources held by this pipeline owner.
///
/// Prior to calling this method the pipeline owner must be removed from the
/// pipeline owner tree, i.e. it must have neither a parent nor any children
/// (see [dropChild]). It also must be [detach]ed from any [PipelineManifold].
///
/// The object is no longer usable after calling dispose.    ¿ ﬂ‰â¿ „fÉr/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ „ëÅ‡¿ Â`Å±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.   ¿ ÂuÉq¿ Ë–É3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿ È5¿ä¿¿çöH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿‘Åê ¿¿//// Initializes internal fields for subclasses.  ¿	¯¿	˝ ¿
¿fÉ®¿És/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿W¿[ ¿d¿s¿Å  ¿"<ÄÊ¿#Ä√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿("¿($ ¿(<¿)+"¿)0 ¿)H¿*0'¿*E  ¿.,¿.2  ¿.M"¿.R ¿.j¿G¢¿G±  ¿RÈ¿RÓ ¿R˝¿S¿S  ¿S…)¿SŒ ¿SÌ¿U}¿Uä  ¿WÇ¿YÅ“/// When true, debugAssertDoesMeetConstraints() is currently
/// executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This should only be set by debugAssertDoesMeetConstraints()
/// implementations. It is used by tests to selectively ignore
/// custom layout callbacks. It should not be set outside of
/// debugAssertDoesMeetConstraints(), and should not be checked in
/// release mode (where it will always be false).¿Y'¿°ê!¿°ï ¿°¨¿¢ä&¿¢ü  ¿©¶¿©∞  ¿∑&N¿∑H ¿∑W¿∑b¿∑q¿∑c¿∑r¿∑s¿πa(¿πf ¿πÑ¿øâ¿øì  ¿ >¿ C ¿ Q¿Ã±(¿Ã∂ ¿Ã‘¿w5¿è  ¿!h!¿!m ¿!Ö¿!ç¿!ú  ¿˜Ä˝¿	jb/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿ñÉæ¿DÉÖ/// The depth of this render object in the render tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree: a node always has a [depth] greater than its ancestors.
/// There's no guarantee regarding depth between siblings.
///
/// The [depth] of a child can be more than one greater than the [depth] of
/// the parent, because the [depth] values are never decreased: all that
/// matters is that it's greater than the parent. Consider a tree with a root
/// node A, a child B, and a grandchild C. Initially, A will have [depth] 0,
/// B [depth] 1, and C [depth] 2. If C is moved to be a child of A,
/// sibling of B, then the numbers won't change. C's [depth] will still be 2.
///
/// The depth of a node is used to ensure that nodes are processed in
/// depth order.  The [depth] is automatically maintained by the [adoptChild]
/// and [dropChild] methods.   ¿ÀÄ•¿^z/// The parent of this render object in the render tree.
///
/// The [parent] of the root node in the render tree is null.   ¿':Ä‚¿'ÓÄ¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿(FÄ‚¿(˙Ä¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿)RÄ€¿*Äë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿-Å(¿-¯Ä·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿.tî˚¿/ÔÅc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿CsÉb¿F;Çê/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidently mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿F¿F¿FŸÄ∆¿GèÄö/// The owner for this render object (null if unattached).
///
/// The entire render tree that this render object belongs to
/// will have the same owner.   ¿GºÄ˘¿HöÄ /// Whether the render tree this render object belongs to is attached to a [PipelineOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿P±Ç5¿R]Åí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿S*Äú¿SÖO/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿S˜ÅÉ¿TƒÄß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿Tß¿T®¿êØÉZ¿ìÚÉ/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿ì‹¿ì›¿†µÄÿ¿°aÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿°∂Ä—¿¢aÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿¢µÉ£¿¶=É\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿ßøÅ„¿©ÇÅú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿©l¿©m¿ØÜ◊¿µ[Öˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿µ:¿µ;¿µÏÅ6¿µ˝  ¿∂¿∂  ¿µÏ¿µÌ¿∑yÅ‰¿∏ŒÅ2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿ø Å‡¿¡Å6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿∆öÉ°¿…¥ÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿ ZÇT¿ÃÅì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿¯ Å¿˘.Ä˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿±Ç-¿Ã    ¿ ‚ÄÇ¿!Ue/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿!´Å∫¿#Å9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   @¿hÉã¿#Çó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿
Ö=¿˚Ç∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿Â¿Ê¿Å¿‡Äø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿¿   ¿jÅi¿#Äû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿0¿>  ¿¿¿◊Ä¿≤Ä¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿†¿°¿çÉ¿†ÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿´¿π  ¿}¿~¿é¿è¿ÆÇπ¿ÀÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿’¿„  ¿®¿©¿π¿∫¿!kÄÕ¿"
Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿"¿"-   ¿#'Ñ¿#,  ¿#=¿#E  ¿#L¿#T  ¿#^¿#j   ¿*\Ç°¿+~ÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿+ú¿+ú¿+ü¿+≠  ¿+W¿+X¿+^¿+q¿+_¿HπÖÙ¿JVÅv/// Mark this render object as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to
/// [attach] all their children to the same [owner]
/// after calling the inherited method, as in `super.attach(owner)`. ¿J]¿Jl  ¿J@¿JA¿N±Å¸¿P4Å\/// Mark this render object as detached from its [PipelineOwner].
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to
/// [detach] all their children after calling the inherited method,
/// as in `super.detach()`.  ¿P¿P¿UõÅ}¿V˜Å?/// Verify that the object's constraints are being met. Override
/// this function in a subclass to verify that your state matches
/// the constraints object. This function is only called in checked
/// mode and only when needsLayout is false. If the constraints are
/// not met, it should assert or throw an exception.  ¿VÂ¿VÊ¿Y0Ç¿Y5    ¿[Nã∆¿ceá≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿gÉ¿h⁄Åù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿h»¿h…¿j5Å∑¿kãÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿kÄ†¿kı    ¿lîÅ¿lô    ¿nTe¿n`  ¿n|¿nä   ¿nΩo¿n…  ¿nÎ¿n˘   ¿o0Çr¿pDÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿q¶Éª¿qÿ   ¿q¶¿qß¿q≠¿qœ¿qÆ¿ueôp¿z˝Ö7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿{¿{  ¿{¿{%  ¿zÀ¿zÃ¿z“¿zÙ¿z”¿{5¿éŸÅ“¿êóÅü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿êÖ¿êÜ¿îÇÛ¿ñÇ¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿ñﬁ¿ñﬂ¿óÑï¿õâÑL/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.  ¿õw¿õx¿õùÖ¿üÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿ü2¿ü2¿üI¿ü\  ¿ü¿ü¿¶\Å_¿ßZÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿ß~¿ßÑ  ¿ßö¿ß†  ¿ßî¿ßØ¿©»ÖE¿ÆÅÉ·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿Æò(¿Æπ   ¿π≤Ö”¿ΩÉ//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿¡ÆÑË¿¡≥    ¿ÃﬁâÎ¿–ßÉõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿÷ÕÜ-¿⁄/É:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿ﬁoÇﬁ¿ﬁt    ¿·QÇx¿‚gÅ/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿‚|¿‚å   ¿„ÕÇÅ¿‰µÄÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿‰∆¿‰”   ¿ÊRë ¿ÊW  ¿Êi¿Êz  ¿ÊÇ¿Êä   ¿˘>v¿˘~8/// Override this method to paint debugging information. ¿˘â¿˘ö  ¿˘¢¿˘™   ¿˘∏Éˇ¿˝ÜÉ¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿˝å¿˝ù  ¿˝•¿˝≠   ¿˝ªÉ1¿ ÄÇß/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions to translate coordinates local to
/// one render object into coordinates local to another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿ î¿ ¨  ¿ ≤¿ ª   ¿ É]¿ÎÇ€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿˜¿   ¿QÜc¿iÇÔ/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform up the tree to `ancestor`.
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `ancestor`.
///
/// If `ancestor` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿x¿á   ¿
πÇÔ¿eÇã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿Ç¿ö   ¿¨ÖÊ¿UÖp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿k¿Ñ   ¿¶ÇÑ¿ Å/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿.Ö_¿)Ñ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿H¿`  ¿¿¿ëÇ¥¿
Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿¿-   ¿#iÅÌ¿$∏Å,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿$¢¿$£¿%Zç|¿&qÅ/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿2⁄ÜÜ¿3:/// Updates the semantic information of the render object.   ¿9dóá¿9√I/// Returns the semantics that this node would like to add to its parent. ¿9‡¿9Ô  ¿:¿:   ¿PÔÉ‘¿PÙ  ¿Q.¿Q4  ¿Q@¿QF  ¿QQ¿T«Å ¿V9Å\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿VS¿Vh   ¿VïÑB¿YZÇ£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿Yu¿YÑ  ¿Yç¿Y•  ¿Y∞ ¿Y…   ¿ZËÄ£¿[JN/// Override this method to handle pointer events that hit this render object. ¿[V¿[d  ¿[j¿[Ç  ¿[9¿[:¿^›Ér¿_(/// Returns a human understandable name.  ¿_¿_	¿bSd¿bf  ¿bq/¿bÇ  ¿bS¿bT¿bå¿bõ¿bú¿bªÇ¿czÄ•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿cç¿cï  ¿c¨¿cµ  ¿cœ0¿c‡  ¿cg¿ch¿c§¿c«¿cÍ¿c˘¿c˙¿d“ÅÍ¿eÂÄı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿e˚¿f  ¿f0¿f&  ¿e“¿e”¿f¿f0¿f?¿f@¿f¿ÖE¿fﬁ  ¿fÚ&¿g  ¿f¿¿f¡¿fÕ¿fŒ¿l	Q¿l+   ¿l	¿l
¿l^Ö
¿p Éî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿p3¿pB  ¿pQ
¿pX  ¿pa!¿pk  ¿pà¿pè  ¿pu¿p}¿p~¿pñ¿pú¿pù¿qlÇá¿sYÅ /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿sj¿sr  ¿sy9¿sè  ¿sñ¿s™¿s´ ¿πÑ¬¿∫≠Åç/// Describes the semantics information a [RenderObject] wants to add to its
/// parent.
///
/// It has two notable subclasses:
///  * [_InterestingSemanticsFragment] describing actual semantic information to
///    be added to the parent.
///  * [_ContainerSemanticsFragment]: a container class to transport the semantic
///    information of multiple [_InterestingSemanticsFragment] to a parent. ¿∫ƒN ¿∫ƒ¿∫÷ ¿∫›.¿∫Ï   ¿ªôÅk¿º‰Å1/// Whether this fragment wants to make the semantics information of
/// previously painted [RenderObject]s unreachable for accessibility purposes.
///
/// See also:
///
///  * [SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes]
///    describes what semantics are dropped in more detail. ¿Ω	Ä«¿ΩøÄâ/// Returns [_InterestingSemanticsFragment] describing the actual semantic
/// information that this fragment wants to add to the parent.   ¿ª¿ª[=/// Incorporate the fragments of children into this fragment. ¿ªb1¿ªã    ¿Ω‘ÇÂ¿æÃÄÒ/// A container used when a [RenderObject] wants to add multiple independent
/// [_InterestingSemanticsFragment] to its parent.
///
/// The [_InterestingSemanticsFragment] to be added to the parent can be
/// obtained via [mergeUpFragments]. ¿ø~ ¿ø¿ø" ¿ø)/¿ø9  ¿ø^ ¿øm   ¿øâB¿øπ  ¿¿Lj¿¿Ç ¿¿L¿¿M¿¿¥¿¿µ¿¿ï¿¿≥¿¿ñ ¿ø–x¿ø·  ¿øË1¿¿  ¿ø–¿ø— ¿¿ªçÖ¿¬4Åi/// A [_SemanticsFragment] that describes which concrete semantic information
/// a [RenderObject] wants to add to the [SemanticsNode] of its parent.
///
/// Specifically, it describes which children (as returned by [compileChildren])
/// should be added to the parent's [SemanticsNode] and which [config] should be
/// merged into the parent's [SemanticsNode]. ¿¬qÄ§ ¿¬q¿¬é ¿¬ï¿¬¨  ¿¬∂/¿¬∆  ¿¬˝¿¬Ó¿√¿√¿¬ˇ¿√¿√ ¿√¿√≥'¿√Ã  ¿ÀI#¿À\  ¿√Äñ¿√ëb/// The [RenderObject] that owns this fragment (and any new [SemanticsNode]
/// introduced by it).   ¿∆óÄµ¿«EÄç/// The [SemanticsConfiguration] the child wants to merge into the parent's
/// [SemanticsNode] or null if it doesn't want to merge anything.   ¿ >Äï¿ Æb/// Whether this fragment wants to add any semantic information to the parent
/// [SemanticsNode].   ¿ ◊n¿À   ¿ ◊¿ ÿ¿√ﬂÇ¥¿≈ßÅÆ/// The children to be added to the parent.
///
/// See also:
///
///  * [SemanticsNode.parentSemanticsClipRect] for the source and definition
///    of the `parentSemanticsClipRect` argument.
///  * [SemanticsNode.parentPaintClipRect] for the source and definition
///    of the `parentPaintClipRect` argument.
///  * [SemanticsNode.elevationAdjustment] for the source and definition
///    of the `elevationAdjustment` argument. ¿≈Ω&¿≈Õ  ¿≈È"¿≈˘  ¿∆#¿∆"  ¿∆:#¿∆X  ¿∆c)¿∆Å   ¿«PÅ¿»EÄÂ/// Disallows this fragment to merge any configuration into its parent's
/// [SemanticsNode].
///
/// After calling this, the fragment will only produce children to be added
/// to the parent and it will return null for [config].   ¿»ZÅ‡¿  ÅÑ/// Consume the fragments of children.
///
/// For each provided fragment it will add that fragment's children to
/// this fragment's children (as returned by [compileChildren]) and merge that
/// fragment's [config] into this fragment's [config].
///
/// If a provided fragment should not merge anything into [config] call
/// [markAsExplicit] before passing the fragment to this method. ¿ 1¿ 0  ¿…Ô¿…¿ÀqÅ¿Àﬁa/// Tag all children produced by [compileChildren] with `tags`.
///
/// `tags` must not be empty. ¿ÀÊ¿À˛   ¿ÃxÅ∆¿ÕÙÅf/// Adds the geometric information of `ancestor` to this object.
///
/// Those information are required to properly compute the value for
/// [SemanticsNode.transform], [SemanticsNode.clipRect], and
/// [SemanticsNode.rect].
///
/// Ancestors have to be added in order from [owner] up until the next
/// [RenderObject] that owns a [SemanticsNode] is reached. ¿Œ ¿Œ    ¿ŒBä;¿œÄÀ/// An [_InterestingSemanticsFragment] that produces the root [SemanticsNode] of
/// the semantics tree.
///
/// The root node is available as the only element in the Iterable returned by
/// [children]. ¿œUm ¿œU¿œk ¿œr¿œÇ  ¿œå/¿œú   ¿◊UW¿◊ ¿◊™¿◊´¿◊ã¿◊©¿◊å¿◊7¿◊B   ¿◊¿◊¿œ∆áP¿œ◊  ¿œÌ¿œÙ  ¿–¿–  ¿–/#¿–@  ¿–X#¿–v  ¿–Å)¿–ü  ¿œ∆¿œ«¿◊±U¿◊¬   ¿◊±¿◊≤¿ÿ
q¿ÿ  ¿ÿ"1¿ÿK  ¿ÿ
¿ÿ ¿ÿÖ¿Ÿ´Å%/// A fragment with partial information that must not form an explicit
/// semantics node without merging into another _SwitchableSemanticsFragment.
///
/// This fragment is generated from synthetic SemanticsConfiguration returned from
/// [SemanticsConfiguration.childConfigurationsDelegate]. ¿ŸÚÄâ ¿ŸÚ¿⁄ ¿⁄¿⁄$  ¿⁄/¿⁄?  ¿⁄L¿⁄Q¿⁄y¿⁄r¿⁄R¿⁄t¿‹z/¿‹£ ¿‹z¿‹{ ¿⁄Äà¿⁄ê  ¿⁄ó1¿⁄¿  ¿⁄¿⁄Ä¿€Åk¿€  ¿€2&¿€B  ¿€^"¿€n  ¿€Ü#¿€ó  ¿€Ø#¿€Õ  ¿€ÿ)¿€ˆ  ¿€¿€¿‹ÆÄﬁ¿‹ø   ¿‹Æ¿‹Ø ¿›êÆñ¿·ÄÉÈ/// An [_InterestingSemanticsFragment] that can be told to only add explicit
/// [SemanticsNode]s to the parent.
///
/// If [markAsExplicit] was not called before this fragment is added to
/// another fragment it will merge [config] into the parent's [SemanticsNode]
/// and add its [children] to it.
///
/// If [markAsExplicit] was called before adding this fragment to another
/// fragment it will create a new [SemanticsNode]. The newly created node will
/// be annotated with the [SemanticsConfiguration] that - without the call to
/// [markAsExplicit] - would have been merged into the parent's [SemanticsNode].
/// Similarly, the new node will also take over the children that otherwise
/// would have been added to the parent's [SemanticsNode].
///
/// After a call to [markAsExplicit] the only element returned by [children]
/// is the newly created node and [config] will return null as the fragment
/// no longer wants to merge any semantic information into the parent's
/// [SemanticsNode]. ¿·«Ç6 ¿·«¿·„ ¿·Í¿·˘  ¿‚¿‚  ¿‚1&¿‚R  ¿‚]E¿‚ë  ¿‚®¿‚∏  ¿‚¬/¿‚“  	¿„¿‚˙¿„¿„<¿„+¿„>¿„^¿„V¿„`¿‰¿‰  ¿‰ ¿‰7  ¿‰B¿‰G ¿‰[¿‰d¿‰i ¿‰|¿‰ÜC¿‰∂  ¿ÒÊW¿Ú ¿Ú;¿Ú<¿Ú¿Ú:¿Ú¿â¿é ¿ú¿ı]¿   ¿ı¿ˆ¿È;¿Ú    ¿‰Œç¿‰”  ¿‰Ê¿‰Ì  ¿Â¿Â  ¿Â ¿Â5  ¿Â<¿ÂF   ¿ÚBî]¿ÚS  ¿Úi¿Úp  ¿Úå¿Úì  ¿Ú´#¿Úº  ¿Ú‘#¿ÚÚ  ¿Ú˝)¿Û  ¿ÚB¿ÚC¿£ÅN¿∑  ¿◊&¿Á  ¿"¿   ¿VÅC¿g  ¿n1¿ó  ¿V¿W¿	ùÅ\¿	Æ  ¿	∂¿	Œ  ¿	ù¿	û¿
˝Äà¿    ¿¶?¿∑   ¿¶¿ß ¿(ñp¿ Ä—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿Çv ¿£¿µÅ~/// The `parentClippingRect` may be null if no clip is to be applied.
///
/// The `ancestors` list has to include all [RenderObject] in order that are
/// located between the [SemanticsNode] whose geometry is represented here
/// (first [RenderObject] in the list) and its closest ancestor [RenderObject]
/// that also owns its own [SemanticsNode] (last [RenderObject] in the list).¿º&¿Ã  ¿Ë"¿¯  ¿%¿-   ¿í¿ò  ¿™¿∞  ¿∆¿”  ¿·¿Î  ¿)?¿> ¿Z¿a¿b¿f¿g¿"{¿"Ä ¿"ê¿ıO¿,(/// Value for [SemanticsNode.transform].   ¿Hk¿ã6/// Value for [SemanticsNode.parentSemanticsClipRect].   ¿∑_¿ˆ2/// Value for [SemanticsNode.parentPaintClipRect].   ¿=¿I#/// Value for [SemanticsNode.rect].   ¿õÅ¿ _Ä¥/// Whether the [SemanticsNode] annotated with the geometric information tracked
/// by this object can be dropped from the semantics tree without losing
/// semantics information.   ¿ ¶Å“¿"ZÅñ/// Whether the [SemanticsNode] annotated with the geometric information
/// tracked by this object should be marked as hidden because it is not
/// visible on screen.
///
/// Hidden elements should still be included in the tree to work around
/// platform limitations (e.g. accessibility scrolling on iOS).
///
/// See also:
///
///  * [SemanticsFlag.isHidden] for the purpose of marking a node as hidden.   ¿[áã¿†Å3/// Computes values, ensuring `rect` is properly bounded by ancestor clipping rects.
///
/// See also:
///
/// * [RenderObject.describeSemanticsClip], typically used to determine `parentSemanticsClipRect`.
/// * [RenderObject.describeApproximatePaintClip], typically used to determine `parentPaintClipRect`. ¿Ø¿∂  ¿Œ¿’  ¿È¿˝   ¿mÅ)¿®+/// From parent to child coordinate system. ¿∑
¿æ  ¿√¿Ã   ¿µÇ9¿¡  ¿Ë¿ˆ  ¿¿  ¿¿$  ¿2¿;   ¿ÚÄ•¿ˇ  ¿¿  ¿¿    ¿"öÇQ¿#≤Å/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿#ÚÄ˜ ¿$`¿$wi/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿$x¿$Ä  
¿$å¿$ë¿$Á¿$õ¿$≥¿$«¿$¬¿$…¿$ÿ¿$Ÿ           ÖÙÅháÅ/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  á4áE  áMáU   ¿ ≥Ä‡¿ Ä[Äü/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].  ¿ Ä¿ Äç   ¿ ÄïÄΩ¿ Åo/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ Å¿ Å ¿ ÅC¿ ÅF   ¿ ﬂ.Ä¥¿ ﬂ®q/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ ﬂÕ¿ ﬂ‹   ¿s˜äó¿u*Å,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿uE¿uE ¿{6¿{A  ¿{KG¿{Ç%/// The render object's unique child.   ¿{ïÄ™¿{ô  ¿{ü¿{´   ¿uyÖπ¿vJÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿v]¿vk   ¿|Cf¿|T  ¿|[¿|j  ¿|C¿|D¿|≠I¿|æ   ¿|≠¿|Æ¿|˙e¿}   ¿|˙¿|˚¿}cy¿}t  ¿}Ç¿}ó  ¿}c¿}d¿}‡Ä¨¿~   ¿}‡¿}· ¿~êÉO¿ÃÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿Â¿Â ¿ÄQ¿ÄY4/// The previous sibling in the parent's child list. ¿ÄlI¿Ä™0/// The next sibling in the parent's child list.  ¿Ä∫Å#¿ÄÌ/// Clear the sibling pointers.  ¿Ä‹¿Ä› ¿Å·≠¿Ö√É€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿Öﬁ¿Öﬁ¿Ö˛:¿Ö˛ ¿âw¿â{ ¿ââ¿èè¿èö  ¿è©¿è¥  ¿âé@¿â¥/// The number of children.   ¿™R¿™;&/// The first child in the child list.   ¿™YO¿™ê%/// The last child in the child list.   ¿ÜNÅô¿ÜS  ¿Üs¿Ü~  ¿ÜÜ¿Üí   ¿áÍÅâ¿áÔ  ¿à¿à  ¿à¿à*   ¿â“Öπ¿ä£Äø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿ä∂¿äƒ   ¿è¬áÃ¿è«  ¿è‹¿èÁ  ¿èÔ¿è˚   ¿óíÇ≥¿ònÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿òu¿òÄ  ¿òà¿òî   ¿öIÄá¿öê?/// Append child to the end of this render object's child list. ¿öî¿öü   ¿ö‘Äí¿õ#G/// Add all the children to the end of this render object's child list. ¿õ*¿õ<   ¿õjÑ]¿õo  ¿õÑ¿õè   ¿üÀÄ∆¿†=f/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿†D¿†O   ¿†ïÇ3¿°{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿¢ÃÇŒ¿£ˆÅ/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿£˚¿§  ¿§¿§   ¿•ûÅ)¿•Ø  ¿•∂¿•≈  ¿•û¿•ü¿¶ÀÅ¿¶‹   ¿¶À¿¶Ã¿ß€Å¿ßÏ   ¿ß€¿ß‹¿®ÂÅ¿®ˆ  ¿©¿©  ¿®Â¿®Ê¿™¨Å¿™˙@/// The previous child before the given child in the child list. ¿´¿´   ¿´æÅ¿¨;/// The next child after the given child in the child list. ¿¨¿¨   ¿¨∆Ç'¿¨Ë   ¿¨∆¿¨« ¿ÆÒä¿∞%Å-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿≥4¿≥ ¿≥0 ¿∞]Ç†¿≤ Ç1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿≤ß¿≤®¿≤¥¿≤µ¿≥9ÉO¿≥>    ¿∂åÅæ¿∂ù  ¿∂§¿∂≥  ¿∂å¿∂ç¿∏NÄæ¿∏_   ¿∏N¿∏O ¿ ËÍH¿ Ë˜ ¿ È  îD <ÄÜÄ§Ä•Ä“Ä”Ä¸Å&ÅNÅvÅüÅ»Å…ÅﬁÅÛÅÙÇ"ÇAÇTÇkÇ}ÇçÇ°ÇÆÇæÇŒÇﬁÇˆÉÉÉ`ÉàÉâÉ—É’ÑÑgÑõÑüÑ≠Ñ±Ñ¸ÖAÖTÖëÖûÖØÖ√ÖƒÖ–ÖÒÖÛÖÙÜ)Ü-Ü~Ü ÜŒáá]á^átáxá ààYàmàqà¬ââbâ¨â∆â ääOä{ä|äûä§äÏãããOãPãxãyã∆åååNåTå†åæåøåÊåÏç7çÑç’çÒç˜ééé]é~é‚èèè+èaèhèlèmèîèÆè◊è˙êê&ê6êmêúêÃêÈêÚëëëWëuëõëÀëÃíídíØí÷ì#ìXìeì¢ì¿ì“ìˇîî îFî†î“ï&ïâï”ï‹ñññFñGñÑñπñ…óó&ó0ó1óvóÆóØó˛ò2òoòôòùòûòÏòÚô=ôäôÿööö)ö/öö†ö⁄õõ<õjõkõ∏õ‘õ‰úú!ú+úÉú≥ùùfùÆùµùËûûûûiûπûÌûÛüü	üVüpü•üøüË†††+†J†Y†ë†∂†ø†“†‹†‡†·°°°Y°®°¯¢/¢?¢g¢z¢Ñ¢Ö¢®¢«¢Ì£9£Ä£¨£„§
§7§D§q§w§{§|§∏§”§¯•5•6•x•≥•ˆ¶¶2¶X¶`¶r¶´¶ﬁß,ßAßMßSßàß€®®$®(®)®u®Ñ®ä®”©©F©L©ô©¨©π©€©ˆ™
™-™1™2™L™x™à™ü™∆™È´
´´@´c´Ñ´å´ü´©´ø´√´ƒ´Ÿ´¯¨¨,¨-¨Q¨W¨°¨Î≠
≠≠,≠G≠`≠f≠â≠û≠¢≠£≠æ≠ŸÆÆ2ÆTÆÄÆÑÆÖÆ÷ÆÂÆÎØ9ØáØ—∞∞∞S∞Y∞i∞î∞⁄±±±±W±]±©±¯≤G≤T≤Z≤©≤Ù≥≥≥$≥E≥^≥l≥r≥Ç≥™≥Œ≥˜¥¥M¥ã¥ì¥æ¥‚µµ)µVµáµèµ¢µ¨µ‰µ˛∂∂(∂,∂-∂}∂ë∂ó∂Ê∑/∑>∑D∑è∑ﬂ∏+∏M∏i∏ä∏£∏©∏“∏÷∏◊π*π0πÄπ…∫∫H∫N∫ô∫Èª5ªWªtªïªÆª¥ªﬁª‚ª„ºººoº™º∞º˝ΩOΩüΩÂΩÎΩ˚ææOæ\æ{æòæ∞æ¥æµøøUø•ø«øÕ¿ @¿ @`¿ @t¿ @z¿ @ø¿ A¿ A_¿ A≠¿ A¿ B¿ B¿ B\¿ B≠¿ B˙¿ CK¿ Cõ¿ CŸ¿ Cﬂ¿ CÔ¿ Cı¿ D@¿ DT¿ DŒ¿ E¿ Em¿ Eè¿ Eµ¿ Eª¿ Eÿ¿ Eı¿ Fc¿ Fd¿ Fá¿ F±¿ Fµ¿ F∂¿ F˛¿ G¿ GJ¿ GW¿ G¶¿ G÷¿ G⁄¿ G€¿ H
¿ H¿ Hb¿ H™¿ H·¿ I-¿ I}¿ Iª¿ Iˇ¿ J¿ JS¿ Jó¿ J¨¿ J≤¿ J˙¿ KC¿ Kå¿ K°¿ Kß¿ K¯¿ L@¿ LP¿ LV¿ L¶¿ LÁ¿ LÌ¿ M6¿ M<¿ MÜ¿ M”¿ N¿ Ng¿ N∑¿ Nˇ¿ OK¿ OÅ¿ Oñ¿ PL¿ Pq¿ Pé¿ P°¿ Pß¿ Pﬂ¿ P˚¿ Q:¿ QF¿ Qj¿ Që¿ Q‹¿ Q¿ Q˝¿ R`¿ Rs¿ Ry¿ R}¿ R~¿ Rµ¿ Rª¿ S
¿ S¿ SU¿ S[¿ S´¿ SÓ¿ SÙ¿ TD¿ Tè¿ T∂¿ Tº¿ U¿ UO¿ UU¿ U¶¿ U¨¿ UÛ¿ Vº¿ V·¿ V˛¿ W¿ W¿ WK¿ WÜ¿ W¢¿ W„¿ WÔ¿ X¿ X<¿ XÖ¿ Xô¿ X¶¿ Y	¿ Y¿ Y"¿ Y&¿ Y'¿ YQ¿ YW¿ Y¶¿ Y¨¿ YÒ¿ Y˜¿ ZG¿ Zä¿ Zê¿ Zﬂ¿ [*¿ [F¿ [L¿ [ú¿ [›¿ [„¿ \'¿ \-¿ \t¿ ]8¿ ]]¿ ]z¿ ]ç¿ ]ì¿ ]«¿ ]ˇ¿ ^¿ ^Z¿ ^f¿ ^ä¿ ^±¿ ^˙¿ _¿ _¿ _|¿ _è¿ _ï¿ _ô¿ _ö¿ _Ã¿ _“¿ `¿ `¿ `k¿ `ë¿ `ó¿ `Á¿ a.¿ a4¿ a{¿ aÅ¿ aŒ¿ b ¿ bp¿ b∂¿ cD¿ cá¿ c¨¿ c”¿ cÂ¿ cÈ¿ cÍ¿ d¿ d!¿ dp¿ dv¿ d«¿ dÌ¿ dÛ¿ e?¿ eê¿ e…¿ eœ¿ f ¿ fb¿ fh¿ fØ¿ gI¿ g•¿ gÂ¿ h¿ hB¿ hn¿ h¿ hé¿ hü¿ hØ¿ i¿ i¿ i-¿ i:¿ iG¿ iX¿ iâ¿ i¶¿ iæ¿ i—¿ i◊¿ i€¿ i‹¿ j¿ j¿ ja¿ jç¿ jì¿ j„¿ k,¿ k|¿ kÇ¿ kœ¿ l¿ l¿ l\¿ lb¿ lØ¿ m¿ mQ¿ mó¿ n¿ nF¿ nP¿ nf¿ n¿ n´¿ nΩ¿ n¡¿ n¬¿ nŒ¿ oZ¿ o\¿ o]¿ oà¿ oå¿ oÿ¿ p¿ p¿ pC¿ pG¿ pó¿ p„¿ q¿ q¿ qZ¿ q™¿ q˜¿ q˚¿ rK¿ rô¿ rÁ¿ s4¿ sA¿ sE¿ sç¿ s‹¿ t&¿ tg¿ t∑¿ u¿ uU¿ uõ¿ u∑¿ uª¿ v
¿ vU¿ v§¿ vÓ¿ w$¿ wt¿ wå¿ wê¿ wﬁ¿ x,¿ x{¿ xï¿ xô¿ xÈ¿ y:¿ yE¿ yb¿ y≥¿ y˚¿ z¿ z¿ z]¿ zq¿ zr¿ z¥¿ zÕ¿ zŒ¿ z¸¿ {¿ {E¿ {K¿ {ö¿ {∂¿ {º¿ |
¿ |Z¿ |©¿ |Ú¿ }+¿ }|¿ }Õ¿ }ﬁ¿ }‰¿ ~2¿ ~¿ ~∏¿ ~æ¿  ¿ ¿ B¿ r¿ y¿ ì¿ ¨¿ ∞¿ ≤¿ ≥¿ ¯¿ ¸¿ ÄS¿ Äî¿ Äï¿ Ä–¿ Ä‘¿ Å¿ ÅS¿ ÅT¿ Åç¿ ÅÀ¿ Å‰¿ Ç ¿ Ç5¿ Ç;¿ Ç?¿ Ç@¿ Ç^¿ Ç_¿ Ç©¿ Ç…¿ Ç ¿ Ç÷¿ ÇÈ¿ É¿ É=¿ ÉC¿ Él¿ Ép¿ Ér¿ És¿ É™¿ ÉÆ¿ É˛¿ ÑO¿ Ñú¿ Ñ¥¿ Ñ∏¿ Ö¿ ÖJ¿ Öî¿ Ö¿¿ Ü	¿ ÜW¿ Üß¿ Ü¯¿ áF¿ áé¿ á‘¿ à"¿ àm¿ à≠¿ à˘¿ âG¿ âî¿ âò¿ âÁ¿ ä1¿ ä~¿ äú¿ ä†¿ äÒ¿ ã?¿ ãé¿ ã€¿ å'¿ åu¿ å∂¿ å∫¿ ç¿ çT¿ ç§¿ çÓ¿ é¿ éP¿ ép¿ év¿ é√¿ è¿ è6¿ èH¿ èe¿ èá¿ è£¿ è∆¿ èÃ¿ èÕ¿ ê¿ êA¿ êG¿ êò¿ êÂ¿ ë2¿ ëQ¿ ëW¿ ëû¿ ëÎ¿ í4¿ í^¿ í_¿ í•¿ í´¿ íÛ¿ ì	¿ ì8¿ ì9¿ ìê¿ ìñ¿ ìÎ¿ î¿ îL¿ îM¿ îï¿ îõ¿ î‹¿ ï¿ ï¿ ïS¿ ïY¿ ï©¿ ï–¿ ïÔ¿ ñ¿ ñ2¿ ñ?¿ ñg¿ ñm¿ ñq¿ ñr¿ ñ∑¿ ñ‚¿ ñ˝¿ ó#¿ óA¿ óO¿ óU¿ ón¿ óÖ¿ ó¢¿ ó¶¿ óß¿ óÛ¿ ò>¿ ò{¿ òÄ¿ ò…¿ ô¿ ô^¿ ôñ¿ ôõ¿ ô◊¿ ö'¿ öu¿ ö¡¿ ö÷¿ ö˝¿ õ:¿ õ;¿ õy¿ õ¿ õø¿ õ≈¿ ú¿ ú$¿ úV¿ úx¿ úü¿ ú†¿ ú‚¿ úË¿ ù8¿ ùÉ¿ ùπ¿ ùø¿ û¿ û¿ û8¿ ûk¿ û}¿ û∞¿ ûÂ¿ ü!¿ üS¿ ü`¿ üj¿ ü¿ üã¿ ü¨¿ ü‰¿ †¿ †¿ †¿ †.¿ †N¿ †a¿ †k¿ †u¿ †§¿ †Õ¿ °¿ °@¿ °ê¿ °∆¿ °Ó¿ ¢¿ ¢L¿ ¢°¿ ¢∂¿ ¢ƒ¿ ¢–¿ £¿ £<¿ £e¿ £q¿ £{¿ £∆¿ £È¿ §¿ §¿ §¿ §,¿ §S¿ §h¿ §t¿ §©¿ §∆¿ §Œ¿ •7¿ •G¿ •m¿ •¿ •¢¿ • ¿ •ﬂ¿ •Î¿ ¶¿ ¶,¿ ¶4¿ ¶:¿ ¶>¿ ¶?¿ ¶ç¿ ¶ﬁ¿ ß+¿ ßz¿ ßß¿ ß€¿ ß‹¿ ®
¿ ®J¿ ®i¿ ®}¿ ®ç¿ ®√¿ ®ı¿ ©¿ ©¿ ©¿ ©.¿ ©>¿ ©c¿ ©u¿ ©Æ¿ ©√¿ ©œ¿ ©’¿ ©Ÿ¿ ©⁄¿ ™,¿ ™d¿ ™j¿ ™∏¿ ™Ã¿ ™Ï¿ ´¿ ´i¿ ´o¿ ´”¿ ¨¿ ¨a¿ ¨à¿ ¨ê¿ ¨ñ¿ ¨∆¿ ¨˘¿ ≠¿ ≠#¿ ≠ô¿ ≠≤¿ ≠÷¿ ≠‹¿ ≠‡¿ ≠·¿ Æ¿ Æ¿ Æ[¿ Æa¿ Æ†¿ Æ¶¿ Æ‰¿ Ø¿ Ø5¿ ØV¿ ØW¿ Øé¿ Øî¿ Ø›¿ ∞-¿ ∞~¿ ∞Ñ¿ ∞Õ¿ ∞„¿ ∞¸¿ ±/¿ ±A¿ ±s¿ ±®¿ ±„¿ ≤¿ ≤!¿ ≤+¿ ≤@¿ ≤L¿ ≤m¿ ≤§¿ ≤œ¿ ≤ÿ¿ ≤ﬁ¿ ≤Ë¿ ≤˙¿ ≥¿ ≥0¿ ≥<¿ ≥|¿ ≥©¿ ≥™¿ ≥Í¿ ¥[¿ ¥å¿ ¥Ë¿ µ¿ µG¿ µk¿ µß¿ µº¿ µ˜¿ ∂¿ ∂¿ ∂D¿ ∂P¿ ∂Z¿ ∂b¿ ∂ó¿ ∂≥¿ ∂ª¿ ∑#¿ ∑3¿ ∑E¿ ∑g¿ ∑|¿ ∑à¿ ∑£¿ ∑…¿ ∑—¿ ∑◊¿ ∑€¿ ∑‹¿ ∏)¿ ∏/¿ ∏Ä¿ ∏–¿ π¿ πK¿ πï¿ π‚¿ πÙ¿ π˙¿ ∫C¿ ∫`¿ ∫ô¿ ∫º¿ ∫Ω¿ ∫˝¿ ª¿ ªT¿ ªÑ¿ ª–¿ ª¯¿ ª˘¿ ºJ¿ ºñ¿ ºú¿ ºÌ¿ Ω¿ Ωn¿ Ωà¿ Ωé¿ Ωﬂ¿ æ/¿ æx¿ æñ¿ æú¿ æ◊¿ ø#¿ øs¿ øô¿ øŸ¿ ¿ ¿ ¿¿ ¿Q¿ ¿U¿ ¿V¿ ¿w¿ ¿Õ¿ ¿Ú¿ ¡q¿ ¡¬¿ ¡Î¿ ¡Û¿ ¬¿ ¬?¿ ¬]¿ ¬Ö¿ ¬ã¿ ¬è¿ ¬ê¿ ¬∂¿ ¬€¿ √¿ √¿ √#¿ √$¿ √I¿ √é¿ √è¿ √€¿ √È¿ √Ô¿ ƒ$¿ ƒm¿ ƒs¿ ƒ¿¿ ƒ˚¿ ≈:¿ ≈@¿ ≈â¿ ≈£¿ ≈∆¿ ≈‘¿ ≈⁄¿ ≈Û¿ ∆G¿ ∆M¿ ∆r¿ ∆Ç¿ ∆•¿ ∆∏¿ ∆¬¿ ∆Ã¿ «¿ «c¿ «â¿ «¡¿ »¿ »$¿ ».¿ »6¿ »d¿ »ô¿ »π¿ »¡¿ …-¿ …=¿ …O¿ …u¿ …ä¿ …ñ¿ …±¿ …◊¿ …ﬂ¿ …Â¿ …È¿ …Í¿ …ˆ¿  (¿  F¿  y¿  ú¿  £¿  ß¿  ®¿  ¥¿  ˘¿ À$¿ ÀÖ¿ Àâ¿ Àä¿ Àü¿ À†¿ À⁄¿ À˘¿ À˙¿ Ã¿ Ã^¿ Ã¿ Ãê¿ Ãî¿ Ãï¿ ÃÚ¿ ÃÛ¿ Õ@¿ ÕF¿ Õë¿ Õ‡¿ Œ¿ Œ.¿ ŒM¿ Œg¿ Œö¿ Œ∑¿ Œ∏¿ ŒÎ¿ œ	¿ œ¿ œ¿ œ¿ œA¿ œG¿ œí¿ œ„¿ –¿ –¿ –6¿ –l¿ –Ç¿ –—¿ —"¿ —c¿ —d¿ —ó¿ —≠¿ —≥¿ —∑¿ —∏¿ —˝¿ “D¿ “í¿ “·¿ ”X¿ ”Y¿ ”Ö¿ ”ã¿ ”⁄¿ ‘'¿ ‘t¿ ‘ø¿ ’¿ ’[¿ ’¨¿ ’Ã¿ ’“¿ ÷¿ ÷7¿ ÷=¿ ÷é¿ ÷›¿ ÷„¿ ◊¿ ◊7¿ ◊_¿ ◊á¿ ◊‡¿ ◊˙¿ ÿ¿ ÿ7¿ ÿ=¿ ÿZ¿ ÿz¿ ÿÄ¿ ÿÑ¿ ÿÖ¿ ÿŒ¿ ÿ‘¿ Ÿ%¿ Ÿ7¿ Ÿ=¿ Ÿå¿ Ÿ€¿ ⁄¿ ⁄+¿ ⁄R¿ ⁄´¿ ⁄»¿ ⁄·¿ €¿ €¿ €(¿ €>¿ €D¿ €H¿ €I¿ €ë¿ €ó¿ €ß¿ €≠¿ €”¿ €˚¿ ‹0¿ ‹P¿ ‹T¿ ‹U¿ ‹é¿ ‹î¿ ‹„¿ ›2¿ ›É¿ ›â¿ ›≈¿ ›ÿ¿ ›˜¿ ﬁ¿ ﬁ4¿ ﬁV¿ ﬁv¿ ﬁí¿ ﬁ≥¿ ﬁ„¿ ﬂ¿ ﬂ'¿ ﬂ+¿ ﬂ-¿ ﬂ.¿ ﬂo¿ ﬂs¿ ﬂ†¿ ﬂ„¿ ﬂ‰¿ ‡¿ ‡¿ ‡P¿ ‡ù¿ ‡Ï¿ ·:¿ ·á¿ ·Æ¿ ·≤¿ ‚¿ ‚S¿ ‚ô¿ ‚π¿ ‚Ω¿ „¿ „W¿ „è¿ „⁄¿ ‰¿ ‰"¿ ‰r¿ ‰¥¿ ‰∫¿ ‰ ¿ ‰–¿ Â¿ ÂU¿ Âr¿ Âs¿ Â¡¿ Ê¿ Ê(¿ Ê.¿ Ê¿ ÊÃ¿ Á¿ Á8¿ Á>¿ ÁÖ¿ Á‘¿ Ë"¿ Ë(¿ Ë8¿ Ë>¿ Ëá¿ Ë…¿ ËÁ¿ ËÈ¿ ËÍ¿ È4¿ È5¿ ÈW¿ È[¿ Èü¿ Èø¿ È√¿ Í¿ Í
¿ ÍV¿ Í¶¿ ÍÒ¿ Î¿ Î¿ Î`¿ ÎÆ¿ Î˜¿ ÏG¿ Ïî¿ Ï„¿ Ì3¿ ÌZ¿ Ì^¿ Ì¢¿ Ì…¿ ÌÕ¿ Ìﬁ¿ Ì‚¿ Ó/¿ Ó¿ Ó–¿ ÓÍ¿ ÓÓ¿ Ô:¿ Ôà¿ Ôÿ¿ )¿ g¿ k¿ í¿ ñ¿ ‹¿ Ò*¿ Òw¿ Ò¬¿ Ú¿ Ú_¿ ÚØ¿ Ú˝¿ ÛE¿ Ûî¿ Û·¿ Ù,¿ Ùm¿ Ùq¿ Ù¿¿ ı¿ ıa¿ ıù¿ ı°¿ ı∞¿ ı¥¿ ı˚¿ ˆB¿ ˆ^¿ ˆb¿ ˆ∞¿ ˜¿ ˜M¿ ˜ö¿ ˜ﬂ¿ ¯ ¿ ¯$¿ ¯t¿ ¯ß¿ ¯´¿ ¯ø¿ ¯√¿ ˘¿ ˘=¿ ˘A¿ ˘é¿ ˘‹¿ ˙-¿ ˙u¿ ˙ø¿ ˚¿ ˚Z¿ ˚¿ ˚É¿ ˚±¿ ˚µ¿ ¸¿ ¸W¿ ¸¢¿ ¸Ú¿ ˝C¿ ˝Z¿ ˝^¿ ˝Æ¿ ˝æ¿ ˝¬¿ ˛¿ ˛P¿ ˛a¿ ˛e¿ ˛≤¿ ˇ¿ ˇ¿ ˇ8¿ ˇ<¿ ˇé¿ ˇﬁ¿ -¿ x¿ √¿ «¿¿b¿±¿˝¿L¿õ¿–¿!¿q¿~¿“¿¿¿C¿{¿¶¿ ¿‡¿È¿Ô¿4¿a¿e¿f¿µ¿¿O¿~¿Ñ¿≈¿¿b¿Å¿á¿”¿Ÿ¿È¿Ô¿¿2¿I¿o¿Ö¿•¿Œ¿Ë¿¿Ù¿ı¿	¿	!¿	^¿	z¿	é¿	û¿	ø¿	“¿	‹¿	Ò¿	ı¿	ˆ¿
¿
¿
N¿
T¿
ü¿
Ó¿9¿x¿¡¿¿)¿/¿z¿°¿ß¿„¿Ù¿¿$¿P¿ó¿ù¿º¿Ã¿¿+¿Y¿l¿è¿˝¿¿¿5¿H¿R¿V¿W¿c¿d¿î¿ö¿Á¿6¿Ü¿ƒ¿ ¿¿D¿î¿“¿#¿o¿ª¿ˆ¿¿¿R¿X¿®¿Ÿ¿¿7¿b¿â¿è¿ì¿î¿Œ¿‘¿$¿l¿©¿Ø¿˝¿H¿ò¿Á¿-¿}¿É¿À¿¿:¿U¿g¿h¿π¿»¿Œ¿¿¿F¿h¿ä¿´¿ ¿–¿‘¿’¿¿¿f¿û¿´¿»¿…¿¿
¿J¿q¿ä¿ã¿”¿Ÿ¿(¿{¿å¿ô¿¡¿‰¿Ù¿¿8¿U¿]¿¶¿π¿√¿ƒ¿‡¿˜¿¿=¿W¿k¿à¿é¿ß¿´¿¨¿˛¿¿S¿¶¿∑¿ƒ¿Î¿ ¿ 6¿ \¿ Ä¿ †¿ Ω¿ ◊¿ Î¿!¿!¿!¿!D¿!d¿!h¿!i¿!≠¿!≥¿"¿"9¿":¿"x¿"~¿"ú¿"¢¿"≤¿"∏¿#¿#$¿#%¿#r¿#§¿#¿¿#‘¿#¯¿$-¿$b¿$≤¿$›¿%¿%?¿%®¿%˜¿&F¿&ë¿& ¿'"¿'+¿'3¿'7¿'8¿'É¿'â¿'÷¿'„¿(¿(C¿(D¿(è¿(ï¿(‚¿(Ô¿))¿)O¿)P¿)ã¿)ë¿)ﬁ¿)Í¿*.¿*Y¿*Z¿*°¿*Í¿+8¿+U¿+s¿+µ¿+‚¿+Ú¿,(¿,I¿,\¿,f¿,Ñ¿,î¿, ¿,›¿,Á¿,˙¿,˛¿,ˇ¿-O¿-[¿-a¿-°¿-ß¿-Ì¿.*¿.J¿.K¿.q¿.r¿.®¿.Æ¿.˛¿/N¿/ê¿/ñ¿/‰¿0¿0!¿01¿0M¿0Ö¿0≈¿0Ú¿1¿11¿1h¿1u¿1Å¿1â¿1ä¿1π¿2¿2X¿2p¿2¶¿2Ω¿2“¿2⁄¿2€¿3¿31¿3¨¿4¿4>¿4ë¿4ﬁ¿5-¿5U¿5¿¿5Ÿ¿5¿5˙¿5˚¿62¿6x¿6≥¿6ƒ¿6È¿6˙¿7¿7¿7¿7[¿7Œ¿80¿8F¿8G¿8m¿8•¿8ˆ¿9¿9x¿9Ö¿9≤¿9‰¿9ˆ¿:-¿::¿:g¿:≥¿:“¿;	¿;¿;"¿;*¿;+¿;Q¿;â¿;Ì¿<P¿<}¿<Ø¿<¡¿<¯¿=¿=t¿=Ä¿=à¿=â¿=Û¿>A¿>v¿>”¿?4¿?c¿?d¿?ö¿?´¿?“¿?˝¿@-¿@=¿@r¿@}¿@®¿A¿A8¿Am¿Ax¿AΩ¿A‰¿B ¿B5¿B@¿BS¿B◊¿C:¿CE¿CO¿CY¿Cl¿Cp¿Cq¿C¬¿CÔ¿Cı¿DF¿Dë¿D⁄¿D‡¿E+¿Ed¿E¥¿F¿F¿F'¿FO¿Fo¿F¿Fú¿FØ¿Fπ¿F“¿F÷¿F◊¿G¿G¿GZ¿Gz¿G†¿Gπ¿G∫¿H¿H¿HS¿HY¿Hè¿H∂¿H∑¿Hı¿H˚¿IG¿I}¿IÉ¿I¡¿I˜¿J>¿JO¿Jt¿Jë¿J≠¿J¡¿K¿KV¿Kã¿KÀ¿K˚¿L¿L0¿L6¿L]¿Là¿L∞¿L∂¿LÎ¿M*¿MY¿Mt¿Må¿Mí¿M·¿N*¿N]¿NÇ¿N§¿N™¿NÆ¿NØ¿NÛ¿N˘¿OI¿Ot¿Oz¿O∏¿O˛¿P¿P-¿P?¿P[¿Pn¿P™¿PÆ¿PØ¿PÔ¿Pı¿QF¿Qí¿Qﬂ¿R¿R¿RR¿Rp¿RÜ¿Rñ¿R≥¿R∆¿R–¿R„¿RÁ¿S¿S¿S'¿S(¿Sz¿S«¿SÙ¿Sı¿T8¿T>¿T¿T•¿T≤¿T“¿TÚ¿UW¿U]¿Uw¿U{¿Uò¿Uô¿U‹¿V ¿Vf¿V¨¿V„¿V¿W¿W¿WY¿Wö¿Wæ¿Wƒ¿X¿XG¿XÜ¿XÀ¿Xˇ¿Y.¿Yk¿Yê¿YÀ¿Yﬁ¿Y‰¿Z¿Z*¿Ze¿Zà¿Z£¿ZÊ¿Z¸¿[¿[
¿[6¿[G¿[K¿[L¿[ù¿[Ó¿\4¿\:¿\N¿\T¿\•¿\Û¿]@¿]¿]Ö¿]’¿^
¿^¿^`¿^©¿^˘¿_F¿_ì¿_‡¿`¿` ¿`a¿`Ø¿`Ú¿`¯¿a¿a¿a^¿a®¿a˜¿b6¿bs¿bƒ¿b‡¿bÊ¿c¿c^¿cy¿c†¿c∏¿c˚¿d	¿d¿d4¿dO¿dk¿d∫¿e¿e+¿eL¿eT¿eb¿eh¿eç¿e¨¿eπ¿e‘¿eÔ¿f¿f4¿f~¿fä¿f°¿fØ¿f›¿g¿g¿g¿g¿g¿ge¿gw¿g}¿g¡¿h¿ha¿hí¿hò¿h∆¿h”¿hÙ¿i¿i4¿iU¿iÉ¿i¨¿iÃ¿iŸ¿j¿j¿j.¿j2¿j3¿ju¿j¬¿k¿k¿kP¿kV¿kÑ¿kµ¿kÃ¿kÈ¿kÌ¿kÓ¿l¿l5¿lU¿lá¿lç¿lë¿lí¿l∏¿l›¿lÎ¿lÒ¿m=¿mi¿m†¿m“¿n
¿n¿n¿n¿nR¿ní¿n∂¿n∫¿nª¿o¿o)¿o-¿o.¿oz¿oÄ¿oÕ¿oÛ¿o˘¿p=¿p^¿p{¿pë¿p∂¿p›¿q¿q"¿q2¿qX¿qk¿qu¿qü¿q£¿q§¿q—¿qÒ¿r¿rE¿ri¿rî¿r¿¿r–¿rÙ¿s¿sN¿so¿sé¿s«¿sœ¿s‚¿sÏ¿sˆ¿t¿t/¿tH¿t{¿tÅ¿të¿t«¿tÏ¿u¿u$¿u.¿uH¿u^¿ub¿uc¿uî¿uö¿uÈ¿v8¿và¿v∂¿vº¿w
¿wZ¿w´¿w˜¿x;¿xã¿x∆¿xÃ¿y¿yd¿y¨¿y≤¿z ¿zO¿zú¿z…¿zˆ¿{@¿{]¿{î¿{«¿{Ÿ¿|¿|Z¿|d¿|y¿|Ö¿|¶¿|æ¿|È¿|Ú¿|¯¿}#¿}D¿}e¿}≥¿}Õ¿~-¿~a¿~•¿~∆¿~Ú¿¿¿¿\¿•¿Ä¿Ä¶¿Ä ¿ÄË¿Å<¿Åç¿Å¿¿Å‰¿ÅÛ¿Ç ¿Ç
¿Ç.¿Ç7¿Ç?¿Çc¿Çá¿Çˇ¿Éa¿Éq¿É†¿É≥¿ÉΩ¿Éæ¿Éˆ¿Ñ¿ÑV¿Ñó¿Ñ∆¿Ñˆ¿ÖB¿Öe¿Ö¿Ö∑¿Öﬁ¿Ü¿Ü¿Ü&¿Ü'¿ÜZ¿Üà¿Ü¬¿Ü ¿ÜÀ¿á¿á*¿á2¿á@¿áF¿áf¿á¥¿à¿àQ¿àÉ¿àµ¿àª¿àÂ¿â	¿â4¿âD¿âh¿âá¿âÛ¿â˚¿ä¿ä¿ä1¿äC¿äi¿ä~¿ää¿äñ¿äØ¿ä√¿äÔ¿ã¿ã¿ã/¿ãd¿ãl¿ã~¿ã•¿ã∫¿ã∆¿ãÃ¿ã˘¿å	¿å-¿åc¿åÑ¿åó¿å°¿å´¿å¬¿å‰¿åˆ¿ç ¿ç5¿çA¿çZ¿çç¿çì¿ç£¿çŸ¿ç˛¿é#¿é6¿é@¿éZ¿ép¿éq¿é®¿éÃ¿é“¿é÷¿é◊¿è#¿èl¿èπ¿ê¿êV¿êÉ¿êê¿ê¨¿ê≠¿ê˙¿ë)¿ë/¿ëw¿ë∆¿í¿í¿í^¿í≠¿í‹¿í‚¿ì2¿ìx¿ì∂¿ì⁄¿ìÁ¿î
¿î¿îJ¿îå¿îí¿î·¿ï,¿ïw¿ï∞¿ï∂¿ïı¿ñ
¿ñ¿ña¿ñ∞¿ñ‹¿ñÈ¿ó¿ó¿óD¿óJ¿óô¿ó‰¿ò/¿òh¿òn¿òæ¿ô¿ô]¿ôÆ¿ôø¿ô≈¿ö¿ö_¿ö§¿öÙ¿õ=¿õu¿õÇ¿õö¿õõ¿õ‚¿ú2¿ú¿úÀ¿úÁ¿úÌ¿ù>¿ùå¿ù›¿û&¿û,¿û}¿ûÕ¿û”¿ü	¿ü¿üg¿üä¿ü≠¿üÿ¿†¿†¿†]¿†m¿†ô¿†ü¿†£¿†§¿†≤¿†≥¿†ˆ¿†¸¿°I¿°V¿°é¿°≥¿°¥¿°Á¿°Ì¿¢:¿¢F¿¢à¿¢≤¿¢≥¿¢˘¿¢ˇ¿£P¿£ô¿£Í¿£¸¿§¿§R¿§®¿§Ó¿•B¿•l¿•r¿•√¿•‘¿•⁄¿¶2¿¶Y¿¶Z¿¶ß¿¶‡¿¶Ê¿ß6¿ßS¿ßº¿ßΩ¿ß¯¿ß˛¿®L¿®õ¿®≈¿®À¿©¿©j¿©w¿©£¿©§¿©≈¿©∆¿™¿™¿™Z¿™`¿™´¿™˙¿´K¿´ö¿´Â¿´ı¿´˚¿¨H¿¨r¿¨x¿¨À¿≠¿≠i¿≠ª¿≠Œ¿Æ%¿Æs¿Æ≈¿Æ‰¿Ø
¿Ø¿Ø¿ØT¿ØZ¿Ø™¿Ø˜¿∞D¿∞ì¿∞Ê¿±4¿±z¿±∆¿≤¿≤I¿≤O¿≤ú¿≤Í¿≥4¿≥Ä¿≥œ¿¥¿¥=¿¥C¿¥í¿¥ﬂ¿µ+¿µ8¿µE¿µc¿µ∆¿µÂ¿µÈ¿µÍ¿µ˜¿∂¿∂+¿∂E¿∂ç¿∂‘¿∂ı¿∂¸¿∑¿∑#¿∑$¿∑v¿∑w¿∑À¿∑—¿∏"¿∏u¿∏Ö¿∏ã¿∏∏¿∏€¿∏˜¿π¿π*¿π=¿πG¿πZ¿π^¿π_¿π∞¿πÚ¿π¯¿∫H¿∫ò¿∫•¿∫´¿∫Á¿ª.¿ªu¿ªº¿º¿º6¿º<¿ºÅ¿º«¿Ω ¿Ω*¿ΩG¿Ωn¿Ω|¿ΩÇ¿Ω™¿ΩÃ¿Ω¸¿æ,¿æ<¿æD¿æE¿æú¿æÕ¿æ›¿æÂ¿æÎ¿ø(¿øA¿ø|¿øÇ¿øÜ¿øá¿ø»¿¿¿¿¿¿c¿¿ã¿¿ë¿¿–¿¡¿¡+¿¡â¿¡ß¿¡´¿¡¨¿¡Œ¿¡ˆ¿¬¿¬
¿¬B¿¬a¿¬ä¿¬∞¿¬‘¿¬ˆ¿¬˛¿√¿√=¿√]¿√c¿√≤¿√˝¿ƒI¿ƒ†¿ƒÎ¿≈ ¿≈;¿≈f¿≈î¿≈ø¿≈◊¿∆¿∆=¿∆U¿∆b¿∆ç¿∆ì¿∆ó¿∆ò¿∆◊¿∆›¿«.¿«z¿««¿» ¿»¿»<¿»B¿»é¿»›¿…"¿…n¿…©¿…∆¿…‹¿…Ï¿ ¿ ¿ %¿ 8¿ <¿ W¿ X¿ ó¿ ù¿ Ó¿À:¿Àá¿À¿¿À∆¿À¸¿Ã)¿Ã?¿ÃO¿Ã{¿Ãé¿Ãò¿Ã´¿ÃØ¿Ã€¿Ã‹¿Õ#¿Õ)¿Õn¿Õª¿Œ¿ŒZ¿Œr¿Œx¿Œ√¿Œˇ¿œ¿œE¿œí¿œ‘¿œ⁄¿œÍ¿œ¿–>¿–ê¿–†¿–∫¿–◊¿—¿—$¿—2¿—8¿—P¿—ñ¿—∏¿—Ï¿—˛¿“,¿“s¿“}¿“í¿“û¿“·¿”¿”H¿”c¿”ê¿”∂¿”æ¿”Á¿‘¿‘¿‘&¿‘T¿‘±¿‘ª¿‘–¿‘‹¿’&¿’p¿’¥¿’Ú¿’˚¿÷8¿÷w¿÷í¿÷∏¿÷¿¿÷∆¿÷ ¿÷À¿◊¿◊%¿◊+¿◊|¿◊–¿ÿ¿ÿj¿ÿ≥¿ÿπ¿Ÿ
¿ŸZ¿Ÿ}¿ŸÉ¿Ÿì¿Ÿô¿ŸÈ¿⁄(¿⁄R¿⁄o¿⁄•¿⁄€¿⁄È¿⁄Ô¿€¿€]¿€¿€≥¿€ˆ¿‹,¿‹V¿‹q¿‹û¿‹ƒ¿‹Ã¿‹Ÿ¿‹Ò¿‹˜¿‹˚¿‹¸¿›L¿›ö¿›Î¿ﬁ4¿ﬁm¿ﬁê¿ﬁ¶¿ﬁ≈¿ﬁ˝¿ﬂ%¿ﬂP¿ﬂq¿ﬂî¿ﬂ∏¿ﬂÁ¿‡>¿‡O¿‡Y¿‡ä¿‡Ê¿‡˜¿·¿·"¿·*¿·D¿·J¿·N¿·O¿·ö¿·†¿·Ó¿‚¿‚¿‚`¿‚ò¿‚∏¿‚Œ¿‚Û¿„¿„8¿„`¿„Ñ¿„ù¿„∆¿„ ¿„À¿‰¿‰Q¿‰c¿‰i¿‰Æ¿‰ﬂ¿‰¸¿Â¿Â2¿ÂW¿Â}¿Âú¿ÂÔ¿Ê¿Ê5¿ÊK¿ÊO¿ÊP¿Êì¿Ê∞¿Ê¿¿Ê‚¿Á¿Á`¿Á|¿ÁÃ¿ÁÈ¿Áˆ¿Ë¿Ë]¿Ëx¿ËÖ¿Ëë¿Ëô¿Ë¨¿Ë∂¿È¿ÈP¿Èû¿ÈÌ¿Í9¿ÍÜ¿Íœ¿ÍÁ¿Íı¿Í˚¿Î1¿Îd¿Îv¿Î®¿Îˆ¿Ï ¿Ï¿Ï!¿ÏB¿ÏZ¿ÏÖ¿Ïé¿Ïî¿Ï§¿ÏÕ¿ÏÛ¿Ì'¿ÌO¿ÌÖ¿Ì¶¿ÌÃ¿Ì⁄¿ÌË¿Ó
¿ÓF¿Ób¿Ó≤¿Ó”¿Ó‰¿Ô¿Ô-¿Ô>¿Ô^¿Ôî¿Ô•¿Ô≈¿¿j¿Æ¿ø¿ÿ¿Ò,¿Ò=¿ÒM¿ÒY¿Òc¿Òõ¿Ò≥¿Ú¿Ú¿Ú&¿ÚB¿Úì¿Ú«¿Ú‘¿Ú¿Û>¿Ûã¿ÛÀ¿Ûÿ¿ÛÌ¿Ù=¿ÙJ¿ÙV¿Ù^¿Ùq¿Ù{¿Ù£¿Ù≥¿Ù÷¿ı¿ı&¿ıf¿ıy¿ıÉ¿ıú¿ı≈¿ıÚ¿ı¸¿ˆ¿ˆs¿ˆÀ¿ˆ‰¿˜¿˜¿˜%¿˜H¿˜x¿˜ú¿˜Ø¿˜π¿˜Ô¿¯¿¯¿¯¿¯¿¯j¿¯¥¿¯∫¿˘
¿˘#¿˘;¿˘<¿˘w¿˘µ¿˘∂¿˙¿˙¿˙S¿˙ò¿˙Ê¿˚3¿˚Y¿˚_¿˚≠¿˚˝¿¸K¿¸b¿¸h¿¸¥¿¸˛¿˝M¿˝¿˝∏¿˝π¿˛	¿˛$¿˛*¿˛z¿˛√¿˛…¿ˇ¿ˇ_¿ˇ´¿ˇÙ¿ @¿ y¿ «¿ È¿ Ì¿ Ó¿5¿;¿ã¿◊¿(¿A¿G¿é¿€¿'¿w¿«¿‰¿¿9¿J¿N¿O¿è¿Ã¿“¿¿C¿I¿ñ¿⁄¿˙¿¿¿a¿∞¿˛¿M¿_¿í¿«¿›¿˘¿/¿U¿r¿z¿Ä¿ª¿	¿	6¿	â¿	è¿	¨¿	Ã¿	“¿
¿
H¿
ï¿
õ¿
±¿
µ¿
∂¿
∑¿
˛¿@¿Å¿á¿Ω¿√¿	¿0¿6¿Ü¿”¿#¿]¿©¿™¿Ò¿@¿å¿ÿ¿)¿u¿¿¿Õ¿”¿¿k¿∑¿“¿ÿ¿)¿w¿≈¿¿d¿©¿Ø¿ø¿≈¿¿M¿ì¿î¿£¿§¿Î¿¿¿]¿t¿z¿√¿Á¿¿¿?¿i¿â¿¨¿ÿ¿¿'¿+¿,¿}¿É¿Œ¿Í¿¿9¿Ñ¿”¿¿k¿≤¿∏¿Œ¿‘¿$¿7¿=¿K¿í¿§¿Ò¿)¿:¿[¿Å¿†¿™¿∞¿Ã¿Á¿Ò¿˘¿¿¿"¿i¿ä¿é¿è¿‰¿Í¿5¿p¿v¿±¿∑¿¿>¿g¿u¿{¿º¿È¿
¿<¿B¿F¿G¿u¿Æ¿Ø¿Ê¿¿W¿ù¿´¿ -¿ °¿ ™¿ ∞¿ €¿ ﬂ¿ ‡¿! ¿!J¿!e¿!f¿!ã¿!®¿!©¿!‘¿!⁄¿"(¿"l¿"ì¿"ô¿"Á¿"Û¿#¿#2¿#K¿#Q¿#b¿#f¿#g¿#∞¿#∂¿$¿$¿$T¿$†¿$±¿$À¿$Ì¿%¿%-¿%K¿%S¿%W¿%X¿%†¿%¶¿%Ì¿&>¿&j¿&é¿&´¿&‚¿'¿'E¿'S¿'Y¿'Z¿'•¿'Ô¿(?¿(ã¿(å¿)¿)¿))¿)u¿)∏¿)‚¿)„¿*O¿*m¿*n¿*Ω¿+¿+W¿+u¿+‹¿,¿,#¿,+¿,T¿,¶¿,˜¿-&¿-P¿-x¿-Ä¿-Å¿-ú¿-Ú¿.7¿.ä¿.‹¿/%¿/5¿/=¿/C¿/ä¿/€¿0¿0n¿0Ω¿1¿1¿1j¿1ú¿1¢¿1…¿1Ú¿2¿2n¿2ü¿2≈¿2Õ¿2”¿2◊¿2ÿ¿3¿31¿3Ñ¿3ú¿3Í¿4<¿4J¿4P¿4i¿4£¿4©¿4È¿52¿5v¿5}¿5ñ¿5∫¿5¿¿5˜¿6`¿6ö¿6⁄¿6€¿6Ù¿72¿78¿7a¿7•¿7·¿8$¿8:¿8\¿8c¿8|¿8†¿8¶¿8Û¿9]¿9a¿9b¿9Æ¿9‹¿9ˇ¿:#¿:*¿:é¿:è¿:“¿;1¿;å¿;Ê¿<J¿<£¿<¸¿=X¿=Î¿>O¿>…¿?¿?J¿?g¿?ª¿?Ì¿@¿@(¿@e¿@ä¿@¨¿@ÿ¿A¿A4¿A>¿AF¿A§¿A»¿Aﬂ¿B¿B¿Bg¿B∂¿B‘¿C	¿CB¿CS¿C}¿Cá¿Cè¿C ¿D¿DK¿Dº¿E¿ET¿Eo¿E∂¿Eƒ¿E–¿F¿F¿F¿F'¿F(¿Fp¿Fq¿Fé¿F›¿G ¿G¿G9¿G´¿G ¿H&¿Hz¿Hú¿HÊ¿I¿II¿Ió¿I£¿Iæ¿I ¿I”¿J+¿JS¿J®¿K¿K)¿K4¿K<¿KB¿KC¿Kf¿Kg¿Kå¿KØ¿K◊¿K˜¿L)¿Ln¿L¥¿L€¿L¿M;¿MD¿Mn¿Mö¿M“¿N¿N&¿N3¿Nx¿Næ¿NÎ¿O¿O/¿OY¿Oë¿O¶¿OÒ¿O˙¿P!¿P¿P¢¿P™¿P∞¿P’¿PË¿PÏ¿PÌ¿Q[¿Q∫¿QÔ¿R3¿R]¿Ro¿Rw¿RÃ¿R¿R¯¿S¿SN¿Sõ¿SÂ¿T¿T8¿TB¿TJ¿TP¿Tô¿T∫¿T¿¿Tƒ¿T≈¿T˛¿U¿UT¿Uù¿UØ¿Uµ¿UÓ¿V2¿Vr¿Vé¿Ví¿Vì¿Vœ¿V’¿W¿WU¿Wü¿WÔ¿X¿X ¿Xl¿XÑ¿Xä¿X◊¿Y"¿YS¿Yq¿Yâ¿Y¨¿Y“¿Yÿ¿Y¯¿Zq¿Z‘¿Zÿ¿ZŸ¿ZÂ¿ZÊ¿[7¿[C¿[å¿[ç¿[é¿[ü¿[†¿[Ó¿\6¿\N¿\S¿\í¿\ﬁ¿\Û¿]C¿]í¿]‡¿^¿^H¿^O¿^T¿^•¿^Ÿ¿^⁄¿^€¿_¿_¿_-¿_Y¿_r¿_é¿_≠¿_ƒ¿_Ã¿`¿`'¿`N¿`é¿`∞¿`∆¿`–¿a ¿a¿a"¿aE¿aM¿af¿aà¿aê¿aπ¿aÌ¿aı¿b¿b+¿b3¿b9¿bL¿bP¿bQ¿b]¿b∏¿bπ¿bˆ¿c>¿ce¿cq¿câ¿c®¿cÀ¿d¿d¿dK¿ds¿d°¿dø¿dÀ¿dœ¿d–¿e¿eC¿eI¿eî¿e–¿e‹¿e˜¿f¿fG¿fN¿fπ¿fΩ¿fæ¿fÀ¿f◊¿g¿gG¿g¥¿h1¿hŸ¿iA¿i†¿j
¿jt¿jï¿j ¿k¿kr¿kz¿l¿l¿l¿l¿l[¿l\¿l≠¿læ¿lƒ¿m¿mS¿mY¿m©¿mË¿n5¿nÄ¿n≈¿nÂ¿nÎ¿o6¿ox¿o~¿oé¿oî¿o‡¿p¿p/¿pM¿p]¿pÑ¿p£¿p™¿pÃ¿pË¿q¿q$¿q@¿qV¿q_¿qe¿qi¿qj¿qª¿q—¿q◊¿r'¿rv¿r§¿r™¿r˙¿sG¿s∏¿s¿sÙ¿sˆ¿s˜¿t,¿t0¿tq¿t±¿tµ¿t˙¿u$¿uw¿u»¿uÌ¿uÛ¿v"¿v(¿vC¿vs¿vÉ¿v§¿v‹¿vÙ¿wE¿wx¿wÖ¿w°¿wÌ¿x8¿xä¿x€¿xË¿y¿y)¿yy¿yì¿y ¿y◊¿y¿z¿zk¿zâ¿z©¿z‡¿zÌ¿z˘¿{¿{¿{¿{/¿{3¿{4¿{I¿{q¿{ì¿{≥¿{Õ¿{Á¿{Ì¿|¿|¿|6¿|<¿|@¿|A¿|M¿|r¿|ã¿|¶¿|™¿|´¿|∑¿|…¿|›¿|Û¿|˜¿|¯¿}¿}¿}9¿}V¿}\¿}`¿}a¿}m¿}°¿}ª¿}”¿}Ÿ¿}›¿}ﬁ¿}Í¿~¿~â¿~ç¿~è¿~ê¿~Õ¿~—¿¿^¿ö¿∆¿Ä¿ÄL¿Äj¿Äù¿Ä∑¿Ä∏¿Ä⁄¿ÄÊ¿Ä¯¿Åa¿Å∆¿Å⁄¿Åﬁ¿Å‡¿Å·¿Ç¿Ç#¿Çt¿Çä¿Çé¿Ç·¿Ç˜¿Ç˚¿ÉJ¿Éñ¿ÉÀ¿Ñ¿Ñ¿Ñp¿Ñ¬¿Ñ”¿Ñ◊¿Ö=¿ÖA¿ÖO¿ÖS¿Öú¿ÖΩ¿ÜL¿Üù¿ÜÁ¿á¿áU¿áÖ¿á¬¿á»¿á‰¿áË¿à5¿à¿à±¿àÂ¿â¿âN¿âT¿âp¿ât¿âu¿âå¿â™¿âœ¿â–¿ä!¿äF¿äL¿ä{¿äÅ¿äú¿äÃ¿ä‹¿ä˝¿ã5¿ãM¿ãû¿ã—¿ãﬁ¿ã˙¿åF¿åë¿å„¿ç4¿çA¿çZ¿çÇ¿ç“¿çÏ¿é#¿é0¿éI¿éq¿éƒ¿é‚¿è¿è9¿èF¿èR¿èZ¿èm¿èw¿èà¿èå¿èç¿èß¿è¿¿ê¿êU¿êÜ¿êª¿ê—¿êÓ¿ë¿ë2¿ëc¿ëÑ¿ë‰¿í¿í"¿í=¿íY¿íf¿íâ¿í´¿íˆ¿ì<¿ìé¿ìø¿î¿î6¿îg¿îî¿î∞¿îø¿ï	¿ï8¿ï{¿ï¨¿ï€¿ñY¿ñœ¿ó¿óG¿ó}¿óÖ¿óã¿óè¿óê¿óﬂ¿óÂ¿ò5¿òg¿òû¿òÎ¿ôj¿ôπ¿ô€¿ô¸¿ö¿öB¿öF¿öG¿öâ¿öß¿öÕ¿ö—¿ö“¿õ¿õG¿õc¿õg¿õh¿õó¿õÁ¿ú0¿út¿úí¿ú≈¿úÈ¿ù¿ù'¿ù£¿ùÛ¿ù˘¿û(¿ûK¿û¿ûå¿ü ¿üT¿üZ¿üÜ¿üÆ¿üƒ¿ü»¿ü…¿üˆ¿ü¸¿†6¿†W¿†x¿†é¿†í¿†ì¿†Ÿ¿†ﬂ¿°¿°*¿°N¿°j¿°º¿°˜¿¢%¿¢O¿¢g¿¢{¿¢Å¿¢ô¿¢∞¿¢≈¿¢…¿¢ ¿£¿£¿£i¿£∫¿£Ô¿§$¿§?¿§Z¿§v¿§ò¿§Ë¿•¿•*¿•0¿•Q¿•Ä¿•ó¿•õ¿•ú¿•®¿•Õ¿•Ê¿¶
¿¶&¿¶A¿¶ì¿¶æ¿¶ƒ¿¶»¿¶…¿¶’¿¶Á¿¶˚¿ß¿ß;¿ßQ¿ß£¿ßŒ¿ß‘¿ßÿ¿ßŸ¿ßÂ¿® ¿®$¿®@¿®[¿®≠¿®ÿ¿®ﬁ¿®‚¿®„¿®Ô¿©#¿©G¿©c¿©y¿©À¿©ˆ¿©¸¿™ ¿™¿™*¿™V¿™W¿™¿™©¿™™¿™Ì¿´¿´;¿´ã¿´∑¿´ª¿´º¿´˙¿¨%¿¨G¿¨ó¿¨ø¿¨√¿¨ƒ¿¨–¿≠¿≠B¿≠`¿≠Ö¿≠ö¿≠Ø¿≠Ù¿Æ¿Æ'¿Æ1¿ÆE¿Æô¿Æ«¿Æœ¿Æ’¿ÆÍ¿ÆÓ¿Æ¿ÆÒ¿ØA¿ØZ¿Ø^¿Ø´¿Ø˙¿∞¿∞Z¿∞[¿∞õ¿∞°¿∞‚¿±%¿±u¿±«¿±Õ¿≤¿≤0¿≤6¿≤Ü¿≤•¿≤≤¿≤√¿≤„¿≤˙¿≤˛¿≤ˇ¿≥7¿≥]¿≥i¿≥∞¿¥¿¥[¿¥b¿¥ï¿¥£¿¥©¿¥›¿µ(¿µ_¿µñ¿µ§¿µ—¿∂6¿∂?¿∂U¿∂u¿∂}¿∂Ö¿∂â¿∂ä¿∂ñ¿∂ª¿∂‘¿∑!¿∑o¿∑ø¿∑ı¿∏G¿∏K¿∏L¿∏X¿∏j¿∏†¿∏ı¿π	¿π¿π¿π¿π]¿πi¿πm¿πê¿π·¿∫ ¿∫R¿∫û¿∫¬¿∫Ÿ¿ª¿ª¿ª¿ªT¿ªñ¿ªó¿ªﬁ¿º/¿º5¿ºE¿ºK¿ºô¿º◊¿Ω¿Ω¿ΩT¿Ωï¿Ω—¿Ω”¿Ω‘¿æ!¿æT¿æX¿æ°¿æ∆¿ø¿ø%¿øZ¿øÄ¿øÜ¿øá¿øÕ¿øŒ¿ø⁄¿¿¿¿E¿¿I¿¿J¿¿V¿¿∏¿¿∫¿¿ª¿¡	¿¡Q¿¡U¿¡¶¿¡˜¿¬%¿¬o¿¬ë¿¬≤¿¬Á¿√¿√¿√e¿√~¿√∞¿√±¿√‹¿√›¿ƒ¿ƒ¿ƒ!¿ƒ'¿ƒv¿ƒ™¿ƒı¿≈%¿≈p¿≈†¿≈π¿≈Â¿∆¿∆6¿∆_¿∆é¿∆î¿∆ï¿∆„¿«'¿«M¿«N¿«ô¿«∞¿«∂¿»¿»>¿»W¿»X¿»Å¿»á¿»–¿…!¿…Z¿…`¿…™¿…Ì¿…˘¿ ;¿ <¿ å¿ £¿ ‘¿ ’¿ ·¿ÀF¿ÀG¿Àn¿Ào¿À±¿À∑¿À◊¿Ã¿Ã"¿ÃM¿Ãq¿Ãu¿Ãv¿Ãπ¿Ãø¿Õ¿ÕE¿Õa¿Õg¿Õ∞¿ÕÌ¿Œ¿Œ;¿Œ?¿ŒA¿ŒB¿Œì¿Œ´¿ŒØ¿Œ˛¿œ¿œS¿œn¿œà¿œΩ¿œ√¿œƒ¿œ–¿œÈ¿–¿–+¿–T¿–}¿–¨¿–≥¿–ˆ¿—#¿—L¿—t¿—ú¿—ù¿— ¿—Ú¿“¿“$¿“V¿“†¿““¿” ¿”¿”'¿”(¿”d¿”™¿”—¿”Ò¿‘+¿‘]¿‘¿‘ô¿‘Ω¿‘∆¿‘Ã¿’¿’;¿’Ö¿’Ü¿’‘¿÷¿÷p¿÷º¿÷ ¿÷˝¿◊¿◊¿◊¿◊$¿◊R¿◊S¿◊Æ¿◊Ø¿◊ª¿◊’¿ÿ¿ÿ¿ÿ¿ÿ¿ÿW¿ÿx¿ÿ|¿ÿ~¿ÿ¿ÿ∆¿Ÿ¿Ÿ¿Ÿk¿Ÿ•¿Ÿ¿⁄¿⁄+¿⁄E¿⁄|¿⁄}¿⁄â¿⁄Ã¿€¿€¿€	¿€¿€.¿€Z¿€Ç¿€´¿€‘¿‹¿‹
¿‹V¿‹s¿‹w¿‹x¿‹Ñ¿‹´¿‹¨¿‹∏¿‹“¿‹ﬁ¿‹Î¿›¿›c¿›Ç¿›â¿›ç¿›è¿›ê¿››¿ﬁ¿ﬁ¿ﬁM¿ﬁõ¿ﬁΩ¿ﬁ¡¿ﬂ¿ﬂZ¿ﬂ®¿ﬂ˘¿‡E¿‡Ä¿‡Ñ¿‡—¿·¿·e¿·z¿·≈¿·Ê¿‚	¿‚-¿‚Y¿‚§¿‚æ¿‚Û¿„$¿„O¿„i¿„ß¿„»¿„Ù¿„˙¿„˛¿„ˇ¿‰¿‰@¿‰b¿‰É¿‰Ñ¿‰À¿‰Ã¿ÂY¿Â¨¿Âæ¿Â›¿Â¯¿Ê%¿Êu¿Êƒ¿Á¿Á#¿ÁZ¿Áu¿Áπ¿Á‡¿ËL¿ËÇ¿Ë∞¿ËÊ¿È"¿Èo¿ÈÜ¿È‚¿Í ¿ÍV¿Íd¿Í∆¿Í‰¿Î¿Î¿ÎO¿Î[¿Îè¿Î˘¿Ï&¿ÏN¿Ïc¿Ï®¿Ï∂¿Ï¬¿ÏÚ¿ÌX¿ÌÅ¿Ì•¿Ì∫¿Ì˜¿Ó¿Ó¿ÓN¿Óç¿Óô¿Ó£¿Ó´¿ÓÚ¿Ô'¿Ôi¿Ô´¿Ôµ¿Ô‹¿ÔÈ¿¿¿k¿£¿‘¿Ò¿ÒC¿Òq¿Ò}¿Òá¿Ò∑¿Ò—¿ÒŸ¿Òﬂ¿Ò„¿Ò‰¿Ú?¿Ú@¿ÚL¿Úe¿Úà¿Úß¿Ú–¿Ú˘¿Û(¿Û/¿Û^¿Û™¿Ù¿ÙL¿ÙR¿Ùj¿Ùâ¿Ù™¿Ù≤¿ÙÃ¿ÙÌ¿ı
¿ı ¿ı:¿ıC¿ıî¿ı⁄¿ˆ¿ˆ`¿ˆÆ¿ˆ‰¿˜
¿˜=¿˜á¿˜µ¿˜¡¿˜À¿¯¿¯-¿¯i¿¯ù¿¯Î¿˘:¿˘â¿˘—¿˘Î¿˙¿˙¿˙$¿˙2¿˙8¿˙9¿˙}¿˙µ¿˙Â¿˙Ï¿˙Ì¿˚/¿˚m¿˚s¿˚t¿˚æ¿˚Ô¿¸¿¸>¿¸?¿¸s¿¸ô¿¸∫¿¸Í¿¸¿¸Ò¿˝¿˝1¿˝<¿˝[¿˝Ñ¿˝√¿˝˚¿˛3¿˛V¿˛w¿˛¿˛Ö¿˛¡¿˛Ÿ¿˛˝¿ˇ¿ˇ1¿ˇI¿ˇP¿ˇü¿ˇ’¿ !¿ m¿ °¿ ≈¿ ˆ¿>¿j¿t¿|¿√¿„¿"¿Y¿{¿ï¿æ¿«¿ı¿˚¿¸¿"¿^¿k¿∫¿¿¿÷¿¿Y¿´¿˝¿-¿Z¿l¿ë¿…¿Ô¿¿S¿[¿a¿Ç¿ú¿†¿°¿”¿ˇ¿'¿.¿N¿‡¿Ó¿Ú¿Û¿ˇ¿&¿O¿S¿T¿`¿£¿È¿	¿	-¿	?¿	G¿	h¿	ê¿	ñ¿	ö¿	õ¿	ß¿	’¿	Ó¿
<¿
Ö¿
†¿
¡¿
¿
ˆ¿
˙¿
˚¿¿<¿\¿|¿Ç¿Ü¿á¿£¿§¿∞¿ ¿‚¿Ê¿Á¿%¿'¿(¿p¿t¿¬¿˙¿¿¿^¿d¿≥¿ ¿Q¿°¿∏¿‰¿¿7¿>¿ã¿è¿ê¿®¿ƒ¿ﬂ¿Ú¿Û¿¿E¿F¿¿¥¿µ¿Í¿¿¿>¿X¿Y¿∞¿∂¿∆¿Ã¿1¿ô¿	¿+¿,¿Q¿É¿≠¿Ô¿#¿X¿©¿÷¿¿r¿Å¿Ô¿˜¿K¿™¿¿V¿\¿]¿ç¿¿$¿c¿û¿∫¿’¿›¿„¿Á¿Ë¿¿#¿r¿â¿é¿›¿'¿j¿k¿ô¿ÿ¿¿¿	¿7¿O¿U¿ì¿ó¿ò¿Ë¿7¿t¿y¿≥¿‰¿ˇ¿¿.¿M¿S¿¿¥¿·¿!¿X¿u¿{¿Ø¿Î¿Ô¿¿#¿8¿H¿N¿c¿s¿y¿î¿ò¿ô¿Ï¿ 7¿ T¿ n¿ ü¿ £¿ §¿ Ô¿!9¿!R¿!X¿!¢¿!‰¿!Í¿!˙¿" ¿"O¿"y¿"ó¿"ô¿"ö¿"Ó¿"Ú¿#I¿#ô¿#¨¿#¿$;¿$^¿$Ü¿$ì¿$´¿$∫¿$·¿$Í¿$Ï    
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreator ¿ﬂ