ÄÅaxisDirection
controllerphysicsviewportBuilderincrementCalculatorexcludeFromSemanticssemanticChildCountdragStartBehaviorrestorationIdscrollBehaviorclipBehavioraxiscreateStatedebugFillPropertiesmaybeOfof"recommendDeferredLoadingForContextensureVisible
scrollablepositionupdateShouldNotify	_positionresolvedPhysics_physicsdeltaToScrollOrigin_effectiveScrollControllervsyncdevicePixelRatio_devicePixelRationotificationContextstorageContext_persistedScrollOffset_configuration_fallbackScrollController_mediaQueryGestureSettings_updatePositionrestoreState
saveOffset	initStatedidChangeDependencies_shouldUpdatePositiondidUpdateWidgetdispose_scrollSemanticsKeysetSemanticsActions_gestureDetectorKey_ignorePointerKey_gestureRecognizers_shouldIgnorePointer_lastCanDrag_lastAxisDirection
setCanDragsetIgnorePointer_drag_hold_handleDragDown_handleDragStart_handleDragUpdate_handleDragEnd_handleDragCancel_disposeHold_disposeDrag#_targetScrollOffsetForPointerScroll_pointerSignalEventDelta_receivedPointerSignal_handlePointerScroll _handleScrollMetricsNotification_buildChromebuild_performEnsureVisiblestatechild	registrar_selectionDelegate_kDefaultDragTargetSize%_kDefaultSelectToScrollVelocityScalar_autoScroller_scheduledLayoutChange _currentDragStartRelatedToOrigin_currentDragEndRelatedToOrigin_selectionStartsInScrollable_scheduleLayoutChange!_selectableStartEdgeUpdateRecords_selectableEndEdgeUpdateRecordsdidChangeSelectableshandleClearSelectionhandleSelectionEdgeUpdate_inferPositionRelatedToOrigin"_updateDragLocationsFromGeometrieshandleSelectAllhandleSelectWordhandleGranularlyExtendSelection"handleDirectionallyExtendSelection_jumpToEdge_globalPositionInScrollable_dragTargetFromEventdispatchSelectionEventToChildensureChildUpdatedallowImplicitScrollingcreateRenderObjectupdateRenderObject_allowImplicitScrolling_semanticChildCountdescribeSemanticsConfiguration
_innerNodeassembleSemanticsNodeclearSemanticscreateDefaultValuedidUpdateValuefromPrimitivestoPrimitivesenablednoneweightedEventweightedContinuousfreediagonalDragBehaviorhorizontalDetailsverticalDetails_verticalFallbackController_horizontalFallbackController_verticalOuterScrollableKey_horizontalInnerScrollableKeyverticalScrollablehorizontalScrollabletwoDimensionalScrollable
lockedAxislastDragOffset_evaluateLockedAxisViewportBuilderTwoDimensionalViewportBuilder_EnsureVisibleResults
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionStateÅñ	ToleranceWidgetBuildContextViewportOffsetListFuturevoidViewportListViewGridViewCustomScrollViewofensureVisibleSingleChildScrollViewShrinkWrappingViewportScrollControllerScrollPositionPageViewPageControllerPageStoragekeepScrollOffsetPageStorageKeykey
ScrollViewScrollNotificationNotificationListenerStatefulWidgetAxisDirectiondownDragStartBehaviorstartCliphardEdgeaxisDirectionrightinitialScrollOffsetoffset	animateToScrollConfigurationScrollBehaviorscrollBehaviorScrollPhysicsphysicsAlwaysScrollableScrollPhysicsScrollActionScrollIncrementTypepagelineScrollIncrementCalculatorGestureDetectorexcludeFromSemanticsbool	separatedSemanticsConfigurationscrollChildCountintDragGestureRecognizerdragStartBehaviorRestorationBucketRestorationScopeRestorationManagerStringScrollableDetailsclipBehaviorAxisaxisDirectionToAxisoverrideDiagnosticPropertiesBuilderdebugFillPropertiesaddEnumPropertyDiagnosticsPropertyStringPropertyInheritedElement'getElementForInheritedWidgetOfExactTypewidget
scrollabledependOnInheritedElementcontextmaybeOfaxisFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintrecommendDeferredLoadingactivityScrollActivityvelocitygetInheritedWidgetOfExactTypepositiondoubleDurationzeroCurveCurveseaseScrollPositionAlignmentPolicyexplicitRenderObject_performEnsureVisiblefindRenderObject	alignmentdurationcurvealignmentPolicytargetRenderObjectaddAllisEmptyvaluelengthsinglewaitthenInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContextcreateScrollPositionOffsetEdgeDraggingAutoScrollerpixelsupleft
controllerTickerProvidercurrentContextrestorationIdDeviceGestureSettingsgetScrollPhysicsapplyTodetachscheduleMicrotaskdisposeattachregisterForRestorationrestoreOffsetinitialRestore!debugIsSerializableForRestorationServicesBindinginstancerestorationManager	flushData	initState
MediaQuerymaybeGestureSettingsOfmaybeDevicePixelRatioOfViewdevicePixelRatiodidChangeDependenciesshouldNotifyruntimeTypeparentdidUpdateWidget	GlobalKey	protectedSetSemanticsActioncurrentStatereplaceSemanticsActionsRawGestureDetectorStateMapTypeGestureRecognizerFactoryverticalVerticalDragGestureRecognizer$GestureRecognizerFactoryWithHandlerssupportedDevicesdragDevicesonDownonStartonUpdateonEndonCancelminFlingDistanceminFlingVelocitymaxFlingVelocityvelocityTrackerBuildergestureSettings
horizontalHorizontalDragGestureRecognizerreplaceGestureRecognizersRenderIgnorePointerignoringDragScrollHoldControllerDragDownDetailsholdDragStartDetailsdragDragUpdateDetailsupdateDragEndDetailsendcancelminmaxminScrollExtentmaxScrollExtentPointerScrollEventLogicalKeyboardKeyHardwareKeyboardlogicalKeysPressedanypointerAxisModifierscontainskindPointerDeviceKindmousescrollDeltadydxaxisDirectionIsReversedPointerSignalEventshouldAcceptUserOffsetGestureBindingpointerSignalResolverregisterPointerScrollInertiaCancelEventpointerScrollPointerEventScrollMetricsNotificationdepthmarkNeedsSemanticsUpdate	directiondecorationClipBehaviorbuildScrollbarbuildOverscrollIndicatorchildListeneronPointerSignalRawGestureDetectorgesturesbehaviorHitTestBehavioropaque	SemanticsexplicitChildNodesIgnorePointerviewportBuilderonNotificationallowImplicitScrollingsemanticChildCountSelectionRegistrarSelectionContainerstate	registrardelegate)MultiSelectableSelectionContainerDelegatevelocityScalaraddListenerremoveListenerSchedulerBindingaddPostFrameCallbacklayoutDidChangeSelectionEdgeUpdateEvent
SelectableselectablestoSetremoveWheredidChangeSelectablesSelectionResultClearSelectionEventclearhandleClearSelectionglobalPositiontypeSelectionEventTypeendEdgeUpdate	translateforEndgranularityforStarthandleSelectionEdgeUpdatependingstopAutoScrollstartAutoScrollIfNecessary	scrolling	RenderBoxglobalToLocallocalToGlobalsizeheightwidthinfiniteMatrix4getTransformTocurrentSelectionStartIndexforceUpdateStartSelectionGeometryhasSelectionSelectionPointstartSelectionPointMatrixUtilstransformPointlocalPosition
lineHeightcurrentSelectionEndIndexforceUpdateEndendSelectionPointSelectAllSelectionEventhandleSelectAllSelectWordSelectionEventhandleSelectWordGranularlyExtendSelectionEventhandleGranularlyExtendSelectionisEnd!DirectionallyExtendSelectionEvent"handleDirectionallyExtendSelectionRectfromLTRB
edgeBottombottomedgeToptopjumpTofromLTWH
fromCentercenterSelectionEventstartEdgeUpdategranularlyExtendSelectiondirectionallyExtendSelectionremove	selectAll
selectWorddispatchSelectionEventToChildabsprecisionErrorTolerancedispatchSelectionEventSemanticsNodeRenderViewportexcludeFromScrollingRenderAbstractViewportuseTwoPaneSemanticsdescribeSemanticsConfigurationSingleChildRenderObjectWidgetRenderProxyBoxisSemanticBoundaryhaveDimensionshasImplicitScrollingscrollPositionscrollExtentMaxscrollExtentMinIterablefirstisTaggedassembleSemanticsNodeshowOnScreenisMergedIntoParentisPartOfNodeMergingrecthasFlagSemanticsFlagisHiddenindexInParentscrollIndex
updateWithconfigchildrenInInversePaintOrderclearSemanticsRestorableValuenotifyListenersObject
kTouchSlopTwoDimensionalViewportTwoDimensionalScrollViewnoneverticalScrollablehorizontalScrollable"dependOnInheritedWidgetOfExactTypetwoDimensionalScrollableScrollMetricsverticalDetailshorizontalDetailsincrementCalculatordiagonalDragBehaviorverticalOffsethorizontalOffset
setCanDragweightedEventweightedContinuousfree_gestureRecognizers_handleDragCancel_lastCanDrag_lastAxisDirection_gestureDetectorKey_effectiveScrollController_configuration_handleDragDown_handleDragStartsourceTimeStampdeltaprimaryDelta_handleDragUpdatepixelsPerSecondVelocityprimaryVelocity_handleDragEndPanGestureRecognizer_physics_mediaQueryGestureSettingsStatefulWidgetInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContext)MultiSelectableSelectionContainerDelegateSingleChildRenderObjectWidgetRenderProxyBoxRestorableValue
ScrollableScrollableStatePø∏daÖª;:ÿMÙ¶J… Ñ
Ñ	Tolerance É‰package:flutter/physics.dart  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:math  Äÿ  package:flutter/foundation.dart  Å  package:flutter/gestures.dart  Å*  package:flutter/rendering.dart  ÅS  package:flutter/scheduler.dart  Å|  package:flutter/services.dart  Å•  
basic.dart  Å∫  framework.dart  Å”  gesture_detector.dart  ÅÛ  media_query.dart  Ç  notification_listener.dart  Ç3  restoration.dart  ÇN  restoration_properties.dart  Çt  scroll_activity.dart  Çì  scroll_configuration.dart  Ç∑  scroll_context.dart  Ç’  scroll_controller.dart  Çˆ  scroll_physics.dart  É  scroll_position.dart  É3  scrollable_helpers.dart  ÉU  selectable_region.dart  Év  selection_container.dart  Éô  ticker_provider.dart  É∏  	view.dart  ÉÃ  viewport.dart    	dart:core¿ ïº ¿p˚âv <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ)ÅRÅ{Å£Å§ÅπÅ“ÅÚÇÇ2ÇMÇsÇíÇ∂Ç‘ÇıÉÉ2ÉTÉuÉòÉ∑ÉÀÉ„É‰ÑÑÑ3ÑQÑRÑùÑ¬ÖÖÖlÖõÜ.Ü/Ü\Ü_Ü•ÜÚáá`áaá±á⁄áﬁà)àwàªàøââ`â´â√â«ääbätäxäπäΩã
ãYãúãÊãÍå3åtåƒçççFçJçòçÈé5éÄéŒé“é‡é‰è-è]è≠è êê2êÄêûêÌê˚ëNëçë∑ë‹ëÒí í-íBíTíwíïíºíŸìì'ì@ìgì≠ìÆìÈîî!îoîøïïUï¶ï¬ï»ïññ*ñ+ñcñ¥ñƒñ óóhóµó˙òIòíò∑òΩôôFôLô\ôbô≠ô’ôÍöööFözöÄöÃö˜ö˝õKõtõzõØú ú7ú=úäú⁄ù+ùtùƒûû5û;ûKûQû¢ûüBüWüwüxü≈üÀ††[†a†q†w†¡°°T°}°~°ø¢¢X¢n¢t¢¿££H£N£Ü£‘§§"§Z§[§ù§Í•••]•©•Û¶¶¶¶$¶u¶â¶¨¶≠¶ı¶˚ßKßQßùßË®4®:®Ü®Õ®”®„®È©.©à©©©™™™@™~™Ñ™Ã´´b´Å´á´“¨ ¨Q¨W¨ü¨•¨µ¨ª≠
≠,≠2≠G≠t≠u≠∞≠˛ÆÆSÆêÆñÆ·Ø-Ø3ØCØIØñØ®ØΩØ‹Ø›∞∞∞]∞¶∞Í±±*±+±a±g±ä±ê±Ë≤;≤Å≤ú≤ù≤—≤◊≥ ≥7≥8≥D≥z≥{≥á≥Ã≥˜¥H¥î¥ÿ¥‹¥›µ-µVµ\µµÖµìµ‘µﬁµ‰∂0∂w∂√∂È∂Ô∑=∑ç∑⁄∑˜∑˝∏I∏ô∏¥∏∫∏ ∏–ππDπéπ’∫∫l∫ä∫‰ª7ªsªÆª…ª—ªıºJºPºaºeºfº∂º≈ºÀºÓºÙΩΩ=ΩGΩMΩôΩ‡æ,æRæXæ¶æˆø@øFøíø‚ø˝¿ @¿ @O¿ @â¿ @è¿ @ü¿ @•¿ @ı¿ A#¿ Ag¿ A≤¿ A¬¿ AÁ¿ B¿ B7¿ Bà¿ B™¿ B∑¿ B”¿ C¿ CT¿ C¶¿ C˚¿ D2¿ DX¿ Dr¿ D¿ D¶¿ D˙¿ E&¿ E3¿ E?¿ EG¿ EZ¿ Ed¿ EÅ¿ EÖ¿ EÜ¿ E◊¿ F¿ F¿ Fi¿ F∫¿ G
¿ G¿ G]¿ G¨¿ Gı¿ G˚¿ HI¿ Hí¿ H‹¿ Hˇ¿ I¿ IT¿ Ip¿ I…¿ J#¿ J@¿ Jö¿ J‹¿ J‰¿ K¿ KY¿ K_¿ Kq¿ Ku¿ Kv¿ K≈¿ K‚¿ KË¿ L&¿ Lv¿ Lò¿ LΩ¿ LŸ¿ Lı¿ M¿ M;¿ Mó¿ Mû¿ M◊¿ Mÿ¿ N)¿ No¿ N∆¿ O¿ OA¿ OÅ¿ Oß¿ OÊ¿ P¿ P2¿ Pu¿ Pö¿ P∏¿ P‘¿ PÍ¿ Q¿ QD¿ QM¿ Qo¿ Qp¿ QΩ¿ Q·¿ R¿ R¿ R¿ RP¿ Rs¿ Ry¿ Rò¿ Rµ¿ Rª¿ S¿ S	¿ S¿ S¿ S]¿ Sû¿ Sœ¿ SÍ¿ T¿ T$¿ T>¿ TD¿ TE¿ Ti¿ Tä¿ Tã¿ Tó¿ T…¿ TÓ¿ TÚ¿ TÙ¿ Tı¿ U!¿ U%¿ Uo¿ Uö¿ Uû¿ U„¿ V0¿ V4¿ VÖ¿ V∫¿ W¿ W9¿ W:¿ WG¿ WH¿ Wå¿ Wí¿ W‡¿ X-¿ X{¿ X®¿ X≈¿ X∆¿ Y¿ Y5¿ YP¿ YQ¿ Y†¿ Y‚¿ YË¿ Z9¿ Zp¿ Zì¿ Z∞¿ Zœ¿ Z˙¿ [¿ [C¿ [b¿ [é¿ [Æ¿ [Ÿ¿ [ﬂ¿ [„¿ [‰¿ \J¿ \K¿ \W¿ \í¿ \ì¿ \ü¿ \√¿ \ƒ¿ \–¿ ]¿ ]%¿ ]&¿ ]2¿ ]Å¿ ]Ç¿ ]é¿ ]º¿ ]Ω¿ ]…¿ ]˛¿ ^R¿ ^S¿ ^y¿ ^®¿ ^›¿ ^ﬁ¿ _&¿ _A¿ _ê¿ _…¿ _Î¿ `¿ `O¿ `§¿ `™¿ `›¿ `¸¿ a2¿ a¿ aÀ¿ b¿ b/¿ b5¿ b6¿ bï¿ b¥¿ bÂ¿ bÈ¿ bÍ¿ bˆ¿ c?¿ c}¿ cú¿ cÃ¿ d)¿ d/¿ d3¿ d4¿ d@¿ dc¿ dö¿ d≈¿ e¿ eX¿ eï¿ eô¿ eö¿ e¶¿ eª¿ e‡¿ f¿ f¿ f3¿ f7¿ f8¿ fD¿ fe¿ f≤¿ g¿ g3¿ gV¿ gZ¿ g[¿ gê¿ g·¿ gÙ¿ g˙¿ hâ¿ hú¿ h¢¿ i¿ ip¿ iy¿ iπ¿ iŒ¿ i÷¿ i˝¿ j$¿ j\¿ j]¿ j≠¿ j±¿ j≤¿ jæ¿ jÌ¿ k¿ k¿ kI¿ ks¿ k¿¿ k‰¿ l¿ lB¿ lw¿ l•¿ lœ¿ lﬁ¿ m¿ mB¿ mk¿ m∂¿ m’¿ n¿ n¿ n!¿ nZ¿ nç¿ nì¿ nî¿ n¿¿ nŸ¿ nﬂ¿ n„¿ n‰¿ n¿ o¿ o(¿ oS¿ o`¿ oì¿ oø¿ o≈¿ o∆¿ oﬁ¿ p¿ p¿ p¿ p¿ p-¿ p.¿ pc¿ pd¿ pp¿ p}¿ p∏¿ pÏ¿ q6¿ q<¿ q@¿ qA¿ qo¿ qp¿ q◊¿ r
¿ r¿ r`¿ r∆¿ rÎ¿ rÏ¿ s¿ s¿ s¿ s+¿ s8¿ sX¿ s™¿ s∏¿ sæ¿ s–¿ t¿ td¿ tÆ¿ tÏ¿ u¿ u¿ u1¿ uM¿ uè¿ uˇ¿ v`¿ vô¿ v≤¿ vﬂ¿ w¿ w?¿ wj¿ wõ¿ w›¿ x¿ xa¿ xΩ¿ x˛¿ y?¿ yÇ¿ yì¿ y¢¿ yØ¿ yÕ¿ z¿ zÉ¿ zÊ¿ {!¿ {:¿ {g¿ {ñ¿ {«¿ {Ú¿ |#¿ |e¿ |ß¿ |È¿ }E¿ }Ü¿ }«¿ ~
¿ ~¿ ~*¿ ~7¿ ~?¿ ~E¿ ~_¿ ~Ö¿ ~π¿ ¿ ¿ ¿ ¿ (¿ 5¿ [¿ Ñ¿ í¿ ò¿ ∫¿ Ó¿ Äh¿ Äô¿ Äü¿ Ä£¿ Ä§¿ Ä∏¿ Äπ¿ Ä»¿ ÄÁ¿ ÄË¿ Å¿ Å5¿ ÅP¿ Åy¿ Å}¿ Å~¿ Å≤¿ Å¸¿ ÇM¿ Çv¿ Çë¿ Ç√¿ Çﬁ¿ Ç˘¿ Ç˝¿ Ç˛¿ É4¿ ÉÉ¿ ÉØ¿ ÉÀ¿ Éœ¿ É–¿ Ñ ¿ ÑO¿ Ñ{¿ Ñî¿ ÑØ¿ Ñ≥¿ Ñ¥¿ Ñ—¿ Ö¿ ÖU¿ Öû¿ Ö±¿ Öø¿ Ö≈¿ Öı¿ ÜD¿ Üp¿ ÜÖ¿ Üö¿ Üµ¿ Ü–¿ Ü‘¿ Ü’¿ ÜÌ¿ Üˇ¿ á¿ á¿ á¿ á.¿ á2¿ á3¿ áE¿ áF¿ áñ¿ á–¿ à¿ à"¿ àe¿ àÖ¿ àå¿ àê¿ àë¿ à‹¿ â)¿ â7¿ âu¿ âå¿ âÊ¿ ä=¿ ä|¿ äÃ¿ ã¿ ãh¿ ãµ¿ ãƒ¿ ãÒ¿ ãÚ¿ å¿ å)¿ åB¿ åc¿ åÖ¿ åü¿ å∏¿ åŸ¿ å˚¿ ç¿ ç¿ ç;¿ çN¿ çT¿ çf¿ çj¿ çk¿ ç•¿ ç·¿ é.¿ é>¿ éF¿ éÇ¿ é÷¿ è+¿ èn¿ èÀ¿ è”¿ ê¿ ê/¿ êá¿ êç¿ êë¿ êí¿ êƒ¿ êÌ¿ ë=¿ ëè¿ ë–¿ ëı¿ ë˚¿ ëˇ¿ í ¿ íR¿ íu¿ íÂ¿ ì¿ ìV¿ ì^¿ ìd¿ ìv¿ ìz¿ ì{¿ ì∑¿ ì¿ î¿ îE¿ îx¿ î¿ îÄ¿ î™¿ îπ¿ ï¿ ï¿ ï¿ ï¿ ï¿ ï-¿ ï.¿ ï:¿ ïa¿ ïÄ¿ ïﬁ¿ ñ%¿ ñ,¿ ñT¿ ñ¿ ñÜ¿ ñ‰¿ ó(¿ óN¿ óf¿ óÄ¿ óó¿ ó»¿ óÎ¿ ò¿ ò8¿ òd¿ ò°¿ òΩ¿ ò˚¿ ô¿ ôC¿ ôq¿ ô±¿ ô¿¿ ôÕ¿ ôÿ¿ ô·¿ ôË¿ ôÈ¿ ö¿ öQ¿ öã¿ ö¨¿ ö–¿ öÓ¿ õ2¿ õk¿ õÑ¿ õé¿ õó¿ õù¿ õû¿ õ ¿ õÀ¿ ú¿ ú]¿ úz¿ ú¶¿ úª¿ ú◊¿ úı¿ ù¿ ù¿ ù¿ ù¿ ù/¿ ù3¿ ù4¿ ùÇ¿ ùŒ¿ û¿ ûC¿ û^¿ ûz¿ û°¿ û¿¿ ü¿ üB¿ üI¿ üé¿ üú¿ ü∏¿ ü“¿ üÊ¿ †¿ †<¿ †C¿ †}¿ †Å¿ †Ç¿ †é¿ †”¿ †˛¿ °N¿ °•¿ °©¿ °´¿ °¨¿ °ﬂ¿ °„¿ ¢ ¿ ¢b¿ ¢ù¿ ¢√¿ ¢‹¿ ¢¯¿ £¿ £.¿ £4¿ £5¿ £T¿ £u¿ £ã¿ £±¿ £≤¿ £æ¿ §¿ §¿ §¿ §m¿ §Æ¿ §Ø¿ §ª¿ §–¿ §Á¿ •'¿ •B¿ •c¿ •j¿ •n¿ •o¿ •{¿ •ª¿ •·¿ ¶¿ ¶G¿ ¶M¿ ¶Q¿ ¶R¿ ¶^¿ ¶q¿ ¶ì¿ ¶®¿ ¶¨¿ ¶≠¿ ¶π¿ ¶‡¿ ¶ˇ¿ ß"¿ ßF¿ ßa¿ ßh¿ ßl¿ ßn¿ ßo¿ ßæ¿ ßÈ¿ ßÌ¿ ®=¿ ®é¿ ®Ÿ¿ ®È¿ ©I¿ ©s¿ ©å¿ ©±¿ ©Œ¿ ™>¿ ™p¿ ™t¿ ™u¿ ™µ¿ ™Ë¿ ™È¿ ´ ¿ ´b¿ ´c¿ ´Ç¿ ´≤¿ ´Ÿ¿ ¨¿ ¨/¿ ¨0¿ ¨Å¿ ¨Æ¿ ¨Ø¿ ¨€¿ ¨˜¿ ≠¿ ≠<¿ ≠J¿ ≠P¿ ≠Ö¿ ≠ú¿ ≠Œ¿ ≠“¿ ≠”¿ Æ¿ Æ]¿ Æ~¿ Æ†¿ ÆÆ¿ Æ¥¿ Æ◊¿ Ø!¿ ØF¿ ØV¿ Ø^¿ ØÑ¿ Øù¿ Ø•¿ Ø©¿ Ø™¿ ØÌ¿ ∞¿ ∞¿ ∞a¿ ∞É¿ ∞â¿ ∞Ÿ¿ ±(¿ ±u¿ ±∆¿ ±◊¿ ±›¿ ≤+¿ ≤{¿ ≤Ã¿ ≥¿ ≥g¿ ≥¡¿ ≥¬¿ ≥Œ¿ ≥Ó¿ ¥-¿ ¥†¿ µ¿ µ3¿ µ7¿ µ8¿ µD¿ µà¿ µ∑¿ µ‰¿ ∂¿ ∂<¿ ∂f¿ ∂î¿ ∂ò¿ ∂ô¿ ∂•¿ ∂Û¿ ∑Q¿ ∑~¿ ∑÷¿ ∑‹¿ ∏¿ ∏W¿ ∏≥¿ π#¿ πç¿ πö¿ π¯¿ ∫l¿ ∫⁄¿ ∫‡¿ ª+¿ ª,¿ ª~¿ ªœ¿ ª·¿ º¿ º4¿ ºI¿ ºO¿ ºw¿ ºƒ¿ ºÈ¿ Ω¿ Ω¿ Ω¿ Ω2¿ Ω6¿ Ω7¿ Ωw¿ Ω¡¿ æ¿ æ.¿ æ¿ æÃ¿ ø¿ øl¿ ø¶¿ ø’¿ ø›¿ ¿2¿ ¿R¿ ¿Z¿ ¿`¿ ¿°¿ ¿¸¿ ¡ ¿ ¡¿ ¡9¿ ¡s¿ ¡y¿ ¡»¿ ¡˛¿ ¬L¿ ¬é¿ ¬ˆ¿ √7¿ √Å¿ √π¿ ƒ'¿ ƒ¿ ƒ§¿ ƒÊ¿ ≈H¿ ≈à¿ ≈†¿ ≈·¿ ≈Í¿ ∆Z¿ ∆`¿ ∆»¿ «¿ «C¿ «Å¿ «·¿ »¿ »7¿ »t¿ »}¿ »È¿ »Ô¿ »Û¿ »Ù¿ … ¿ …C¿ …n¿ …Ø¿  ¿  /¿  [¿  a¿  t¿  x¿  y¿  Ö¿   ¿ À ¿ Àb¿ Àå¿ Àü¿ À£¿ À§¿ À∞¿ Ã
¿ Ã[¿ Ã®¿ Ã˜¿ Õ6¿ Õ^¿ ÕÑ¿ Õß¿ ÕÆ¿ Õ÷¿ Õˆ¿ Õ¸¿ Œ¿ Œ¿ Œ¿ Œ ¿ ŒÄ¿ Œ‘¿ œ!¿ œp¿ œØ¿ œ◊¿ œ˝¿ – ¿ –'¿ –O¿ –o¿ –u¿ –à¿ –å¿ –ç¿ –±¿ –“¿ –¿ —¿ —$¿ —^¿ —è¿ —“¿ —ﬂ¿ “¿ “N¿ “ì¿ “ô¿ “«¿ “’¿ “€¿ ”/¿ ”w¿ ”Á¿ ‘Q¿ ‘t¿ ‘ë¿ ‘Ÿ¿ ’+¿ ’¿ ’ë¿ ’õ¿ ’Õ¿ ÷¿ ÷0¿ ÷:¿ ÷f¿ ÷±¿ ÷ª¿ ÷À¿ ÷Î¿ ◊-¿ ◊x¿ ◊ä¿ ◊î¿ ◊ø¿ ÿ	¿ ÿ¿ ÿ%¿ ÿO¿ ÿò¿ ÿ¢¿ ÿ≤¿ ÿ—¿ Ÿ¿ Ÿk¿ Ÿø¿ Ÿ—¿ Ÿ€¿ ⁄¿ ⁄^¿ ⁄p¿ ⁄z¿ ⁄¶¿ ⁄Ò¿ ⁄˚¿ €¿ €*¿ €l¿ €∑¿ €…¿ €”¿ €˛¿ ‹H¿ ‹Z¿ ‹d¿ ‹é¿ ‹◊¿ ‹·¿ ‹Ò¿ ‹˜¿ ‹˚¿ ‹¸¿ ›8¿ ›Ç¿ ›∆¿ ﬁ¿ ﬁ;¿ ﬁ?¿ ﬁ@¿ ﬁ~¿ ﬁ˘¿ ﬁ˝¿ ﬁ˛¿ ﬂ
¿ ﬂi¿ ﬂÉ¿ ﬂ≤¿ ‡¿ ‡)¿ ‡V¿ ‡£¿ ‡À¿ ·¿ ·@¿ ·h¿ ·∑¿ ‚¿ ‚)¿ ‚e¿ ‚£¿ ‚Ã¿ ‚ˆ¿ „C¿ „í¿ „ò¿ „€¿ „ﬂ¿ „‡¿ „Ï¿ ‰¿ ‰S¿ ‰™¿ ‰ﬁ¿ ÂL¿ ÂÖ¿ Â»¿ Ê<¿ Ê•¿ Ê˝¿ Á3¿ ÁÄ¿ ÁÜ¿ ÁŸ¿ Ë¿ Ëu¿ ËÆ¿ ËÒ¿ Èa¿ È∆¿ Í¿ ÍS¿ Íû¿ Í§¿ Í®¿ Í©¿ Íµ¿ Í»¿ Í˜¿ Î$¿ ÎH¿ Îl¿ ÎÅ¿ ÎÖ¿ Îá¿ Îà¿ Î ¿ Îı¿ Ï¿ ÏK¿ Ïf¿ Ï†¿ ÏΩ¿ Ï˜¿ Ì¿ ÌN¿ ÌR¿ ÌT¿ ÌU¿ Ìó¿ Ì’¿ ÌŸ¿ Ó¿ Ób¿ Ó©¿ Ó‘¿ Ô¿ Ô¿ Ô[¿ Ô©¿ Ô˘¿ A¿ Z¿ ô¿ ¥¿ √¿ ﬂ¿ Ò	¿ Ò/¿ Ò@¿ ÒÜ¿ Òá¿ Ò®¿ ÒÕ¿ ÒÓ¿ ÒÔ¿ Ò˚¿ Ú?¿ Úb¿ Ú|¿ Ú≤¿ Ú‡¿ ÚÁ¿ ÚÎ¿ ÚÏ¿ Ú¯¿ ÛO¿ Û`¿ Ûò¿ Û¥¿ ÛÂ¿ ÛÈ¿ ÛÎ¿ ÛÏ¿ Ù"¿ Ù=¿ Ùc¿ Ùç¿ Ù≥¿ Ù…¿ ÙÊ¿ ı¿ ıP¿ ıf¿ ıö¿ ıû¿ ıü¿ ı‰¿ ˆ¿ ˆ,¿ ˆS¿ ˆq¿ ˆ¿ ˆÖ¿ ˆΩ¿ ˆ‘¿ ˜	¿ ˜)¿ ˜-¿ ˜.¿ ˜b¿ ˜†¿ ˜¿¿ ˜Î¿ ¯¿ ¯%¿ ¯+¿ ¯P¿ ¯p¿ ¯t¿ ¯u¿ ¯´¿ ¯«¿ ¯Ó¿ ˘¿ ˘#¿ ˘)¿ ˘J¿ ˘j¿ ˘n¿ ˘o¿ ˘{¿ ˘¬¿ ˘Ù¿ ˙¿ ˙=¿ ˙J¿ ˙Ñ¿ ˙≤¿ ˙Í¿ ˚"¿ ˚U¿ ˚[¿ ˚_¿ ˚`¿ ˚}¿ ˚~¿ ˚ä¿ ˚˛¿ ¸Z¿ ¸s¿ ¸Æ¿ ¸º¿ ¸¬¿ ¸√¿ ˝¿ ˝¿ ˝G¿ ˝a¿ ˝b¿ ˝~¿ ˝≈¿ ˛¿ ˛3¿ ˛u¿ ˛∂¿ ˛”¿ ˛‚¿ ˇ¿ ˇM¿ ˇW¿ ˇt¿ ˇ|¿ ˇÇ¿ ˇÆ¿ ˇ¯¿ K¿ O¿ P¿ \¿ v¿ í¿ ©¿ ≠¿ Ø¿ ∞¿¿¿Q¿]¿Ö¿Ü¿í¿º¿”¿◊¿ÿ¿‰¿¿(¿,¿-¿9¿T¿f¿j¿k¿w¿ú¿û¿ü¿Ø¿∞¿Ò¿¿d¿Ä¿ø¿≈¿¿5¿=¿>¿É¿¢¿®¿¯¿G¿X¿Y¿û¿ÿ¿ﬁ¿*¿l¿Ä¿ñ¿ó¿ﬂ¿Ô¿˜¿˘¿˙¿B¿å¿£¿ß¿¯¿?¿{¿¬¿”¿◊¿	"¿	q¿	©¿	≠¿	ª¿	ø¿

¿
A¿
í¿
†¿
ÿ¿¿¿f¿u¿ò¿ß¿Ã¿Ô¿¿0¿H¿o¿™¿‡¿Ê¿Á¿4¿H¿{¿|¿¥¿∫¿¿N¿{¿|¿≤¿∏¿ ¿J¿u¿v¿√¿…¿¿b¿h¿x¿~¿Õ¿Ú¿)¿*¿h¿n¿ï¿Õ¿Œ¿¿¿N¿ü¿›¿¸¿˝¿<¿B¿i¿å¿ç¿…¿œ¿ˆ¿#¿$¿0¿Ñ¿Ö¿’¿˛¿¿'¿-¿;¿ò¿¢¿®¿Í¿8¿â¿…¿œ¿¿D¿J¿Z¿`¿¨¿‚¿*¿´¿ÿ¿‹¿›¿-¿<¿B¿e¿k¿y¿–¿⁄¿‡¿"¿p¿¡¿¿¿W¿õ¿°¿Ú¿¿¿'¿-¿z¿«¿	¿V¿f¿ã¿√¿€¿,¿k¿x¿î¿Á¿9¿à¿ÿ¿˛¿ ¿ %¿ 1¿ 9¿ L¿ V¿ s¿ w¿ y¿ z¿ ¥¿ ∏¿!	¿!Y¿!g¿!k¿!∏¿!˛¿"F¿"â¿"ª¿#	¿#:¿#m¿#Ã¿$-¿$.¿$`¿$f¿$°¿$ß¿$ı¿%¿%?¿%}¿%≥¿%∑¿%∏¿%Ï¿%Ú¿&-¿&3¿&É¿&¢¿&œ¿'¿'G¿'K¿'L¿'X¿'m¿'¢¿'⁄¿'‡¿(¿(Q¿(W¿(n¿(r¿(s¿(¿(º¿(‚¿)$¿)%¿)5¿)ä¿)ƒ¿*¿*5¿*j¿*•¿*’¿+¿+?¿+à¿+•¿+⁄¿,¿,¿,"¿,#¿,5¿,é¿, ¿-¿-;¿-r¿-Ø¿-·¿.¿.O¿.ò¿.µ¿.Ï¿/(¿/0¿/6¿/:¿/;¿/G¿/n¿/z¿/»¿0¿0¿0#¿0u¿0¡¿0»¿0…¿0ı¿1 ¿1F¿1p¿1©¿1ﬂ¿2
¿2;¿2u¿2∞¿2Ã¿3¿3@¿3Ä¿3µ¿3¿4A¿4m¿4ù¿4‹¿5¿5I¿5Ä¿5¿¿6¿6!¿6^¿6ù¿6„¿7¿7[¿7≤¿8
¿8¿8&¿80¿88¿8?¿8@¿8Ö¿8æ¿8ø¿8Í¿9¿9%¿9,¿90¿91¿9=¿9P¿9|¿9™¿9ø¿9√¿9≈¿9∆¿9¸¿:6¿:s¿:ñ¿:’¿:˛¿;*¿;D¿;J¿;K¿;ã¿;å¿;ò¿;‡¿;‚¿;„¿<¿<C¿<e¿<t¿<ò¿<∫¿<–¿<„¿<˚¿=¿=:¿=W¿=p¿=´¿>¿>¿>8¿>9¿>E¿>ï¿>ó¿>ò¿>’¿?B¿?C¿?~¿?ä¿?π¿?‘¿?¿@¿@6¿@í¿@∏¿@ø¿@À¿@ÿ¿A)¿Az¿A†¿Aß¿AÃ¿A–¿A—¿A›¿A˝¿B!¿BG¿Bé¿B≠¿BŒ¿Bﬁ¿C¿CA¿Cg¿C|¿C«¿D¿Da¿D´¿D˝¿EK¿Eç¿E¨¿EÃ¿E¯¿F2¿Fê¿Fú¿F¶¿F∂¿Fº¿F¿¿F¡¿FÕ¿G	¿GB¿Gi¿Gó¿G¿¿G«¿H¿H3¿HÄ¿HÑ¿HÜ¿Há¿H∂¿HÎ¿I¿I¿IB¿Id¿Iz¿Iç¿I•¿Iƒ¿I‰¿J¿J¿JU¿J±¿J≤¿JÂ¿JÊ¿JÚ¿KF¿KH¿KI¿Kà¿K≥¿K«¿K·¿K‚¿LQ¿LR¿L^¿L¿L∞¿M¿M'¿M+¿M,¿Mz¿M∆¿N¿N ¿NO¿Nj¿NÜ¿N≠¿NÃ¿O(¿ON¿OU¿Oë¿Oí¿OΩ¿OÀ¿OÁ¿P¿P¿P=¿PE¿PF¿PÑ¿Pí¿PÆ¿P»¿P‹¿Q¿Q¿Q¿Q:¿Q>¿Q?¿Qk¿Qè¿Q»¿R¿RI¿Rn¿Rª¿R»¿R·¿RÁ¿RÎ¿RÏ¿R¯¿S*¿SN¿St¿SÉ¿S≤¿SÊ¿T¿TW¿Tq¿T¶¿T¨¿T–¿T‘¿T’¿T·¿U¿UB¿Uf¿Uå¿Uõ¿U ¿U˛¿V(¿V]¿V{¿Vê¿Vº¿Vˆ¿W¿WE¿Wr¿WÜ¿W§¿W—¿X¿X¿X)¿XO¿XÖ¿Xã¿X∞¿X¥¿Xµ¿X¡¿X˜¿Y<¿Yl¿Yò¿Yæ¿YÏ¿Z¿Z¿Z ¿Zg¿Zó¿Z√¿ZÈ¿[¿[C¿[J¿[n¿[î¿[ ¿\¿\¿\8¿\T¿\ó¿\œ¿\ﬂ¿]¿]H¿]}¿]Æ¿]›¿^	¿^E¿^v¿^•¿^‹¿^Ê¿^Ï¿_¿_¿_4¿_w¿_Ø¿_À¿_Í¿`"¿`2¿`L¿`i¿`¨¿`º¿`¬¿`∆¿`«¿`”¿a¿a¿a5¿ap¿a´¿aÍ¿b&¿bb¿bi¿b™¿bÊ¿c"¿c)¿cM¿cs¿cÇ¿c±¿cÂ¿d¿dK¿dQ¿dÇ¿dÜ¿dá¿dì¿d∞¿dÀ¿d‚¿e¿e,¿e;¿ej¿eû¿eƒ¿eÙ¿e˙¿f¿f¿f¿f*¿fJ¿fn¿fî¿fÊ¿f˙¿g¿g+¿gZ¿gé¿g¥¿g…¿h¿he¿h±¿h˛¿i$¿if¿iƒ¿j¿jL¿je¿jí¿j¡¿jÚ¿k¿kN¿kê¿k“¿l¿lp¿l±¿lÛ¿m¿m¿m ¿mr¿m¿¿n¿n!¿nA¿nm¿nß¿o¿o¿o¿o+¿o1¿o5¿o6¿oB¿o~¿o∑¿oﬁ¿p¿p5¿p<¿pÇ¿p®¿pı¿p˘¿p˚    Ä•  Ä∫Ä— Ä◊  Å  Å)  ÅR  Å{  Å§  Åπ  Å“  ÅÚ  Ç  Ç2  ÇM  Çs  Çí  Ç∂  Ç‘  Çı  É  É2  ÉT  Éu  Éò  É∑  ÉÀ  É‰Ñ
Ñ áa¿ K©ëìä+/// A widget that manages scrolling in one dimension and informs the [Viewport]
/// through which the content is viewed.
///
/// [Scrollable] implements the interaction model for a scrollable widget,
/// including gesture recognition, but does not have an opinion about how the
/// viewport, which actually displays the children, is constructed.
///
/// It's rare to construct a [Scrollable] directly. Instead, consider [ListView]
/// or [GridView], which combine scrolling, viewporting, and a layout model. To
/// combine layout models (or to use a custom layout mode), consider using
/// [CustomScrollView].
///
/// The static [Scrollable.of] and [Scrollable.ensureVisible] functions are
/// often used to interact with the [Scrollable] widget inside a [ListView] or
/// a [GridView].
///
/// To further customize scrolling behavior with a [Scrollable]:
///
/// 1. You can provide a [viewportBuilder] to customize the child model. For
///    example, [SingleChildScrollView] uses a viewport that displays a single
///    box child whereas [CustomScrollView] uses a [Viewport] or a
///    [ShrinkWrappingViewport], both of which display a list of slivers.
///
/// 2. You can provide a custom [ScrollController] that creates a custom
///    [ScrollPosition] subclass. For example, [PageView] uses a
///    [PageController], which creates a page-oriented scroll position subclass
///    that keeps the same page visible when the [Scrollable] resizes.
///
/// ## Persisting the scroll position during a session
///
/// Scrollables attempt to persist their scroll position using [PageStorage].
/// This can be disabled by setting [ScrollController.keepScrollOffset] to false
/// on the [controller]. If it is enabled, using a [PageStorageKey] for the
/// [key] of this widget (or one of its ancestors, e.g. a [ScrollView]) is
/// recommended to help disambiguate different [Scrollable]s from each other.
///
/// See also:
///
///  * [ListView], which is a commonly used [ScrollView] that displays a
///    scrolling, linear list of child widgets.
///  * [PageView], which is a scrolling list of child widgets that are each the
///    size of the viewport.
///  * [GridView], which is a [ScrollView] that displays a scrolling, 2D array
///    of child widgets.
///  * [CustomScrollView], which is a [ScrollView] that creates custom scroll
///    effects using slivers.
///  * [SingleChildScrollView], which is a scrollable widget that has a single
///    child.
///  * [ScrollNotification] and [NotificationListener], which can be used to watch
///    the scroll position without using a [ScrollController]. ëπÅÛ ë‰ëÓ"/// Creates a widget that scrolls.ëı	ë¸  í'í
  í1í7  íFíL  íXíg  í{íÅ  íô!íü  í¿í∆  í›0í„  ìì  ì+ì1  ìD!ìJ  íí&í'íµíˆìììXì\ì]ìnìtì™ìêìàìuìãì¶ììì©ì∞ÇxñÇ>/// {@template flutter.widgets.Scrollable.axisDirection}
/// The direction in which this widget scrolls.
///
/// For example, if the [Scrollable.axisDirection] is [AxisDirection.down],
/// increasing the scroll position will cause content below the bottom of the
/// viewport to become visible through the viewport. Similarly, if the
/// axisDirection is [AxisDirection.right], increasing the scroll position
/// will cause content beyond the right edge of the viewport to become visible
/// through the viewport.
///
/// Defaults to [AxisDirection.down].
/// {@endtemplate} ñ-É·öÉñ/// {@template flutter.widgets.Scrollable.controller}
/// An object that can be used to control the position to which this widget is
/// scrolled.
///
/// A [ScrollController] serves several purposes. It can be used to control
/// the initial scroll position (see [ScrollController.initialScrollOffset]).
/// It can be used to control whether the scroll view should automatically
/// save and restore its scroll position in the [PageStorage] (see
/// [ScrollController.keepScrollOffset]). It can be used to read the current
/// scroll position (see [ScrollController.offset]), or change it (see
/// [ScrollController.animateTo]).
///
/// If null, a [ScrollController] will be created internally by [Scrollable]
/// in order to create and manage the [ScrollPosition].
///
/// See also:
///
///  * [Scrollable.ensureVisible], which animates the scroll position to
///    reveal a given [BuildContext].
/// {@endtemplate} öÖbünÖ/// {@template flutter.widgets.Scrollable.physics}
/// How the widgets should respond to user input.
///
/// For example, determines how the widget continues to animate after the
/// user stops dragging the scroll view.
///
/// Defaults to matching platform conventions via the physics provided from
/// the ambient [ScrollConfiguration].
///
/// If an explicit [ScrollBehavior] is provided to
/// [Scrollable.scrollBehavior], the [ScrollPhysics] provided by that behavior
/// will take precedence after [Scrollable.physics].
///
/// The physics can be changed dynamically, but new physics will only take
/// effect if the _class_ of the provided object changes. Merely constructing
/// a new instance with a different configuration is insufficient to cause the
/// physics to be reapplied. (This is because the final object used is
/// generated dynamically, which can be relatively expensive, and it would be
/// inefficient to speculatively create this object each frame to see if the
/// physics should be updated.)
///
/// See also:
///
///  * [AlwaysScrollableScrollPhysics], which can be used to indicate that the
///    scrollable should react to scroll requests (and possible overscroll)
///    even if the scrollable's contents fit without scrolling being necessary.
/// {@endtemplate} üzÇ°lÅ«/// Builds the viewport through which the scrollable content is displayed.
///
/// A typical viewport uses the given [ViewportOffset] to determine which part
/// of its content is actually visible through the viewport.
///
/// See also:
///
///  * [Viewport], which is a viewport that displays a list of slivers.
///  * [ShrinkWrappingViewport], which is a viewport that displays a list of
///    slivers and sizes itself based on the size of the slivers. °ÄÇÿ§EÇâ/// {@template flutter.widgets.Scrollable.incrementCalculator}
/// An optional function that will be called to calculate the distance to
/// scroll when the scrollable is asked to scroll via the keyboard using a
/// [ScrollAction].
///
/// If not supplied, the [Scrollable] will scroll a default amount when a
/// keyboard navigation key is pressed (e.g. pageUp/pageDown, control-upArrow,
/// etc.), or otherwise invoked by a [ScrollAction].
///
/// If [incrementCalculator] is null, the default for
/// [ScrollIncrementType.page] is 80% of the size of the scroll window, and
/// for [ScrollIncrementType.line], 50 logical pixels.
/// {@endtemplate} §]ÇM¶ñÇ/// {@template flutter.widgets.scrollable.excludeFromSemantics}
/// Whether the scroll actions introduced by this [Scrollable] are exposed
/// in the semantics tree.
///
/// Text fields with an overflow are usually scrollable to make sure that the
/// user can get to the beginning/end of the entered text. However, these
/// scrolling actions are generally not exposed to the semantics layer.
/// {@endtemplate}
///
/// See also:
///
///  * [GestureDetector.excludeFromSemantics], which is used to accomplish the
///    exclusion. ¶ØÇ¯©ïÇº/// The number of children that will contribute semantic information.
///
/// The value will be null if the number of children is unknown or unbounded.
///
/// Some subtypes of [ScrollView] can infer this value automatically. For
/// example [ListView] will use the number of widgets in the child list,
/// while the [ListView.separated] constructor will use half that amount.
///
/// For [CustomScrollView] and other types which do not receive a builder
/// or list of widgets, the child count must be explicitly provided.
///
/// See also:
///
///  * [CustomScrollView], for an explanation of scroll semantics.
///  * [SemanticsConfiguration.scrollChildCount], the corresponding semantics property. ™Éo≠aÉ/// {@template flutter.widgets.scrollable.dragStartBehavior}
/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], scrolling drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for
///    the different behaviors.
///
/// {@endtemplate} ≠wÇcØÕÇ+/// {@template flutter.widgets.scrollable.restorationId}
/// Restoration ID to save and restore the scroll offset of the scrollable.
///
/// If a restoration id is provided, the scrollable will persist its current
/// scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
/// {@endtemplate} ØﬂÅI±Å/// {@macro flutter.widgets.shadow.scrollBehavior}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [physics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior]. ±-Åm≤éÅG/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge].
///
/// This is passed to decorators in [ScrollableDetails], and does not directly affect
/// clipping of the [Scrollable]. This reflects the same [Clip] that is provided
/// to [ScrollView.clipBehavior] and is supplied to the [Viewport]. ≤üÄó≥\/// The axis along which the scroll view scrolls.
///
/// Determined by the [axisDirection].   ≥:?≥V   ≥:≥;≥}Å^≥é  ≥¢&≥ø  ≥}≥~¥ﬂáÖπ^Ñ0/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState? scrollable = Scrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned, or
/// null if there is none.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// See also:
///
/// * [Scrollable.of], which is similar to this method, but asserts
///   if no [Scrollable] ancestor is found. πfπt  π~
πÖ   ºhâ¿ A<ÑÇ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState scrollable = Scrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// If no [Scrollable] ancestor is found, then this method will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
/// * [Scrollable.maybeOf], which is similar to this method, but returns null
///   if no [Scrollable] ancestor is found. ¿ A?¿ AM  ¿ AW
¿ A^   ¿ EàÖÏ¿ I~É≈/// Provides a heuristic to determine if expensive frame-bound tasks should be
/// deferred for the [context] at a specific point in time.
///
/// Calling this method does _not_ create a dependency on any other widget.
/// This also means that the value returned is only good for the point in time
/// when it is called, and callers will not get updated if the value changes.
///
/// The heuristic used is determined by the [physics] of this [Scrollable]
/// via [ScrollPhysics.recommendDeferredLoading]. That method is called with
/// the current [ScrollPosition.activity]'s [ScrollActivity.velocity].
///
/// The optional [Axis] allows targeting of a specific [Scrollable] of that
/// axis, useful when Scrollables are nested. When [axis] is provided,
/// [ScrollPosition.recommendDeferredLoading] is called for the nearest
/// [Scrollable] in that [Axis].
///
/// If there is no [Scrollable] in the widget tree above the [context], this
/// method returns false. ¿ I°¿ IØ  ¿ Iπ
¿ I¿   ¿ Kxáê¿ LÆÅ/// Scrolls the scrollables that enclose the given context so as to make the
/// given context visible.
///
/// If the [Scrollable] of the provided [BuildContext] is a
/// [TwoDimensionalScrollable], both vertical and horizontal axes will ensure
/// the target is made visible. ¿ L¡¿ Lœ  ¿ L›¿ LÂ  ¿ L˘!¿ M  ¿ M ¿ M'  ¿ M?V¿ M^  
¿ L¿ M¿ M¿ M¿ M.¿ M4¿ M5¿ Mo¿ Må¿ Mç ¿ SûÅU¿ S§  ¿ S—r ¿ S◊¿ SÁ ¿ SÓ¿ S˝  ¿ T¿ T  ¿ T(¿ T8   ¿ TG ¿ T]  ¿ Tk¿ TÄ   ¿ Tçd¿ Tû  ¿ T±¿ T√  ¿ Tç¿ Té ¿ Tı¿ Lµ¿ V¿Åƒ/// State object for a [Scrollable] widget.
///
/// To manipulate a [Scrollable] widget's scroll position, use the object
/// obtained from the [position] property.
///
/// To be informed of when a [Scrollable] widget is scrolling, use a
/// [NotificationListener] to listen for [ScrollNotification] notifications.
///
/// This class is not intended to be subclassed. To specialize the behavior of a
/// [Scrollable], provide it with a [ScrollPhysics].  ¿ X™¿ X∫  ¿ Y7¿ YF  ¿ ]¿ ]  ¿ ^ P¿ ^ ¿ ^7¿ ^N¿ ^O¿ ^U"¿ ^i  ¿ ^{+¿ ^ç  ¿ ^™1¿ ^¡  ¿ p01¿ p@ ¿ pV¿ p_¿ p`¿ qrc¿ qõ ¿ q±¿ q∫¿ q“¿ qª¿ q”¿ q‘¿ qŸ/¿ qÈ ¿ q˝¿ r¿ r¿ rbb¿ rÜ ¿ rú¿ r¬¿ r√¿ r¢¿ r¡¿ r£¿ r©¿ r»!¿ rÕ ¿ r‰¿ rÓ¿ rÙ  ¿ s¿ s
  ¿ Äª¿ Ä¡  ¿ Ä ¿ Ä‡  
¿ WJÅ]¿ XêÅ(/// The manager for this [Scrollable] widget's viewport position.
///
/// To control what kind of [ScrollPosition] is created for a [Scrollable],
/// provide it with custom [ScrollController] that creates the appropriate
/// [ScrollPosition] in its [ScrollController.createScrollPosition] method.   ¿ X»l¿ Y:/// The resolved [ScrollPhysics] of the [ScrollableState].   ¿ YSÇè¿ Z}Å/// An [Offset] that represents the absolute distance from the origin, or 0,
/// of the [ScrollPosition] expressed in the associated [Axis].
///
/// Used by [EdgeDraggingAutoScroller] to progress the position forward when a
/// drag gesture reaches the edge of the [Viewport].   ¿ [Êc¿ [˚    ¿ \MD¿ \k   ¿ \M¿ \N¿ \ï-¿ \¥   ¿ \ï¿ \ñ¿ \∆=¿ \›   ¿ \∆¿ \«¿ ](X¿ ]F   ¿ ](¿ ])¿ ]Ñ7¿ ]°   ¿ ]Ñ¿ ]Ö¿ ]ø>¿ ]◊   ¿ ]ø¿ ]¿¿ _(É¿¿ _-    ¿ bÏÅF¿ b˝  ¿ c
¿ c  ¿ c(¿ c.  ¿ bÏ¿ bÌ¿ d6Åb¿ dG  ¿ dR¿ dZ  ¿ d6¿ d7¿ eúÄö¿ e≠   ¿ eú¿ eù¿ f:Å¿ fK   ¿ f:¿ f;¿ g]ÉS¿ gb  ¿ gx¿ gÑ   ¿ j¥Ñ.¿ j≈  ¿ j’¿ j·  ¿ j¥¿ jµ¿ nÊÅ6¿ n˜   ¿ nÊ¿ nÁ¿ pfÄŸ¿ pÑ  ¿ pò¿ pÆ  ¿ pf¿ pg¿ pr¿ ps¿ s!ã˘¿ s?  ¿ sJ
¿ sP  ¿ s!¿ s"¿ s-¿ s.¿ ÅÑ¿ <  ¿ M
¿ S  ¿ ¿ ¿ *¿ +¿ ÄÍÄí¿ ÄÔ  ¿ Äˇ¿ Å   ¿ ÅÄÅ|¿ ÅÖ  ¿ Åñ¿ Å®   ¿ É ÄŒ¿ É  ¿ É¿ É*   ¿ É“Ä‡¿ É◊  ¿ ÉÊ¿ Éˆ   ¿ Ñ∂Ç¿ Ñª    ¿ Ü◊+¿ Ü‹    ¿ á+¿ á    ¿ á“ÄΩ¿ áŸ  ¿ á˝¿ à   ¿ â9Ñ0¿ â@  ¿ âY¿ âm   ¿ çmÉ#¿ çr  ¿ çâ¿ çù   ¿ êîÅj¿ êô  ¿ êÆ¿ êº   ¿ íÅw¿ í  ¿ í(&¿ íC   ¿ ì}Åù¿ ìÑ  ¿ ìë¿ ìü  ¿ ìß¿ ìØ   ¿ ï0à¿ ïC  ¿ ïI¿ ïW  ¿ ï0¿ ï1¿ ûÇj¿ û,  ¿ ûG¿ ûU  ¿ ûb¿ ûj  ¿ û~!¿ ûà  ¿ û•¿ û¨  ¿ ûƒV¿ û„  ¿ ü  ¿ ü/  
¿ ûu¿ ûí¿ ûö¿ ûõ¿ û≥¿ ûπ¿ û∫¿ ûÙ¿ ü¿ ü¿ †ÑÅ$¿ †ï  ¿ †©&¿ †∆  ¿ †Ñ¿ †Ö ¿ °¨Çk¿ ¢hÄµ/// A widget to handle selection for a scrollable.
///
/// This widget registers itself to the [registrar] and uses
/// [SelectionContainer] to collect selectables from its subtree. ¿ ¢üÄî ¿ ¢•¿ ¢¿ ¿ ¢«¿ ¢÷  ¿ ¢‡¿ ¢Ô  ¿ ¢¸¿ £  ¿ £¿ £(   ¿ £7¿ £M  ¿ £V¿ £k  ¿ £w¿ £Ñ  ¿ £ç"¿ £¶   ¿ £¥a¿ £·   ¿ £¥¿ £µ ¿ §ÉT¿ §   ¿ §o=¿ §ö   ¿ §±Äº¿ §¬   ¿ §±¿ §≤¿ •qÄﬂ¿ •Ç  ¿ •í%¿ •Ø  ¿ •q¿ •r¿ ¶TW¿ ¶e   ¿ ¶T¿ ¶U¿ ¶ØÄº¿ ¶¬  ¿ ¶»¿ ¶÷  ¿ ¶Ø¿ ¶∞ ¿ ßo¿ D¿ ®ÔÅy/// This updater handles the case where the selectables change frequently, and
/// it optimizes toward scrolling updates.
///
/// It keeps track of the drag start offset relative to scroll origin for every
/// selectable. The records are used to determine whether the selection is up to
/// date with the scroll position when it sends the drag update event to a
/// selectable. ¿ ©KÅ( ¿ ©K¿ ©p ¿ ©w¿ ©Ü  ¿ ©ê ¿ ©©  ¿ ©¬¿ ©∏¿ ©ƒ¿ ©„¿ ©’¿ ©Â¿ ©˝¿ ™:¿ ©˛¿ ™¿ ™¿ ™¿ ™∑/¿ ™À ¿ ™Â¿ ´">¿ ´6 ¿ ´^¿ ´e¿ ´{  ¿ ´Ñ,¿ ´£  ¿ ´¥#¿ ´π ¿ ´“¿ ´€(¿ ´„  ¿ ¨&¿ ¨  ¿ ¨É)¿ ¨à ¿ ¨ß¿ ¨›¿ ¨Ï  ¿ Ø¨Éπ¿ ≥+É@/// Stores the scroll offset when a scrollable receives the last
/// [SelectionEdgeUpdateEvent].
///
/// The stored scroll offset may be null if a scrollable never receives a
/// [SelectionEdgeUpdateEvent].
///
/// When a new [SelectionEdgeUpdateEvent] is dispatched to a selectable, this
/// updater checks the current scroll offset against the one stored in these
/// records. If the scroll offset is different, it synthesizes an opposite
/// [SelectionEdgeUpdateEvent] and dispatches the event before dispatching the
/// new event.
///
/// For example, if a selectable receives an end [SelectionEdgeUpdateEvent]
/// and its scroll offset in the records is different from the current value,
/// it synthesizes a start [SelectionEdgeUpdateEvent] and dispatches it before
/// dispatching the original end [SelectionEdgeUpdateEvent].¿ ≥c¿ ≥d¿ ≥O¿ ≥b¿ ≥P¿ ≥\¿ ≥iV¿ ≥á ¿ ≥Ω¿ ≥æ¿ ≥©¿ ≥º¿ ≥™¿ ≥∂¿ ¨±)¿ ¨ƒ    ¿ ¨˘Äÿ¿ ¨˝  ¿ ≠¿ ≠   ¿ Æ_ÅI¿ Æd    ¿ ≥ƒÅr¿ ≥’   ¿ ≥ƒ¿ ≥≈¿ µ:Å]¿ µV  ¿ µk¿ µÄ  ¿ µ:¿ µ;¿ ∂õÜö¿ ∂∑  ¿ ∂—¿ ∂Î  ¿ ∂õ¿ ∂ú¿ Ω9É∆¿ Ω@  ¿ Ω^¿ Ωf   ¿ ¡áÔ¿ ¬ïÅ~/// Infers the [_currentDragStartRelatedToOrigin] and
/// [_currentDragEndRelatedToOrigin] from the geometry.
///
/// This method is called after a select word and select all event where the
/// selection is triggered by none drag events. The
/// [_currentDragStartRelatedToOrigin] and [_currentDragEndRelatedToOrigin]
/// are essential to handle future [SelectionEdgeUpdateEvent]s. ¿ ¬π¿ ¬ø  ¿ ¬◊¿ ¬›  ¿ ¬—¿ ¬Ì¿ »ˆÅÅ¿ …  ¿ …"¿ …;  ¿ »ˆ¿ »˜¿  {Å'¿  ó  ¿  ®¿  ¬  ¿  {¿  |¿ À¶Çl¿ À¬  ¿ À‚$¿ Ã  ¿ À¶¿ Àß¿ ŒÇu¿ Œ2  ¿ ŒU'¿ Œx  ¿ Œ¿ Œ¿ –èåk¿ –î  ¿ –†¿ –¶   ¿ ‹˛Å@¿ ›  ¿ ›¿ ›'   ¿ ﬁBÄ∫¿ ﬁG  ¿ ﬁ\¿ ﬁv   ¿ ﬂ Ñﬁ¿ ﬂ  ¿ ﬂ:¿ ﬂF  ¿ ﬂQ¿ ﬂa  ¿ ﬂ ¿ ﬂ¿ „‚Ü≈¿ „Û  ¿ ‰¿ ‰  ¿ „‚¿ „„¿ Í´ÄŸ¿ Íº   ¿ Í´¿ Í¨ ¿ ÌUÜï¿ `É/// With [_ScrollSemantics] certain child [SemanticsNode]s can be
/// excluded from the scrollable area for semantics purposes.
///
/// Nodes, that are to be excluded, have to be tagged with
/// [RenderViewport.excludeFromScrolling] and the [RenderAbstractViewport] in
/// use has to add the [RenderViewport.useTwoPaneSemantics] tag to its
/// [SemanticsConfiguration] by overriding
/// [RenderObject.describeSemanticsConfiguration].
///
/// If the tag [RenderViewport.useTwoPaneSemantics] is present on the viewport,
/// two semantics nodes will be used to represent the [Scrollable]: The outer
/// node will contain all children, that are excluded from scrolling. The inner
/// node, which is annotated with the scrolling actions, will house the
/// scrollable children. ¿ õÄÍ ¿ °¿ ± ¿ ∏	¿ ø  ¿ «¿ ÷  ¿ „$¿ Ú  ¿ Ò ¿ Ò  ¿ Ò3¿ Ò:  
¿ ÒG¿ ÒM¿ ÒÉ¿ Òi¿ Òa¿ ÒN¿ Òd¿ Ò¿ Òl¿ ÒÇ¿ Òâ¿ Òû  ¿ Ò™!¿ Òµ  ¿ Òœ¿ Ò⁄   ¿ ÒÒÄ˘¿ Ú  ¿ Ú'¿ Ú5  ¿ ÒÒ¿ ÒÚ¿ ÚÓÄ˙¿ Úˇ  ¿ Û¿ Û   ¿ Û(#¿ Û@  ¿ ÚÓ¿ ÚÔ ¿ ÛÏå¬¿ ÛÚ  ¿ Ù$Åy ¿ Ù$¿ Ù: ¿ ÙA ¿ ÙZ  ¿ Ùg$¿ Ùv  ¿ Ùë ¿ Ù†  ¿ Ù∑¿ Ù√  ¿ Ù⁄¿ Ù–¿ Ù‹¿ ı¿ ÙÌ¿ ı¿ ı:¿ ı&¿ ı<¿ ıW¿ ı\¿ ıb¿ ı]¿ ˆ¿ ˆ!  ¿ ˜¢¿ ˜ß  ¿ ¯≠¿ ¯≤  ¿ ˚b¿ ˚q  ¿ ı°n¿ ı˘B/// Whether this render object is excluded from the semantic tree.   ¿ ˆ.Ä˛¿ ˆ2  ¿ ˆ;¿ ˆK   ¿ ˜0o¿ ˜m1/// Whether this node can be scrolled implicitly.   ¿ ˜¬Ä±¿ ˜∆  ¿ ˜›
¿ ˜„   ¿ ¯w3¿ ¯Ä    ¿ ¯…Ä§¿ ¯Õ  ¿ ¯‡
¿ ¯Ê   ¿ ˘qÅÌ¿ ˘Ç  ¿ ˘°¿ ˘π  ¿ ˘q¿ ˘r¿ ˚ÄÑŒ¿ ˚ë  ¿ ˚ß¿ ˚∂  ¿ ˚ª¿ ˚”  ¿ ˚⁄ ¿ ˚Û  ¿ ˚Ä¿ ˚Å¿ RZ¿ c   ¿ R¿ S ¿Åç¿    ¿m.¿Ç   ¿m¿n¿S1¿g   ¿S¿T¿àN¿ô  ¿®¿±  ¿à¿â¿⁄Q¿Ì  ¿¸¿  ¿⁄¿€¿/:¿C   ¿/¿0 ¿˙ô~¿
¶É•/// A widget that manages scrolling in both the vertical and horizontal
/// dimensions and informs the [TwoDimensionalViewport] through which the
/// content is viewed.
///
/// [TwoDimensionalScrollable] implements the interaction model for a scrollable
/// widget in both the vertical and horizontal axes, including gesture
/// recognition, but does not have an opinion about how the
/// [TwoDimensionalViewport], which actually displays the children, is
/// constructed.
///
/// It's rare to construct a [TwoDimensionalScrollable] directly. Instead,
/// consider subclassing [TwoDimensionalScrollView], which combines scrolling,
/// viewporting, and a layout model in both dimensions.
///
/// See also:
///
///  * [TwoDimensionalScrollView], an abstract base class for displaying a
///    scrolling array of children in both directions.
///  * [TwoDimensionalViewport], which can be used to customize the child layout
///    model. ¿
⁄Ç ¿}¿ïÄî/// Creates a widget that scrolls in two dimensions.
///
/// The [horizontalDetails], [verticalDetails], and [viewportBuilder] must not
/// be null.	¿ú	¿£  ¿´¿∫  ¿–¿ﬂ  ¿Û¿  ¿¿  ¿4¿:  ¿L!¿R  ¿s5¿y  ¿Æ0¿¥  ¿h¿è¿£¿§¿«¿ÿ¿Ÿ¿ÈÄê¿e\/// How scrolling gestures should lock to one axis, or allow free movement
/// in both axes. ¿~Ä˚¿hÄ…/// The configuration of the horizontal [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the horizontal axis. ¿~Äı¿dÄ≈/// The configuration of the vertical [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the vertical axis. ¿xÅØ¿Åi/// Builds the viewport through which the scrollable content is displayed.
///
/// A [TwoDimensionalViewport] uses two given [ViewportOffset]s to determine
/// which part of its content is actually visible through the viewport.
///
/// See also:
///
///  * [TwoDimensionalViewport], which is a viewport that displays a span of
///    widgets in both dimensions. ¿,Äü¿∏d/// {@macro flutter.widgets.Scrollable.incrementCalculator}
///
/// This value applies in both axes. ¿–Å*¿ÌÅ/// {@macro flutter.widgets.scrollable.restorationId}
///
/// Internally, the [TwoDimensionalScrollable] will introduce a
/// [RestorationScope] that will be assigned this value. The two [Scrollable]s
/// within will then be given unique IDs within this scope. ¿ˇÄã¿ve/// {@macro flutter.widgets.scrollable.excludeFromSemantics}
///
/// This value applies to both axes. ¿èÄí¿b/// {@macro flutter.widgets.scrollable.dragStartBehavior}
///
/// This value applies in both axes.  ¿&]¿R   ¿&¿'¿áÑT¿
É2/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState? scrollable = TwoDimensionalScrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// Alternatively, [Scrollable.maybeOf] can be used by providing the desired
/// [Axis] to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.of], which is similar to this method, but
///   asserts if no [Scrollable] ancestor is found. ¿¿    ¿ﬂáó¿ÓÉπ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState scrollable = TwoDimensionalScrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// If no [TwoDimensionalScrollable] ancestor is found, then this method will
/// assert in debug mode, and throw an exception in release mode.
///
/// Alternatively, [Scrollable.of] can be used by providing the desired [Axis]
/// to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.maybeOf], which is similar to this method,
///   but returns null if no [TwoDimensionalScrollable] ancestor is found. ¿Ò¿ˇ    ¿ zôJ¿"¡Ç@/// State object for a [TwoDimensionalScrollable] widget.
///
/// To manipulate one of the internal [Scrollable] widget's scroll position, use
/// the object obtained from the [verticalScrollable] or [horizontalScrollable]
/// property.
///
/// To be informed of when a [TwoDimensionalScrollable] widget is scrolling,
/// use a [NotificationListener] to listen for [ScrollNotification]s.
/// Both axes will have the same viewport depth since there is only one
/// viewport, and so should be differentiated by the [Axis] of the
/// [ScrollMetrics] provided by the notification.  ¿#-¿#  ¿#</¿#N  ¿#o[¿#ê ¿#Æ¿#∑¿#«¿#∏¿#»¿#…¿#Œ]¿#Ô ¿$¿$¿$(¿$¿$)¿$*¿$0ÅÜ¿%*ÄŸ/// The [ScrollableState] of the vertical axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.vertical]
/// to the `axis` parameter.   ¿%∫Åê¿&∏Ä›/// The [ScrollableState] of the horizontal axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.horizontal]
/// to the `axis` parameter.   ¿'NÅ#¿'_   ¿'N¿'O¿(uÜƒ¿(Ü  ¿(ñ"¿(∞  ¿(u¿(v¿/=âÚ¿/P  ¿/V¿/d  ¿/=¿/>¿93Äè¿9D   ¿93¿94 ¿:ñÅK¿:ú  ¿:◊r ¿:›¿:˚ ¿;&¿;  ¿;.¿;>   ¿;M<¿;q   ¿;éQ¿;ü  ¿;≤"¿;“  ¿;é¿;è ¿<ÇÜ¿<  ¿<EÅæ ¿<K¿<b ¿<i	¿<p  ¿<x¿<à  ¿<ú¿<¨  ¿<æ¿<≈  ¿<‘¿<€  ¿<Á¿<Ó  ¿<ˇ¿=  ¿=¿=%  ¿=>¿=E  ¿=[¿=b  ¿=t5¿=z  ¿=ê¿=§¿=•¿=≤¿=∏¿>¿=€¿=«¿=π¿= ¿=◊¿=ÿ¿=Ï¿=ﬁ¿=Ô¿=¸¿=˝¿>/¿>"   ¿>;Y¿>d   ¿>;¿>< ¿>òâÌ¿>û    ¿>◊j¿>    ¿?ÄÇO¿?¢  ¿?Ω¿?À  ¿?ÿ¿?‡  ¿?Ù!¿?˛  ¿@¿@"  ¿@:V¿@Y  ¿@ñ ¿@•  ¿?Ä¿?Å¿?Î¿@¿@¿@¿@)¿@/¿@0¿@j¿@á¿@à¿A”ÑÏ¿A‰  ¿AÔ
¿Aı  ¿A”¿A‘¿F√Å¿¿F÷  ¿F„¿FÒ  ¿F˘¿G  ¿F√¿Fƒ ¿H∂Çë¿Hº  ¿HÌÅ√ ¿HÛ¿I ¿I	¿I  ¿I"¿I2  ¿IF¿IV  ¿Ih¿Io  ¿I~¿IÖ  ¿Ië¿Iò  ¿I©¿I∞  ¿I»¿Iœ  ¿IË¿IÔ  ¿J¿J  ¿J5¿J$  ¿J:¿JN¿JO¿J\¿Jb¿JÆ¿Já¿Jq¿Jc¿Jt¿JÅ¿JÇ¿Jò¿Jä¿Jõ¿J®¿J©¿J¥/¿Jœ   ¿JË]¿K   ¿JË¿JÈ ¿KI•±¿KO   ¿Kä'¿Kü  ¿Kµ¿Kª  ¿K…¿K—  ¿K‰l¿K˝    
¿LTÄ÷¿Le   ¿LT¿LU¿NÉ'¿N8  ¿NS¿Na  ¿Nn¿Nv  ¿Nä!¿Nî  ¿N±¿N∏  ¿N–V¿NÔ  ¿O, ¿O;  ¿N¿N¿NÅ¿Nû¿N¶¿Nß¿Nø¿N≈¿N∆¿O ¿O¿O¿QAÅ©¿QF  ¿QZ¿Qb   ¿RÓÅÂ¿Rˇ  ¿S¿S   ¿RÓ¿RÔ¿T◊É‹¿TË  ¿T˘¿U  ¿T◊¿Tÿ¿X∑à¿X»  ¿X⁄¿XÌ  ¿X∑¿X∏¿`…Éº¿`⁄  ¿`È¿`˘  ¿`…¿` ¿dâÅì¿dö   ¿dâ¿dä¿f â¿f1  ¿f<
¿fB  ¿f ¿f!¿o8Å¿¿oK  ¿oX¿of  ¿on¿ov  ¿o8¿o9  ¿∞ÑH¿i`/// Specifies how to configure the [DragGestureRecognizer]s of a
/// [TwoDimensionalScrollable].  ¿ÇÄπ¿7Ä¨/// This behavior will not allow for any diagonal scrolling.
///
/// Drag gestures in one direction or the other will lock the input axis until
/// the gesture is released. ¿@Å¿IÄ˛/// This behavior will only allow diagonal scrolling on a weighted
/// scale per gesture event.
///
/// This means that after initially evaluating the drag gesture, the weighted
/// evaluation (based on [kTouchSlop]) stands until the gesture is released. ¿[Å9¿ÇÅ/// This behavior will only allow diagonal scrolling on a weighted
/// scale that is evaluated throughout a gesture event.
///
/// This means that during each update to the drag gesture, the scrolling
/// axis will be allowed to scroll diagonally if it exceeds the
/// [kTouchSlop]. ¿ô\¿ÒS/// This behavior allows free movement in any and all directions when
/// dragging.       ¿ ÎàÅÀ¿ Îè  ¿ Îß¿ Î∏    ÑRÄ…Ñ o/// Signature used by [Scrollable] to build the viewport through which the
/// scrollable content is displayed.  ÑÏÑ˙  ÖÖ   ÖÅÖ£}/// Signature used by [TwoDimensionalScrollable] to build the viewport through
/// which the scrollable content is displayed.  Ö”Ö·  ÖÈÖ˘  Ü
!Ü   áFá!         âv <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ)ÅRÅ{Å£Å§ÅπÅ“ÅÚÇÇ2ÇMÇsÇíÇ∂Ç‘ÇıÉÉ2ÉTÉuÉòÉ∑ÉÀÉ„É‰ÑÑÑ3ÑQÑRÑùÑ¬ÖÖÖlÖõÜ.Ü/Ü\Ü_Ü•ÜÚáá`áaá±á⁄áﬁà)àwàªàøââ`â´â√â«ääbätäxäπäΩã
ãYãúãÊãÍå3åtåƒçççFçJçòçÈé5éÄéŒé“é‡é‰è-è]è≠è êê2êÄêûêÌê˚ëNëçë∑ë‹ëÒí í-íBíTíwíïíºíŸìì'ì@ìgì≠ìÆìÈîî!îoîøïïUï¶ï¬ï»ïññ*ñ+ñcñ¥ñƒñ óóhóµó˙òIòíò∑òΩôôFôLô\ôbô≠ô’ôÍöööFözöÄöÃö˜ö˝õKõtõzõØú ú7ú=úäú⁄ù+ùtùƒûû5û;ûKûQû¢ûüBüWüwüxü≈üÀ††[†a†q†w†¡°°T°}°~°ø¢¢X¢n¢t¢¿££H£N£Ü£‘§§"§Z§[§ù§Í•••]•©•Û¶¶¶¶$¶u¶â¶¨¶≠¶ı¶˚ßKßQßùßË®4®:®Ü®Õ®”®„®È©.©à©©©™™™@™~™Ñ™Ã´´b´Å´á´“¨ ¨Q¨W¨ü¨•¨µ¨ª≠
≠,≠2≠G≠t≠u≠∞≠˛ÆÆSÆêÆñÆ·Ø-Ø3ØCØIØñØ®ØΩØ‹Ø›∞∞∞]∞¶∞Í±±*±+±a±g±ä±ê±Ë≤;≤Å≤ú≤ù≤—≤◊≥ ≥7≥8≥D≥z≥{≥á≥Ã≥˜¥H¥î¥ÿ¥‹¥›µ-µVµ\µµÖµìµ‘µﬁµ‰∂0∂w∂√∂È∂Ô∑=∑ç∑⁄∑˜∑˝∏I∏ô∏¥∏∫∏ ∏–ππDπéπ’∫∫l∫ä∫‰ª7ªsªÆª…ª—ªıºJºPºaºeºfº∂º≈ºÀºÓºÙΩΩ=ΩGΩMΩôΩ‡æ,æRæXæ¶æˆø@øFøíø‚ø˝¿ @¿ @O¿ @â¿ @è¿ @ü¿ @•¿ @ı¿ A#¿ Ag¿ A≤¿ A¬¿ AÁ¿ B¿ B7¿ Bà¿ B™¿ B∑¿ B”¿ C¿ CT¿ C¶¿ C˚¿ D2¿ DX¿ Dr¿ D¿ D¶¿ D˙¿ E&¿ E3¿ E?¿ EG¿ EZ¿ Ed¿ EÅ¿ EÖ¿ EÜ¿ E◊¿ F¿ F¿ Fi¿ F∫¿ G
¿ G¿ G]¿ G¨¿ Gı¿ G˚¿ HI¿ Hí¿ H‹¿ Hˇ¿ I¿ IT¿ Ip¿ I…¿ J#¿ J@¿ Jö¿ J‹¿ J‰¿ K¿ KY¿ K_¿ Kq¿ Ku¿ Kv¿ K≈¿ K‚¿ KË¿ L&¿ Lv¿ Lò¿ LΩ¿ LŸ¿ Lı¿ M¿ M;¿ Mó¿ Mû¿ M◊¿ Mÿ¿ N)¿ No¿ N∆¿ O¿ OA¿ OÅ¿ Oß¿ OÊ¿ P¿ P2¿ Pu¿ Pö¿ P∏¿ P‘¿ PÍ¿ Q¿ QD¿ QM¿ Qo¿ Qp¿ QΩ¿ Q·¿ R¿ R¿ R¿ RP¿ Rs¿ Ry¿ Rò¿ Rµ¿ Rª¿ S¿ S	¿ S¿ S¿ S]¿ Sû¿ Sœ¿ SÍ¿ T¿ T$¿ T>¿ TD¿ TE¿ Ti¿ Tä¿ Tã¿ Tó¿ T…¿ TÓ¿ TÚ¿ TÙ¿ Tı¿ U!¿ U%¿ Uo¿ Uö¿ Uû¿ U„¿ V0¿ V4¿ VÖ¿ V∫¿ W¿ W9¿ W:¿ WG¿ WH¿ Wå¿ Wí¿ W‡¿ X-¿ X{¿ X®¿ X≈¿ X∆¿ Y¿ Y5¿ YP¿ YQ¿ Y†¿ Y‚¿ YË¿ Z9¿ Zp¿ Zì¿ Z∞¿ Zœ¿ Z˙¿ [¿ [C¿ [b¿ [é¿ [Æ¿ [Ÿ¿ [ﬂ¿ [„¿ [‰¿ \J¿ \K¿ \W¿ \í¿ \ì¿ \ü¿ \√¿ \ƒ¿ \–¿ ]¿ ]%¿ ]&¿ ]2¿ ]Å¿ ]Ç¿ ]é¿ ]º¿ ]Ω¿ ]…¿ ]˛¿ ^R¿ ^S¿ ^y¿ ^®¿ ^›¿ ^ﬁ¿ _&¿ _A¿ _ê¿ _…¿ _Î¿ `¿ `O¿ `§¿ `™¿ `›¿ `¸¿ a2¿ a¿ aÀ¿ b¿ b/¿ b5¿ b6¿ bï¿ b¥¿ bÂ¿ bÈ¿ bÍ¿ bˆ¿ c?¿ c}¿ cú¿ cÃ¿ d)¿ d/¿ d3¿ d4¿ d@¿ dc¿ dö¿ d≈¿ e¿ eX¿ eï¿ eô¿ eö¿ e¶¿ eª¿ e‡¿ f¿ f¿ f3¿ f7¿ f8¿ fD¿ fe¿ f≤¿ g¿ g3¿ gV¿ gZ¿ g[¿ gê¿ g·¿ gÙ¿ g˙¿ hâ¿ hú¿ h¢¿ i¿ ip¿ iy¿ iπ¿ iŒ¿ i÷¿ i˝¿ j$¿ j\¿ j]¿ j≠¿ j±¿ j≤¿ jæ¿ jÌ¿ k¿ k¿ kI¿ ks¿ k¿¿ k‰¿ l¿ lB¿ lw¿ l•¿ lœ¿ lﬁ¿ m¿ mB¿ mk¿ m∂¿ m’¿ n¿ n¿ n!¿ nZ¿ nç¿ nì¿ nî¿ n¿¿ nŸ¿ nﬂ¿ n„¿ n‰¿ n¿ o¿ o(¿ oS¿ o`¿ oì¿ oø¿ o≈¿ o∆¿ oﬁ¿ p¿ p¿ p¿ p¿ p-¿ p.¿ pc¿ pd¿ pp¿ p}¿ p∏¿ pÏ¿ q6¿ q<¿ q@¿ qA¿ qo¿ qp¿ q◊¿ r
¿ r¿ r`¿ r∆¿ rÎ¿ rÏ¿ s¿ s¿ s¿ s+¿ s8¿ sX¿ s™¿ s∏¿ sæ¿ s–¿ t¿ td¿ tÆ¿ tÏ¿ u¿ u¿ u1¿ uM¿ uè¿ uˇ¿ v`¿ vô¿ v≤¿ vﬂ¿ w¿ w?¿ wj¿ wõ¿ w›¿ x¿ xa¿ xΩ¿ x˛¿ y?¿ yÇ¿ yì¿ y¢¿ yØ¿ yÕ¿ z¿ zÉ¿ zÊ¿ {!¿ {:¿ {g¿ {ñ¿ {«¿ {Ú¿ |#¿ |e¿ |ß¿ |È¿ }E¿ }Ü¿ }«¿ ~
¿ ~¿ ~*¿ ~7¿ ~?¿ ~E¿ ~_¿ ~Ö¿ ~π¿ ¿ ¿ ¿ ¿ (¿ 5¿ [¿ Ñ¿ í¿ ò¿ ∫¿ Ó¿ Äh¿ Äô¿ Äü¿ Ä£¿ Ä§¿ Ä∏¿ Äπ¿ Ä»¿ ÄÁ¿ ÄË¿ Å¿ Å5¿ ÅP¿ Åy¿ Å}¿ Å~¿ Å≤¿ Å¸¿ ÇM¿ Çv¿ Çë¿ Ç√¿ Çﬁ¿ Ç˘¿ Ç˝¿ Ç˛¿ É4¿ ÉÉ¿ ÉØ¿ ÉÀ¿ Éœ¿ É–¿ Ñ ¿ ÑO¿ Ñ{¿ Ñî¿ ÑØ¿ Ñ≥¿ Ñ¥¿ Ñ—¿ Ö¿ ÖU¿ Öû¿ Ö±¿ Öø¿ Ö≈¿ Öı¿ ÜD¿ Üp¿ ÜÖ¿ Üö¿ Üµ¿ Ü–¿ Ü‘¿ Ü’¿ ÜÌ¿ Üˇ¿ á¿ á¿ á¿ á.¿ á2¿ á3¿ áE¿ áF¿ áñ¿ á–¿ à¿ à"¿ àe¿ àÖ¿ àå¿ àê¿ àë¿ à‹¿ â)¿ â7¿ âu¿ âå¿ âÊ¿ ä=¿ ä|¿ äÃ¿ ã¿ ãh¿ ãµ¿ ãƒ¿ ãÒ¿ ãÚ¿ å¿ å)¿ åB¿ åc¿ åÖ¿ åü¿ å∏¿ åŸ¿ å˚¿ ç¿ ç¿ ç;¿ çN¿ çT¿ çf¿ çj¿ çk¿ ç•¿ ç·¿ é.¿ é>¿ éF¿ éÇ¿ é÷¿ è+¿ èn¿ èÀ¿ è”¿ ê¿ ê/¿ êá¿ êç¿ êë¿ êí¿ êƒ¿ êÌ¿ ë=¿ ëè¿ ë–¿ ëı¿ ë˚¿ ëˇ¿ í ¿ íR¿ íu¿ íÂ¿ ì¿ ìV¿ ì^¿ ìd¿ ìv¿ ìz¿ ì{¿ ì∑¿ ì¿ î¿ îE¿ îx¿ î¿ îÄ¿ î™¿ îπ¿ ï¿ ï¿ ï¿ ï¿ ï¿ ï-¿ ï.¿ ï:¿ ïa¿ ïÄ¿ ïﬁ¿ ñ%¿ ñ,¿ ñT¿ ñ¿ ñÜ¿ ñ‰¿ ó(¿ óN¿ óf¿ óÄ¿ óó¿ ó»¿ óÎ¿ ò¿ ò8¿ òd¿ ò°¿ òΩ¿ ò˚¿ ô¿ ôC¿ ôq¿ ô±¿ ô¿¿ ôÕ¿ ôÿ¿ ô·¿ ôË¿ ôÈ¿ ö¿ öQ¿ öã¿ ö¨¿ ö–¿ öÓ¿ õ2¿ õk¿ õÑ¿ õé¿ õó¿ õù¿ õû¿ õ ¿ õÀ¿ ú¿ ú]¿ úz¿ ú¶¿ úª¿ ú◊¿ úı¿ ù¿ ù¿ ù¿ ù¿ ù/¿ ù3¿ ù4¿ ùÇ¿ ùŒ¿ û¿ ûC¿ û^¿ ûz¿ û°¿ û¿¿ ü¿ üB¿ üI¿ üé¿ üú¿ ü∏¿ ü“¿ üÊ¿ †¿ †<¿ †C¿ †}¿ †Å¿ †Ç¿ †é¿ †”¿ †˛¿ °N¿ °•¿ °©¿ °´¿ °¨¿ °ﬂ¿ °„¿ ¢ ¿ ¢b¿ ¢ù¿ ¢√¿ ¢‹¿ ¢¯¿ £¿ £.¿ £4¿ £5¿ £T¿ £u¿ £ã¿ £±¿ £≤¿ £æ¿ §¿ §¿ §¿ §m¿ §Æ¿ §Ø¿ §ª¿ §–¿ §Á¿ •'¿ •B¿ •c¿ •j¿ •n¿ •o¿ •{¿ •ª¿ •·¿ ¶¿ ¶G¿ ¶M¿ ¶Q¿ ¶R¿ ¶^¿ ¶q¿ ¶ì¿ ¶®¿ ¶¨¿ ¶≠¿ ¶π¿ ¶‡¿ ¶ˇ¿ ß"¿ ßF¿ ßa¿ ßh¿ ßl¿ ßn¿ ßo¿ ßæ¿ ßÈ¿ ßÌ¿ ®=¿ ®é¿ ®Ÿ¿ ®È¿ ©I¿ ©s¿ ©å¿ ©±¿ ©Œ¿ ™>¿ ™p¿ ™t¿ ™u¿ ™µ¿ ™Ë¿ ™È¿ ´ ¿ ´b¿ ´c¿ ´Ç¿ ´≤¿ ´Ÿ¿ ¨¿ ¨/¿ ¨0¿ ¨Å¿ ¨Æ¿ ¨Ø¿ ¨€¿ ¨˜¿ ≠¿ ≠<¿ ≠J¿ ≠P¿ ≠Ö¿ ≠ú¿ ≠Œ¿ ≠“¿ ≠”¿ Æ¿ Æ]¿ Æ~¿ Æ†¿ ÆÆ¿ Æ¥¿ Æ◊¿ Ø!¿ ØF¿ ØV¿ Ø^¿ ØÑ¿ Øù¿ Ø•¿ Ø©¿ Ø™¿ ØÌ¿ ∞¿ ∞¿ ∞a¿ ∞É¿ ∞â¿ ∞Ÿ¿ ±(¿ ±u¿ ±∆¿ ±◊¿ ±›¿ ≤+¿ ≤{¿ ≤Ã¿ ≥¿ ≥g¿ ≥¡¿ ≥¬¿ ≥Œ¿ ≥Ó¿ ¥-¿ ¥†¿ µ¿ µ3¿ µ7¿ µ8¿ µD¿ µà¿ µ∑¿ µ‰¿ ∂¿ ∂<¿ ∂f¿ ∂î¿ ∂ò¿ ∂ô¿ ∂•¿ ∂Û¿ ∑Q¿ ∑~¿ ∑÷¿ ∑‹¿ ∏¿ ∏W¿ ∏≥¿ π#¿ πç¿ πö¿ π¯¿ ∫l¿ ∫⁄¿ ∫‡¿ ª+¿ ª,¿ ª~¿ ªœ¿ ª·¿ º¿ º4¿ ºI¿ ºO¿ ºw¿ ºƒ¿ ºÈ¿ Ω¿ Ω¿ Ω¿ Ω2¿ Ω6¿ Ω7¿ Ωw¿ Ω¡¿ æ¿ æ.¿ æ¿ æÃ¿ ø¿ øl¿ ø¶¿ ø’¿ ø›¿ ¿2¿ ¿R¿ ¿Z¿ ¿`¿ ¿°¿ ¿¸¿ ¡ ¿ ¡¿ ¡9¿ ¡s¿ ¡y¿ ¡»¿ ¡˛¿ ¬L¿ ¬é¿ ¬ˆ¿ √7¿ √Å¿ √π¿ ƒ'¿ ƒ¿ ƒ§¿ ƒÊ¿ ≈H¿ ≈à¿ ≈†¿ ≈·¿ ≈Í¿ ∆Z¿ ∆`¿ ∆»¿ «¿ «C¿ «Å¿ «·¿ »¿ »7¿ »t¿ »}¿ »È¿ »Ô¿ »Û¿ »Ù¿ … ¿ …C¿ …n¿ …Ø¿  ¿  /¿  [¿  a¿  t¿  x¿  y¿  Ö¿   ¿ À ¿ Àb¿ Àå¿ Àü¿ À£¿ À§¿ À∞¿ Ã
¿ Ã[¿ Ã®¿ Ã˜¿ Õ6¿ Õ^¿ ÕÑ¿ Õß¿ ÕÆ¿ Õ÷¿ Õˆ¿ Õ¸¿ Œ¿ Œ¿ Œ¿ Œ ¿ ŒÄ¿ Œ‘¿ œ!¿ œp¿ œØ¿ œ◊¿ œ˝¿ – ¿ –'¿ –O¿ –o¿ –u¿ –à¿ –å¿ –ç¿ –±¿ –“¿ –¿ —¿ —$¿ —^¿ —è¿ —“¿ —ﬂ¿ “¿ “N¿ “ì¿ “ô¿ “«¿ “’¿ “€¿ ”/¿ ”w¿ ”Á¿ ‘Q¿ ‘t¿ ‘ë¿ ‘Ÿ¿ ’+¿ ’¿ ’ë¿ ’õ¿ ’Õ¿ ÷¿ ÷0¿ ÷:¿ ÷f¿ ÷±¿ ÷ª¿ ÷À¿ ÷Î¿ ◊-¿ ◊x¿ ◊ä¿ ◊î¿ ◊ø¿ ÿ	¿ ÿ¿ ÿ%¿ ÿO¿ ÿò¿ ÿ¢¿ ÿ≤¿ ÿ—¿ Ÿ¿ Ÿk¿ Ÿø¿ Ÿ—¿ Ÿ€¿ ⁄¿ ⁄^¿ ⁄p¿ ⁄z¿ ⁄¶¿ ⁄Ò¿ ⁄˚¿ €¿ €*¿ €l¿ €∑¿ €…¿ €”¿ €˛¿ ‹H¿ ‹Z¿ ‹d¿ ‹é¿ ‹◊¿ ‹·¿ ‹Ò¿ ‹˜¿ ‹˚¿ ‹¸¿ ›8¿ ›Ç¿ ›∆¿ ﬁ¿ ﬁ;¿ ﬁ?¿ ﬁ@¿ ﬁ~¿ ﬁ˘¿ ﬁ˝¿ ﬁ˛¿ ﬂ
¿ ﬂi¿ ﬂÉ¿ ﬂ≤¿ ‡¿ ‡)¿ ‡V¿ ‡£¿ ‡À¿ ·¿ ·@¿ ·h¿ ·∑¿ ‚¿ ‚)¿ ‚e¿ ‚£¿ ‚Ã¿ ‚ˆ¿ „C¿ „í¿ „ò¿ „€¿ „ﬂ¿ „‡¿ „Ï¿ ‰¿ ‰S¿ ‰™¿ ‰ﬁ¿ ÂL¿ ÂÖ¿ Â»¿ Ê<¿ Ê•¿ Ê˝¿ Á3¿ ÁÄ¿ ÁÜ¿ ÁŸ¿ Ë¿ Ëu¿ ËÆ¿ ËÒ¿ Èa¿ È∆¿ Í¿ ÍS¿ Íû¿ Í§¿ Í®¿ Í©¿ Íµ¿ Í»¿ Í˜¿ Î$¿ ÎH¿ Îl¿ ÎÅ¿ ÎÖ¿ Îá¿ Îà¿ Î ¿ Îı¿ Ï¿ ÏK¿ Ïf¿ Ï†¿ ÏΩ¿ Ï˜¿ Ì¿ ÌN¿ ÌR¿ ÌT¿ ÌU¿ Ìó¿ Ì’¿ ÌŸ¿ Ó¿ Ób¿ Ó©¿ Ó‘¿ Ô¿ Ô¿ Ô[¿ Ô©¿ Ô˘¿ A¿ Z¿ ô¿ ¥¿ √¿ ﬂ¿ Ò	¿ Ò/¿ Ò@¿ ÒÜ¿ Òá¿ Ò®¿ ÒÕ¿ ÒÓ¿ ÒÔ¿ Ò˚¿ Ú?¿ Úb¿ Ú|¿ Ú≤¿ Ú‡¿ ÚÁ¿ ÚÎ¿ ÚÏ¿ Ú¯¿ ÛO¿ Û`¿ Ûò¿ Û¥¿ ÛÂ¿ ÛÈ¿ ÛÎ¿ ÛÏ¿ Ù"¿ Ù=¿ Ùc¿ Ùç¿ Ù≥¿ Ù…¿ ÙÊ¿ ı¿ ıP¿ ıf¿ ıö¿ ıû¿ ıü¿ ı‰¿ ˆ¿ ˆ,¿ ˆS¿ ˆq¿ ˆ¿ ˆÖ¿ ˆΩ¿ ˆ‘¿ ˜	¿ ˜)¿ ˜-¿ ˜.¿ ˜b¿ ˜†¿ ˜¿¿ ˜Î¿ ¯¿ ¯%¿ ¯+¿ ¯P¿ ¯p¿ ¯t¿ ¯u¿ ¯´¿ ¯«¿ ¯Ó¿ ˘¿ ˘#¿ ˘)¿ ˘J¿ ˘j¿ ˘n¿ ˘o¿ ˘{¿ ˘¬¿ ˘Ù¿ ˙¿ ˙=¿ ˙J¿ ˙Ñ¿ ˙≤¿ ˙Í¿ ˚"¿ ˚U¿ ˚[¿ ˚_¿ ˚`¿ ˚}¿ ˚~¿ ˚ä¿ ˚˛¿ ¸Z¿ ¸s¿ ¸Æ¿ ¸º¿ ¸¬¿ ¸√¿ ˝¿ ˝¿ ˝G¿ ˝a¿ ˝b¿ ˝~¿ ˝≈¿ ˛¿ ˛3¿ ˛u¿ ˛∂¿ ˛”¿ ˛‚¿ ˇ¿ ˇM¿ ˇW¿ ˇt¿ ˇ|¿ ˇÇ¿ ˇÆ¿ ˇ¯¿ K¿ O¿ P¿ \¿ v¿ í¿ ©¿ ≠¿ Ø¿ ∞¿¿¿Q¿]¿Ö¿Ü¿í¿º¿”¿◊¿ÿ¿‰¿¿(¿,¿-¿9¿T¿f¿j¿k¿w¿ú¿û¿ü¿Ø¿∞¿Ò¿¿d¿Ä¿ø¿≈¿¿5¿=¿>¿É¿¢¿®¿¯¿G¿X¿Y¿û¿ÿ¿ﬁ¿*¿l¿Ä¿ñ¿ó¿ﬂ¿Ô¿˜¿˘¿˙¿B¿å¿£¿ß¿¯¿?¿{¿¬¿”¿◊¿	"¿	q¿	©¿	≠¿	ª¿	ø¿

¿
A¿
í¿
†¿
ÿ¿¿¿f¿u¿ò¿ß¿Ã¿Ô¿¿0¿H¿o¿™¿‡¿Ê¿Á¿4¿H¿{¿|¿¥¿∫¿¿N¿{¿|¿≤¿∏¿ ¿J¿u¿v¿√¿…¿¿b¿h¿x¿~¿Õ¿Ú¿)¿*¿h¿n¿ï¿Õ¿Œ¿¿¿N¿ü¿›¿¸¿˝¿<¿B¿i¿å¿ç¿…¿œ¿ˆ¿#¿$¿0¿Ñ¿Ö¿’¿˛¿¿'¿-¿;¿ò¿¢¿®¿Í¿8¿â¿…¿œ¿¿D¿J¿Z¿`¿¨¿‚¿*¿´¿ÿ¿‹¿›¿-¿<¿B¿e¿k¿y¿–¿⁄¿‡¿"¿p¿¡¿¿¿W¿õ¿°¿Ú¿¿¿'¿-¿z¿«¿	¿V¿f¿ã¿√¿€¿,¿k¿x¿î¿Á¿9¿à¿ÿ¿˛¿ ¿ %¿ 1¿ 9¿ L¿ V¿ s¿ w¿ y¿ z¿ ¥¿ ∏¿!	¿!Y¿!g¿!k¿!∏¿!˛¿"F¿"â¿"ª¿#	¿#:¿#m¿#Ã¿$-¿$.¿$`¿$f¿$°¿$ß¿$ı¿%¿%?¿%}¿%≥¿%∑¿%∏¿%Ï¿%Ú¿&-¿&3¿&É¿&¢¿&œ¿'¿'G¿'K¿'L¿'X¿'m¿'¢¿'⁄¿'‡¿(¿(Q¿(W¿(n¿(r¿(s¿(¿(º¿(‚¿)$¿)%¿)5¿)ä¿)ƒ¿*¿*5¿*j¿*•¿*’¿+¿+?¿+à¿+•¿+⁄¿,¿,¿,"¿,#¿,5¿,é¿, ¿-¿-;¿-r¿-Ø¿-·¿.¿.O¿.ò¿.µ¿.Ï¿/(¿/0¿/6¿/:¿/;¿/G¿/n¿/z¿/»¿0¿0¿0#¿0u¿0¡¿0»¿0…¿0ı¿1 ¿1F¿1p¿1©¿1ﬂ¿2
¿2;¿2u¿2∞¿2Ã¿3¿3@¿3Ä¿3µ¿3¿4A¿4m¿4ù¿4‹¿5¿5I¿5Ä¿5¿¿6¿6!¿6^¿6ù¿6„¿7¿7[¿7≤¿8
¿8¿8&¿80¿88¿8?¿8@¿8Ö¿8æ¿8ø¿8Í¿9¿9%¿9,¿90¿91¿9=¿9P¿9|¿9™¿9ø¿9√¿9≈¿9∆¿9¸¿:6¿:s¿:ñ¿:’¿:˛¿;*¿;D¿;J¿;K¿;ã¿;å¿;ò¿;‡¿;‚¿;„¿<¿<C¿<e¿<t¿<ò¿<∫¿<–¿<„¿<˚¿=¿=:¿=W¿=p¿=´¿>¿>¿>8¿>9¿>E¿>ï¿>ó¿>ò¿>’¿?B¿?C¿?~¿?ä¿?π¿?‘¿?¿@¿@6¿@í¿@∏¿@ø¿@À¿@ÿ¿A)¿Az¿A†¿Aß¿AÃ¿A–¿A—¿A›¿A˝¿B!¿BG¿Bé¿B≠¿BŒ¿Bﬁ¿C¿CA¿Cg¿C|¿C«¿D¿Da¿D´¿D˝¿EK¿Eç¿E¨¿EÃ¿E¯¿F2¿Fê¿Fú¿F¶¿F∂¿Fº¿F¿¿F¡¿FÕ¿G	¿GB¿Gi¿Gó¿G¿¿G«¿H¿H3¿HÄ¿HÑ¿HÜ¿Há¿H∂¿HÎ¿I¿I¿IB¿Id¿Iz¿Iç¿I•¿Iƒ¿I‰¿J¿J¿JU¿J±¿J≤¿JÂ¿JÊ¿JÚ¿KF¿KH¿KI¿Kà¿K≥¿K«¿K·¿K‚¿LQ¿LR¿L^¿L¿L∞¿M¿M'¿M+¿M,¿Mz¿M∆¿N¿N ¿NO¿Nj¿NÜ¿N≠¿NÃ¿O(¿ON¿OU¿Oë¿Oí¿OΩ¿OÀ¿OÁ¿P¿P¿P=¿PE¿PF¿PÑ¿Pí¿PÆ¿P»¿P‹¿Q¿Q¿Q¿Q:¿Q>¿Q?¿Qk¿Qè¿Q»¿R¿RI¿Rn¿Rª¿R»¿R·¿RÁ¿RÎ¿RÏ¿R¯¿S*¿SN¿St¿SÉ¿S≤¿SÊ¿T¿TW¿Tq¿T¶¿T¨¿T–¿T‘¿T’¿T·¿U¿UB¿Uf¿Uå¿Uõ¿U ¿U˛¿V(¿V]¿V{¿Vê¿Vº¿Vˆ¿W¿WE¿Wr¿WÜ¿W§¿W—¿X¿X¿X)¿XO¿XÖ¿Xã¿X∞¿X¥¿Xµ¿X¡¿X˜¿Y<¿Yl¿Yò¿Yæ¿YÏ¿Z¿Z¿Z ¿Zg¿Zó¿Z√¿ZÈ¿[¿[C¿[J¿[n¿[î¿[ ¿\¿\¿\8¿\T¿\ó¿\œ¿\ﬂ¿]¿]H¿]}¿]Æ¿]›¿^	¿^E¿^v¿^•¿^‹¿^Ê¿^Ï¿_¿_¿_4¿_w¿_Ø¿_À¿_Í¿`"¿`2¿`L¿`i¿`¨¿`º¿`¬¿`∆¿`«¿`”¿a¿a¿a5¿ap¿a´¿aÍ¿b&¿bb¿bi¿b™¿bÊ¿c"¿c)¿cM¿cs¿cÇ¿c±¿cÂ¿d¿dK¿dQ¿dÇ¿dÜ¿dá¿dì¿d∞¿dÀ¿d‚¿e¿e,¿e;¿ej¿eû¿eƒ¿eÙ¿e˙¿f¿f¿f¿f*¿fJ¿fn¿fî¿fÊ¿f˙¿g¿g+¿gZ¿gé¿g¥¿g…¿h¿he¿h±¿h˛¿i$¿if¿iƒ¿j¿jL¿je¿jí¿j¡¿jÚ¿k¿kN¿kê¿k“¿l¿lp¿l±¿lÛ¿m¿m¿m ¿mr¿m¿¿n¿n!¿nA¿nm¿nß¿o¿o¿o¿o+¿o1¿o5¿o6¿oB¿o~¿o∑¿oﬁ¿p¿p5¿p<¿pÇ¿p®¿pı¿p˘¿p˚    
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionState 6˝