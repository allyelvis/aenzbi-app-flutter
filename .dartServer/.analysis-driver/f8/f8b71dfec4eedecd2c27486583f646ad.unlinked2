ÄÖindex==hashCodeoffset_offsetspandetachtoStringsetupParentData_layoutChildlayoutInlineChildrenpositionInlineChildrendefaultApplyPaintTransformpaintInlineChildrenhitTestInlineChildren_placeholderCharacter_textPainter_cachedAttributedLabels_cachedCombinedSemanticsInfostext
selections_lastSelectableFragments	registrar
_registrar%_updateSelectionRegistrarSubscription%_removeSelectionRegistrarSubscription_getSelectableFragments_disposeSelectableFragmentsalwaysNeedsCompositingmarkNeedsLayoutdispose	textAligntextDirectionsoftWrap	_softWrapoverflow	_overflowtextScaleFactor
textScalermaxLineslocale
strutStyletextWidthBasistextHeightBehaviorselectionColor_selectionColor_getOffsetForPosition_computeLineMetricscomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_computeIntrinsicHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline$_canComputeDryLayoutForInlineWidgets_canComputeIntrinsicsCached_canComputeIntrinsicshitTestSelfhitTestChildren_needsClipping_overflowShaderdebugHasOverflowShader_layoutTextsystemFontsDidChange_placeholderDimensions_layoutTextWithConstraintscomputeDryLayoutperformLayoutapplyPaintTransformpaintgetOffsetForCaretgetFullHeightForCaretgetBoxesForSelectiongetPositionForOffsetgetWordBoundary_getLineAtOffset_getTextPositionAbove_getTextPositionBelow_getTextPositionVerticaltextSize_semanticsInfodescribeSemanticsConfiguration%_childSemanticsConfigurationsDelegate!_createSemanticsConfigForTextInfo_cachedChildNodesassembleSemanticsNode_createShowOnScreenForclearSemanticsdebugDescribeChildrendebugFillPropertiesrange	paragraphfullText_textSelectionStart_textSelectionEnd_selectableContainsOriginWord_startHandleLayerLink_endHandleLayerLinkvalue_selectionGeometry_updateSelectionGeometry_getSelectionGeometrydispatchSelectionEventgetSelectedContent_didChangeSelection_updateSelectionEdge_closestWordBoundary_updateSelectionStartEdgeByWord_updateSelectionEndEdgeByWord_updateSelectionEdgeByWord_clampTextPosition_setSelectionPosition_handleClearSelection_handleSelectAll_handleSelectWord_getWordBoundaryAtPosition#_handleDirectionallyExtendSelection _handleGranularlyExtendSelection"_moveBeyondTextBoundaryAtDirection_moveToTextBoundaryAtDirection_handleVerticalMovement!_positionIsWithinCurrentSelection_compareTextPositionsgetTransformToParagraphgetTransformTopushHandleLayers_rect_cachedRectdidChangeParagraphLayoutsizegetLineAtOffsetgetTextPositionAbovegetTextPositionBelow_WordBoundaryRecord
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragmentÅ•BoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehaviorTextPositionStringRichText	immutableSemanticsTagintoverrideboolObjectindexhashRenderEditable
WidgetSpan
ParentDataContainerParentDataMixin	RenderBoxOffsetPlaceholderSpanParentDataWidgetvoiddetachContainerRenderObjectMixinlayoutInlineChildrenTextPainterpositionInlineChildrenapplyPaintTransformdefaultApplyPaintTransformpaintInlineChildrenpainthitTestInlineChildrenhitTestChildrenextractFromInlineSpan
InlineSpan
parentDataPlaceholderDimensionsdoubleChildLayouterspanemptysizeBoxConstraintsmaxWidth	alignmentbaselinebaselineOffsetaboveBaselinebelowBaselinebottommiddletopgetDistanceToBaselinesetPlaceholderDimensions	protectedList
firstChildchild
childAfter_layoutChild
childCountinlinePlaceholderBoxeslength_offsetboxleftoffsetMatrix4setZero	translatedxdyPaintingContext
paintChildBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformed"RelayoutWhenSystemFontsChangeMixin	TextAlignstartTextDirectionTextOverflowclip
Deprecated
TextScaler	noScalingLocale
StrutStyleTextWidthBasisparentColorSelectionRegistrardebugAssertIsValid	identicaltext	textAligntextDirection
textScalerlinearmaxLinesellipsislocale
strutStyletextWidthBasistextHeightBehavioraddAllchildren	registrarfromCharCodeplaceholderCodeUnitAttributedStringInlineSpanSemanticsInformation	compareToRenderComparisonmetadatamarkNeedsSemanticsUpdatemarkNeedsPaintlayoutvisibleForTestingTextSelectionfragment_textSelectionStart_textSelectionEndadd
baseOffsetextentOffsetforEach
isNotEmptymarkNeedsCompositingBitsUpdateremovetoPlainTextincludeSemanticsLabelsindexOf	paragraphrange	TextRangeendfullTextdisposeelementdidChangeParagraphLayoutmarkNeedsLayoutjustifyltrrtltextScaleFactoranyvaluehasSelectionRectzerocomputeLineMetricsinfinitySizegetMinIntrinsicWidthminIntrinsicWidthgetMaxIntrinsicWidthmaxIntrinsicWidthChildLayoutHelperdryLayoutChildminWidthheightTextBaselinedebugNeedsLayoutconstraintscomputeDistanceToActualBaseline
alphabeticvisitChildrenRenderObjectdebugCheckingIntrinsicsgetPositionForOffsetgetSpanForPositionHitTestTargetHitTestEntrysystemFontsDidChangedebugCannotComputeDryLayoutreason	constrainlayoutChilddidExceedMaxLineswidthvisiblefadeTextSpanstylefadeSizePainterdebugRepaintTextRainbowEnabledPaintcolordebugCurrentRepaintColortoColorcanvasdrawRect	saveLayersaveclipRect	blendMode	BlendModemodulateshaderrestoregetOffsetForCaretgetFullHeightForCaretboxHeightStyleboxWidthStyletightgetBoxesForSelectiongetWordBoundarygetLineBoundarypreferredLineHeight_combineSemanticsInfoSemanticsConfigurationdescribeSemanticsConfigurationgetSemanticsInformationinfo
recognizerisPlaceholderexplicitChildNodesisSemanticBoundarychildConfigurationsDelegateStringBufferStringAttributesemanticsLabelstringAttributesinfoAttributecopywritetoString
attributesattributedLabel"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuildercombineSemanticsInfomarkAsMergeUptagsChildrenWithbuildrequiresOwnNodeLinkedHashMapKeySemanticsNodeIterable	elementAtisTaggedisEmptyfirsttoRect	directionskipexpandToIncludetextBoxfromLTWHmaxmin	maxHeightfromLTRBfloorToDoublerightceilToDoublesortKeyOrdinalSortKeyGestureRecognizerTapGestureRecognizeronTapisLinkDoubleTapGestureRecognizeronDoubleTapLongPressGestureRecognizeronLongPressruntimeTypeparentPaintClipRect	intersectisHiddenkeys	UniqueKeykeyshowOnScreen
updateWithconfigrectchildrenInInversePaintOrderVoidCallback
descendantclearSemanticsDiagnosticsNodetoDiagnosticsNodenameDiagnosticsTreeStyle
transitionDiagnosticPropertiesBuilderdebugFillPropertiesEnumPropertyFlagPropertyifTrueifFalseshowNameDiagnosticsPropertydefaultValueIntPropertyifNull
SelectableChangeNotifierTextLayoutMetricsisValidisCollapsedisNormalized kFlutterMemoryAllocationsEnabledmaybeDispatchObjectCreation	LayerLinkSelectionGeometrynotifyListenersstatusSelectionStatusnone
hasContent_getOffsetForPositioninvertstartSelectionPointSelectionPointlocalPositionMatrixUtilstransformPoint
lineHeight_textPainter
handleTypeTextSelectionHandleTypeendSelectionPointselectionRects	collapseduncollapsedSelectionResultSelectionEventtypeSelectionEventTypestartEdgeUpdateendEdgeUpdateSelectionEdgeUpdateEventTextGranularitygranularity	character
edgeUpdateglobalPositionisEndworddocumentlineclear	selectAll
selectWordSelectWordSelectionEventgranularlyExtendSelectionGranularlyExtendSelectionEventforwarddirectionallyExtendSelection!DirectionallyExtendSelectionEventSelectedContent	plainText	substringgetTransformToSelectionUtilsgetResultBasedOnRectadjustDragOffsetnextprevious	wordStartabswordEndcontainsaffinityTextAffinity
downstreamupstreamglobalToLocalSelectionExtendDirectionpreviousLinebackwardnextLineisNaNMapEntrytargetedEdge(horizontalBaselineInParagraphCoordinatesbelow
moveResult edgeOffsetInParagraphCoordinates$baselineOffsetInParagraphCoordinates
textInsideCharacterBoundaryTextBoundarywordBoundariesmoveByWordBoundarytextBoundaryLineBoundaryDocumentBoundarygetTrailingTextBoundaryAtgetLeadingTextBoundaryAtcharacterBoundary_computeLineMetricslineMetrics
lineNumbertranslationValuesmultiplyattached
fromPointsselectionColorPaintingStylefillshift	pushLayerLeaderLayerlink_getLineAtOffsetclamp_getTextPositionAbove_getTextPositionBelow
SemanticsTag
ParentDataContainerParentDataMixin	RenderBoxContainerRenderObjectMixin%RenderInlineChildrenContainerDefaults"RelayoutWhenSystemFontsChangeMixin
SelectableChangeNotifierTextLayoutMetrics‹n`ÃÙù◊µ8NÎjª    Ä¶  dart:collection  Ä¿  Ä“mathÄ’	dart:mathÄÚÅfBoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehavior Ä‹  ÄÏuiÄÔdart:ui  Åj  package:flutter/foundation.dart  Åî  package:flutter/gestures.dart  Åº  package:flutter/semantics.dart  ÅÂ  package:flutter/services.dart  Ç  box.dart  Ç!  
debug.dart  Ç6  
layer.dart  ÇK  layout_helper.dart  Çh  object.dart  Ç~  selection.dart    	dart:core¿ R< ¿BGà <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇ√ÉÉÉ8É9ÉÇÉ•É©É¯ÑÑ"Ñ`ÑñÑúÑÍÖÖmÖnÖãÖûÖüÖ´ÖŒÜÜ$Ü(Ü)Ü5ÜÅÜÉÜÑÜœááTá§á™á˚àIà`àÅàîàïà‘à⁄â(âSâlâmâyâãâúâ∞âƒâ»â…â’ä5ä7ä8äÇäœãããbã≤ååå åNåRå£åÚçCçîçÃç–éé4é8ézéüé£é˜é˚èNèeèièwè{è«è˜êiêuêüêŒê˘êˇëëëoë∫ëÌíííCíbí™íœíÚì&ì[ìêìæìÏîîzîáîíîñîóîÊïïïkï≥ïπññRñXñhñnñΩñ¯óófóäóﬁòòòòòmòÅòáò÷ô#ôtô∏ôæôŒô‘ö"öBöOöáö™ö‘öÔõ_õoõwõ»úú#ú)úEúñúªú‹ú‚úÊúÁù7ùRùXù¢ùÓù˚ûCûìû∆û‡û˚üü9ü?üCüDüdüjüπüÃüŸ††A†]†Ø†È°
°°"°Y°z°Ä°Ñ°Ö°µ°ª¢
¢¢*¢s¢ñ¢≤££>£_£u£}£±£Œ£Í§[§d§w§å§î§µ§ª§Õ§—§”§‘••ª•‰•Í¶:¶n¶ì¶æ¶Ëßß1ßBßcß“®®®6®h®{®è®´®Ê©©4©O©r©ú©Õ©‹™,™å™ñ™≥™–™˘´´1´P´w´‚´ˇ¨I¨b¨É¨¨¨›¨Ë¨˛≠≠"≠#≠ã≠≠≠Æ≠·≠‚Æ)Æ*ÆEÆrÆëÆƒÆÎÆ˚Ø!ØDØrØñØπØ‹∞∞0∞^∞x∞ú∞¿∞„±±+±Y±Ö±†±—±¯≤)≤/≤3≤4≤d≤j≤∏≤«≤‹≥≥/≥U≥[≥ñ≥‚¥¥D¥Y¥r¥∞¥Ì¥˘µµµµ&µ*µ+µxµ»µ‰∂∂∂i∂ú∂æ∂Î∑
∑∑∑K∑n∑Ü∑≥∑∑∑∏∑È∏∏∏∏W∏è∏ø∏Á∏Ì∏Ò∏Úπ#πeπsπyπ¥π∏πππÒ∫?∫Ö∫ò∫øª ªª3ªUª_ªÿªÌªıººº º$º%ºLºxºÜºåºÿºÚº¯ΩΩ!Ω"Ω.ΩÇΩÉΩèΩ™ææ3æ7æ8æDæWæÑæßæ√æÿæ‹æ›øøEøhøìø°øßøÀø·øÂøÊ¿ @¿ @¿ @U¿ @ñ¿ @ú¿ @Í¿ A9¿ Aá¿ A–¿ B ¿ B0¿ Br¿ Bù¿ BÃ¿ B⁄¿ B‡¿ C¿ C¿ C#¿ C$¿ C]¿ Cc¿ C≠¿ Cœ¿ C’¿ D"¿ D1¿ DS¿ De¿ DÇ¿ D†¿ DÆ¿ D¥¿ DÀ¿ D‚¿ DÊ¿ DÁ¿ E¿ E>¿ EX¿ E}¿ Eõ¿ E©¿ EØ¿ E∆¿ F¿ F-¿ F1¿ F2¿ Fx¿ Fî¿ Fö¿ F“¿ Fÿ¿ G)¿ GH¿ GW¿ Gv¿ G„¿ H¿ H!¿ H_¿ Hn¿ Hç¿ H˙¿ I4¿ I8¿ I^¿ Iâ¿ Iç¿ Ié¿ I≈¿ I˝¿ J"¿ JN¿ J\¿ Jb¿ Já¿ J£¿ J∫¿ Jæ¿ Jø¿ K¿ KV¿ Ké¿ Kº¿ L	¿ L¿ L2¿ LZ¿ LÑ¿ Lí¿ Lò¿ Lª¿ L◊¿ LÓ¿ LÚ¿ LÛ¿ M5¿ MQ¿ MW¿ M£¿ MÌ¿ N8¿ Nu¿ N¢¿ Nø¿ N›¿ O¿ O¿ O¿ O:¿ OV¿ Om¿ Oq¿ Or¿ O©¿ O‚¿ Oˇ¿ P%¿ PQ¿ P_¿ Pe¿ Pä¿ P¶¿ PΩ¿ P¡¿ P¬¿ P˝¿ QA¿ Qn¿ Qû¿ Q¨¿ Q≤¿ Q€¿ Q˜¿ R¿ R¿ R¿ R=¿ Rë¿ R ¿ R˛¿ S¿ S¿ S?¿ S[¿ Sr¿ Sv¿ Sw¿ S´¿ S±¿ S¸¿ T,¿ TF¿ Tk¿ Tè¿ Tù¿ T£¿ T¿¿ U1¿ UI¿ UO¿ US¿ UT¿ Uå¿ UÛ¿ U˜¿ U¯¿ V'¿ VU¿ VY¿ VZ¿ Vf¿ Vô¿ VΩ¿ Vœ¿ V’¿ W¿ W,¿ Wõ¿ W£¿ W’¿ X ¿ X¿ X¿ X¿ XD¿ Xh¿ Xz¿ XÄ¿ X¿¿ X◊¿ Y¿ Yj¿ YŸ¿ Y·¿ Z¿ Z>¿ ZB¿ ZC¿ Zt¿ Zò¿ Z™¿ Z∞¿ [¿ [M¿ [m¿ [q¿ [r¿ [~¿ [±¿ [‹¿ [‡¿ [·¿ [Ì¿ \ ¿ \K¿ \O¿ \P¿ \\¿ \û¿ \Ω¿ \Î¿ ]¿ ]c¿ ]´¿ ]¯¿ ^E¿ ^ã¿ ^≈¿ _¿ _¿ _¿ _l¿ _¿ _Ø¿ _¿ `6¿ `M¿ `¿ `ƒ¿ `¿ a!¿ aY¿ aÄ¿ a™¿ a⁄¿ a„¿ aÎ¿ aÔ¿ a¿ b¿ bT¿ bò¿ b≠¿ bŒ¿ c3¿ c?¿ c|¿ c«¿ d¿ d&¿ d>¿ dB¿ dC¿ dO¿ d|¿ d}¿ dâ¿ dŸ¿ e,¿ eo¿ eî¿ eº¿ e—¿ eﬂ¿ f¿ f¿ f!¿ f"¿ fA¿ f_¿ f`¿ fØ¿ fΩ¿ f√¿ f˛¿ g¿ gQ¿ gR¿ g•¿ gÚ¿ h¿ h%¿ h`¿ hg¿ hk¿ hl¿ hx¿ hò¿ h∫¿ hﬁ¿ h‚¿ h„¿ i/¿ i4¿ iÉ¿ i”¿ j¿ jQ¿ jR¿ jí¿ j’¿ k&¿ k*¿ k+¿ k7¿ km¿ kë¿ kª¿ l¿ l¿ l/¿ l5¿ lÆ¿ lˇ¿ m4¿ m8¿ m9¿ mE¿ m^¿ mó¿ mˇ¿ n,¿ nn¿ no¿ n¿¿ o¿ oV¿ o°¿ oÂ¿ p¿ pY¿ pÖ¿ pÜ¿ p·¿ q ¿ qo¿ qæ¿ r¿ rZ¿ rù¿ rÁ¿ s¿ s¿ sB¿ sd¿ sÜ¿ s¶¿ s ¿ sÎ¿ t¿ t-¿ tN¿ tâ¿ t÷¿ u ¿ u$¿ u@¿ uW¿ uy¿ u†¿ u≈¿ uÎ¿ v
¿ v=¿ vc¿ vâ¿ v∆¿ v‘¿ w¿ w,¿ wP¿ wô¿ w®¿ wª¿ wÎ¿ x8¿ xj¿ xê¿ x¥¿ x˝¿ y¿ y¿ y=¿ yE¿ yR¿ yp¿ yé¿ yî¿ yò¿ yô¿ y•¿ yÊ¿ z¿ z¿ z¿ z)¿ z`¿ z™¿ z˜¿ {E¿ {}¿ {Ñ¿ {Õ¿ {¿ {˜¿ |C¿ |Z¿ |á¿ |à¿ |ò¿ |ƒ¿ |Ë¿ } ¿ }W¿ }_¿ }r¿ }|¿ }}¿ }ó¿ }¿¿ }Â¿ ~3¿ ~p¿ ~£¿ ~≤¿ ~—¿ ~Ÿ¿  ¿ ¿ ¿ 3¿ Å¿ ™¿ ≤¿ ∏¿ π¿ È¿ Í¿ Ä¿ Ä¿ Ä/¿ ÄT¿ Äå¿ Ä∞¿ Ä€¿ Å¿ Å=¿ ÅE¿ Åe¿ Åk¿ Åo¿ Åp¿ Å¶¿ Å¨¿ ÅÕ¿ Ç¿ Ç5¿ Çb¿ Çß¿ Ç´¿ Ç¨¿ ÇÓ¿ ÇÙ¿ É¿ ÉN¿ Ém¿ Éö¿ Éﬁ¿ É‚¿ É„¿ Ñ!¿ Ñ'¿ Ñv¿ Ñ∂¿ Ö¿ Ö¿ ÖV¿ Ö•¿ Ö›¿ Ö„¿ Ü¿ Ü
¿ Ü¿ Ü ¿ Ün¿ Üç¿ Ü∂¿ Ü’¿ á¿ áR¿ áY¿ áx¿ á•¿ á”¿ á‰¿ à
¿ à.¿ à5¿ à9¿ à:¿ àÅ¿ àá¿ à®¿ à›¿ à¸¿ â)¿ â_¿ âc¿ âd¿ â±¿ ä¿ äP¿ äx¿ ä~¿ äÕ¿ ã¿ ã¿ ã2¿ ãg¿ ãÜ¿ ã≥¿ ãÊ¿ ãÍ¿ ãÎ¿ åJ¿ åK¿ åâ¿ å‘¿ ç¿ ç[¿ çö¿ çû¿ çü¿ ç›¿ é'¿ ép¿ é≠¿ éÏ¿ é¿ éÒ¿ èI¿ èù¿ èÚ¿ ê7¿ ê;¿ ê<¿ êl¿ êr¿ ê√¿ ë¿ ë9¿ ë?¿ ëä¿ ëê¿ ë±¿ ë«¿ ëÊ¿ í¿ í¿ í	¿ íJ¿ íÖ¿ íΩ¿ íæ¿ í ¿ ì¿ ìC¿ ìx¿ ì•¿ ì◊¿ î ¿ îE¿ îp¿ î¿ îá¿ îÊ¿ îÏ¿ îÌ¿ ï¿ ï;¿ ïc¿ ïï¿ ïÁ¿ ïÙ¿ ñ!¿ ñU¿ ñm¿ ñ≥¿ ó ¿ óA¿ óê¿ ó—¿ óÌ¿ ò¿ ò1¿ òh¿ òõ¿ òÆ¿ òø¿ òŒ¿ ò⁄¿ ò˘¿ ô¿ ô%¿ ôò¿ ô†¿ ô‹¿ ö¿ ö¿ ö¿ ö¿ öã¿ öˆ¿ õ¿ õ3¿ õZ¿ õå¿ õŸ¿ ú1¿ úQ¿ úu¿ ú‚¿ ù¿ ù¿ ùg¿ ù°¿ û¿ ûW¿ ûy¿ ûÉ¿ û¢¿ û±¿ ûŒ¿ û÷¿ û‹¿ û›¿ ü¿ ü'¿ üê¿ üñ¿ ü≤¿ ü∂¿ ü∑¿ †-¿ †T¿ †∑¿ †Á¿ °$¿ °%¿ °P¿ °d¿ °ó¿ °§¿ °÷¿ ¢ ¿ ¢2¿ ¢a¿ ¢j¿ ¢î¿ ¢ö¿ ¢æ¿ ¢‰¿ £¿ £¿ £¿ £`¿ £Ø¿ £Ó¿ §¿ §P¿ §Q¿ §]¿ §—¿ •¿ •R¿ •Ü¿ •ú¿ •∂¿ •…¿ •Á¿ •ˇ¿ ¶"¿ ¶É¿ ¶–¿ ß(¿ ß]¿ ßx¿ ß®¿ ß±¿ ß“¿ ß”¿ ßÛ¿ ®A¿ ®à¿ ®∑¿ ©%¿ ©o¿ ©¡¿ ™¿ ™9¿ ™a¿ ™m¿ ™à¿ ™í¿ ™∂¿ ™’¿ ™‰¿ ´%¿ ´m¿ ´ä¿ ´û¿ ´®¿ ´“¿ ¨¿ ¨>¿ ¨w¿ ¨ß¿ ¨±¿ ¨Ù¿ ≠8¿ ≠V¿ ≠z¿ ≠ù¿ ≠”¿ Æ¿ Æ¿ Æd¿ Æµ¿ Æ⁄¿ Ø¿ Ø/¿ ØZ¿ ØÜ¿ Øë¿ Øﬂ¿ ∞¿ ∞<¿ ∞±¿ ∞¿ ±¿ ±F¿ ±r¿ ±®¿ ±”¿ ±·¿ ≤"¿ ≤T¿ ≤ê¿ ≤ª¿ ≤…¿ ≥
¿ ≥<¿ ≥~¿ ≥å¿ ≥ü¿ ≥È¿ ≥ı¿ ≥ˇ¿ ¥/¿ ¥Ç¿ ¥–¿ ¥⁄¿ µ¿ µ;¿ µã¿ µú¿ µ…¿ µÌ¿ ∂¿ ∂:¿ ∂G¿ ∂Q¿ ∂b¿ ∂ê¿ ∂∞¿ ∂·¿ ∑¿ ∑¿ ∑¿ ∑P¿ ∑{¿ ∑ñ¿ ∑ó¿ ∑æ¿ ∏¿ ∏¿ ∏¿ ∏D¿ ∏T¿ ∏è¿ ∏∆¿ ∏Õ¿ ∏—¿ ∏“¿ ∏ﬁ¿ ∏¯¿ π¿ π2¿ π6¿ π7¿ πC¿ πu¿ πì¿ π±¿ π«¿ π˜¿ ∫ ¿ ∫¿ ∫¿ ∫¿ ∫¿ ∫]¿ ∫à¿ ∫Õ¿ ª¿ ª2¿ ªF¿ ªZ¿ ªs¿ ªú¿ ª‹¿ ªÙ¿ ª˝¿ º¿ ºJ¿ º^¿ º√¿ º ¿ ºﬁ¿ Ω¿ Ω¿ Ω#¿ Ω?¿ ΩH¿ ΩO¿ Ωõ¿ Ωü¿ Ω°¿ Ω¢¿ Ω”¿ Ω◊¿ æ&¿ æl¿ æº¿ ø¿ ø¿ øp¿ øà¿ ø•¿ ø¡¿ ø⁄¿ ¿%¿ ¿Q¿ ¿â¿ ¿è¿ ¿¡¿ ¿≈¿ ¿∆¿ ¿ﬂ¿ ¡¿ ¡¿ ¡¿ ¡A¿ ¡d¿ ¡e¿ ¡ì¿ ¡î¿ ¡∏¿ ¡⁄¿ ¡€¿ ¡Á¿ ¬¿ ¬I¿ ¬m¿ ¬≠¿ ¬◊¿ ¬Â¿ ¬Î¿ √¿ √%¿ √)¿ √*¿ √X¿ √ú¿ √¬¿ √Ë¿ ƒ¿ ƒ¿ ƒ¿ ƒ¿ ƒN¿ ƒÜ¿ ƒ¡¿ ≈=¿ ≈è¿ ≈π¿ ∆¿ ∆a¿ ∆∑¿ ∆Í¿ «¿ «.¿ «5¿ «e¿ «¥¿ «‡¿ «Ê¿ »¿ »/¿ »£¿ »„¿ …B¿ …K¿ …t¿ …Ê¿  &¿  Ü¿  è¿  µ¿  ¸¿ À ¿ ÀG¿ À_¿ Àf¿ Àj¿ Àk¿ Àw¿ À∏¿ Àﬂ¿ Ã%¿ Ãg¿ ÃÅ¿ Ã∞¿ Ã›¿ Õ4¿ Õs¿ Õt¿ Õì¿ ÕΩ¿ Œ?¿ Œd¿ ŒÏ¿ œ¿ œ:¿ œò¿ œ¢¿ œ«¿ œÒ¿ –¿ –?¿ –i¿ –¿¿ –ˇ¿ —8¿ —™¿ —›¿ “
¿ “5¿ “f¿ “q¿ “≠¿ ”(¿ ”^¿ ”â¿ ”∑¿ ”È¿ ”Ù¿ ”˙¿ ”˚¿ ‘4¿ ‘i¿ ‘Ü¿ ‘å¿ ‘ü¿ ‘£¿ ‘§¿ ‘∞¿ ‘⁄¿ ’¿ ’1¿ ’7¿ ’è¿ ’Â¿ ÷¿ ÷2¿ ÷9¿ ÷=¿ ÷>¿ ÷]¿ ÷}¿ ÷ù¿ ÷°¿ ÷¢¿ ÷˘¿ ◊(¿ ◊f¿ ◊~¿ ◊÷¿ ◊Ô¿ ÿ7¿ ÿ=¿ ÿÄ¿ ÿç¿ ÿ¢¿ ÿÃ¿ ÿ”¿ ÿ‘¿ Ÿ:¿ Ÿm¿ Ÿï¿ Ÿ∏¿ Ÿæ¿ ŸË¿ ⁄¿ ⁄¿ ⁄e¿ ⁄µ¿ €¿ €!¿ €g¿ €k¿ €l¿ €ë¿ €∑¿ €“¿ €ÿ¿ ‹-¿ ‹Ä¿ ‹÷¿ ‹⁄¿ ‹€¿ ›¿ ›2¿ ›M¿ ›w¿ ›ü¿ ›•¿ ›«¿ ›Á¿ ﬁO¿ ﬁº¿ ﬂ¿ ﬂv¿ ﬂ¯¿ ‡¿ ‡V¿ ‡ã¿ ‡û¿ ‡—¿ ‡›¿ ·0¿ ·Ç¿ ·æ¿ ‚(¿ ‚û¿ „I¿ „Z¿ „ô¿ „Œ¿ ‰¿ ‰G¿ ‰Z¿ ‰≠¿ ‰‚¿ ‰Ó¿ ‰¯¿ Â¿ Â3¿ ÂÉ¿ Â÷¿ Ê¿ ÊJ¿ Ê]¿ Êê¿ Êú¿ Ê≠¿ ÊÏ¿ Á5¿ Á?¿ ÁG¿ ÁT¿ Áß¿ Ë¿ ËO¿ Ëº¿ È¿ È]¿ Èó¿ ÈÎ¿ ÍQ¿ Í”¿ Í‘¿ ÍÛ¿ Î]¿ Î”¿ ÏP¿ ÏZ¿ Ïb¿ Ïh¿ Ïè¿ Ïì¿ Ïî¿ Ï¬¿ ÏÈ¿ Ì¿ Ì.¿ ÌV¿ Ì\¿ Ì~¿ Ìû¿ Ó¿ Ós¿ Ó…¿ Ô/¿ Ô≥¿ Ô“¿ ¿ H¿ [¿ é¿ ö¿ Ì¿ Ò?¿ Ò{¿ ÒÁ¿ Ú]¿ Û¿ Û¿ Û]¿ Ûí¿ Û⁄¿ Ù¿ Ù ¿ Ùs¿ Ù¶¿ Ù≤¿ Ùº¿ ÙÀ¿ Ù˘¿ ıI¿ ıö¿ ı€¿ ˆ¿ ˆ#¿ ˆV¿ ˆb¿ ˆs¿ ˆ∞¿ ˆ˘¿ ˜¿ ˜¿ ˜¿ ˜k¿ ˜÷¿ ¯¿ ¯Ä¿ ¯—¿ ˘!¿ ˘[¿ ˘±¿ ˙¿ ˙ò¿ ˙∑¿ ˚#¿ ˚ô¿ ¸¿ ¸!¿ ¸)¿ ¸/¿ ¸V¿ ¸Z¿ ¸[¿ ¸∏¿ ˝
¿ ˝b¿ ˝¬¿ ˛¿ ˛J¿ ˛K¿ ˛z¿ ˛∏¿ ˛–¿ ˇ(¿ ˇA¿ ˇâ¿ ˇè¿ ˇ“¿ ˇﬂ¿ ˇÙ¿ ¿ %¿ &¿ x¿  ¿¿m¿ë¿¿¿¿X¿Ü¿©¿Ø¿∞¿‡¿¿¿]¿≠¿ˇ¿¿_¿c¿d¿ü¿…¿¿J¿ô¿ü¿»¿¯¿˛¿¿¿¿f¿w¿õ¿®¿Œ¿‘¿ÿ¿Ÿ¿¿%¿C¿n¿è¿ì¿î¿ª¿¯¿	R¿	s¿	w¿	x¿	µ¿	ﬂ¿	‡¿
K¿
Æ¿
–¿
÷¿)¿ç¿¥¿¿>¿D¿î¿¥¿¿L¿z¿ö¿û¿ü¿È¿)¿H¿e¿Ä¿¶¿·¿Ó¿¿k¿q¿û¿¢¿£¿(¿f¿ã¿•¿Ÿ¿	¿4¿d¿ì¿∫¿¬¿»¿C¿v¿ö¿º¿‘¿¿4¿~¿ﬁ¿:¿R¿¶¿Ê¿Ò¿¿:¿g¿ï¿‡¿¿\¿è¿Ô¿V¿ö¿ƒ¿¿m¿x¿‘¿˙¿ ¿¿;¿H¿q¿w¿ä¿é¿è¿˛¿ ¿L¿ò¿«¿#¿\¿¿Ö¿¡¿Ë¿Ó¿¿4¿O¿u¿≠¿¿=¿^¿¬¿!¿G¿h¿…¿Ô¿¿L¿µ¿Ô¿ ¿ \¿ â¿ ö¿ ¬¿ Ã¿ “¿ ”¿ Á¿!¿!¿!D¿!J¿!]¿!a¿!b¿!≥¿!˛¿"O¿"i¿"ÿ¿"˙¿#B¿#ê¿#º¿#¿¿#¡¿$¿$`¿$è¿$˙¿%¿%2¿%N¿%p¿%ö¿%æ¿%Ó¿%¯¿&I¿&i¿&v¿&’¿&‰¿'¿'*¿'0¿'O¿'ò¿'„¿(¿(¿(¿(Ω¿)¿)Q¿)y¿)Ø¿)›¿*¿*¿*"¿*(¿*L¿*Ä¿*÷¿+¿+:¿+G¿+å¿+¥¿,&¿,/¿,5¿,W¿,Ñ¿,≠¿,ﬂ¿-¿-¿-5¿-;¿-p¿-™¿-Û¿-˜¿-¯¿.@¿.M¿.S¿.ã¿.Õ¿/¿/%¿/+¿/O¿/s¿/ï¿/‰¿0¿06¿0C¿0l¿0ï¿0õ¿1¿1¿1¿16¿1<¿1ë¿1Ø¿2¿29¿2I¿2Ç¿2ì¿2–¿2‡¿2Ì¿3/¿35¿39¿3:¿3`¿3¢¿3¶¿3ß¿3≥¿3Ê¿4:¿4>¿4?¿4K¿4ì¿4≤¿5
¿5¿5¿5N¿5y¿5õ¿5°¿5Õ¿5Ù¿6¿6¿6 ¿6!¿64¿6S¿6ï¿6ﬁ¿6Á¿7¿71¿7q¿7≥¿7Ω¿7€¿7Í¿8L¿8æ¿8∆¿8Ã¿8Â¿8È¿8˛¿8ˇ¿9#¿9;¿9?¿9@¿9L¿9^¿9u¿9y¿9z¿9±¿9ı¿:¿:	¿:5¿:j¿:õ¿:Ã¿:’¿; ¿;%¿;R¿;£¿;ƒ¿<¿<	¿<¿<H¿<ñ¿<Ø¿<ƒ¿<Ï¿=X¿=c¿=ô¿=Æ¿=∑¿=Ω¿>¿> ¿>5¿>[¿>≈¿>–¿?¿?¿?$¿?*¿?.¿?/¿?;¿?t¿?µ¿@¿@i¿@©¿@≠¿@Æ¿@∫¿@˜¿AA¿AE¿AF¿AR¿Aè¿AŸ¿A›¿Aﬁ¿AÍ¿BE¿BG    Ä•  ÄøÄ÷ Ä€ÄÄÚÅfÅi  Åì  Åª  Å‰  Ç  Ç   Ç5  ÇJ  Çg  Ç}    É9ÉIÑ(Ä›/// Used by the [RenderParagraph] to map its rendering children to their
/// corresponding semantics nodes.
///
/// The [RichText] uses this to tag the relation between its placeholder spans
/// and their semantics nodes. ÑbÅ
 ÖÖ+Äö/// Creates a semantics tag with the input `index`.
///
/// Different [PlaceholderSpanIndexSemanticsTag]s with the same `index` are
/// consider the same.Ö,
Ö2  Ö:Ö?ÖjÖ@ÖbÖcÖhÖp,Öó/// The index of this tag. Ü+UÜ?   Ü+Ü,Ö°ÄÜÖª  ÖæÖ∆  Ö°Ö¢ÑÑÜÑÉ≤á|/// Parent data used by [RenderParagraph] and [RenderEditable] to annotate
/// inline contents (such as [WidgetSpan]s) with.  àÉàã  àóÄ”âfÄµ/// The [PlaceholderSpan] associated with this render child.
///
/// This field is usually set by a [ParentDataWidget], and is typically not
/// null when `performLayout` is called. áVÅ*ànÅ/// The offset at which to paint the child in the parent's coordinate system.
///
/// A `null` value indicates this inline widget is not laid out. For instance,
/// when the inline widget has never been laid out, or the inline widget is
/// ellipsized away.   âoXâÄ   âoâpâÀiâﬁ   âÀâÃ §‘¿ òÃ•6/// A render object that displays a paragraph of text. •Ωád ¶p¶Ä™/// Creates a paragraph render object.
///
/// The [maxLines] property may be null (and indeed defaults to null), but if
/// it is not null, it must be greater than zero.¶Ä¶å  ¶ó%¶¢  ¶¬$¶⁄  ¶Ï¶Ú  ß)ß  ß5Äˇ®   ®:,®F  ®l®r  ®®à  ®ì®†  ®Ø5®ø  ®Í)©  ©©+  ©8©@  ©S©h  x¶≠¶∂¶∑¶¸ßß*ß+ß5ß6ß@®ßHßißÿ®1®R®\®]®œ®›®ﬁ©y©©ô©Ä©Ñ©Ö©ó©ò©£©©© ©ª©≥©™©∂©«©æ©…©‘©⁄™*™ì™©Â©Ó™©Ô©˚™™™$™™'™5™ß™ù™©™ƒ™∫™∆™Á™◊™È´´ ´´¨‰´)´%´+´C´:´E´f´Y´h´ä´Ä´Ø´‘´ó´å´ö´§´•´±´ª´º´¬´“´√´÷´Û´Î´ı¨¨¨4¨A¨¨¨¨*¨+¨6¨C¨X¨R¨Z¨u¨k¨w¨ö¨å¨ú¨«¨µ¨…≠%d≠9 ≠Q≠W≠X≠d≠à≠e≠t≠u≠ç≠ü  ≠∞/≠»  ≠‰CÆ
  µÊ3∂  ∂û∂≤  ¿ DU¿ DZ  ¿ E@¿ EM  ¿ T.¿ T5  ¿ aÚ!¿ a¯  ¿ f$¿ f) ¿ f:¿ fC¿ fN  ¿ j3¿ j9  ¿ íÄ∞¿ í≠w/// Collected during [describeSemanticsConfiguration], used by
/// [assembleSemanticsNode] and [_combineSemanticsInfo]. ¿ §4¿ §=   Æ,EÆV/// The text to display.   ÆtÉæÆx  Æ}Æâ   ≤6ÇÛ≤ˆÄä/// The ongoing selections in this paragraph.
///
/// The selection does not include selections in [PlaceholderSpan] if there
/// are any.  ≤…≤ ∂}∂ÉJ/// The [SelectionRegistrar] this paragraph will be, or is, registered to.   ∂¿Äˆ∂ƒ  ∂Œ∂„   Ω$]Ω9   Ω$Ω%æﬂeø 0/// How the text should be aligned horizontally.   øGÄùøK  øUø`   øËÇâ¿ BDÇ3/// The directionality of the text.
///
/// This decides how the [TextAlign.start], [TextAlign.end], and
/// [TextAlign.justify] values of [textAlign] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the [text] is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.   ¿ BtÄÆ¿ Bx  ¿ BÜ¿ Bï   ¿ C&Å,¿ D<Ä˛/// Whether the text should break at soft line breaks.
///
/// If false, the glyphs in the text will be positioned as if there was
/// unlimited horizontal space.
///
/// If [softWrap] is false, [overflow] and [textAlign] may have unexpected
/// effects.   ¿ Dg~¿ Dk  ¿ Dt
¿ Dz   ¿ DÈT¿ E'*/// How visual overflow should be handled.   ¿ EZÄ÷¿ E^  ¿ Eg¿ Eu   ¿ F4Ç*¿ H.Å/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.  ¿ GJ¿ GK¿ GU¿ H¿ G[¿ Gz¿ GÁ¿ HaÅ+¿ I>  ¿ IN¿ IV  ¿ Ha¿ Hb¿ Hl¿ I6¿ Hr¿ Hë¿ H˛¿ Iêl¿ I÷4/// {@macro flutter.painting.textPainter.textScaler}   ¿ IˇÄæ¿ J  ¿ J¿ J   ¿ J¡Ä˙¿ KôÄ»/// An optional maximum number of lines for the text to span, wrapping if
/// necessary. If the text exceeds the given number of lines, it will be
/// truncated according to [overflow] and [softWrap].   ¿ KæÅ3¿ LT/// The value may be null. If it is not null, then it must be greater than
/// zero. ¿ L$
¿ L*   ¿ LıÅ¨¿ NÉÅu/// Used by this paragraph's internal [TextPainter] to select a
/// locale-specific font.
///
/// In some cases, the same Unicode character may be rendered differently
/// depending on the locale. For example, the 'È™®' character is rendered
/// differently in the Chinese and Japanese locales. In these cases, the
/// [locale] may be used to select a locale-specific font.   ¿ N§ÄÃ¿ N≈/// The value may be null. ¿ NÃ¿ N’   ¿ Otm¿ Oª4/// {@macro flutter.painting.textPainter.strutStyle}   ¿ O‰Ä‹¿ P/// The value may be null. ¿ P¿ P   ¿ Pƒ|¿ Q8/// {@macro flutter.painting.textPainter.textWidthBasis}   ¿ QCÄŒ¿ QG  ¿ QV¿ Qf   ¿ R{¿ RZ'/// {@macro dart.ui.textHeightBehavior}   ¿ RìÄ‚¿ Ró  ¿ R™¿ R¬   ¿ SyÄ≤¿ T	~/// The color to use when painting the selection.
///
/// Ignored if the text is not selectable (e.g. if [registrar] is null).   ¿ THÅ
¿ TL  ¿ T[¿ Tc   ¿ fbÄÓ¿ gÄï/// Whether this paragraph currently has a [dart:ui.Shader] for its overflow
/// effect.
///
/// Used to test this object. Not for use in production.  ¿ g ¿ g¿ ê>Å…¿ ëºÅb/// Returns the size of the text as laid out.
///
/// This can differ from [size] if the text overflowed or if the [constraints]
/// provided by the parent [RenderObject] forced the layout to be bigger than
/// necessary for the given [text].
///
/// This returns the [TextPainter.size] of the underlying [TextPainter].
///
/// Valid only after [layout].   *∑∫Å6∑ø    ∏ÙÄ√∏˘    πªÇhπ’    º'Ä˘º,    ΩÖÄ±Ωñ   ΩÖΩÜæ:Ä°æK   æ:æ;¿ UVÄ†¿ U]  ¿ Us¿ UÅ   ¿ U˙^¿ V    ¿ V\Åß¿ Vo  ¿ Và¿ Vê  ¿ V\¿ V]¿ XÇ:¿ X  ¿ X3¿ X;  ¿ X¿ X¿ ZEÅ+¿ ZL  ¿ Zd¿ Zl   ¿ [tk¿ [á  ¿ [°¿ [©  ¿ [t¿ [u¿ [„k¿ [ˆ  ¿ \¿ \  ¿ [„¿ [‰¿ \RÇ»¿ \e  ¿ \Ö¿ \ì  ¿ \R¿ \S¿ _Ç–¿ _Ü^/// Whether all inline widget children of this [RenderBox] support dry layout
/// calculation.   ¿ bØÅí¿ b¥    ¿ dE6¿ dV  ¿ db¿ dj  ¿ dE¿ dF¿ dÅ°¿ dê  ¿ d†¿ d≤  ¿ dª¿ dÃ  ¿ d¿ dÄ¿ gTÅ¿ gY  ¿ gg¿ go  ¿ g~!¿ gÜ  ¿ gy¿ gê¿ gñ¿ gó¿ hns¿ h   ¿ hn¿ ho¿ jTÄ’¿ jY  ¿ jt¿ jÑ   ¿ k-Ç
¿ k>  ¿ kO¿ k_  ¿ k-¿ k.¿ m;å\¿ mL   ¿ m;¿ m<¿ yõÄÄ¿ y¨  ¿ y¿¿ yÀ  ¿ y—¿ y⁄  ¿ yõ¿ yú¿ záO¿ z0  ¿ z6¿ zG  ¿ zO¿ zW  ¿ z¿ z ¿ ÅrÅ8¿ Å÷V/// Returns the offset at which to paint the caret.
///
/// Valid only after [layout]. ¿ ÅË¿ Åˆ  ¿ Åˇ¿ Ç   ¿ ÇÆÅ3¿ Éb/// {@macro flutter.painting.textPainter.getFullHeightForCaret}
///
/// Valid only after [layout]. ¿ É5¿ ÉC   ¿ ÉÂÑS¿ Ü†Çâ/// Returns a list of rects that bound the given selection.
///
/// The [boxHeightStyle] and [boxWidthStyle] arguments may be used to select
/// the shape of the [TextBox]es. These properties default to
/// [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight] respectively.
///
/// A given selection might have more than one rect if the [RenderParagraph]
/// contains multiple [InlineSpan]s or bidirectional text, because logically
/// contiguous text might not be visually contiguous.
///
/// Valid only after [layout].
///
/// See also:
///
///  * [TextPainter.getBoxesForSelection], the method in TextPainter to get
///    the equivalent boxes. ¿ Ü∫¿ Ü…  ¿ ÜŸ:¿ ÜÏ  ¿ á7¿ á+  
¿ Ü¸¿ Ü˛¿ Üˇ¿ á¿ á¿ á:¿ á<¿ á=¿ áJ¿ áK¿ à<Å&¿ à∑g/// Returns the position within the text for the given pixel offset.
///
/// Valid only after [layout]. ¿ àÃ¿ à‘   ¿ âfÇÉ¿ ã>Åª/// Returns the text range of the word at the given offset. Characters not
/// part of a word, such as spaces, symbols, and punctuation, have word breaks
/// on both sides. In such cases, this method will return a text range that
/// contains the given text position.
///
/// Word boundaries are defined more precisely in Unicode Standard Annex #29
/// <http://www.unicode.org/reports/tr29/#Word_Boundaries>.
///
/// Valid only after [layout]. ¿ ãN¿ ã\   ¿ ãÌ\¿ ã˜  ¿ å¿ å   ¿ åMÅP¿ åZ  ¿ åp¿ å~   ¿ ç°ÅN¿ çÆ  ¿ çƒ¿ ç“   ¿ éÛÅG¿ è   ¿ è¿ è'  ¿ è0¿ è8   ¿ í¿áQ¿ í—  ¿ í¿ ì  ¿ í¿¿ í¡¿ öÖ†¿ ö8  ¿ ö^)¿ ö|   ¿ üπÉY¿ ü–  ¿ üÚ'¿ †  ¿ †¿ †    ¿ §SìΩ¿ §d  ¿ §z¿ §â  ¿ §é¿ §¶  ¿ §≠ ¿ §∆  ¿ §S¿ §T¿ ∏Äº¿ ∏"  ¿ ∏9¿ ∏>   ¿ ∏‘a¿ ∏Â   ¿ ∏‘¿ ∏’¿ π9Ä—¿ π[   ¿ π9¿ π:¿ ∫Éê¿ ∫  ¿ ∫3&¿ ∫P  ¿ ∫¿ ∫ ¿ Ω¢¿ Ñ§¿ øÅt/// A continuous, selectable piece of paragraph.
///
/// Since the selections in [PlaceholderSpan] are handled independently in its
/// subtree, a selection in [RenderParagraph] can't continue across a
/// [PlaceholderSpan]. The [RenderParagraph] splits itself on [PlaceholderSpan]
/// to create multiple `_SelectableFragment`s so that they can be selected
/// separately. ¿ ørÅR ¿ ør¿ øÖ ¿ øå¿ øõ  ¿ ø©¿ ø∏  ¿ ø≈¿ ø‘  ¿ ø·¿ øÁ¿ ¿!¿ ¿¿ øˆ¿ øË¿ øÌ¿ øÓ¿ ø˘¿ ø˙¿ øˇ¿ ¿ ¿ ¿¿ ¿¿ ¿
¿ ¿»¿ ¿ÿ  ¿ ¿·¿ ¿˜  ¿ ¡¿ ¡  ¿ ¡!¿ ¡,  ¿ ¡C¿ ¡Q  ¿ ¡g*¿ ¡l ¿ ¡å¿ ¡ñ ¿ ¡°  ¿ ¡∫¿ ¡≈  ¿ ¬)¿ ¬5  ¿8Î¿8Ò  ¿ ¡›>¿ ¡ˇ   ¿ ¡›¿ ¡ﬁ¿6#Ç≈¿6,    ¿9B6¿9W   ¿9B¿9C ¿ ¬KÄ›¿ ¬P    ¿ √,à=¿ √>    ¿ Àmâ5¿ Àâ  ¿ À†¿ À∞  ¿ Àm¿ Àn¿ ‘¶Åñ¿ ‘√   ¿ ‘¶¿ ‘ß¿ ÷@`¿ ÷E    ¿ ÷§Ñ∆¿ ÷¥  ¿ ÷…¿ ÷—  ¿ ÷·¿ ÷   ¿ €nÅk¿ €{  ¿ €ï ¿ €™  ¿ €ª¿ €…   ¿ ‹›èµ¿ ‹Í  ¿ ›!¿ ›%  ¿ ›6¿ ›D  ¿ ›Q$¿ ›`  ¿ ›{"¿ ›ä   ¿ Ïñè√¿ Ï£  ¿ Ï∆!¿ Ï‹  ¿ ÏÌ¿ Ï˚  ¿ Ì$¿ Ì  ¿ Ì2"¿ ÌA   ¿ ¸]â¿ ¸m  ¿ ¸à¿ ¸ê  ¿ ¸†¿ ¸Ø   ¿fÅ∞¿s  ¿Ü¿î   ¿ÄΩ¿  ¿5¿D  ¿N¿]   ¿€Ä∑¿Î    ¿ñÄ‡¿¶    ¿	zÑ#¿	ä  ¿	ú¿	§   ¿°Ç ¿µ  ¿–¿ﬁ   ¿•âË¿µ  ¿Ÿ¿·  ¿Ù¿˙  ¿!¿   ¿ëáœ¿°  ¿¬¿»  ¿–¿÷  ¿ﬂ¿   ¿"kÅT¿"x  ¿"õ¿"©  ¿"≠¿"≥  ¿"ª¿"…   ¿$ëÉ~¿$û  ¿$Ω¿$À  ¿$œ¿$’  ¿$›¿$Î   ¿(Ö„¿(;  ¿(S¿(a  ¿(k8¿(|  ¿(•¿(¥   ¿-˙É¿.íÄä/// Whether the given text position is contained in current selection
/// range.
///
/// The parameter `start` must be smaller than `end`. ¿.¥¿.¬   ¿1Ç#¿1ºÄì/// Compares two text positions.
///
/// Returns 1 if `position` < `otherPosition`, -1 if `position` > `otherPosition`,
/// or 0 if they are equal. ¿1“¿1‡  ¿1È¿1˜   ¿3<i¿3D    ¿3©Äî¿3Ω  ¿3Ã¿3€  ¿3©¿3™¿4AÅﬁ¿4R  ¿4c¿4o  ¿4{¿4á  ¿4A¿4B¿9=¿9    ¿9|Ö±¿9Å  ¿9á¿9ò  ¿9†¿9®   ¿?1Å{¿?K  ¿?[¿?i  ¿?1¿?2¿@∞Äî¿@…  ¿@ﬁ¿@Ï  ¿@∞¿@±¿AHÄî¿Aa  ¿Av¿AÑ  ¿AH¿AI¿A‡d¿Aˆ  ¿B¿B  ¿A‡¿A·        Çó{ÇÀ+/// The start and end positions for a word.    ä8ööè˝Öæ/// A mixin that provides useful default behaviors for text [RenderBox]es
/// ([RenderParagraph] and [RenderEditable] for example) with inline content
/// children managed by the [ContainerRenderObjectMixin] mixin.
///
/// This mixin assumes every child managed by the [ContainerRenderObjectMixin]
/// mixin corresponds to a [PlaceholderSpan], and they are organized in logical
/// order of the text (the order each [PlaceholderSpan] is encountered when the
/// user reads the text).
///
/// To use this mixin in a [RenderBox] class:
///
///  * Call [layoutInlineChildren] in the `performLayout` and `computeDryLayout`
///    implementation, and during intrinsic size calculations, to get the size
///    information of the inline widgets as a `List` of `PlaceholderDimensions`.
///    Determine the positioning of the inline widgets (which is usually done by
///    a [TextPainter] using its line break algorithm).
///
///  * Call [positionInlineChildren] with the positioning information of the
///    inline widgets.
///
///  * Implement [RenderBox.applyPaintTransform], optionally with
///    [defaultApplyPaintTransform].
///
///  * Call [paintInlineChildren] in [RenderBox.paint] to paint the inline widgets.
///
///  * Call [hitTestInlineChildren] in [RenderBox.hitTestChildren] to hit test the
///    inline widgets.
///
/// See also:
///
///  * [WidgetSpan.extractFromInlineSpan], a helper function for extracting
///    [WidgetSpan]s from an [InlineSpan] tree.    êkÄóê|  êåêó  êkêlëÉèë#  ë0ë;  ëAëI  ëRëa   îôÉÉó#ÇF/// Computes the layout for every inline child using the given `layoutChild`
/// function and the `maxWidth` constraint.
///
/// Returns a list of [PlaceholderDimensions], representing the layout results
/// for each child managed by the [ContainerRenderObjectMixin] mixin.
///
/// Since this method does not impose a maximum height constraint on the
/// inline children, some children may become taller than this [RenderBox].
///
/// See also:
///
///  * [TextPainter.setPlaceholderDimensions], the method that usually takes
///    the layout results from this method as the input. ó8ó@  óIóX  ñ˙ñ˚ò Ñ≈öVÇ/// Positions each inline child according to the coordinates provided in the
/// `boxes` list.
///
/// The `boxes` list must be in logical order, which is the order each child
/// is encountered when the user reads the text. Usually the length of the
/// list equals [childCount], but it can be less than that, when some children
/// are ommitted due to ellipsing. It never exceeds [childCount].
///
/// See also:
///
///  * [TextPainter.inlinePlaceholderBoxes], the method that can be used to
///    get the input `boxes`. ömö  öDöEúÈÇYûÄ¸/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Render children whose [TextParentData.offset] is null zeros out the
/// `transform` to indicate they're invisible thus should not be painted. ûû(  û.û7  ùùÒüFÇ=ü‡/// Paints each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. üÙ†  ††  üŒüœ°áÉI¢1Äè/// Performs a hit test on each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. ¢G¢Y  ¢`¢h  ¢¢  É"É! É.  à <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇ√ÉÉÉ8É9ÉÇÉ•É©É¯ÑÑ"Ñ`ÑñÑúÑÍÖÖmÖnÖãÖûÖüÖ´ÖŒÜÜ$Ü(Ü)Ü5ÜÅÜÉÜÑÜœááTá§á™á˚àIà`àÅàîàïà‘à⁄â(âSâlâmâyâãâúâ∞âƒâ»â…â’ä5ä7ä8äÇäœãããbã≤ååå åNåRå£åÚçCçîçÃç–éé4é8ézéüé£é˜é˚èNèeèièwè{è«è˜êiêuêüêŒê˘êˇëëëoë∫ëÌíííCíbí™íœíÚì&ì[ìêìæìÏîîzîáîíîñîóîÊïïïkï≥ïπññRñXñhñnñΩñ¯óófóäóﬁòòòòòmòÅòáò÷ô#ôtô∏ôæôŒô‘ö"öBöOöáö™ö‘öÔõ_õoõwõ»úú#ú)úEúñúªú‹ú‚úÊúÁù7ùRùXù¢ùÓù˚ûCûìû∆û‡û˚üü9ü?üCüDüdüjüπüÃüŸ††A†]†Ø†È°
°°"°Y°z°Ä°Ñ°Ö°µ°ª¢
¢¢*¢s¢ñ¢≤££>£_£u£}£±£Œ£Í§[§d§w§å§î§µ§ª§Õ§—§”§‘••ª•‰•Í¶:¶n¶ì¶æ¶Ëßß1ßBßcß“®®®6®h®{®è®´®Ê©©4©O©r©ú©Õ©‹™,™å™ñ™≥™–™˘´´1´P´w´‚´ˇ¨I¨b¨É¨¨¨›¨Ë¨˛≠≠"≠#≠ã≠≠≠Æ≠·≠‚Æ)Æ*ÆEÆrÆëÆƒÆÎÆ˚Ø!ØDØrØñØπØ‹∞∞0∞^∞x∞ú∞¿∞„±±+±Y±Ö±†±—±¯≤)≤/≤3≤4≤d≤j≤∏≤«≤‹≥≥/≥U≥[≥ñ≥‚¥¥D¥Y¥r¥∞¥Ì¥˘µµµµ&µ*µ+µxµ»µ‰∂∂∂i∂ú∂æ∂Î∑
∑∑∑K∑n∑Ü∑≥∑∑∑∏∑È∏∏∏∏W∏è∏ø∏Á∏Ì∏Ò∏Úπ#πeπsπyπ¥π∏πππÒ∫?∫Ö∫ò∫øª ªª3ªUª_ªÿªÌªıººº º$º%ºLºxºÜºåºÿºÚº¯ΩΩ!Ω"Ω.ΩÇΩÉΩèΩ™ææ3æ7æ8æDæWæÑæßæ√æÿæ‹æ›øøEøhøìø°øßøÀø·øÂøÊ¿ @¿ @¿ @U¿ @ñ¿ @ú¿ @Í¿ A9¿ Aá¿ A–¿ B ¿ B0¿ Br¿ Bù¿ BÃ¿ B⁄¿ B‡¿ C¿ C¿ C#¿ C$¿ C]¿ Cc¿ C≠¿ Cœ¿ C’¿ D"¿ D1¿ DS¿ De¿ DÇ¿ D†¿ DÆ¿ D¥¿ DÀ¿ D‚¿ DÊ¿ DÁ¿ E¿ E>¿ EX¿ E}¿ Eõ¿ E©¿ EØ¿ E∆¿ F¿ F-¿ F1¿ F2¿ Fx¿ Fî¿ Fö¿ F“¿ Fÿ¿ G)¿ GH¿ GW¿ Gv¿ G„¿ H¿ H!¿ H_¿ Hn¿ Hç¿ H˙¿ I4¿ I8¿ I^¿ Iâ¿ Iç¿ Ié¿ I≈¿ I˝¿ J"¿ JN¿ J\¿ Jb¿ Já¿ J£¿ J∫¿ Jæ¿ Jø¿ K¿ KV¿ Ké¿ Kº¿ L	¿ L¿ L2¿ LZ¿ LÑ¿ Lí¿ Lò¿ Lª¿ L◊¿ LÓ¿ LÚ¿ LÛ¿ M5¿ MQ¿ MW¿ M£¿ MÌ¿ N8¿ Nu¿ N¢¿ Nø¿ N›¿ O¿ O¿ O¿ O:¿ OV¿ Om¿ Oq¿ Or¿ O©¿ O‚¿ Oˇ¿ P%¿ PQ¿ P_¿ Pe¿ Pä¿ P¶¿ PΩ¿ P¡¿ P¬¿ P˝¿ QA¿ Qn¿ Qû¿ Q¨¿ Q≤¿ Q€¿ Q˜¿ R¿ R¿ R¿ R=¿ Rë¿ R ¿ R˛¿ S¿ S¿ S?¿ S[¿ Sr¿ Sv¿ Sw¿ S´¿ S±¿ S¸¿ T,¿ TF¿ Tk¿ Tè¿ Tù¿ T£¿ T¿¿ U1¿ UI¿ UO¿ US¿ UT¿ Uå¿ UÛ¿ U˜¿ U¯¿ V'¿ VU¿ VY¿ VZ¿ Vf¿ Vô¿ VΩ¿ Vœ¿ V’¿ W¿ W,¿ Wõ¿ W£¿ W’¿ X ¿ X¿ X¿ X¿ XD¿ Xh¿ Xz¿ XÄ¿ X¿¿ X◊¿ Y¿ Yj¿ YŸ¿ Y·¿ Z¿ Z>¿ ZB¿ ZC¿ Zt¿ Zò¿ Z™¿ Z∞¿ [¿ [M¿ [m¿ [q¿ [r¿ [~¿ [±¿ [‹¿ [‡¿ [·¿ [Ì¿ \ ¿ \K¿ \O¿ \P¿ \\¿ \û¿ \Ω¿ \Î¿ ]¿ ]c¿ ]´¿ ]¯¿ ^E¿ ^ã¿ ^≈¿ _¿ _¿ _¿ _l¿ _¿ _Ø¿ _¿ `6¿ `M¿ `¿ `ƒ¿ `¿ a!¿ aY¿ aÄ¿ a™¿ a⁄¿ a„¿ aÎ¿ aÔ¿ a¿ b¿ bT¿ bò¿ b≠¿ bŒ¿ c3¿ c?¿ c|¿ c«¿ d¿ d&¿ d>¿ dB¿ dC¿ dO¿ d|¿ d}¿ dâ¿ dŸ¿ e,¿ eo¿ eî¿ eº¿ e—¿ eﬂ¿ f¿ f¿ f!¿ f"¿ fA¿ f_¿ f`¿ fØ¿ fΩ¿ f√¿ f˛¿ g¿ gQ¿ gR¿ g•¿ gÚ¿ h¿ h%¿ h`¿ hg¿ hk¿ hl¿ hx¿ hò¿ h∫¿ hﬁ¿ h‚¿ h„¿ i/¿ i4¿ iÉ¿ i”¿ j¿ jQ¿ jR¿ jí¿ j’¿ k&¿ k*¿ k+¿ k7¿ km¿ kë¿ kª¿ l¿ l¿ l/¿ l5¿ lÆ¿ lˇ¿ m4¿ m8¿ m9¿ mE¿ m^¿ mó¿ mˇ¿ n,¿ nn¿ no¿ n¿¿ o¿ oV¿ o°¿ oÂ¿ p¿ pY¿ pÖ¿ pÜ¿ p·¿ q ¿ qo¿ qæ¿ r¿ rZ¿ rù¿ rÁ¿ s¿ s¿ sB¿ sd¿ sÜ¿ s¶¿ s ¿ sÎ¿ t¿ t-¿ tN¿ tâ¿ t÷¿ u ¿ u$¿ u@¿ uW¿ uy¿ u†¿ u≈¿ uÎ¿ v
¿ v=¿ vc¿ vâ¿ v∆¿ v‘¿ w¿ w,¿ wP¿ wô¿ w®¿ wª¿ wÎ¿ x8¿ xj¿ xê¿ x¥¿ x˝¿ y¿ y¿ y=¿ yE¿ yR¿ yp¿ yé¿ yî¿ yò¿ yô¿ y•¿ yÊ¿ z¿ z¿ z¿ z)¿ z`¿ z™¿ z˜¿ {E¿ {}¿ {Ñ¿ {Õ¿ {¿ {˜¿ |C¿ |Z¿ |á¿ |à¿ |ò¿ |ƒ¿ |Ë¿ } ¿ }W¿ }_¿ }r¿ }|¿ }}¿ }ó¿ }¿¿ }Â¿ ~3¿ ~p¿ ~£¿ ~≤¿ ~—¿ ~Ÿ¿  ¿ ¿ ¿ 3¿ Å¿ ™¿ ≤¿ ∏¿ π¿ È¿ Í¿ Ä¿ Ä¿ Ä/¿ ÄT¿ Äå¿ Ä∞¿ Ä€¿ Å¿ Å=¿ ÅE¿ Åe¿ Åk¿ Åo¿ Åp¿ Å¶¿ Å¨¿ ÅÕ¿ Ç¿ Ç5¿ Çb¿ Çß¿ Ç´¿ Ç¨¿ ÇÓ¿ ÇÙ¿ É¿ ÉN¿ Ém¿ Éö¿ Éﬁ¿ É‚¿ É„¿ Ñ!¿ Ñ'¿ Ñv¿ Ñ∂¿ Ö¿ Ö¿ ÖV¿ Ö•¿ Ö›¿ Ö„¿ Ü¿ Ü
¿ Ü¿ Ü ¿ Ün¿ Üç¿ Ü∂¿ Ü’¿ á¿ áR¿ áY¿ áx¿ á•¿ á”¿ á‰¿ à
¿ à.¿ à5¿ à9¿ à:¿ àÅ¿ àá¿ à®¿ à›¿ à¸¿ â)¿ â_¿ âc¿ âd¿ â±¿ ä¿ äP¿ äx¿ ä~¿ äÕ¿ ã¿ ã¿ ã2¿ ãg¿ ãÜ¿ ã≥¿ ãÊ¿ ãÍ¿ ãÎ¿ åJ¿ åK¿ åâ¿ å‘¿ ç¿ ç[¿ çö¿ çû¿ çü¿ ç›¿ é'¿ ép¿ é≠¿ éÏ¿ é¿ éÒ¿ èI¿ èù¿ èÚ¿ ê7¿ ê;¿ ê<¿ êl¿ êr¿ ê√¿ ë¿ ë9¿ ë?¿ ëä¿ ëê¿ ë±¿ ë«¿ ëÊ¿ í¿ í¿ í	¿ íJ¿ íÖ¿ íΩ¿ íæ¿ í ¿ ì¿ ìC¿ ìx¿ ì•¿ ì◊¿ î ¿ îE¿ îp¿ î¿ îá¿ îÊ¿ îÏ¿ îÌ¿ ï¿ ï;¿ ïc¿ ïï¿ ïÁ¿ ïÙ¿ ñ!¿ ñU¿ ñm¿ ñ≥¿ ó ¿ óA¿ óê¿ ó—¿ óÌ¿ ò¿ ò1¿ òh¿ òõ¿ òÆ¿ òø¿ òŒ¿ ò⁄¿ ò˘¿ ô¿ ô%¿ ôò¿ ô†¿ ô‹¿ ö¿ ö¿ ö¿ ö¿ öã¿ öˆ¿ õ¿ õ3¿ õZ¿ õå¿ õŸ¿ ú1¿ úQ¿ úu¿ ú‚¿ ù¿ ù¿ ùg¿ ù°¿ û¿ ûW¿ ûy¿ ûÉ¿ û¢¿ û±¿ ûŒ¿ û÷¿ û‹¿ û›¿ ü¿ ü'¿ üê¿ üñ¿ ü≤¿ ü∂¿ ü∑¿ †-¿ †T¿ †∑¿ †Á¿ °$¿ °%¿ °P¿ °d¿ °ó¿ °§¿ °÷¿ ¢ ¿ ¢2¿ ¢a¿ ¢j¿ ¢î¿ ¢ö¿ ¢æ¿ ¢‰¿ £¿ £¿ £¿ £`¿ £Ø¿ £Ó¿ §¿ §P¿ §Q¿ §]¿ §—¿ •¿ •R¿ •Ü¿ •ú¿ •∂¿ •…¿ •Á¿ •ˇ¿ ¶"¿ ¶É¿ ¶–¿ ß(¿ ß]¿ ßx¿ ß®¿ ß±¿ ß“¿ ß”¿ ßÛ¿ ®A¿ ®à¿ ®∑¿ ©%¿ ©o¿ ©¡¿ ™¿ ™9¿ ™a¿ ™m¿ ™à¿ ™í¿ ™∂¿ ™’¿ ™‰¿ ´%¿ ´m¿ ´ä¿ ´û¿ ´®¿ ´“¿ ¨¿ ¨>¿ ¨w¿ ¨ß¿ ¨±¿ ¨Ù¿ ≠8¿ ≠V¿ ≠z¿ ≠ù¿ ≠”¿ Æ¿ Æ¿ Æd¿ Æµ¿ Æ⁄¿ Ø¿ Ø/¿ ØZ¿ ØÜ¿ Øë¿ Øﬂ¿ ∞¿ ∞<¿ ∞±¿ ∞¿ ±¿ ±F¿ ±r¿ ±®¿ ±”¿ ±·¿ ≤"¿ ≤T¿ ≤ê¿ ≤ª¿ ≤…¿ ≥
¿ ≥<¿ ≥~¿ ≥å¿ ≥ü¿ ≥È¿ ≥ı¿ ≥ˇ¿ ¥/¿ ¥Ç¿ ¥–¿ ¥⁄¿ µ¿ µ;¿ µã¿ µú¿ µ…¿ µÌ¿ ∂¿ ∂:¿ ∂G¿ ∂Q¿ ∂b¿ ∂ê¿ ∂∞¿ ∂·¿ ∑¿ ∑¿ ∑¿ ∑P¿ ∑{¿ ∑ñ¿ ∑ó¿ ∑æ¿ ∏¿ ∏¿ ∏¿ ∏D¿ ∏T¿ ∏è¿ ∏∆¿ ∏Õ¿ ∏—¿ ∏“¿ ∏ﬁ¿ ∏¯¿ π¿ π2¿ π6¿ π7¿ πC¿ πu¿ πì¿ π±¿ π«¿ π˜¿ ∫ ¿ ∫¿ ∫¿ ∫¿ ∫¿ ∫]¿ ∫à¿ ∫Õ¿ ª¿ ª2¿ ªF¿ ªZ¿ ªs¿ ªú¿ ª‹¿ ªÙ¿ ª˝¿ º¿ ºJ¿ º^¿ º√¿ º ¿ ºﬁ¿ Ω¿ Ω¿ Ω#¿ Ω?¿ ΩH¿ ΩO¿ Ωõ¿ Ωü¿ Ω°¿ Ω¢¿ Ω”¿ Ω◊¿ æ&¿ æl¿ æº¿ ø¿ ø¿ øp¿ øà¿ ø•¿ ø¡¿ ø⁄¿ ¿%¿ ¿Q¿ ¿â¿ ¿è¿ ¿¡¿ ¿≈¿ ¿∆¿ ¿ﬂ¿ ¡¿ ¡¿ ¡¿ ¡A¿ ¡d¿ ¡e¿ ¡ì¿ ¡î¿ ¡∏¿ ¡⁄¿ ¡€¿ ¡Á¿ ¬¿ ¬I¿ ¬m¿ ¬≠¿ ¬◊¿ ¬Â¿ ¬Î¿ √¿ √%¿ √)¿ √*¿ √X¿ √ú¿ √¬¿ √Ë¿ ƒ¿ ƒ¿ ƒ¿ ƒ¿ ƒN¿ ƒÜ¿ ƒ¡¿ ≈=¿ ≈è¿ ≈π¿ ∆¿ ∆a¿ ∆∑¿ ∆Í¿ «¿ «.¿ «5¿ «e¿ «¥¿ «‡¿ «Ê¿ »¿ »/¿ »£¿ »„¿ …B¿ …K¿ …t¿ …Ê¿  &¿  Ü¿  è¿  µ¿  ¸¿ À ¿ ÀG¿ À_¿ Àf¿ Àj¿ Àk¿ Àw¿ À∏¿ Àﬂ¿ Ã%¿ Ãg¿ ÃÅ¿ Ã∞¿ Ã›¿ Õ4¿ Õs¿ Õt¿ Õì¿ ÕΩ¿ Œ?¿ Œd¿ ŒÏ¿ œ¿ œ:¿ œò¿ œ¢¿ œ«¿ œÒ¿ –¿ –?¿ –i¿ –¿¿ –ˇ¿ —8¿ —™¿ —›¿ “
¿ “5¿ “f¿ “q¿ “≠¿ ”(¿ ”^¿ ”â¿ ”∑¿ ”È¿ ”Ù¿ ”˙¿ ”˚¿ ‘4¿ ‘i¿ ‘Ü¿ ‘å¿ ‘ü¿ ‘£¿ ‘§¿ ‘∞¿ ‘⁄¿ ’¿ ’1¿ ’7¿ ’è¿ ’Â¿ ÷¿ ÷2¿ ÷9¿ ÷=¿ ÷>¿ ÷]¿ ÷}¿ ÷ù¿ ÷°¿ ÷¢¿ ÷˘¿ ◊(¿ ◊f¿ ◊~¿ ◊÷¿ ◊Ô¿ ÿ7¿ ÿ=¿ ÿÄ¿ ÿç¿ ÿ¢¿ ÿÃ¿ ÿ”¿ ÿ‘¿ Ÿ:¿ Ÿm¿ Ÿï¿ Ÿ∏¿ Ÿæ¿ ŸË¿ ⁄¿ ⁄¿ ⁄e¿ ⁄µ¿ €¿ €!¿ €g¿ €k¿ €l¿ €ë¿ €∑¿ €“¿ €ÿ¿ ‹-¿ ‹Ä¿ ‹÷¿ ‹⁄¿ ‹€¿ ›¿ ›2¿ ›M¿ ›w¿ ›ü¿ ›•¿ ›«¿ ›Á¿ ﬁO¿ ﬁº¿ ﬂ¿ ﬂv¿ ﬂ¯¿ ‡¿ ‡V¿ ‡ã¿ ‡û¿ ‡—¿ ‡›¿ ·0¿ ·Ç¿ ·æ¿ ‚(¿ ‚û¿ „I¿ „Z¿ „ô¿ „Œ¿ ‰¿ ‰G¿ ‰Z¿ ‰≠¿ ‰‚¿ ‰Ó¿ ‰¯¿ Â¿ Â3¿ ÂÉ¿ Â÷¿ Ê¿ ÊJ¿ Ê]¿ Êê¿ Êú¿ Ê≠¿ ÊÏ¿ Á5¿ Á?¿ ÁG¿ ÁT¿ Áß¿ Ë¿ ËO¿ Ëº¿ È¿ È]¿ Èó¿ ÈÎ¿ ÍQ¿ Í”¿ Í‘¿ ÍÛ¿ Î]¿ Î”¿ ÏP¿ ÏZ¿ Ïb¿ Ïh¿ Ïè¿ Ïì¿ Ïî¿ Ï¬¿ ÏÈ¿ Ì¿ Ì.¿ ÌV¿ Ì\¿ Ì~¿ Ìû¿ Ó¿ Ós¿ Ó…¿ Ô/¿ Ô≥¿ Ô“¿ ¿ H¿ [¿ é¿ ö¿ Ì¿ Ò?¿ Ò{¿ ÒÁ¿ Ú]¿ Û¿ Û¿ Û]¿ Ûí¿ Û⁄¿ Ù¿ Ù ¿ Ùs¿ Ù¶¿ Ù≤¿ Ùº¿ ÙÀ¿ Ù˘¿ ıI¿ ıö¿ ı€¿ ˆ¿ ˆ#¿ ˆV¿ ˆb¿ ˆs¿ ˆ∞¿ ˆ˘¿ ˜¿ ˜¿ ˜¿ ˜k¿ ˜÷¿ ¯¿ ¯Ä¿ ¯—¿ ˘!¿ ˘[¿ ˘±¿ ˙¿ ˙ò¿ ˙∑¿ ˚#¿ ˚ô¿ ¸¿ ¸!¿ ¸)¿ ¸/¿ ¸V¿ ¸Z¿ ¸[¿ ¸∏¿ ˝
¿ ˝b¿ ˝¬¿ ˛¿ ˛J¿ ˛K¿ ˛z¿ ˛∏¿ ˛–¿ ˇ(¿ ˇA¿ ˇâ¿ ˇè¿ ˇ“¿ ˇﬂ¿ ˇÙ¿ ¿ %¿ &¿ x¿  ¿¿m¿ë¿¿¿¿X¿Ü¿©¿Ø¿∞¿‡¿¿¿]¿≠¿ˇ¿¿_¿c¿d¿ü¿…¿¿J¿ô¿ü¿»¿¯¿˛¿¿¿¿f¿w¿õ¿®¿Œ¿‘¿ÿ¿Ÿ¿¿%¿C¿n¿è¿ì¿î¿ª¿¯¿	R¿	s¿	w¿	x¿	µ¿	ﬂ¿	‡¿
K¿
Æ¿
–¿
÷¿)¿ç¿¥¿¿>¿D¿î¿¥¿¿L¿z¿ö¿û¿ü¿È¿)¿H¿e¿Ä¿¶¿·¿Ó¿¿k¿q¿û¿¢¿£¿(¿f¿ã¿•¿Ÿ¿	¿4¿d¿ì¿∫¿¬¿»¿C¿v¿ö¿º¿‘¿¿4¿~¿ﬁ¿:¿R¿¶¿Ê¿Ò¿¿:¿g¿ï¿‡¿¿\¿è¿Ô¿V¿ö¿ƒ¿¿m¿x¿‘¿˙¿ ¿¿;¿H¿q¿w¿ä¿é¿è¿˛¿ ¿L¿ò¿«¿#¿\¿¿Ö¿¡¿Ë¿Ó¿¿4¿O¿u¿≠¿¿=¿^¿¬¿!¿G¿h¿…¿Ô¿¿L¿µ¿Ô¿ ¿ \¿ â¿ ö¿ ¬¿ Ã¿ “¿ ”¿ Á¿!¿!¿!D¿!J¿!]¿!a¿!b¿!≥¿!˛¿"O¿"i¿"ÿ¿"˙¿#B¿#ê¿#º¿#¿¿#¡¿$¿$`¿$è¿$˙¿%¿%2¿%N¿%p¿%ö¿%æ¿%Ó¿%¯¿&I¿&i¿&v¿&’¿&‰¿'¿'*¿'0¿'O¿'ò¿'„¿(¿(¿(¿(Ω¿)¿)Q¿)y¿)Ø¿)›¿*¿*¿*"¿*(¿*L¿*Ä¿*÷¿+¿+:¿+G¿+å¿+¥¿,&¿,/¿,5¿,W¿,Ñ¿,≠¿,ﬂ¿-¿-¿-5¿-;¿-p¿-™¿-Û¿-˜¿-¯¿.@¿.M¿.S¿.ã¿.Õ¿/¿/%¿/+¿/O¿/s¿/ï¿/‰¿0¿06¿0C¿0l¿0ï¿0õ¿1¿1¿1¿16¿1<¿1ë¿1Ø¿2¿29¿2I¿2Ç¿2ì¿2–¿2‡¿2Ì¿3/¿35¿39¿3:¿3`¿3¢¿3¶¿3ß¿3≥¿3Ê¿4:¿4>¿4?¿4K¿4ì¿4≤¿5
¿5¿5¿5N¿5y¿5õ¿5°¿5Õ¿5Ù¿6¿6¿6 ¿6!¿64¿6S¿6ï¿6ﬁ¿6Á¿7¿71¿7q¿7≥¿7Ω¿7€¿7Í¿8L¿8æ¿8∆¿8Ã¿8Â¿8È¿8˛¿8ˇ¿9#¿9;¿9?¿9@¿9L¿9^¿9u¿9y¿9z¿9±¿9ı¿:¿:	¿:5¿:j¿:õ¿:Ã¿:’¿; ¿;%¿;R¿;£¿;ƒ¿<¿<	¿<¿<H¿<ñ¿<Ø¿<ƒ¿<Ï¿=X¿=c¿=ô¿=Æ¿=∑¿=Ω¿>¿> ¿>5¿>[¿>≈¿>–¿?¿?¿?$¿?*¿?.¿?/¿?;¿?t¿?µ¿@¿@i¿@©¿@≠¿@Æ¿@∫¿@˜¿AA¿AE¿AF¿AR¿Aè¿AŸ¿A›¿Aﬁ¿AÍ¿BE¿BG    
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragment Ÿ—